
STM32H743ZG_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800ed74  0800ed74  0001ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f084  0800f084  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f08c  0800f08c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f08c  0800f08c  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f090  0800f090  0001f090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800f094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071e8  24000078  0800f10c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24007260  0800f10c  00027260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000311f3  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005150  00000000  00000000  00051299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  000563f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00058070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c65d  00000000  00000000  00059af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d10  00000000  00000000  00096155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001729ac  00000000  00000000  000bde65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00230811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e4c  00000000  00000000  00230864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ed5c 	.word	0x0800ed5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800ed5c 	.word	0x0800ed5c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_Z7bspInitv>:





void bspInit(void){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <__io_putchar>:
uint32_t millis(void){

	return HAL_GetTick();
}

extern "C" int __io_putchar(int ch){
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f001 fb0b 	bl	8001cbc <uartWrite>

	return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f001 fc3a 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f84a 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fa7a 	bl	8000bb4 <MX_GPIO_Init>
  MX_UART8_Init();
 80006c0:	f000 f95c 	bl	800097c <MX_UART8_Init>
  MX_USART6_UART_Init();
 80006c4:	f000 f9f2 	bl	8000aac <MX_USART6_UART_Init>
  MX_UART5_Init();
 80006c8:	f000 f90c 	bl	80008e4 <MX_UART5_Init>
  MX_DMA_Init();
 80006cc:	f000 fa3a 	bl	8000b44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006d0:	f000 f9a0 	bl	8000a14 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 80006d4:	f000 f8ba 	bl	800084c <MX_LPUART1_UART_Init>
//  HAL_UART_Receive_DMA(&huart5, rxBuffer, 100);
//  HAL_UART_Transmit_DMA(&huart8, rxBuffer, 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d8:	f00a fcba 	bl	800b050 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gyroQueue */
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <main+0x74>)
 80006de:	2104      	movs	r1, #4
 80006e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006e4:	f00a fd90 	bl	800b208 <osMessageQueueNew>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <main+0x78>)
 80006ec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDebug */
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <main+0x7c>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <main+0x80>)
 80006f4:	f00a fcf6 	bl	800b0e4 <osThreadNew>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <main+0x84>)
 80006fc:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensing */
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <main+0x88>)
 8000700:	2100      	movs	r1, #0
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <main+0x8c>)
 8000704:	f00a fcee 	bl	800b0e4 <osThreadNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <main+0x90>)
 800070c:	6013      	str	r3, [r2, #0]

  /* creation of TaskMain */
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <main+0x94>)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <main+0x98>)
 8000714:	f00a fce6 	bl	800b0e4 <osThreadNew>
 8000718:	4603      	mov	r3, r0
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <main+0x9c>)
 800071c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800071e:	f00a fcbb 	bl	800b098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x72>
 8000724:	0800ee94 	.word	0x0800ee94
 8000728:	24002694 	.word	0x24002694
 800072c:	0800ee28 	.word	0x0800ee28
 8000730:	08001d45 	.word	0x08001d45
 8000734:	24000454 	.word	0x24000454
 8000738:	0800ee4c 	.word	0x0800ee4c
 800073c:	08001d67 	.word	0x08001d67
 8000740:	24000d14 	.word	0x24000d14
 8000744:	0800ee70 	.word	0x0800ee70
 8000748:	08001d59 	.word	0x08001d59
 800074c:	240015d4 	.word	0x240015d4

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00d fb7d 	bl	800de5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00d fb77 	bl	800de5e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f005 f813 	bl	800579c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <SystemClock_Config+0xf4>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <SystemClock_Config+0xf4>)
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <SystemClock_Config+0xf4>)
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <SystemClock_Config+0xf8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <SystemClock_Config+0xf8>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <SystemClock_Config+0xf8>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ac:	bf00      	nop
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <SystemClock_Config+0xf8>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ba:	d1f8      	bne.n	80007ae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007d4:	231e      	movs	r3, #30
 80007d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e4:	230c      	movs	r3, #12
 80007e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 f80b 	bl	8005810 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000800:	f000 fa50 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	233f      	movs	r3, #63	; 0x3f
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2303      	movs	r3, #3
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000810:	2308      	movs	r3, #8
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f005 fc1e 	bl	800606c <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000836:	f000 fa35 	bl	8000ca4 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3770      	adds	r7, #112	; 0x70
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58000400 	.word	0x58000400
 8000848:	58024800 	.word	0x58024800

0800084c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <MX_LPUART1_UART_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000896:	f007 fdf9 	bl	800848c <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 fa00 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008a8:	f00a fac3 	bl	800ae32 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f9f7 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008ba:	f00a faf8 	bl	800aeae <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f9ee 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008ca:	f00a fa79 	bl	800adc0 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f9e6 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000094 	.word	0x24000094
 80008e0:	58000c00 	.word	0x58000c00

080008e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_UART5_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_UART5_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_UART5_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_UART5_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_UART5_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_UART5_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_UART5_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_UART5_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_UART5_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_UART5_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_UART5_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_UART5_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_UART5_Init+0x90>)
 800092e:	f007 fdad 	bl	800848c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f9b4 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_UART5_Init+0x90>)
 8000940:	f00a fa77 	bl	800ae32 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f9ab 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_UART5_Init+0x90>)
 8000952:	f00a faac 	bl	800aeae <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f9a2 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_UART5_Init+0x90>)
 8000962:	f00a fa2d 	bl	800adc0 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f99a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000124 	.word	0x24000124
 8000978:	40005000 	.word	0x40005000

0800097c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_UART8_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_UART8_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_UART8_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_UART8_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_UART8_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_UART8_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_UART8_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_UART8_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_UART8_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_UART8_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_UART8_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_UART8_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_UART8_Init+0x90>)
 80009c6:	f007 fd61 	bl	800848c <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f968 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_UART8_Init+0x90>)
 80009d8:	f00a fa2b 	bl	800ae32 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f95f 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_UART8_Init+0x90>)
 80009ea:	f00a fa60 	bl	800aeae <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f956 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_UART8_Init+0x90>)
 80009fa:	f00a f9e1 	bl	800adc0 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f94e 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	240001b4 	.word	0x240001b4
 8000a10:	40007c00 	.word	0x40007c00

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART1_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f007 fd15 	bl	800848c <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f91c 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a70:	f00a f9df 	bl	800ae32 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f913 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a82:	f00a fa14 	bl	800aeae <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f90a 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f00a f995 	bl	800adc0 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f902 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000244 	.word	0x24000244
 8000aa8:	40011000 	.word	0x40011000

08000aac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_USART6_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000af6:	f007 fcc9 	bl	800848c <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f8d0 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000b08:	f00a f993 	bl	800ae32 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f8c7 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000b1a:	f00a f9c8 	bl	800aeae <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f8be 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_USART6_UART_Init+0x90>)
 8000b2a:	f00a f949 	bl	800adc0 <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f8b6 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	240002d4 	.word	0x240002d4
 8000b40:	40011400 	.word	0x40011400

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_DMA_Init+0x6c>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	200b      	movs	r0, #11
 8000b8c:	f001 faee 	bl	800216c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b90:	200b      	movs	r0, #11
 8000b92:	f001 fb05 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2105      	movs	r1, #5
 8000b9a:	203a      	movs	r0, #58	; 0x3a
 8000b9c:	f001 fae6 	bl	800216c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ba0:	203a      	movs	r0, #58	; 0x3a
 8000ba2:	f001 fafd 	bl	80021a0 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

}
 8000c6e:	bf00      	nop
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	58024400 	.word	0x58024400

08000c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c92:	f001 f987 	bl	8001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x38>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_MspInit+0x38>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x38>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f06f 0001 	mvn.w	r0, #1
 8000cdc:	f001 fa46 	bl	800216c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024400 	.word	0x58024400

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0c2      	sub	sp, #264	; 0x108
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cfa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d10:	22bc      	movs	r2, #188	; 0xbc
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f00d f8a2 	bl	800de5e <memset>
  if(huart->Instance==LPUART1)
 8000d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a93      	ldr	r2, [pc, #588]	; (8000f74 <HAL_UART_MspInit+0x288>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d143      	bne.n	8000db4 <HAL_UART_MspInit+0xc8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f005 fd64 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8000d46:	f7ff ffad 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d50:	4a89      	ldr	r2, [pc, #548]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d5a:	4b87      	ldr	r3, [pc, #540]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
 8000d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a82      	ldr	r2, [pc, #520]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b7f      	ldr	r3, [pc, #508]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000da0:	2303      	movs	r3, #3
 8000da2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4873      	ldr	r0, [pc, #460]	; (8000f7c <HAL_UART_MspInit+0x290>)
 8000dae:	f004 fb45 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000db2:	e20a      	b.n	80011ca <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==UART5)
 8000db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a6f      	ldr	r2, [pc, #444]	; (8000f80 <HAL_UART_MspInit+0x294>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 8082 	bne.w	8000ecc <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fd16 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8000de2:	f7ff ff5f 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000de6:	4b64      	ldr	r3, [pc, #400]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	4a62      	ldr	r2, [pc, #392]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000df6:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000e22:	f242 0320 	movw	r3, #8224	; 0x2020
 8000e26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000e3c:	230e      	movs	r3, #14
 8000e3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e46:	4619      	mov	r1, r3
 8000e48:	484e      	ldr	r0, [pc, #312]	; (8000f84 <HAL_UART_MspInit+0x298>)
 8000e4a:	f004 faf7 	bl	800543c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Stream2;
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_UART_MspInit+0x2a0>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e56:	2241      	movs	r2, #65	; 0x41
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b4b      	ldr	r3, [pc, #300]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e74:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000e8e:	483e      	ldr	r0, [pc, #248]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000e90:	f001 f994 	bl	80021bc <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8000e9a:	f7ff ff03 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000eaa:	67da      	str	r2, [r3, #124]	; 0x7c
 8000eac:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <HAL_UART_MspInit+0x29c>)
 8000eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2035      	movs	r0, #53	; 0x35
 8000ec0:	f001 f954 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ec4:	2035      	movs	r0, #53	; 0x35
 8000ec6:	f001 f96b 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 8000eca:	e17e      	b.n	80011ca <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==UART8)
 8000ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HAL_UART_MspInit+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d15c      	bne.n	8000f98 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fc8b 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x210>
      Error_Handler();
 8000ef8:	f7ff fed4 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_UART_MspInit+0x28c>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f50:	2308      	movs	r3, #8
 8000f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_UART_MspInit+0x2a8>)
 8000f5e:	f004 fa6d 	bl	800543c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2053      	movs	r0, #83	; 0x53
 8000f68:	f001 f900 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000f6c:	2053      	movs	r0, #83	; 0x53
 8000f6e:	f001 f917 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 8000f72:	e12a      	b.n	80011ca <HAL_UART_MspInit+0x4de>
 8000f74:	58000c00 	.word	0x58000c00
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020000 	.word	0x58020000
 8000f80:	40005000 	.word	0x40005000
 8000f84:	58020400 	.word	0x58020400
 8000f88:	24000364 	.word	0x24000364
 8000f8c:	40020440 	.word	0x40020440
 8000f90:	40007c00 	.word	0x40007c00
 8000f94:	58021000 	.word	0x58021000
  else if(huart->Instance==USART1)
 8000f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a8b      	ldr	r2, [pc, #556]	; (80011d4 <HAL_UART_MspInit+0x4e8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f040 8097 	bne.w	80010da <HAL_UART_MspInit+0x3ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fc24 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0x2de>
      Error_Handler();
 8000fc6:	f7ff fe6d 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fca:	4b83      	ldr	r3, [pc, #524]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd0:	4a81      	ldr	r2, [pc, #516]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a7a      	ldr	r2, [pc, #488]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800102a:	4619      	mov	r1, r3
 800102c:	486b      	ldr	r0, [pc, #428]	; (80011dc <HAL_UART_MspInit+0x4f0>)
 800102e:	f004 fa05 	bl	800543c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800104a:	2307      	movs	r3, #7
 800104c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001054:	4619      	mov	r1, r3
 8001056:	4861      	ldr	r0, [pc, #388]	; (80011dc <HAL_UART_MspInit+0x4f0>)
 8001058:	f004 f9f0 	bl	800543c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800105c:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 800105e:	4a61      	ldr	r2, [pc, #388]	; (80011e4 <HAL_UART_MspInit+0x4f8>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001064:	2229      	movs	r2, #41	; 0x29
 8001066:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001068:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b5a      	ldr	r3, [pc, #360]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107c:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001082:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001088:	4b55      	ldr	r3, [pc, #340]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001090:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001096:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800109c:	4850      	ldr	r0, [pc, #320]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 800109e:	f001 f88d 	bl	80021bc <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 80010a8:	f7ff fdfc 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a4a      	ldr	r2, [pc, #296]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 80010b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80010ba:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <HAL_UART_MspInit+0x4f4>)
 80010bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2025      	movs	r0, #37	; 0x25
 80010ce:	f001 f84d 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010d2:	2025      	movs	r0, #37	; 0x25
 80010d4:	f001 f864 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 80010d8:	e077      	b.n	80011ca <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==USART6)
 80010da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <HAL_UART_MspInit+0x4fc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d16e      	bne.n	80011ca <HAL_UART_MspInit+0x4de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80010ec:	2301      	movs	r3, #1
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fb84 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x41e>
      Error_Handler();
 8001106:	f7ff fdcd 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 800110c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001110:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 800111c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_UART_MspInit+0x4ec>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800117c:	2307      	movs	r3, #7
 800117e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001186:	4619      	mov	r1, r3
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <HAL_UART_MspInit+0x500>)
 800118a:	f004 f957 	bl	800543c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001192:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80011a8:	2307      	movs	r3, #7
 80011aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011b2:	4619      	mov	r1, r3
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <HAL_UART_MspInit+0x504>)
 80011b6:	f004 f941 	bl	800543c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	2047      	movs	r0, #71	; 0x47
 80011c0:	f000 ffd4 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011c4:	2047      	movs	r0, #71	; 0x47
 80011c6:	f000 ffeb 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40011000 	.word	0x40011000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020400 	.word	0x58020400
 80011e0:	240003dc 	.word	0x240003dc
 80011e4:	40020010 	.word	0x40020010
 80011e8:	40011400 	.word	0x40011400
 80011ec:	58020800 	.word	0x58020800
 80011f0:	58021800 	.word	0x58021800

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d844      	bhi.n	800128c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2019      	movs	r0, #25
 8001208:	f000 ffb0 	bl	800216c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800120c:	2019      	movs	r0, #25
 800120e:	f000 ffc7 	bl	80021a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <HAL_InitTick+0xb0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_InitTick+0xb4>)
 800121a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_InitTick+0xb4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_InitTick+0xb4>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f005 fa9f 	bl	8006784 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001246:	f005 fa87 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_InitTick+0xb8>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3b01      	subs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_InitTick+0xbc>)
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_InitTick+0xc0>)
 8001262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0xbc>)
 8001266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_InitTick+0xbc>)
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_InitTick+0xbc>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_InitTick+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <HAL_InitTick+0xbc>)
 8001280:	f006 fe2a 	bl	8007ed8 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <HAL_InitTick+0xa6>
 800128a:	e001      	b.n	8001290 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e005      	b.n	800129c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <HAL_InitTick+0xbc>)
 8001292:	f006 fe83 	bl	8007f9c <HAL_TIM_Base_Start_IT>
 8001296:	4603      	mov	r3, r0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000008 	.word	0x24000008
 80012a8:	58024400 	.word	0x58024400
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	24002698 	.word	0x24002698
 80012b4:	40010000 	.word	0x40010000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA1_Stream0_IRQHandler+0x10>)
 80012ea:	f002 fa91 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	240003dc 	.word	0x240003dc

080012f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM1_UP_IRQHandler+0x10>)
 80012fe:	f006 fec5 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24002698 	.word	0x24002698

0800130c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <USART1_IRQHandler+0x10>)
 8001312:	f007 fa4d 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	24000244 	.word	0x24000244

08001320 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <UART5_IRQHandler+0x10>)
 8001326:	f007 fa43 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	24000124 	.word	0x24000124

08001334 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA2_Stream2_IRQHandler+0x10>)
 800133a:	f002 fa69 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000364 	.word	0x24000364

08001348 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <USART6_IRQHandler+0x10>)
 800134e:	f007 fa2f 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240002d4 	.word	0x240002d4

0800135c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <UART8_IRQHandler+0x10>)
 8001362:	f007 fa25 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240001b4 	.word	0x240001b4

08001370 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
	}

return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f964 	bl	8000692 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
	}
	return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00c fbbe 	bl	800dbfc <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	24080000 	.word	0x24080000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	240026e4 	.word	0x240026e4
 80014b4:	24007260 	.word	0x24007260

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <SystemInit+0xec>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <SystemInit+0xec>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <SystemInit+0xf0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d807      	bhi.n	80014e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <SystemInit+0xf0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 030f 	bic.w	r3, r3, #15
 80014e0:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <SystemInit+0xf0>)
 80014e2:	f043 0307 	orr.w	r3, r3, #7
 80014e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <SystemInit+0xf4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a2f      	ldr	r2, [pc, #188]	; (80015ac <SystemInit+0xf4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <SystemInit+0xf4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <SystemInit+0xf4>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	492b      	ldr	r1, [pc, #172]	; (80015ac <SystemInit+0xf4>)
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <SystemInit+0xf8>)
 8001502:	4013      	ands	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <SystemInit+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <SystemInit+0xf0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 030f 	bic.w	r3, r3, #15
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <SystemInit+0xf0>)
 800151c:	f043 0307 	orr.w	r3, r3, #7
 8001520:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <SystemInit+0xf4>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <SystemInit+0xf4>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SystemInit+0xf4>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <SystemInit+0xf4>)
 8001536:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <SystemInit+0xfc>)
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <SystemInit+0xf4>)
 800153c:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <SystemInit+0x100>)
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <SystemInit+0xf4>)
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <SystemInit+0x104>)
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <SystemInit+0xf4>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <SystemInit+0xf4>)
 800154e:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <SystemInit+0x104>)
 8001550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <SystemInit+0xf4>)
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <SystemInit+0xf4>)
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <SystemInit+0x104>)
 800155c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <SystemInit+0xf4>)
 8001560:	2200      	movs	r2, #0
 8001562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <SystemInit+0xf4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a10      	ldr	r2, [pc, #64]	; (80015ac <SystemInit+0xf4>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <SystemInit+0xf4>)
 8001572:	2200      	movs	r2, #0
 8001574:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <SystemInit+0x108>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <SystemInit+0x10c>)
 800157c:	4013      	ands	r3, r2
 800157e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001582:	d202      	bcs.n	800158a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <SystemInit+0x110>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <SystemInit+0x114>)
 800158c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001590:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SystemInit+0xec>)
 8001594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001598:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	52002000 	.word	0x52002000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015b4:	02020200 	.word	0x02020200
 80015b8:	01ff0000 	.word	0x01ff0000
 80015bc:	01010280 	.word	0x01010280
 80015c0:	5c001000 	.word	0x5c001000
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	51008108 	.word	0x51008108
 80015cc:	52004000 	.word	0x52004000

080015d0 <_Z9flashInitv>:
static flash_tbl_t flash_tbl[FLASH_MAX_SECTOR];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	return true;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_Z10flashErasemm>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b092      	sub	sp, #72	; 0x48
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]

	bool ret = false;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t start_sector = -1;
 80015f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t end_sector = -1;
 80015f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint32_t banks;

	const flash_tbl_t *flash_tbl;

	HAL_FLASH_Unlock();
 8001600:	f003 fcaa 	bl	8004f58 <HAL_FLASH_Unlock>

	for (banks = 0; banks < 2; banks++)
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160a:	2b01      	cmp	r3, #1
 800160c:	f200 809a 	bhi.w	8001744 <_Z10flashErasemm+0x164>
	{
		if (banks == 0)
 8001610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <_Z10flashErasemm+0x3c>
		{
		  flash_tbl = flash_tbl_bank1;
 8001616:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <_Z10flashErasemm+0x174>)
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
 800161a:	e001      	b.n	8001620 <_Z10flashErasemm+0x40>
		}
		else
		{
		  flash_tbl = flash_tbl_bank2;
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <_Z10flashErasemm+0x178>)
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		for(int i = 0; i<FLASH_MAX_SECTOR; i++){
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	2b07      	cmp	r3, #7
 8001628:	dc5d      	bgt.n	80016e6 <_Z10flashErasemm+0x106>

			bool update = false;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint32_t start_addr;
			uint32_t end_addr;

			start_addr = flash_tbl[i].addr;
 8001630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001636:	4413      	add	r3, r2
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
			end_addr = flash_tbl[i].addr + flash_tbl[i].length -1;
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001642:	4413      	add	r3, r2
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800164c:	440b      	add	r3, r1
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4413      	add	r3, r2
 8001652:	3b01      	subs	r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28


			if(start_addr >= addr && start_addr < (addr+length))
 8001656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	d308      	bcc.n	8001670 <_Z10flashErasemm+0x90>
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001666:	429a      	cmp	r2, r3
 8001668:	d202      	bcs.n	8001670 <_Z10flashErasemm+0x90>
			{
				update = true;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
			if(end_addr >= addr && end_addr <(addr+length))
 8001670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d308      	bcc.n	800168a <_Z10flashErasemm+0xaa>
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001680:	429a      	cmp	r2, r3
 8001682:	d202      	bcs.n	800168a <_Z10flashErasemm+0xaa>
			{
				update = true;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			}
			if(addr >= start_addr && addr <= end_addr)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	429a      	cmp	r2, r3
 8001690:	d306      	bcc.n	80016a0 <_Z10flashErasemm+0xc0>
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	429a      	cmp	r2, r3
 8001698:	d802      	bhi.n	80016a0 <_Z10flashErasemm+0xc0>
			{
				update = true;
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
			if((addr+length-1) >= start_addr && (addr+length-1) <=end_addr)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d809      	bhi.n	80016c2 <_Z10flashErasemm+0xe2>
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	3b01      	subs	r3, #1
 80016b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d302      	bcc.n	80016c2 <_Z10flashErasemm+0xe2>
			{
				update = true;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}

			if(update == true){
 80016c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d109      	bne.n	80016de <_Z10flashErasemm+0xfe>
				if(start_sector < 0)
 80016ca:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da02      	bge.n	80016d8 <_Z10flashErasemm+0xf8>
				{
					start_sector = i;
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				}
				end_sector = i;
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		for(int i = 0; i<FLASH_MAX_SECTOR; i++){
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	3301      	adds	r3, #1
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	e79e      	b.n	8001624 <_Z10flashErasemm+0x44>
			}
		}

		if(start_sector >= 0)
 80016e6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db26      	blt.n	800173c <_Z10flashErasemm+0x15c>
		{
			HAL_StatusTypeDef status;
			FLASH_EraseInitTypeDef EraseInit;
			uint32_t SectorError;

			EraseInit.Sector = start_sector;
 80016ee:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80016f2:	61bb      	str	r3, [r7, #24]
			EraseInit.NbSectors = (end_sector - start_sector)+1;
 80016f4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80016f8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
			EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
			EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001706:	2320      	movs	r3, #32
 8001708:	623b      	str	r3, [r7, #32]
			EraseInit.Banks = flash_tbl[start_sector].bank;
 800170a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001712:	4413      	add	r3, r2
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	617b      	str	r3, [r7, #20]


			status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8001718:	f107 020c 	add.w	r2, r7, #12
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fd18 	bl	8005158 <HAL_FLASHEx_Erase>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if(status == HAL_OK){
 800172e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <_Z10flashErasemm+0x15c>
				ret = true;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for (banks = 0; banks < 2; banks++)
 800173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173e:	3301      	adds	r3, #1
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001742:	e761      	b.n	8001608 <_Z10flashErasemm+0x28>
			}
		}
	}
	HAL_FLASH_Lock();
 8001744:	f003 fc42 	bl	8004fcc <HAL_FLASH_Lock>

	return ret;
 8001748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800174c:	4618      	mov	r0, r3
 800174e:	3748      	adds	r7, #72	; 0x48
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	0800eebc 	.word	0x0800eebc
 8001758:	0800ef3c 	.word	0x0800ef3c

0800175c <_Z10flashWritemPhm>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b092      	sub	sp, #72	; 0x48
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8001768:	2301      	movs	r3, #1
 800176a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_StatusTypeDef status;




	HAL_FLASH_Unlock();
 800176e:	f003 fbf3 	bl	8004f58 <HAL_FLASH_Unlock>

	index = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
	offset = addr%32;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(offset != 0 || length <32)
 800177e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_Z10flashWritemPhm+0x2e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b1f      	cmp	r3, #31
 8001788:	d839      	bhi.n	80017fe <_Z10flashWritemPhm+0xa2>
	{
		write_addr = addr - offset;
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(&buf[0], (void *)write_addr, 32);
 8001792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2220      	movs	r2, #32
 800179a:	4618      	mov	r0, r3
 800179c:	f00c fb51 	bl	800de42 <memcpy>
		memcpy(&buf[offset], &p_data[0], constrain(32-offset, 0, length));
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a6:	18d0      	adds	r0, r2, r3
 80017a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017aa:	f1c3 0220 	rsb	r2, r3, #32
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	bf28      	it	cs
 80017b4:	4613      	movcs	r3, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	f00c fb42 	bl	800de42 <memcpy>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, write_addr, (uint32_t)buf);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	461a      	mov	r2, r3
 80017c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017c6:	2001      	movs	r0, #1
 80017c8:	f003 fb34 	bl	8004e34 <HAL_FLASH_Program>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


		if(status != HAL_OK)
 80017d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_Z10flashWritemPhm+0x82>
		{
			return false;
 80017da:	2300      	movs	r3, #0
 80017dc:	e06c      	b.n	80018b8 <_Z10flashWritemPhm+0x15c>
		}

		if(offset == 0 && length <32)
 80017de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <_Z10flashWritemPhm+0x98>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b1f      	cmp	r3, #31
 80017e8:	d804      	bhi.n	80017f4 <_Z10flashWritemPhm+0x98>
		{
			index += length;
 80017ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	643b      	str	r3, [r7, #64]	; 0x40
 80017f2:	e004      	b.n	80017fe <_Z10flashWritemPhm+0xa2>
		}
		else
		{
			index += (32-offset);
 80017f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	3320      	adds	r3, #32
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
		}
	}

	while(index < length)
 80017fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	d254      	bcs.n	80018b0 <_Z10flashWritemPhm+0x154>
	{
		write_length = constrain(length - index, 0, 32);
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b20      	cmp	r3, #32
 800180e:	bf28      	it	cs
 8001810:	2320      	movcs	r3, #32
 8001812:	633b      	str	r3, [r7, #48]	; 0x30

		if(write_length == 32){
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	2b20      	cmp	r3, #32
 8001818:	d118      	bne.n	800184c <_Z10flashWritemPhm+0xf0>
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, addr + index, (uint32_t)&p_data[index]);
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181e:	18d1      	adds	r1, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001824:	4413      	add	r3, r2
 8001826:	461a      	mov	r2, r3
 8001828:	2001      	movs	r0, #1
 800182a:	f003 fb03 	bl	8004e34 <HAL_FLASH_Program>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(status != HAL_OK)
 8001834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <_Z10flashWritemPhm+0xe8>
			{
				ret = false;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001842:	e035      	b.n	80018b0 <_Z10flashWritemPhm+0x154>
			}
			index += write_length;
 8001844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001848:	4413      	add	r3, r2
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if((length - index) > 0 && (length - index) < 32)
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001850:	429a      	cmp	r2, r3
 8001852:	d0d4      	beq.n	80017fe <_Z10flashWritemPhm+0xa2>
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b1f      	cmp	r3, #31
 800185c:	d8cf      	bhi.n	80017fe <_Z10flashWritemPhm+0xa2>
		{
			offset = length - index;
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
			write_addr = addr + index;
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186a:	4413      	add	r3, r2
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
			memcpy(&buf[0], (void *)write_addr, 32);
 800186e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2220      	movs	r2, #32
 8001876:	4618      	mov	r0, r3
 8001878:	f00c fae3 	bl	800de42 <memcpy>
			memcpy(&buf[0], &p_data[index], offset);
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001880:	18d1      	adds	r1, r2, r3
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001888:	4618      	mov	r0, r3
 800188a:	f00c fada 	bl	800de42 <memcpy>

			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,write_addr, (uint32_t)buf);
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	461a      	mov	r2, r3
 8001894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001896:	2001      	movs	r0, #1
 8001898:	f003 facc 	bl	8004e34 <HAL_FLASH_Program>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if(status != HAL_OK)
 80018a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_Z10flashWritemPhm+0x152>
			{
				return false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e004      	b.n	80018b8 <_Z10flashWritemPhm+0x15c>
			}
			break;
 80018ae:	bf00      	nop
		}
	}

	HAL_FLASH_Lock();
 80018b0:	f003 fb8c 	bl	8004fcc <HAL_FLASH_Lock>
	return ret;
 80018b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3748      	adds	r7, #72	; 0x48
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_Z9flashReadmPhm>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80018cc:	2301      	movs	r3, #1
 80018ce:	76fb      	strb	r3, [r7, #27]

	uint8_t *p_byte = (uint8_t*)addr;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	617b      	str	r3, [r7, #20]

	for(int i = 0; i<(int)length; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	429a      	cmp	r2, r3
 80018de:	da0b      	bge.n	80018f8 <_Z9flashReadmPhm+0x38>
	{
		p_data[i] = p_byte[i];
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	441a      	add	r2, r3
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	440b      	add	r3, r1
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(int)length; i++)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e7ef      	b.n	80018d8 <_Z9flashReadmPhm+0x18>
	}

	return ret;
 80018f8:	7efb      	ldrb	r3, [r7, #27]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001906:	b480      	push	{r7}
 8001908:	b087      	sub	sp, #28
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]

	bool ret = true;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
	p_node->in = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]

	return ret;
 800192e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <qbufferWrite>:


bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
	uint32_t next_in;

	for(int i=0; i< (int)length; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	429a      	cmp	r2, r3
 8001956:	da28      	bge.n	80019aa <qbufferWrite+0x6e>
	{
		next_in = (p_node->in+1) % p_node->len;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	6892      	ldr	r2, [r2, #8]
 8001962:	fbb3 f1f2 	udiv	r1, r3, r2
 8001966:	fb01 f202 	mul.w	r2, r1, r2
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	617b      	str	r3, [r7, #20]
		if(next_in != p_node->out)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d011      	beq.n	800199c <qbufferWrite+0x60>
		{
			if(p_node->p_buf != NULL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <qbufferWrite+0x58>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	441a      	add	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68d9      	ldr	r1, [r3, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	440b      	add	r3, r1
 8001990:	7812      	ldrb	r2, [r2, #0]
 8001992:	701a      	strb	r2, [r3, #0]
			}
			p_node->in = next_in;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <qbufferWrite+0x66>
		}
		else
		{
			ret = false;
 800199c:	2300      	movs	r3, #0
 800199e:	77fb      	strb	r3, [r7, #31]
			break;
 80019a0:	e003      	b.n	80019aa <qbufferWrite+0x6e>
	for(int i=0; i< (int)length; i++)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	e7d2      	b.n	8001950 <qbufferWrite+0x14>
		}
	}
	return ret;
 80019aa:	7ffb      	ldrb	r3, [r7, #31]

}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3724      	adds	r7, #36	; 0x24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <qbufferRead>:


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80019c4:	2301      	movs	r3, #1
 80019c6:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i<length; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d927      	bls.n	8001a24 <qbufferRead+0x6c>
	{
		if(p_node->p_buf != NULL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <qbufferRead+0x38>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	441a      	add	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	440b      	add	r3, r1
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	701a      	strb	r2, [r3, #0]

		}

		if(p_node->out != p_node->in)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d00c      	beq.n	8001a16 <qbufferRead+0x5e>
		{
			p_node->out = (p_node->out +1) % p_node->len;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	3301      	adds	r3, #1
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	6892      	ldr	r2, [r2, #8]
 8001a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a0a:	fb01 f202 	mul.w	r2, r1, r2
 8001a0e:	1a9a      	subs	r2, r3, r2
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	e002      	b.n	8001a1c <qbufferRead+0x64>
		}
		else
		{
			ret = false;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
			break;
 8001a1a:	e003      	b.n	8001a24 <qbufferRead+0x6c>
	for(int i = 0; i<length; i++)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e7d3      	b.n	80019cc <qbufferRead+0x14>
		}
	}

	return ret;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <qbufferAvailable>:


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	441a      	add	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6892      	ldr	r2, [r2, #8]
 8001a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a52:	fb01 f202 	mul.w	r2, r1, r2
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]


	return ret;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <uartInit>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...);


bool uartInit(void){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
	for(int i =0; i<UART_MAX_CH; i++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	dc08      	bgt.n	8001a8a <uartInit+0x22>
		is_open[i] = false;
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <uartInit+0x30>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	for(int i =0; i<UART_MAX_CH; i++){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e7f3      	b.n	8001a72 <uartInit+0xa>
	}
	return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	240026e8 	.word	0x240026e8

08001a9c <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <uartOpen+0x1c>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d02a      	beq.n	8001b0c <uartOpen+0x70>
 8001ab6:	e06e      	b.n	8001b96 <uartOpen+0xfa>
	{
		case _DEF_UART1:

			qbufferCreate(&qbuffer[_DEF_UART1], &rx_buf[0], 256);
 8001ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abc:	4938      	ldr	r1, [pc, #224]	; (8001ba0 <uartOpen+0x104>)
 8001abe:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <uartOpen+0x108>)
 8001ac0:	f7ff ff21 	bl	8001906 <qbufferCreate>

			if(HAL_UART_Init(&huart5) != HAL_OK){
 8001ac4:	4838      	ldr	r0, [pc, #224]	; (8001ba8 <uartOpen+0x10c>)
 8001ac6:	f006 fce1 	bl	800848c <HAL_UART_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <uartOpen+0x44>
				ret = false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
#ifdef UART5_DMA
				qbuffer[ch].in = qbuffer[ch].len - DMA2_Stream2->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
#endif
			}
			break;
 8001ade:	e059      	b.n	8001b94 <uartOpen+0xf8>
				ret = true;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <uartOpen+0x110>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1) != HAL_OK)
 8001aec:	2201      	movs	r2, #1
 8001aee:	4930      	ldr	r1, [pc, #192]	; (8001bb0 <uartOpen+0x114>)
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <uartOpen+0x10c>)
 8001af2:	f006 fdb1 	bl	8008658 <HAL_UART_Receive_IT>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d046      	beq.n	8001b94 <uartOpen+0xf8>
					ret = false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
			break;
 8001b0a:	e043      	b.n	8001b94 <uartOpen+0xf8>

		case _DEF_UART2:

			qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	4923      	ldr	r1, [pc, #140]	; (8001ba0 <uartOpen+0x104>)
 8001b12:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <uartOpen+0x118>)
 8001b14:	f7ff fef7 	bl	8001906 <qbufferCreate>

			if(HAL_UART_Init(&huart1) != HAL_OK){
 8001b18:	4827      	ldr	r0, [pc, #156]	; (8001bb8 <uartOpen+0x11c>)
 8001b1a:	f006 fcb7 	bl	800848c <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <uartOpen+0x98>
				ret = false;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
					ret = false;
				}
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8001b32:	e030      	b.n	8001b96 <uartOpen+0xfa>
				ret = true;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <uartOpen+0x110>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 8001b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <uartOpen+0x104>)
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <uartOpen+0x11c>)
 8001b48:	f006 fddc 	bl	8008704 <HAL_UART_Receive_DMA>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <uartOpen+0xc4>
					ret = false;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <uartOpen+0x108>)
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	3308      	adds	r3, #8
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <uartOpen+0x120>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	1a8a      	subs	r2, r1, r2
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <uartOpen+0x108>)
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	440b      	add	r3, r1
 8001b7a:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <uartOpen+0x108>)
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	440a      	add	r2, r1
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4906      	ldr	r1, [pc, #24]	; (8001ba4 <uartOpen+0x108>)
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3304      	adds	r3, #4
 8001b90:	601a      	str	r2, [r3, #0]
			break;
 8001b92:	e000      	b.n	8001b96 <uartOpen+0xfa>
			break;
 8001b94:	bf00      	nop
	}

	return ret;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2400271c 	.word	0x2400271c
 8001ba4:	240026ec 	.word	0x240026ec
 8001ba8:	24000124 	.word	0x24000124
 8001bac:	240026e8 	.word	0x240026e8
 8001bb0:	2400281c 	.word	0x2400281c
 8001bb4:	240026fc 	.word	0x240026fc
 8001bb8:	24000244 	.word	0x24000244
 8001bbc:	40020010 	.word	0x40020010

08001bc0 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]

	switch(ch){
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <uartAvailable+0x1a>
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d009      	beq.n	8001bec <uartAvailable+0x2c>
 8001bd8:	e01f      	b.n	8001c1a <uartAvailable+0x5a>

	case _DEF_UART1:
#ifdef UART5_DMA
		qbuffer[ch].in = qbuffer[ch].len - DMA2_Stream2->NDTR;
#endif
		ret = qbufferAvailable(&qbuffer[ch]);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <uartAvailable+0x64>)
 8001be0:	4413      	add	r3, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff25 	bl	8001a32 <qbufferAvailable>
 8001be8:	60f8      	str	r0, [r7, #12]
		break;
 8001bea:	e016      	b.n	8001c1a <uartAvailable+0x5a>


	case _DEF_UART2:
		qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <uartAvailable+0x64>)
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <uartAvailable+0x68>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	1a8a      	subs	r2, r1, r2
 8001c00:	4908      	ldr	r1, [pc, #32]	; (8001c24 <uartAvailable+0x64>)
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	601a      	str	r2, [r3, #0]
		ret = qbufferAvailable(&qbuffer[ch]);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <uartAvailable+0x64>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff0e 	bl	8001a32 <qbufferAvailable>
 8001c16:	60f8      	str	r0, [r7, #12]
		break;
 8001c18:	bf00      	nop
	}
	return ret;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	240026ec 	.word	0x240026ec
 8001c28:	40020010 	.word	0x40020010

08001c2c <uartRead>:
uint8_t uartRead(uint8_t ch){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]

	switch(ch){
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <uartRead+0x1a>
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d009      	beq.n	8001c58 <uartRead+0x2c>
 8001c44:	e011      	b.n	8001c6a <uartRead+0x3e>

		case _DEF_UART1:
			qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8001c46:	f107 030f 	add.w	r3, r7, #15
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <uartRead+0x48>)
 8001c50:	f7ff feb2 	bl	80019b8 <qbufferRead>
			return ret;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	e009      	b.n	8001c6c <uartRead+0x40>
			break;


		case _DEF_UART2:
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001c58:	f107 030f 	add.w	r3, r7, #15
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <uartRead+0x4c>)
 8001c62:	f7ff fea9 	bl	80019b8 <qbufferRead>
			return ret;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	e000      	b.n	8001c6c <uartRead+0x40>
			break;
	}
	return ret;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	240026ec 	.word	0x240026ec
 8001c78:	240026fc 	.word	0x240026fc

08001c7c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
#ifdef UART5_IT
	if(huart->Instance == UART5){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_UART_RxCpltCallback+0x30>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d109      	bne.n	8001ca2 <HAL_UART_RxCpltCallback+0x26>
		qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <HAL_UART_RxCpltCallback+0x34>)
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <HAL_UART_RxCpltCallback+0x38>)
 8001c94:	f7ff fe52 	bl	800193c <qbufferWrite>
		HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <HAL_UART_RxCpltCallback+0x34>)
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <HAL_UART_RxCpltCallback+0x3c>)
 8001c9e:	f006 fcdb 	bl	8008658 <HAL_UART_Receive_IT>
	}
#endif
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40005000 	.word	0x40005000
 8001cb0:	2400281c 	.word	0x2400281c
 8001cb4:	240026ec 	.word	0x240026ec
 8001cb8:	24000124 	.word	0x24000124

08001cbc <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef status;
	switch(ch){
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <uartWrite+0x1e>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00f      	beq.n	8001cf8 <uartWrite+0x3c>
 8001cd8:	e020      	b.n	8001d1c <uartWrite+0x60>

		case _DEF_UART1:
			status = HAL_UART_Transmit(&huart5, p_data, length, 100);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	4811      	ldr	r0, [pc, #68]	; (8001d28 <uartWrite+0x6c>)
 8001ce4:	f006 fc22 	bl	800852c <HAL_UART_Transmit>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d111      	bne.n	8001d16 <uartWrite+0x5a>
				ret = length;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	617b      	str	r3, [r7, #20]
			}
			break;
 8001cf6:	e00e      	b.n	8001d16 <uartWrite+0x5a>

		case _DEF_UART2:
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <uartWrite+0x70>)
 8001d02:	f006 fc13 	bl	800852c <HAL_UART_Transmit>
 8001d06:	4603      	mov	r3, r0
 8001d08:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d104      	bne.n	8001d1a <uartWrite+0x5e>
				ret = length;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	617b      	str	r3, [r7, #20]
			}
			break;
 8001d14:	e001      	b.n	8001d1a <uartWrite+0x5e>
			break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <uartWrite+0x60>
			break;
 8001d1a:	bf00      	nop
	}
	return ret;
 8001d1c:	697b      	ldr	r3, [r7, #20]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	24000124 	.word	0x24000124
 8001d2c:	24000244 	.word	0x24000244

08001d30 <_Z6hwInitv>:



#include "hw.h"

void hwInit(void){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	bspInit();
 8001d34:	f7fe fca6 	bl	8000684 <_Z7bspInitv>
	uartInit();
 8001d38:	f7ff fe96 	bl	8001a68 <uartInit>
	flashInit();
 8001d3c:	f7ff fc48 	bl	80015d0 <_Z9flashInitv>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <DebugTask>:


extern UART_HandleTypeDef huart8;


extern "C" void DebugTask(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	hwInit();
 8001d48:	f7ff fff2 	bl	8001d30 <_Z6hwInitv>
	apInit();
 8001d4c:	f000 f812 	bl	8001d74 <_Z6apInitv>
	apMain();
 8001d50:	f000 f81e 	bl	8001d90 <_Z6apMainv>

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <MainTask>:


extern "C" void MainTask(void){
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <SensingTask>:

extern "C" void SensingTask(void){
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_Z6apInitv>:

#include "ap.h"



void apInit(void){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 115200);
 8001d78:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fe8d 	bl	8001a9c <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 8001d82:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7ff fe88 	bl	8001a9c <uartOpen>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_Z6apMainv>:


void apMain(void){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	pre_time = HAL_GetTick();
 8001d96:	f000 f919 	bl	8001fcc <HAL_GetTick>
 8001d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

	while(1){
		if(HAL_GetTick()-pre_time >= 500){
 8001d9c:	f000 f916 	bl	8001fcc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf8c      	ite	hi
 8001dae:	2301      	movhi	r3, #1
 8001db0:	2300      	movls	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <_Z6apMainv+0x2e>
			pre_time = HAL_GetTick();
 8001db8:	f000 f908 	bl	8001fcc <HAL_GetTick>
 8001dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
//			logPrintf("print test %d \r\n", millis());
		}

		if(uartAvailable(_DEF_UART1) > 0)
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fefe 	bl	8001bc0 <uartAvailable>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0e3      	beq.n	8001d9c <_Z6apMainv+0xc>
		{
			uint8_t rx_data;

			rx_data = uartRead(_DEF_UART1);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff ff29 	bl	8001c2c <uartRead>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			if(rx_data == '1')
 8001de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001de4:	2b31      	cmp	r3, #49	; 0x31
 8001de6:	d11c      	bne.n	8001e22 <_Z6apMainv+0x92>
			{
				uint8_t buf[32];
				logPrintf("Read...\r\n");
 8001de8:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <_Z6apMainv+0x120>)
 8001dea:	f00c f95b 	bl	800e0a4 <puts>
				flashRead(0x08104000 + (70*1024), buf, 32);
 8001dee:	463b      	mov	r3, r7
 8001df0:	2220      	movs	r2, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	482f      	ldr	r0, [pc, #188]	; (8001eb4 <_Z6apMainv+0x124>)
 8001df6:	f7ff fd63 	bl	80018c0 <_Z9flashReadmPhm>

				for(int i = 0; i<32; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	2b1f      	cmp	r3, #31
 8001e02:	dc0e      	bgt.n	8001e22 <_Z6apMainv+0x92>
				{
					logPrintf("0x%X : 0x%X\r\n",0x08100000 + (70*1024) + i, buf[i] );
 8001e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <_Z6apMainv+0x128>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0e:	440a      	add	r2, r1
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4829      	ldr	r0, [pc, #164]	; (8001ebc <_Z6apMainv+0x12c>)
 8001e16:	f00c f8bf 	bl	800df98 <iprintf>
				for(int i = 0; i<32; i++)
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e20:	e7ed      	b.n	8001dfe <_Z6apMainv+0x6e>
				}
			}


			//why don't erase address in bank1....? address in bank2 can be erased.
			if(rx_data == '2')
 8001e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e26:	2b32      	cmp	r3, #50	; 0x32
 8001e28:	d115      	bne.n	8001e56 <_Z6apMainv+0xc6>
			{
				logPrintf("Erase....\r\n");
 8001e2a:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <_Z6apMainv+0x130>)
 8001e2c:	f00c f93a 	bl	800e0a4 <puts>
				if(flashErase(0x08104000 + (70*1024), 32) == true){
 8001e30:	2120      	movs	r1, #32
 8001e32:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <_Z6apMainv+0x124>)
 8001e34:	f7ff fbd4 	bl	80015e0 <_Z10flashErasemm>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <_Z6apMainv+0xc0>
					logPrintf("Erase OK \r\n");
 8001e48:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <_Z6apMainv+0x134>)
 8001e4a:	f00c f92b 	bl	800e0a4 <puts>
 8001e4e:	e002      	b.n	8001e56 <_Z6apMainv+0xc6>
				}
				else
				{
					logPrintf("Erase Fail..\r\n");
 8001e50:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <_Z6apMainv+0x138>)
 8001e52:	f00c f927 	bl	800e0a4 <puts>
				}
			}

			if(rx_data == '3')
 8001e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e5a:	2b33      	cmp	r3, #51	; 0x33
 8001e5c:	d19e      	bne.n	8001d9c <_Z6apMainv+0xc>
			{
				uint8_t buf[32];
				logPrintf("Write...\r\n");
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <_Z6apMainv+0x13c>)
 8001e60:	f00c f920 	bl	800e0a4 <puts>
				for(int i = 0; i<32; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	2b1f      	cmp	r3, #31
 8001e6c:	dc0a      	bgt.n	8001e84 <_Z6apMainv+0xf4>
				{
					buf[i]=i;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	b2d9      	uxtb	r1, r3
 8001e72:	463a      	mov	r2, r7
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	4413      	add	r3, r2
 8001e78:	460a      	mov	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<32; i++)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3301      	adds	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	e7f1      	b.n	8001e68 <_Z6apMainv+0xd8>
				}
				if(flashWrite(0x08104000 + (70*1024), buf, 32) == true)
 8001e84:	463b      	mov	r3, r7
 8001e86:	2220      	movs	r2, #32
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <_Z6apMainv+0x124>)
 8001e8c:	f7ff fc66 	bl	800175c <_Z10flashWritemPhm>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <_Z6apMainv+0x118>
				{
					logPrintf("Write OK \r\n");
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <_Z6apMainv+0x140>)
 8001ea2:	f00c f8ff 	bl	800e0a4 <puts>
 8001ea6:	e779      	b.n	8001d9c <_Z6apMainv+0xc>
				}
				else
				{
					logPrintf("Write Fail..\r\n");
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <_Z6apMainv+0x144>)
 8001eaa:	f00c f8fb 	bl	800e0a4 <puts>

		}
#endif


	}
 8001eae:	e775      	b.n	8001d9c <_Z6apMainv+0xc>
 8001eb0:	0800eda4 	.word	0x0800eda4
 8001eb4:	08115800 	.word	0x08115800
 8001eb8:	08111800 	.word	0x08111800
 8001ebc:	0800edb0 	.word	0x0800edb0
 8001ec0:	0800edc0 	.word	0x0800edc0
 8001ec4:	0800edcc 	.word	0x0800edcc
 8001ec8:	0800edd8 	.word	0x0800edd8
 8001ecc:	0800ede8 	.word	0x0800ede8
 8001ed0:	0800edf4 	.word	0x0800edf4
 8001ed4:	0800ee00 	.word	0x0800ee00

08001ed8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001edc:	f7ff faec 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eec:	480a      	ldr	r0, [pc, #40]	; (8001f18 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f00b ff75 	bl	800ddf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe fbd1 	bl	80006b0 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001f10:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f14:	0800f094 	.word	0x0800f094
  ldr  r0, =_sdata
 8001f18:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f1c:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001f20:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001f24:	24007260 	.word	0x24007260

08001f28 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC3_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 f90f 	bl	8002156 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f38:	f004 fa4e 	bl	80063d8 <HAL_RCC_GetSysClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_Init+0x68>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4913      	ldr	r1, [pc, #76]	; (8001f98 <HAL_Init+0x6c>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_Init+0x68>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_Init+0x6c>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_Init+0x70>)
 8001f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_Init+0x74>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f76:	200f      	movs	r0, #15
 8001f78:	f7ff f93c 	bl	80011f4 <HAL_InitTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e002      	b.n	8001f8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f86:	f7fe fe93 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	58024400 	.word	0x58024400
 8001f98:	0800eeac 	.word	0x0800eeac
 8001f9c:	24000004 	.word	0x24000004
 8001fa0:	24000000 	.word	0x24000000

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2400000c 	.word	0x2400000c
 8001fc8:	24002820 	.word	0x24002820

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	24002820 	.word	0x24002820

08001fe4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetREVID+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1b      	lsrs	r3, r3, #16
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	5c001000 	.word	0x5c001000

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	4313      	orrs	r3, r2
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	05fa0000 	.word	0x05fa0000

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	; (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ff4c 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800217a:	f7ff ff63 	bl	8002044 <__NVIC_GetPriorityGrouping>
 800217e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	6978      	ldr	r0, [r7, #20]
 8002186:	f7ff ffb3 	bl	80020f0 <NVIC_EncodePriority>
 800218a:	4602      	mov	r2, r0
 800218c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff82 	bl	800209c <__NVIC_SetPriority>
}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff56 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff ff02 	bl	8001fcc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e316      	b.n	8002802 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_DMA_Init+0x1b8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_DMA_Init+0x1bc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_DMA_Init+0x1c0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a62      	ldr	r2, [pc, #392]	; (8002380 <HAL_DMA_Init+0x1c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a60      	ldr	r2, [pc, #384]	; (8002384 <HAL_DMA_Init+0x1c8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5f      	ldr	r2, [pc, #380]	; (8002388 <HAL_DMA_Init+0x1cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a5d      	ldr	r2, [pc, #372]	; (800238c <HAL_DMA_Init+0x1d0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <HAL_DMA_Init+0x1d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_DMA_Init+0x1d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a59      	ldr	r2, [pc, #356]	; (8002398 <HAL_DMA_Init+0x1dc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_DMA_Init+0x1e0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a56      	ldr	r2, [pc, #344]	; (80023a0 <HAL_DMA_Init+0x1e4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a54      	ldr	r2, [pc, #336]	; (80023a4 <HAL_DMA_Init+0x1e8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a53      	ldr	r2, [pc, #332]	; (80023a8 <HAL_DMA_Init+0x1ec>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_DMA_Init+0x1f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_DMA_Init+0x1f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Init+0xbc>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_DMA_Init+0xbe>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 813b 	beq.w	80024f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a37      	ldr	r2, [pc, #220]	; (8002374 <HAL_DMA_Init+0x1b8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04a      	beq.n	8002330 <HAL_DMA_Init+0x174>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a36      	ldr	r2, [pc, #216]	; (8002378 <HAL_DMA_Init+0x1bc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d045      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a34      	ldr	r2, [pc, #208]	; (800237c <HAL_DMA_Init+0x1c0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d040      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_DMA_Init+0x1c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d03b      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_DMA_Init+0x1c8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d036      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_DMA_Init+0x1cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d031      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	; (800238c <HAL_DMA_Init+0x1d0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02c      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_DMA_Init+0x1d4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d027      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_DMA_Init+0x1d8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d022      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_DMA_Init+0x1dc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d01d      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <HAL_DMA_Init+0x1e0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d018      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_DMA_Init+0x1e4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_DMA_Init+0x1e8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00e      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_DMA_Init+0x1ec>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_DMA_Init+0x1f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_DMA_Init+0x1f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d108      	bne.n	8002342 <HAL_DMA_Init+0x186>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_DMA_Init+0x196>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002352:	e02f      	b.n	80023b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002354:	f7ff fe3a 	bl	8001fcc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d928      	bls.n	80023b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e246      	b.n	8002802 <HAL_DMA_Init+0x646>
 8002374:	40020010 	.word	0x40020010
 8002378:	40020028 	.word	0x40020028
 800237c:	40020040 	.word	0x40020040
 8002380:	40020058 	.word	0x40020058
 8002384:	40020070 	.word	0x40020070
 8002388:	40020088 	.word	0x40020088
 800238c:	400200a0 	.word	0x400200a0
 8002390:	400200b8 	.word	0x400200b8
 8002394:	40020410 	.word	0x40020410
 8002398:	40020428 	.word	0x40020428
 800239c:	40020440 	.word	0x40020440
 80023a0:	40020458 	.word	0x40020458
 80023a4:	40020470 	.word	0x40020470
 80023a8:	40020488 	.word	0x40020488
 80023ac:	400204a0 	.word	0x400204a0
 80023b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1c8      	bne.n	8002354 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4b83      	ldr	r3, [pc, #524]	; (80025dc <HAL_DMA_Init+0x420>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4313      	orrs	r3, r2
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002418:	4b71      	ldr	r3, [pc, #452]	; (80025e0 <HAL_DMA_Init+0x424>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b71      	ldr	r3, [pc, #452]	; (80025e4 <HAL_DMA_Init+0x428>)
 800241e:	4013      	ands	r3, r2
 8002420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002424:	d328      	bcc.n	8002478 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b28      	cmp	r3, #40	; 0x28
 800242c:	d903      	bls.n	8002436 <HAL_DMA_Init+0x27a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b2e      	cmp	r3, #46	; 0x2e
 8002434:	d917      	bls.n	8002466 <HAL_DMA_Init+0x2aa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b3e      	cmp	r3, #62	; 0x3e
 800243c:	d903      	bls.n	8002446 <HAL_DMA_Init+0x28a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b42      	cmp	r3, #66	; 0x42
 8002444:	d90f      	bls.n	8002466 <HAL_DMA_Init+0x2aa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b46      	cmp	r3, #70	; 0x46
 800244c:	d903      	bls.n	8002456 <HAL_DMA_Init+0x29a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b48      	cmp	r3, #72	; 0x48
 8002454:	d907      	bls.n	8002466 <HAL_DMA_Init+0x2aa>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b4e      	cmp	r3, #78	; 0x4e
 800245c:	d905      	bls.n	800246a <HAL_DMA_Init+0x2ae>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b52      	cmp	r3, #82	; 0x52
 8002464:	d801      	bhi.n	800246a <HAL_DMA_Init+0x2ae>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_DMA_Init+0x2b0>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002476:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0307 	bic.w	r3, r3, #7
 800248e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d117      	bne.n	80024d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f002 fb33 	bl	8004b20 <DMA_CheckFifoParam>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e197      	b.n	8002802 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f002 fa6e 	bl	80049bc <DMA_CalcBaseAndBitshift>
 80024e0:	4603      	mov	r3, r0
 80024e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	223f      	movs	r2, #63	; 0x3f
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	e0cd      	b.n	8002692 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_DMA_Init+0x42c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a39      	ldr	r2, [pc, #228]	; (80025ec <HAL_DMA_Init+0x430>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <HAL_DMA_Init+0x434>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <HAL_DMA_Init+0x438>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_DMA_Init+0x43c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_DMA_Init+0x440>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a32      	ldr	r2, [pc, #200]	; (8002600 <HAL_DMA_Init+0x444>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_DMA_Init+0x38a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a30      	ldr	r2, [pc, #192]	; (8002604 <HAL_DMA_Init+0x448>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_DMA_Init+0x38e>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_DMA_Init+0x390>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_DMA_Init+0x42c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d021      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_DMA_Init+0x430>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01c      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_DMA_Init+0x434>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d017      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_DMA_Init+0x438>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d012      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_DMA_Init+0x43c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00d      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_DMA_Init+0x440>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_DMA_Init+0x444>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_Init+0x3e4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_DMA_Init+0x448>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_DMA_Init+0x44c>)
 80025be:	4013      	ands	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d020      	beq.n	800260c <HAL_DMA_Init+0x450>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d102      	bne.n	80025d8 <HAL_DMA_Init+0x41c>
 80025d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d6:	e01a      	b.n	800260e <HAL_DMA_Init+0x452>
 80025d8:	2300      	movs	r3, #0
 80025da:	e018      	b.n	800260e <HAL_DMA_Init+0x452>
 80025dc:	fe10803f 	.word	0xfe10803f
 80025e0:	5c001000 	.word	0x5c001000
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	58025408 	.word	0x58025408
 80025ec:	5802541c 	.word	0x5802541c
 80025f0:	58025430 	.word	0x58025430
 80025f4:	58025444 	.word	0x58025444
 80025f8:	58025458 	.word	0x58025458
 80025fc:	5802546c 	.word	0x5802546c
 8002600:	58025480 	.word	0x58025480
 8002604:	58025494 	.word	0x58025494
 8002608:	fffe000f 	.word	0xfffe000f
 800260c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800261c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800262c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800263c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b6e      	ldr	r3, [pc, #440]	; (800280c <HAL_DMA_Init+0x650>)
 8002654:	4413      	add	r3, r2
 8002656:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_DMA_Init+0x654>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f002 f9a9 	bl	80049bc <DMA_CalcBaseAndBitshift>
 800266a:	4603      	mov	r3, r0
 800266c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2201      	movs	r2, #1
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e008      	b.n	8002692 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2203      	movs	r2, #3
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0b7      	b.n	8002802 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <HAL_DMA_Init+0x658>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d072      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_DMA_Init+0x65c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d06d      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_DMA_Init+0x660>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d068      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5a      	ldr	r2, [pc, #360]	; (8002820 <HAL_DMA_Init+0x664>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d063      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a59      	ldr	r2, [pc, #356]	; (8002824 <HAL_DMA_Init+0x668>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d05e      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a57      	ldr	r2, [pc, #348]	; (8002828 <HAL_DMA_Init+0x66c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d059      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a56      	ldr	r2, [pc, #344]	; (800282c <HAL_DMA_Init+0x670>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d054      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a54      	ldr	r2, [pc, #336]	; (8002830 <HAL_DMA_Init+0x674>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d04f      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a53      	ldr	r2, [pc, #332]	; (8002834 <HAL_DMA_Init+0x678>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04a      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <HAL_DMA_Init+0x67c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d045      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a50      	ldr	r2, [pc, #320]	; (800283c <HAL_DMA_Init+0x680>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d040      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <HAL_DMA_Init+0x684>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d03b      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <HAL_DMA_Init+0x688>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d036      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_DMA_Init+0x68c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d031      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_DMA_Init+0x690>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d02c      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a48      	ldr	r2, [pc, #288]	; (8002850 <HAL_DMA_Init+0x694>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d027      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_DMA_Init+0x698>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_DMA_Init+0x69c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01d      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <HAL_DMA_Init+0x6a0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d018      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a42      	ldr	r2, [pc, #264]	; (8002860 <HAL_DMA_Init+0x6a4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a41      	ldr	r2, [pc, #260]	; (8002864 <HAL_DMA_Init+0x6a8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00e      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a3f      	ldr	r2, [pc, #252]	; (8002868 <HAL_DMA_Init+0x6ac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3e      	ldr	r2, [pc, #248]	; (800286c <HAL_DMA_Init+0x6b0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_DMA_Init+0x6b4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_DMA_Init+0x5ca>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_DMA_Init+0x5cc>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d032      	beq.n	80027f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f002 fa43 	bl	8004c18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d102      	bne.n	80027a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d010      	beq.n	80027e0 <HAL_DMA_Init+0x624>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d80c      	bhi.n	80027e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f002 fac0 	bl	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e008      	b.n	80027f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	a7fdabf8 	.word	0xa7fdabf8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8
 8002854:	58025408 	.word	0x58025408
 8002858:	5802541c 	.word	0x5802541c
 800285c:	58025430 	.word	0x58025430
 8002860:	58025444 	.word	0x58025444
 8002864:	58025458 	.word	0x58025458
 8002868:	5802546c 	.word	0x5802546c
 800286c:	58025480 	.word	0x58025480
 8002870:	58025494 	.word	0x58025494

08002874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e226      	b.n	8002cde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_DMA_Start_IT+0x2a>
 800289a:	2302      	movs	r3, #2
 800289c:	e21f      	b.n	8002cde <HAL_DMA_Start_IT+0x46a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 820a 	bne.w	8002cc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a68      	ldr	r2, [pc, #416]	; (8002a68 <HAL_DMA_Start_IT+0x1f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04a      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_DMA_Start_IT+0x1f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d045      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_DMA_Start_IT+0x1fc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d040      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a63      	ldr	r2, [pc, #396]	; (8002a74 <HAL_DMA_Start_IT+0x200>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d03b      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a62      	ldr	r2, [pc, #392]	; (8002a78 <HAL_DMA_Start_IT+0x204>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d036      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <HAL_DMA_Start_IT+0x208>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_DMA_Start_IT+0x20c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d02c      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_DMA_Start_IT+0x210>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d027      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5c      	ldr	r2, [pc, #368]	; (8002a88 <HAL_DMA_Start_IT+0x214>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <HAL_DMA_Start_IT+0x218>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a59      	ldr	r2, [pc, #356]	; (8002a90 <HAL_DMA_Start_IT+0x21c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_DMA_Start_IT+0x220>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_DMA_Start_IT+0x224>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_DMA_Start_IT+0x228>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_DMA_Start_IT+0x22c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a51      	ldr	r2, [pc, #324]	; (8002aa4 <HAL_DMA_Start_IT+0x230>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <HAL_DMA_Start_IT+0x100>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e007      	b.n	8002984 <HAL_DMA_Start_IT+0x110>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f001 fe6a 	bl	8004664 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_DMA_Start_IT+0x1f4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d04a      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_DMA_Start_IT+0x1f8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d045      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_DMA_Start_IT+0x1fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d040      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_DMA_Start_IT+0x200>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d03b      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_DMA_Start_IT+0x204>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d036      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <HAL_DMA_Start_IT+0x208>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d031      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <HAL_DMA_Start_IT+0x20c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02c      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_DMA_Start_IT+0x210>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d027      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_DMA_Start_IT+0x214>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d022      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_DMA_Start_IT+0x218>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d01d      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <HAL_DMA_Start_IT+0x21c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d018      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_DMA_Start_IT+0x220>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_DMA_Start_IT+0x224>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_DMA_Start_IT+0x228>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_DMA_Start_IT+0x22c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_DMA_Start_IT+0x230>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Start_IT+0x1c0>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_Start_IT+0x1c2>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 021e 	bic.w	r2, r3, #30
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0216 	orr.w	r2, r2, #22
 8002a4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d03e      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0208 	orr.w	r2, r2, #8
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e035      	b.n	8002ad4 <HAL_DMA_Start_IT+0x260>
 8002a68:	40020010 	.word	0x40020010
 8002a6c:	40020028 	.word	0x40020028
 8002a70:	40020040 	.word	0x40020040
 8002a74:	40020058 	.word	0x40020058
 8002a78:	40020070 	.word	0x40020070
 8002a7c:	40020088 	.word	0x40020088
 8002a80:	400200a0 	.word	0x400200a0
 8002a84:	400200b8 	.word	0x400200b8
 8002a88:	40020410 	.word	0x40020410
 8002a8c:	40020428 	.word	0x40020428
 8002a90:	40020440 	.word	0x40020440
 8002a94:	40020458 	.word	0x40020458
 8002a98:	40020470 	.word	0x40020470
 8002a9c:	40020488 	.word	0x40020488
 8002aa0:	400204a0 	.word	0x400204a0
 8002aa4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 020e 	bic.w	r2, r3, #14
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 020a 	orr.w	r2, r2, #10
 8002aba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0204 	orr.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a83      	ldr	r2, [pc, #524]	; (8002ce8 <HAL_DMA_Start_IT+0x474>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d072      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a82      	ldr	r2, [pc, #520]	; (8002cec <HAL_DMA_Start_IT+0x478>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d06d      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_DMA_Start_IT+0x47c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d068      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7f      	ldr	r2, [pc, #508]	; (8002cf4 <HAL_DMA_Start_IT+0x480>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d063      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a7d      	ldr	r2, [pc, #500]	; (8002cf8 <HAL_DMA_Start_IT+0x484>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d05e      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <HAL_DMA_Start_IT+0x488>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d059      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a7a      	ldr	r2, [pc, #488]	; (8002d00 <HAL_DMA_Start_IT+0x48c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d054      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a79      	ldr	r2, [pc, #484]	; (8002d04 <HAL_DMA_Start_IT+0x490>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04f      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a77      	ldr	r2, [pc, #476]	; (8002d08 <HAL_DMA_Start_IT+0x494>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a76      	ldr	r2, [pc, #472]	; (8002d0c <HAL_DMA_Start_IT+0x498>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d045      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a74      	ldr	r2, [pc, #464]	; (8002d10 <HAL_DMA_Start_IT+0x49c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a73      	ldr	r2, [pc, #460]	; (8002d14 <HAL_DMA_Start_IT+0x4a0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03b      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a71      	ldr	r2, [pc, #452]	; (8002d18 <HAL_DMA_Start_IT+0x4a4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d036      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a70      	ldr	r2, [pc, #448]	; (8002d1c <HAL_DMA_Start_IT+0x4a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_DMA_Start_IT+0x4ac>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02c      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6d      	ldr	r2, [pc, #436]	; (8002d24 <HAL_DMA_Start_IT+0x4b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d027      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6b      	ldr	r2, [pc, #428]	; (8002d28 <HAL_DMA_Start_IT+0x4b4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d022      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6a      	ldr	r2, [pc, #424]	; (8002d2c <HAL_DMA_Start_IT+0x4b8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d01d      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a68      	ldr	r2, [pc, #416]	; (8002d30 <HAL_DMA_Start_IT+0x4bc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_DMA_Start_IT+0x4c0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_DMA_Start_IT+0x4c4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <HAL_DMA_Start_IT+0x4c8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a62      	ldr	r2, [pc, #392]	; (8002d40 <HAL_DMA_Start_IT+0x4cc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a61      	ldr	r2, [pc, #388]	; (8002d44 <HAL_DMA_Start_IT+0x4d0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_DMA_Start_IT+0x354>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_DMA_Start_IT+0x356>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01a      	beq.n	8002c04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a37      	ldr	r2, [pc, #220]	; (8002ce8 <HAL_DMA_Start_IT+0x474>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d04a      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a36      	ldr	r2, [pc, #216]	; (8002cec <HAL_DMA_Start_IT+0x478>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d045      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <HAL_DMA_Start_IT+0x47c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d040      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a33      	ldr	r2, [pc, #204]	; (8002cf4 <HAL_DMA_Start_IT+0x480>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d03b      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <HAL_DMA_Start_IT+0x484>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d036      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a30      	ldr	r2, [pc, #192]	; (8002cfc <HAL_DMA_Start_IT+0x488>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_DMA_Start_IT+0x48c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02c      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <HAL_DMA_Start_IT+0x490>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d027      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2b      	ldr	r2, [pc, #172]	; (8002d08 <HAL_DMA_Start_IT+0x494>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d022      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <HAL_DMA_Start_IT+0x498>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d01d      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a28      	ldr	r2, [pc, #160]	; (8002d10 <HAL_DMA_Start_IT+0x49c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_DMA_Start_IT+0x4a0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_DMA_Start_IT+0x4a4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <HAL_DMA_Start_IT+0x4a8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_DMA_Start_IT+0x4ac>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_DMA_Start_IT+0x4b0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <HAL_DMA_Start_IT+0x442>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e012      	b.n	8002cdc <HAL_DMA_Start_IT+0x468>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e009      	b.n	8002cdc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020010 	.word	0x40020010
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	40020040 	.word	0x40020040
 8002cf4:	40020058 	.word	0x40020058
 8002cf8:	40020070 	.word	0x40020070
 8002cfc:	40020088 	.word	0x40020088
 8002d00:	400200a0 	.word	0x400200a0
 8002d04:	400200b8 	.word	0x400200b8
 8002d08:	40020410 	.word	0x40020410
 8002d0c:	40020428 	.word	0x40020428
 8002d10:	40020440 	.word	0x40020440
 8002d14:	40020458 	.word	0x40020458
 8002d18:	40020470 	.word	0x40020470
 8002d1c:	40020488 	.word	0x40020488
 8002d20:	400204a0 	.word	0x400204a0
 8002d24:	400204b8 	.word	0x400204b8
 8002d28:	58025408 	.word	0x58025408
 8002d2c:	5802541c 	.word	0x5802541c
 8002d30:	58025430 	.word	0x58025430
 8002d34:	58025444 	.word	0x58025444
 8002d38:	58025458 	.word	0x58025458
 8002d3c:	5802546c 	.word	0x5802546c
 8002d40:	58025480 	.word	0x58025480
 8002d44:	58025494 	.word	0x58025494

08002d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff f93c 	bl	8001fcc <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e2dc      	b.n	800331a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e2cd      	b.n	800331a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a76      	ldr	r2, [pc, #472]	; (8002f5c <HAL_DMA_Abort+0x214>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d04a      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a74      	ldr	r2, [pc, #464]	; (8002f60 <HAL_DMA_Abort+0x218>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d045      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a73      	ldr	r2, [pc, #460]	; (8002f64 <HAL_DMA_Abort+0x21c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d040      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_DMA_Abort+0x220>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d03b      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a70      	ldr	r2, [pc, #448]	; (8002f6c <HAL_DMA_Abort+0x224>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d036      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_DMA_Abort+0x228>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6d      	ldr	r2, [pc, #436]	; (8002f74 <HAL_DMA_Abort+0x22c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d02c      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6b      	ldr	r2, [pc, #428]	; (8002f78 <HAL_DMA_Abort+0x230>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d027      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_DMA_Abort+0x234>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d022      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_DMA_Abort+0x238>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_DMA_Abort+0x23c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d018      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_DMA_Abort+0x240>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_DMA_Abort+0x244>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <HAL_DMA_Abort+0x248>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a61      	ldr	r2, [pc, #388]	; (8002f94 <HAL_DMA_Abort+0x24c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <HAL_DMA_Abort+0x250>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_DMA_Abort+0xda>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_DMA_Abort+0xdc>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 021e 	bic.w	r2, r2, #30
 8002e36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e00a      	b.n	8002e66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 020e 	bic.w	r2, r2, #14
 8002e5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <HAL_DMA_Abort+0x214>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d072      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_DMA_Abort+0x218>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d06d      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <HAL_DMA_Abort+0x21c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d068      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a37      	ldr	r2, [pc, #220]	; (8002f68 <HAL_DMA_Abort+0x220>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d063      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <HAL_DMA_Abort+0x224>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d05e      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <HAL_DMA_Abort+0x228>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d059      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_DMA_Abort+0x22c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d054      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <HAL_DMA_Abort+0x230>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04f      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a30      	ldr	r2, [pc, #192]	; (8002f7c <HAL_DMA_Abort+0x234>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <HAL_DMA_Abort+0x238>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_DMA_Abort+0x23c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_DMA_Abort+0x240>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <HAL_DMA_Abort+0x244>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_DMA_Abort+0x248>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_DMA_Abort+0x24c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_DMA_Abort+0x250>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <HAL_DMA_Abort+0x254>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_DMA_Abort+0x258>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_DMA_Abort+0x25c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_DMA_Abort+0x260>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_DMA_Abort+0x264>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_DMA_Abort+0x268>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_DMA_Abort+0x26c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_DMA_Abort+0x270>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d132      	bne.n	8002fbc <HAL_DMA_Abort+0x274>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e031      	b.n	8002fbe <HAL_DMA_Abort+0x276>
 8002f5a:	bf00      	nop
 8002f5c:	40020010 	.word	0x40020010
 8002f60:	40020028 	.word	0x40020028
 8002f64:	40020040 	.word	0x40020040
 8002f68:	40020058 	.word	0x40020058
 8002f6c:	40020070 	.word	0x40020070
 8002f70:	40020088 	.word	0x40020088
 8002f74:	400200a0 	.word	0x400200a0
 8002f78:	400200b8 	.word	0x400200b8
 8002f7c:	40020410 	.word	0x40020410
 8002f80:	40020428 	.word	0x40020428
 8002f84:	40020440 	.word	0x40020440
 8002f88:	40020458 	.word	0x40020458
 8002f8c:	40020470 	.word	0x40020470
 8002f90:	40020488 	.word	0x40020488
 8002f94:	400204a0 	.word	0x400204a0
 8002f98:	400204b8 	.word	0x400204b8
 8002f9c:	58025408 	.word	0x58025408
 8002fa0:	5802541c 	.word	0x5802541c
 8002fa4:	58025430 	.word	0x58025430
 8002fa8:	58025444 	.word	0x58025444
 8002fac:	58025458 	.word	0x58025458
 8002fb0:	5802546c 	.word	0x5802546c
 8002fb4:	58025480 	.word	0x58025480
 8002fb8:	58025494 	.word	0x58025494
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6d      	ldr	r2, [pc, #436]	; (800318c <HAL_DMA_Abort+0x444>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	; (8003190 <HAL_DMA_Abort+0x448>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6a      	ldr	r2, [pc, #424]	; (8003194 <HAL_DMA_Abort+0x44c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a68      	ldr	r2, [pc, #416]	; (8003198 <HAL_DMA_Abort+0x450>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a67      	ldr	r2, [pc, #412]	; (800319c <HAL_DMA_Abort+0x454>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_DMA_Abort+0x458>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a64      	ldr	r2, [pc, #400]	; (80031a4 <HAL_DMA_Abort+0x45c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <HAL_DMA_Abort+0x460>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_DMA_Abort+0x464>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <HAL_DMA_Abort+0x468>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_DMA_Abort+0x46c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_DMA_Abort+0x470>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5b      	ldr	r2, [pc, #364]	; (80031bc <HAL_DMA_Abort+0x474>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_DMA_Abort+0x478>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_DMA_Abort+0x47c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <HAL_DMA_Abort+0x480>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <HAL_DMA_Abort+0x33c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_DMA_Abort+0x34c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003094:	e013      	b.n	80030be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003096:	f7fe ff99 	bl	8001fcc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d90c      	bls.n	80030be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e12d      	b.n	800331a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <HAL_DMA_Abort+0x444>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04a      	beq.n	800316a <HAL_DMA_Abort+0x422>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <HAL_DMA_Abort+0x448>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d045      	beq.n	800316a <HAL_DMA_Abort+0x422>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_DMA_Abort+0x44c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_Abort+0x422>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_DMA_Abort+0x450>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03b      	beq.n	800316a <HAL_DMA_Abort+0x422>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_DMA_Abort+0x454>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_DMA_Abort+0x422>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_DMA_Abort+0x458>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_DMA_Abort+0x45c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d02c      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_DMA_Abort+0x460>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d027      	beq.n	800316a <HAL_DMA_Abort+0x422>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a23      	ldr	r2, [pc, #140]	; (80031ac <HAL_DMA_Abort+0x464>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_DMA_Abort+0x468>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_DMA_Abort+0x422>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <HAL_DMA_Abort+0x46c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_DMA_Abort+0x470>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_DMA_Abort+0x474>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_DMA_Abort+0x478>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_DMA_Abort+0x47c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_DMA_Abort+0x480>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_DMA_Abort+0x426>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_DMA_Abort+0x428>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02b      	beq.n	80031cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	223f      	movs	r2, #63	; 0x3f
 8003184:	409a      	lsls	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e02a      	b.n	80031e2 <HAL_DMA_Abort+0x49a>
 800318c:	40020010 	.word	0x40020010
 8003190:	40020028 	.word	0x40020028
 8003194:	40020040 	.word	0x40020040
 8003198:	40020058 	.word	0x40020058
 800319c:	40020070 	.word	0x40020070
 80031a0:	40020088 	.word	0x40020088
 80031a4:	400200a0 	.word	0x400200a0
 80031a8:	400200b8 	.word	0x400200b8
 80031ac:	40020410 	.word	0x40020410
 80031b0:	40020428 	.word	0x40020428
 80031b4:	40020440 	.word	0x40020440
 80031b8:	40020458 	.word	0x40020458
 80031bc:	40020470 	.word	0x40020470
 80031c0:	40020488 	.word	0x40020488
 80031c4:	400204a0 	.word	0x400204a0
 80031c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4f      	ldr	r2, [pc, #316]	; (8003324 <HAL_DMA_Abort+0x5dc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d072      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <HAL_DMA_Abort+0x5e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d06d      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_DMA_Abort+0x5e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d068      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_DMA_Abort+0x5e8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d063      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a49      	ldr	r2, [pc, #292]	; (8003334 <HAL_DMA_Abort+0x5ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05e      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a47      	ldr	r2, [pc, #284]	; (8003338 <HAL_DMA_Abort+0x5f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d059      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a46      	ldr	r2, [pc, #280]	; (800333c <HAL_DMA_Abort+0x5f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d054      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a44      	ldr	r2, [pc, #272]	; (8003340 <HAL_DMA_Abort+0x5f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d04f      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a43      	ldr	r2, [pc, #268]	; (8003344 <HAL_DMA_Abort+0x5fc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a41      	ldr	r2, [pc, #260]	; (8003348 <HAL_DMA_Abort+0x600>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a40      	ldr	r2, [pc, #256]	; (800334c <HAL_DMA_Abort+0x604>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3e      	ldr	r2, [pc, #248]	; (8003350 <HAL_DMA_Abort+0x608>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3d      	ldr	r2, [pc, #244]	; (8003354 <HAL_DMA_Abort+0x60c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <HAL_DMA_Abort+0x610>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a3a      	ldr	r2, [pc, #232]	; (800335c <HAL_DMA_Abort+0x614>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_DMA_Abort+0x618>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a37      	ldr	r2, [pc, #220]	; (8003364 <HAL_DMA_Abort+0x61c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a35      	ldr	r2, [pc, #212]	; (8003368 <HAL_DMA_Abort+0x620>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_DMA_Abort+0x624>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a32      	ldr	r2, [pc, #200]	; (8003370 <HAL_DMA_Abort+0x628>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_DMA_Abort+0x62c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <HAL_DMA_Abort+0x630>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2e      	ldr	r2, [pc, #184]	; (800337c <HAL_DMA_Abort+0x634>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <HAL_DMA_Abort+0x638>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_DMA_Abort+0x58e>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_DMA_Abort+0x590>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003306:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494

08003384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e237      	b.n	8003806 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e22c      	b.n	8003806 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_DMA_Abort_IT+0x1a0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d04a      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_DMA_Abort_IT+0x1a4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d045      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a59      	ldr	r2, [pc, #356]	; (800352c <HAL_DMA_Abort_IT+0x1a8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d040      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_DMA_Abort_IT+0x1ac>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d03b      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a56      	ldr	r2, [pc, #344]	; (8003534 <HAL_DMA_Abort_IT+0x1b0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d036      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_DMA_Abort_IT+0x1b4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d031      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a53      	ldr	r2, [pc, #332]	; (800353c <HAL_DMA_Abort_IT+0x1b8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d02c      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_DMA_Abort_IT+0x1bc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d027      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a50      	ldr	r2, [pc, #320]	; (8003544 <HAL_DMA_Abort_IT+0x1c0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4f      	ldr	r2, [pc, #316]	; (8003548 <HAL_DMA_Abort_IT+0x1c4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01d      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4d      	ldr	r2, [pc, #308]	; (800354c <HAL_DMA_Abort_IT+0x1c8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_DMA_Abort_IT+0x1cc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_DMA_Abort_IT+0x1d0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a49      	ldr	r2, [pc, #292]	; (8003558 <HAL_DMA_Abort_IT+0x1d4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_DMA_Abort_IT+0x1d8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_DMA_Abort_IT+0x1dc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_DMA_Abort_IT+0xcc>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_DMA_Abort_IT+0xce>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8086 	beq.w	8003564 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2204      	movs	r2, #4
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_DMA_Abort_IT+0x1a0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04a      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <HAL_DMA_Abort_IT+0x1a4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d045      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_DMA_Abort_IT+0x1a8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d040      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_DMA_Abort_IT+0x1ac>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d03b      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <HAL_DMA_Abort_IT+0x1b0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d036      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <HAL_DMA_Abort_IT+0x1b4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d031      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_DMA_Abort_IT+0x1b8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02c      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_DMA_Abort_IT+0x1bc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d027      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_DMA_Abort_IT+0x1c0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_DMA_Abort_IT+0x1c4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01d      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <HAL_DMA_Abort_IT+0x1c8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_DMA_Abort_IT+0x1cc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <HAL_DMA_Abort_IT+0x1d0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_DMA_Abort_IT+0x1d4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1a      	ldr	r2, [pc, #104]	; (800355c <HAL_DMA_Abort_IT+0x1d8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_DMA_Abort_IT+0x1dc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d108      	bne.n	8003512 <HAL_DMA_Abort_IT+0x18e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e178      	b.n	8003804 <HAL_DMA_Abort_IT+0x480>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e16f      	b.n	8003804 <HAL_DMA_Abort_IT+0x480>
 8003524:	40020010 	.word	0x40020010
 8003528:	40020028 	.word	0x40020028
 800352c:	40020040 	.word	0x40020040
 8003530:	40020058 	.word	0x40020058
 8003534:	40020070 	.word	0x40020070
 8003538:	40020088 	.word	0x40020088
 800353c:	400200a0 	.word	0x400200a0
 8003540:	400200b8 	.word	0x400200b8
 8003544:	40020410 	.word	0x40020410
 8003548:	40020428 	.word	0x40020428
 800354c:	40020440 	.word	0x40020440
 8003550:	40020458 	.word	0x40020458
 8003554:	40020470 	.word	0x40020470
 8003558:	40020488 	.word	0x40020488
 800355c:	400204a0 	.word	0x400204a0
 8003560:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 020e 	bic.w	r2, r2, #14
 8003572:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6c      	ldr	r2, [pc, #432]	; (800372c <HAL_DMA_Abort_IT+0x3a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04a      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <HAL_DMA_Abort_IT+0x3ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d045      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_DMA_Abort_IT+0x3b0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d040      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a68      	ldr	r2, [pc, #416]	; (8003738 <HAL_DMA_Abort_IT+0x3b4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d03b      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a66      	ldr	r2, [pc, #408]	; (800373c <HAL_DMA_Abort_IT+0x3b8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d036      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_DMA_Abort_IT+0x3bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d031      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a63      	ldr	r2, [pc, #396]	; (8003744 <HAL_DMA_Abort_IT+0x3c0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02c      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a62      	ldr	r2, [pc, #392]	; (8003748 <HAL_DMA_Abort_IT+0x3c4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d027      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a60      	ldr	r2, [pc, #384]	; (800374c <HAL_DMA_Abort_IT+0x3c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d022      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5f      	ldr	r2, [pc, #380]	; (8003750 <HAL_DMA_Abort_IT+0x3cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01d      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5d      	ldr	r2, [pc, #372]	; (8003754 <HAL_DMA_Abort_IT+0x3d0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d018      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5c      	ldr	r2, [pc, #368]	; (8003758 <HAL_DMA_Abort_IT+0x3d4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a5a      	ldr	r2, [pc, #360]	; (800375c <HAL_DMA_Abort_IT+0x3d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00e      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a59      	ldr	r2, [pc, #356]	; (8003760 <HAL_DMA_Abort_IT+0x3dc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d009      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a57      	ldr	r2, [pc, #348]	; (8003764 <HAL_DMA_Abort_IT+0x3e0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a56      	ldr	r2, [pc, #344]	; (8003768 <HAL_DMA_Abort_IT+0x3e4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <HAL_DMA_Abort_IT+0x2a2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e007      	b.n	8003636 <HAL_DMA_Abort_IT+0x2b2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_DMA_Abort_IT+0x3a8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d072      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_DMA_Abort_IT+0x3ac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d06d      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a39      	ldr	r2, [pc, #228]	; (8003734 <HAL_DMA_Abort_IT+0x3b0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d068      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a37      	ldr	r2, [pc, #220]	; (8003738 <HAL_DMA_Abort_IT+0x3b4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d063      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a36      	ldr	r2, [pc, #216]	; (800373c <HAL_DMA_Abort_IT+0x3b8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d05e      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a34      	ldr	r2, [pc, #208]	; (8003740 <HAL_DMA_Abort_IT+0x3bc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d059      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a33      	ldr	r2, [pc, #204]	; (8003744 <HAL_DMA_Abort_IT+0x3c0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d054      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a31      	ldr	r2, [pc, #196]	; (8003748 <HAL_DMA_Abort_IT+0x3c4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04f      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_DMA_Abort_IT+0x3c8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04a      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_DMA_Abort_IT+0x3cc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d045      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_DMA_Abort_IT+0x3d0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d040      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <HAL_DMA_Abort_IT+0x3d4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d03b      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <HAL_DMA_Abort_IT+0x3d8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d036      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a28      	ldr	r2, [pc, #160]	; (8003760 <HAL_DMA_Abort_IT+0x3dc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d031      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_DMA_Abort_IT+0x3e0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d02c      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <HAL_DMA_Abort_IT+0x3e4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d027      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_DMA_Abort_IT+0x3e8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_DMA_Abort_IT+0x3ec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_DMA_Abort_IT+0x3f0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_DMA_Abort_IT+0x3f4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_DMA_Abort_IT+0x3f8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_DMA_Abort_IT+0x3fc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_DMA_Abort_IT+0x400>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_DMA_Abort_IT+0x404>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d132      	bne.n	800378c <HAL_DMA_Abort_IT+0x408>
 8003726:	2301      	movs	r3, #1
 8003728:	e031      	b.n	800378e <HAL_DMA_Abort_IT+0x40a>
 800372a:	bf00      	nop
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	58025408 	.word	0x58025408
 8003770:	5802541c 	.word	0x5802541c
 8003774:	58025430 	.word	0x58025430
 8003778:	58025444 	.word	0x58025444
 800377c:	58025458 	.word	0x58025458
 8003780:	5802546c 	.word	0x5802546c
 8003784:	58025480 	.word	0x58025480
 8003788:	58025494 	.word	0x58025494
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop

08003810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800381c:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_DMA_IRQHandler+0x1ac>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <HAL_DMA_IRQHandler+0x1b0>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_DMA_IRQHandler+0x1b4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5d      	ldr	r2, [pc, #372]	; (80039c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5c      	ldr	r2, [pc, #368]	; (80039cc <HAL_DMA_IRQHandler+0x1bc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5a      	ldr	r2, [pc, #360]	; (80039d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a59      	ldr	r2, [pc, #356]	; (80039d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_DMA_IRQHandler+0x1c8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a56      	ldr	r2, [pc, #344]	; (80039dc <HAL_DMA_IRQHandler+0x1cc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <HAL_DMA_IRQHandler+0x1d0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a53      	ldr	r2, [pc, #332]	; (80039e4 <HAL_DMA_IRQHandler+0x1d4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_DMA_IRQHandler+0x1d8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_DMA_IRQHandler+0x1dc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4e      	ldr	r2, [pc, #312]	; (80039f0 <HAL_DMA_IRQHandler+0x1e0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4d      	ldr	r2, [pc, #308]	; (80039f4 <HAL_DMA_IRQHandler+0x1e4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_DMA_IRQHandler+0x1e8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <HAL_DMA_IRQHandler+0x1ec>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <HAL_DMA_IRQHandler+0x1f0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_IRQHandler+0xd6>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_DMA_IRQHandler+0xd8>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 842b 	beq.w	8004144 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2208      	movs	r2, #8
 80038f8:	409a      	lsls	r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a2 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <HAL_DMA_IRQHandler+0x1b4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d04a      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d045      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_IRQHandler+0x1bc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d040      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d03b      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d036      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <HAL_DMA_IRQHandler+0x1c8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d031      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_DMA_IRQHandler+0x1cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02c      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_DMA_IRQHandler+0x1d0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d027      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_DMA_IRQHandler+0x1d4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d022      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_DMA_IRQHandler+0x1d8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d01d      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_DMA_IRQHandler+0x1dc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_DMA_IRQHandler+0x1e4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_DMA_IRQHandler+0x1e8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_DMA_IRQHandler+0x1ec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <HAL_DMA_IRQHandler+0x1f0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d12f      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x1f4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e02e      	b.n	8003a18 <HAL_DMA_IRQHandler+0x208>
 80039ba:	bf00      	nop
 80039bc:	24000000 	.word	0x24000000
 80039c0:	1b4e81b5 	.word	0x1b4e81b5
 80039c4:	40020010 	.word	0x40020010
 80039c8:	40020028 	.word	0x40020028
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40020058 	.word	0x40020058
 80039d4:	40020070 	.word	0x40020070
 80039d8:	40020088 	.word	0x40020088
 80039dc:	400200a0 	.word	0x400200a0
 80039e0:	400200b8 	.word	0x400200b8
 80039e4:	40020410 	.word	0x40020410
 80039e8:	40020428 	.word	0x40020428
 80039ec:	40020440 	.word	0x40020440
 80039f0:	40020458 	.word	0x40020458
 80039f4:	40020470 	.word	0x40020470
 80039f8:	40020488 	.word	0x40020488
 80039fc:	400204a0 	.word	0x400204a0
 8003a00:	400204b8 	.word	0x400204b8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2208      	movs	r2, #8
 8003a36:	409a      	lsls	r2, r3
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06e      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <HAL_DMA_IRQHandler+0x3f8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a67      	ldr	r2, [pc, #412]	; (8003c0c <HAL_DMA_IRQHandler+0x3fc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_DMA_IRQHandler+0x400>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a64      	ldr	r2, [pc, #400]	; (8003c14 <HAL_DMA_IRQHandler+0x404>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_DMA_IRQHandler+0x408>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_DMA_IRQHandler+0x40c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <HAL_DMA_IRQHandler+0x410>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5e      	ldr	r2, [pc, #376]	; (8003c24 <HAL_DMA_IRQHandler+0x414>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_DMA_IRQHandler+0x418>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <HAL_DMA_IRQHandler+0x41c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5a      	ldr	r2, [pc, #360]	; (8003c30 <HAL_DMA_IRQHandler+0x420>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_DMA_IRQHandler+0x424>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_DMA_IRQHandler+0x428>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_DMA_IRQHandler+0x42c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_DMA_IRQHandler+0x430>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_DMA_IRQHandler+0x434>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10a      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x304>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e003      	b.n	8003b1c <HAL_DMA_IRQHandler+0x30c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 808f 	beq.w	8003c70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <HAL_DMA_IRQHandler+0x3f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <HAL_DMA_IRQHandler+0x3fc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_DMA_IRQHandler+0x400>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <HAL_DMA_IRQHandler+0x404>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_DMA_IRQHandler+0x408>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_DMA_IRQHandler+0x40c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_DMA_IRQHandler+0x410>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <HAL_DMA_IRQHandler+0x414>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <HAL_DMA_IRQHandler+0x418>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_DMA_IRQHandler+0x41c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_DMA_IRQHandler+0x420>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_DMA_IRQHandler+0x424>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_DMA_IRQHandler+0x428>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_DMA_IRQHandler+0x42c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_DMA_IRQHandler+0x430>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_DMA_IRQHandler+0x434>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d12a      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x438>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e023      	b.n	8003c50 <HAL_DMA_IRQHandler+0x440>
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2210      	movs	r2, #16
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a6 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a85      	ldr	r2, [pc, #532]	; (8003ea0 <HAL_DMA_IRQHandler+0x690>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a83      	ldr	r2, [pc, #524]	; (8003ea4 <HAL_DMA_IRQHandler+0x694>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a82      	ldr	r2, [pc, #520]	; (8003ea8 <HAL_DMA_IRQHandler+0x698>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a80      	ldr	r2, [pc, #512]	; (8003eac <HAL_DMA_IRQHandler+0x69c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7f      	ldr	r2, [pc, #508]	; (8003eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7d      	ldr	r2, [pc, #500]	; (8003eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7c      	ldr	r2, [pc, #496]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7a      	ldr	r2, [pc, #488]	; (8003ebc <HAL_DMA_IRQHandler+0x6ac>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a79      	ldr	r2, [pc, #484]	; (8003ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a77      	ldr	r2, [pc, #476]	; (8003ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a76      	ldr	r2, [pc, #472]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <HAL_DMA_IRQHandler+0x6bc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a70      	ldr	r2, [pc, #448]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	; (8003edc <HAL_DMA_IRQHandler+0x6cc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10a      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x52c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e009      	b.n	8003d50 <HAL_DMA_IRQHandler+0x540>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03e      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d018      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d024      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e01f      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	e016      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0208 	bic.w	r2, r2, #8
 8003dc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2220      	movs	r2, #32
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8110 	beq.w	8004008 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_DMA_IRQHandler+0x690>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_DMA_IRQHandler+0x694>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_DMA_IRQHandler+0x698>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_DMA_IRQHandler+0x69c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <HAL_DMA_IRQHandler+0x6ac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_DMA_IRQHandler+0x6bc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_DMA_IRQHandler+0x6cc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12b      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x6d0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e02a      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x6e4>
 8003e9e:	bf00      	nop
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8087 	beq.w	8004008 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d139      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x736>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	223f      	movs	r2, #63	; 0x3f
 8003f60:	409a      	lsls	r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 834a 	beq.w	8004614 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
          }
          return;
 8003f88:	e344      	b.n	8004614 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	e027      	b.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e01e      	b.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0210 	bic.w	r2, r2, #16
 8003fe6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8306 	beq.w	800461e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8088 	beq.w	8004130 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7a      	ldr	r2, [pc, #488]	; (8004218 <HAL_DMA_IRQHandler+0xa08>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04a      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a79      	ldr	r2, [pc, #484]	; (800421c <HAL_DMA_IRQHandler+0xa0c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d045      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_DMA_IRQHandler+0xa10>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a76      	ldr	r2, [pc, #472]	; (8004224 <HAL_DMA_IRQHandler+0xa14>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03b      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a74      	ldr	r2, [pc, #464]	; (8004228 <HAL_DMA_IRQHandler+0xa18>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d036      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	; (800422c <HAL_DMA_IRQHandler+0xa1c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a71      	ldr	r2, [pc, #452]	; (8004230 <HAL_DMA_IRQHandler+0xa20>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a70      	ldr	r2, [pc, #448]	; (8004234 <HAL_DMA_IRQHandler+0xa24>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d027      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_DMA_IRQHandler+0xa28>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6d      	ldr	r2, [pc, #436]	; (800423c <HAL_DMA_IRQHandler+0xa2c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6b      	ldr	r2, [pc, #428]	; (8004240 <HAL_DMA_IRQHandler+0xa30>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6a      	ldr	r2, [pc, #424]	; (8004244 <HAL_DMA_IRQHandler+0xa34>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a68      	ldr	r2, [pc, #416]	; (8004248 <HAL_DMA_IRQHandler+0xa38>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a67      	ldr	r2, [pc, #412]	; (800424c <HAL_DMA_IRQHandler+0xa3c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a65      	ldr	r2, [pc, #404]	; (8004250 <HAL_DMA_IRQHandler+0xa40>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a64      	ldr	r2, [pc, #400]	; (8004254 <HAL_DMA_IRQHandler+0xa44>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <HAL_DMA_IRQHandler+0x8ca>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e007      	b.n	80040ea <HAL_DMA_IRQHandler+0x8da>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d307      	bcc.n	8004106 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f2      	bne.n	80040ea <HAL_DMA_IRQHandler+0x8da>
 8004104:	e000      	b.n	8004108 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004106:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800411e:	e003      	b.n	8004128 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8272 	beq.w	800461e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e26c      	b.n	800461e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a43      	ldr	r2, [pc, #268]	; (8004258 <HAL_DMA_IRQHandler+0xa48>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a42      	ldr	r2, [pc, #264]	; (800425c <HAL_DMA_IRQHandler+0xa4c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a40      	ldr	r2, [pc, #256]	; (8004260 <HAL_DMA_IRQHandler+0xa50>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <HAL_DMA_IRQHandler+0xa54>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3d      	ldr	r2, [pc, #244]	; (8004268 <HAL_DMA_IRQHandler+0xa58>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3c      	ldr	r2, [pc, #240]	; (800426c <HAL_DMA_IRQHandler+0xa5c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <HAL_DMA_IRQHandler+0xa60>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_DMA_IRQHandler+0x984>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_DMA_IRQHandler+0xa64>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_DMA_IRQHandler+0x988>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_DMA_IRQHandler+0x98a>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 823f 	beq.w	800461e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2204      	movs	r2, #4
 80041b2:	409a      	lsls	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80cd 	beq.w	8004358 <HAL_DMA_IRQHandler+0xb48>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80c7 	beq.w	8004358 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2204      	movs	r2, #4
 80041d4:	409a      	lsls	r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d049      	beq.n	8004278 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8210 	beq.w	8004618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004200:	e20a      	b.n	8004618 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8206 	beq.w	8004618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004214:	e200      	b.n	8004618 <HAL_DMA_IRQHandler+0xe08>
 8004216:	bf00      	nop
 8004218:	40020010 	.word	0x40020010
 800421c:	40020028 	.word	0x40020028
 8004220:	40020040 	.word	0x40020040
 8004224:	40020058 	.word	0x40020058
 8004228:	40020070 	.word	0x40020070
 800422c:	40020088 	.word	0x40020088
 8004230:	400200a0 	.word	0x400200a0
 8004234:	400200b8 	.word	0x400200b8
 8004238:	40020410 	.word	0x40020410
 800423c:	40020428 	.word	0x40020428
 8004240:	40020440 	.word	0x40020440
 8004244:	40020458 	.word	0x40020458
 8004248:	40020470 	.word	0x40020470
 800424c:	40020488 	.word	0x40020488
 8004250:	400204a0 	.word	0x400204a0
 8004254:	400204b8 	.word	0x400204b8
 8004258:	58025408 	.word	0x58025408
 800425c:	5802541c 	.word	0x5802541c
 8004260:	58025430 	.word	0x58025430
 8004264:	58025444 	.word	0x58025444
 8004268:	58025458 	.word	0x58025458
 800426c:	5802546c 	.word	0x5802546c
 8004270:	58025480 	.word	0x58025480
 8004274:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d160      	bne.n	8004344 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7f      	ldr	r2, [pc, #508]	; (8004484 <HAL_DMA_IRQHandler+0xc74>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d04a      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a7d      	ldr	r2, [pc, #500]	; (8004488 <HAL_DMA_IRQHandler+0xc78>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d045      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7c      	ldr	r2, [pc, #496]	; (800448c <HAL_DMA_IRQHandler+0xc7c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d040      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7a      	ldr	r2, [pc, #488]	; (8004490 <HAL_DMA_IRQHandler+0xc80>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d03b      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a79      	ldr	r2, [pc, #484]	; (8004494 <HAL_DMA_IRQHandler+0xc84>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d036      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_DMA_IRQHandler+0xc88>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a76      	ldr	r2, [pc, #472]	; (800449c <HAL_DMA_IRQHandler+0xc8c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d02c      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a74      	ldr	r2, [pc, #464]	; (80044a0 <HAL_DMA_IRQHandler+0xc90>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d027      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_DMA_IRQHandler+0xc94>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a71      	ldr	r2, [pc, #452]	; (80044a8 <HAL_DMA_IRQHandler+0xc98>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a70      	ldr	r2, [pc, #448]	; (80044ac <HAL_DMA_IRQHandler+0xc9c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a6e      	ldr	r2, [pc, #440]	; (80044b0 <HAL_DMA_IRQHandler+0xca0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6d      	ldr	r2, [pc, #436]	; (80044b4 <HAL_DMA_IRQHandler+0xca4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a6b      	ldr	r2, [pc, #428]	; (80044b8 <HAL_DMA_IRQHandler+0xca8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_DMA_IRQHandler+0xcac>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a68      	ldr	r2, [pc, #416]	; (80044c0 <HAL_DMA_IRQHandler+0xcb0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_DMA_IRQHandler+0xb24>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0208 	bic.w	r2, r2, #8
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e007      	b.n	8004344 <HAL_DMA_IRQHandler+0xb34>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0204 	bic.w	r2, r2, #4
 8004342:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8165 	beq.w	8004618 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004356:	e15f      	b.n	8004618 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2202      	movs	r2, #2
 8004362:	409a      	lsls	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80c5 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xce8>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80bf 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2202      	movs	r2, #2
 8004384:	409a      	lsls	r2, r3
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 813a 	beq.w	800461c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b0:	e134      	b.n	800461c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8130 	beq.w	800461c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c4:	e12a      	b.n	800461c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 8089 	bne.w	80044e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <HAL_DMA_IRQHandler+0xc74>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d04a      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a29      	ldr	r2, [pc, #164]	; (8004488 <HAL_DMA_IRQHandler+0xc78>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d045      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a28      	ldr	r2, [pc, #160]	; (800448c <HAL_DMA_IRQHandler+0xc7c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d040      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_DMA_IRQHandler+0xc80>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d03b      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a25      	ldr	r2, [pc, #148]	; (8004494 <HAL_DMA_IRQHandler+0xc84>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d036      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <HAL_DMA_IRQHandler+0xc88>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d031      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a22      	ldr	r2, [pc, #136]	; (800449c <HAL_DMA_IRQHandler+0xc8c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d02c      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <HAL_DMA_IRQHandler+0xc90>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d027      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <HAL_DMA_IRQHandler+0xc94>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_DMA_IRQHandler+0xc98>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_DMA_IRQHandler+0xc9c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <HAL_DMA_IRQHandler+0xca0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_DMA_IRQHandler+0xca4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_DMA_IRQHandler+0xca8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a16      	ldr	r2, [pc, #88]	; (80044bc <HAL_DMA_IRQHandler+0xcac>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_DMA_IRQHandler+0xc62>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_DMA_IRQHandler+0xcb0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d128      	bne.n	80044c4 <HAL_DMA_IRQHandler+0xcb4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0214 	bic.w	r2, r2, #20
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e027      	b.n	80044d4 <HAL_DMA_IRQHandler+0xcc4>
 8004484:	40020010 	.word	0x40020010
 8004488:	40020028 	.word	0x40020028
 800448c:	40020040 	.word	0x40020040
 8004490:	40020058 	.word	0x40020058
 8004494:	40020070 	.word	0x40020070
 8004498:	40020088 	.word	0x40020088
 800449c:	400200a0 	.word	0x400200a0
 80044a0:	400200b8 	.word	0x400200b8
 80044a4:	40020410 	.word	0x40020410
 80044a8:	40020428 	.word	0x40020428
 80044ac:	40020440 	.word	0x40020440
 80044b0:	40020458 	.word	0x40020458
 80044b4:	40020470 	.word	0x40020470
 80044b8:	40020488 	.word	0x40020488
 80044bc:	400204a0 	.word	0x400204a0
 80044c0:	400204b8 	.word	0x400204b8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020a 	bic.w	r2, r2, #10
 80044d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8097 	beq.w	800461c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f6:	e091      	b.n	800461c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2208      	movs	r2, #8
 8004502:	409a      	lsls	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8088 	beq.w	800461e <HAL_DMA_IRQHandler+0xe0e>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8082 	beq.w	800461e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a41      	ldr	r2, [pc, #260]	; (8004624 <HAL_DMA_IRQHandler+0xe14>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d04a      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3f      	ldr	r2, [pc, #252]	; (8004628 <HAL_DMA_IRQHandler+0xe18>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d045      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3e      	ldr	r2, [pc, #248]	; (800462c <HAL_DMA_IRQHandler+0xe1c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d040      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <HAL_DMA_IRQHandler+0xe20>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d03b      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3b      	ldr	r2, [pc, #236]	; (8004634 <HAL_DMA_IRQHandler+0xe24>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d036      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a39      	ldr	r2, [pc, #228]	; (8004638 <HAL_DMA_IRQHandler+0xe28>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d031      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a38      	ldr	r2, [pc, #224]	; (800463c <HAL_DMA_IRQHandler+0xe2c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d02c      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a36      	ldr	r2, [pc, #216]	; (8004640 <HAL_DMA_IRQHandler+0xe30>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d027      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a35      	ldr	r2, [pc, #212]	; (8004644 <HAL_DMA_IRQHandler+0xe34>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d022      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <HAL_DMA_IRQHandler+0xe38>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01d      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_DMA_IRQHandler+0xe3c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a30      	ldr	r2, [pc, #192]	; (8004650 <HAL_DMA_IRQHandler+0xe40>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <HAL_DMA_IRQHandler+0xe44>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <HAL_DMA_IRQHandler+0xe48>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <HAL_DMA_IRQHandler+0xe4c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_DMA_IRQHandler+0xe50>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <HAL_DMA_IRQHandler+0xdbc>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 021c 	bic.w	r2, r2, #28
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e007      	b.n	80045dc <HAL_DMA_IRQHandler+0xdcc>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 020e 	bic.w	r2, r2, #14
 80045da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2201      	movs	r2, #1
 80045e6:	409a      	lsls	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
 8004612:	e004      	b.n	800461e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004614:	bf00      	nop
 8004616:	e002      	b.n	800461e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800461c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40020010 	.word	0x40020010
 8004628:	40020028 	.word	0x40020028
 800462c:	40020040 	.word	0x40020040
 8004630:	40020058 	.word	0x40020058
 8004634:	40020070 	.word	0x40020070
 8004638:	40020088 	.word	0x40020088
 800463c:	400200a0 	.word	0x400200a0
 8004640:	400200b8 	.word	0x400200b8
 8004644:	40020410 	.word	0x40020410
 8004648:	40020428 	.word	0x40020428
 800464c:	40020440 	.word	0x40020440
 8004650:	40020458 	.word	0x40020458
 8004654:	40020470 	.word	0x40020470
 8004658:	40020488 	.word	0x40020488
 800465c:	400204a0 	.word	0x400204a0
 8004660:	400204b8 	.word	0x400204b8

08004664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7f      	ldr	r2, [pc, #508]	; (8004880 <DMA_SetConfig+0x21c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d072      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7d      	ldr	r2, [pc, #500]	; (8004884 <DMA_SetConfig+0x220>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d06d      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7c      	ldr	r2, [pc, #496]	; (8004888 <DMA_SetConfig+0x224>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d068      	beq.n	800476e <DMA_SetConfig+0x10a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7a      	ldr	r2, [pc, #488]	; (800488c <DMA_SetConfig+0x228>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d063      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a79      	ldr	r2, [pc, #484]	; (8004890 <DMA_SetConfig+0x22c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d05e      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a77      	ldr	r2, [pc, #476]	; (8004894 <DMA_SetConfig+0x230>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d059      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a76      	ldr	r2, [pc, #472]	; (8004898 <DMA_SetConfig+0x234>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d054      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a74      	ldr	r2, [pc, #464]	; (800489c <DMA_SetConfig+0x238>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04f      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	; (80048a0 <DMA_SetConfig+0x23c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d04a      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a71      	ldr	r2, [pc, #452]	; (80048a4 <DMA_SetConfig+0x240>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d045      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a70      	ldr	r2, [pc, #448]	; (80048a8 <DMA_SetConfig+0x244>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d040      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <DMA_SetConfig+0x248>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d03b      	beq.n	800476e <DMA_SetConfig+0x10a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6d      	ldr	r2, [pc, #436]	; (80048b0 <DMA_SetConfig+0x24c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d036      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6b      	ldr	r2, [pc, #428]	; (80048b4 <DMA_SetConfig+0x250>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d031      	beq.n	800476e <DMA_SetConfig+0x10a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6a      	ldr	r2, [pc, #424]	; (80048b8 <DMA_SetConfig+0x254>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d02c      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a68      	ldr	r2, [pc, #416]	; (80048bc <DMA_SetConfig+0x258>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d027      	beq.n	800476e <DMA_SetConfig+0x10a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a67      	ldr	r2, [pc, #412]	; (80048c0 <DMA_SetConfig+0x25c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a65      	ldr	r2, [pc, #404]	; (80048c4 <DMA_SetConfig+0x260>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01d      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a64      	ldr	r2, [pc, #400]	; (80048c8 <DMA_SetConfig+0x264>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a62      	ldr	r2, [pc, #392]	; (80048cc <DMA_SetConfig+0x268>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a61      	ldr	r2, [pc, #388]	; (80048d0 <DMA_SetConfig+0x26c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5f      	ldr	r2, [pc, #380]	; (80048d4 <DMA_SetConfig+0x270>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <DMA_SetConfig+0x10a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5e      	ldr	r2, [pc, #376]	; (80048d8 <DMA_SetConfig+0x274>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <DMA_SetConfig+0x10a>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5c      	ldr	r2, [pc, #368]	; (80048dc <DMA_SetConfig+0x278>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <DMA_SetConfig+0x10e>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <DMA_SetConfig+0x110>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004780:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004792:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a39      	ldr	r2, [pc, #228]	; (8004880 <DMA_SetConfig+0x21c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d04a      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a38      	ldr	r2, [pc, #224]	; (8004884 <DMA_SetConfig+0x220>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d045      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a36      	ldr	r2, [pc, #216]	; (8004888 <DMA_SetConfig+0x224>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d040      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <DMA_SetConfig+0x228>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d03b      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a33      	ldr	r2, [pc, #204]	; (8004890 <DMA_SetConfig+0x22c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d036      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a32      	ldr	r2, [pc, #200]	; (8004894 <DMA_SetConfig+0x230>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d031      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a30      	ldr	r2, [pc, #192]	; (8004898 <DMA_SetConfig+0x234>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d02c      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2f      	ldr	r2, [pc, #188]	; (800489c <DMA_SetConfig+0x238>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d027      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <DMA_SetConfig+0x23c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <DMA_SetConfig+0x240>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d01d      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <DMA_SetConfig+0x244>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <DMA_SetConfig+0x248>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <DMA_SetConfig+0x24c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <DMA_SetConfig+0x250>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <DMA_SetConfig+0x254>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <DMA_SetConfig+0x1d0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	; (80048bc <DMA_SetConfig+0x258>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <DMA_SetConfig+0x1d4>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <DMA_SetConfig+0x1d6>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d059      	beq.n	80048f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	223f      	movs	r2, #63	; 0x3f
 8004848:	409a      	lsls	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800485c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d138      	bne.n	80048e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800487e:	e086      	b.n	800498e <DMA_SetConfig+0x32a>
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8
 80048c0:	58025408 	.word	0x58025408
 80048c4:	5802541c 	.word	0x5802541c
 80048c8:	58025430 	.word	0x58025430
 80048cc:	58025444 	.word	0x58025444
 80048d0:	58025458 	.word	0x58025458
 80048d4:	5802546c 	.word	0x5802546c
 80048d8:	58025480 	.word	0x58025480
 80048dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	e04d      	b.n	800498e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a29      	ldr	r2, [pc, #164]	; (800499c <DMA_SetConfig+0x338>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <DMA_SetConfig+0x2de>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <DMA_SetConfig+0x33c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01d      	beq.n	8004942 <DMA_SetConfig+0x2de>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <DMA_SetConfig+0x340>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <DMA_SetConfig+0x2de>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <DMA_SetConfig+0x344>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <DMA_SetConfig+0x2de>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a23      	ldr	r2, [pc, #140]	; (80049ac <DMA_SetConfig+0x348>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <DMA_SetConfig+0x2de>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <DMA_SetConfig+0x34c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <DMA_SetConfig+0x2de>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <DMA_SetConfig+0x350>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <DMA_SetConfig+0x2de>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <DMA_SetConfig+0x354>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <DMA_SetConfig+0x2e2>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <DMA_SetConfig+0x2e4>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d020      	beq.n	800498e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d108      	bne.n	800497e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	60da      	str	r2, [r3, #12]
}
 800497c:	e007      	b.n	800498e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	58025408 	.word	0x58025408
 80049a0:	5802541c 	.word	0x5802541c
 80049a4:	58025430 	.word	0x58025430
 80049a8:	58025444 	.word	0x58025444
 80049ac:	58025458 	.word	0x58025458
 80049b0:	5802546c 	.word	0x5802546c
 80049b4:	58025480 	.word	0x58025480
 80049b8:	58025494 	.word	0x58025494

080049bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a42      	ldr	r2, [pc, #264]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x118>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04a      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d045      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <DMA_CalcBaseAndBitshift+0x120>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d040      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3e      	ldr	r2, [pc, #248]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x124>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d03b      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x128>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d031      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a39      	ldr	r2, [pc, #228]	; (8004aec <DMA_CalcBaseAndBitshift+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a38      	ldr	r2, [pc, #224]	; (8004af0 <DMA_CalcBaseAndBitshift+0x134>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d027      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a36      	ldr	r2, [pc, #216]	; (8004af4 <DMA_CalcBaseAndBitshift+0x138>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <DMA_CalcBaseAndBitshift+0x140>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a32      	ldr	r2, [pc, #200]	; (8004b00 <DMA_CalcBaseAndBitshift+0x144>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a30      	ldr	r2, [pc, #192]	; (8004b04 <DMA_CalcBaseAndBitshift+0x148>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <DMA_CalcBaseAndBitshift+0x150>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <DMA_CalcBaseAndBitshift+0x154>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <DMA_CalcBaseAndBitshift+0xac>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <DMA_CalcBaseAndBitshift+0xae>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d024      	beq.n	8004ab8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3b10      	subs	r3, #16
 8004a76:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <DMA_CalcBaseAndBitshift+0x158>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a88:	5cd3      	ldrb	r3, [r2, r3]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d908      	bls.n	8004aa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <DMA_CalcBaseAndBitshift+0x160>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa6:	e00d      	b.n	8004ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <DMA_CalcBaseAndBitshift+0x160>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab6:	e005      	b.n	8004ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
 8004b14:	aaaaaaab 	.word	0xaaaaaaab
 8004b18:	0800efbc 	.word	0x0800efbc
 8004b1c:	fffffc00 	.word	0xfffffc00

08004b20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d120      	bne.n	8004b76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d858      	bhi.n	8004bee <DMA_CheckFifoParam+0xce>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <DMA_CheckFifoParam+0x24>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b67 	.word	0x08004b67
 8004b4c:	08004b55 	.word	0x08004b55
 8004b50:	08004bef 	.word	0x08004bef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d048      	beq.n	8004bf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b64:	e045      	b.n	8004bf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b6e:	d142      	bne.n	8004bf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b74:	e03f      	b.n	8004bf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7e:	d123      	bne.n	8004bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d838      	bhi.n	8004bfa <DMA_CheckFifoParam+0xda>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <DMA_CheckFifoParam+0x70>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004ba7 	.word	0x08004ba7
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004bb9 	.word	0x08004bb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba4:	e030      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d025      	beq.n	8004bfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb6:	e022      	b.n	8004bfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc0:	d11f      	bne.n	8004c02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc6:	e01c      	b.n	8004c02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d902      	bls.n	8004bd6 <DMA_CheckFifoParam+0xb6>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d003      	beq.n	8004bdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004bd4:	e018      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bda:	e015      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
    break;
 8004bec:	e00b      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e00a      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e008      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf6:	bf00      	nop
 8004bf8:	e006      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
    break;
 8004c06:	bf00      	nop
    }
  }

  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a38      	ldr	r2, [pc, #224]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d018      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a33      	ldr	r2, [pc, #204]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b08      	subs	r3, #8
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ca4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	2201      	movs	r2, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cb4:	e024      	b.n	8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	3b10      	subs	r3, #16
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d806      	bhi.n	8004cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d902      	bls.n	8004cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	58025408 	.word	0x58025408
 8004d10:	5802541c 	.word	0x5802541c
 8004d14:	58025430 	.word	0x58025430
 8004d18:	58025444 	.word	0x58025444
 8004d1c:	58025458 	.word	0x58025458
 8004d20:	5802546c 	.word	0x5802546c
 8004d24:	58025480 	.word	0x58025480
 8004d28:	58025494 	.word	0x58025494
 8004d2c:	cccccccd 	.word	0xcccccccd
 8004d30:	16009600 	.word	0x16009600
 8004d34:	58025880 	.word	0x58025880
 8004d38:	aaaaaaab 	.word	0xaaaaaaab
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	4002040f 	.word	0x4002040f
 8004d44:	10008200 	.word	0x10008200
 8004d48:	40020880 	.word	0x40020880

08004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04a      	beq.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d847      	bhi.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004dd4:	671a      	str	r2, [r3, #112]	; 0x70
 8004dd6:	e009      	b.n	8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
 8004e24:	1600963f 	.word	0x1600963f
 8004e28:	58025940 	.word	0x58025940
 8004e2c:	1000823f 	.word	0x1000823f
 8004e30:	40020940 	.word	0x40020940

08004e34 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8004e48:	2308      	movs	r3, #8
 8004e4a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e4c:	4b40      	ldr	r3, [pc, #256]	; (8004f50 <HAL_FLASH_Program+0x11c>)
 8004e4e:	7d1b      	ldrb	r3, [r3, #20]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_FLASH_Program+0x24>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e076      	b.n	8004f46 <HAL_FLASH_Program+0x112>
 8004e58:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <HAL_FLASH_Program+0x11c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e64:	d306      	bcc.n	8004e74 <HAL_FLASH_Program+0x40>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8004e6c:	d202      	bcs.n	8004e74 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e00c      	b.n	8004e8e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8004e7a:	d306      	bcc.n	8004e8a <HAL_FLASH_Program+0x56>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004e82:	d202      	bcs.n	8004e8a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8004e84:	2302      	movs	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e001      	b.n	8004e8e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e05b      	b.n	8004f46 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_FLASH_Program+0x11c>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e9a:	f000 f8c1 	bl	8005020 <FLASH_WaitForLastOperation>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8004ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d147      	bne.n	8004f3c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d106      	bne.n	8004ec0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	60d3      	str	r3, [r2, #12]
 8004ebe:	e007      	b.n	8004ed0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004ec2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004ec6:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004ed0:	f3bf 8f6f 	isb	sy
}
 8004ed4:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ed6:	f3bf 8f4f 	dsb	sy
}
 8004eda:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	623b      	str	r3, [r7, #32]
        src_addr++;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3304      	adds	r3, #4
 8004eee:	61fb      	str	r3, [r7, #28]
        row_index--;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ef      	bne.n	8004edc <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8004efc:	f3bf 8f6f 	isb	sy
}
 8004f00:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8004f02:	f3bf 8f4f 	dsb	sy
}
 8004f06:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f0e:	f000 f887 	bl	8005020 <FLASH_WaitForLastOperation>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d106      	bne.n	8004f2c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	60d3      	str	r3, [r2, #12]
 8004f2a:	e007      	b.n	8004f3c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004f2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <HAL_FLASH_Program+0x120>)
 8004f34:	f023 0302 	bic.w	r3, r3, #2
 8004f38:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f3c:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <HAL_FLASH_Program+0x11c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	751a      	strb	r2, [r3, #20]

  return status;
 8004f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	; 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	24002824 	.word	0x24002824
 8004f54:	52002000 	.word	0x52002000

08004f58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_FLASH_Unlock+0x6c>)
 8004f6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <HAL_FLASH_Unlock+0x70>)
 8004f72:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e018      	b.n	8004fb6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <HAL_FLASH_Unlock+0x6c>)
 8004f96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <HAL_FLASH_Unlock+0x70>)
 8004f9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <HAL_FLASH_Unlock+0x68>)
 8004fa4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	52002000 	.word	0x52002000
 8004fc4:	45670123 	.word	0x45670123
 8004fc8:	cdef89ab 	.word	0xcdef89ab

08004fcc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8004fd0:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e011      	b.n	8005010 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004fee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_FLASH_Lock+0x50>)
 8004ffe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	52002000 	.word	0x52002000

08005020 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800502a:	2304      	movs	r3, #4
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8005032:	f7fc ffcb 	bl	8001fcc <HAL_GetTick>
 8005036:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d113      	bne.n	8005066 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <FLASH_WaitForLastOperation+0x124>)
 8005040:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005042:	e010      	b.n	8005066 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d00c      	beq.n	8005066 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800504c:	f7fc ffbe 	bl	8001fcc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <FLASH_WaitForLastOperation+0x42>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e06a      	b.n	800513c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4b37      	ldr	r3, [pc, #220]	; (8005148 <FLASH_WaitForLastOperation+0x128>)
 800506a:	4013      	ands	r3, r2
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	429a      	cmp	r2, r3
 8005070:	d10a      	bne.n	8005088 <FLASH_WaitForLastOperation+0x68>
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4013      	ands	r3, r2
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	429a      	cmp	r2, r3
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e00c      	b.n	80050a2 <FLASH_WaitForLastOperation+0x82>
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 800508a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800508e:	43da      	mvns	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4013      	ands	r3, r2
 8005094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ce      	bne.n	8005044 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <FLASH_WaitForLastOperation+0x130>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e007      	b.n	80050c8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80050b8:	4b24      	ldr	r3, [pc, #144]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 80050ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <FLASH_WaitForLastOperation+0x130>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <FLASH_WaitForLastOperation+0x134>)
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <FLASH_WaitForLastOperation+0x134>)
 80050dc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <FLASH_WaitForLastOperation+0x128>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d103      	bne.n	80050f2 <FLASH_WaitForLastOperation+0xd2>
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6153      	str	r3, [r2, #20]
 80050f0:	e005      	b.n	80050fe <FLASH_WaitForLastOperation+0xde>
 80050f2:	4a16      	ldr	r2, [pc, #88]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01c      	b.n	800513c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10b      	bne.n	8005120 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d111      	bne.n	800513a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 8005118:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800511c:	615a      	str	r2, [r3, #20]
 800511e:	e00c      	b.n	800513a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 8005122:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512e:	d104      	bne.n	800513a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <FLASH_WaitForLastOperation+0x12c>)
 8005132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005136:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	80000004 	.word	0x80000004
 8005148:	1fef000f 	.word	0x1fef000f
 800514c:	52002000 	.word	0x52002000
 8005150:	17ee0000 	.word	0x17ee0000
 8005154:	24002824 	.word	0x24002824

08005158 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005166:	4b5e      	ldr	r3, [pc, #376]	; (80052e0 <HAL_FLASHEx_Erase+0x188>)
 8005168:	7d1b      	ldrb	r3, [r3, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_FLASHEx_Erase+0x1a>
 800516e:	2302      	movs	r3, #2
 8005170:	e0b2      	b.n	80052d8 <HAL_FLASHEx_Erase+0x180>
 8005172:	4b5b      	ldr	r3, [pc, #364]	; (80052e0 <HAL_FLASHEx_Erase+0x188>)
 8005174:	2201      	movs	r2, #1
 8005176:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005178:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_FLASHEx_Erase+0x188>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800518a:	2101      	movs	r1, #1
 800518c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005190:	f7ff ff46 	bl	8005020 <FLASH_WaitForLastOperation>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80051aa:	2102      	movs	r1, #2
 80051ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051b0:	f7ff ff36 	bl	8005020 <FLASH_WaitForLastOperation>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 8085 	bne.w	80052d0 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d136      	bne.n	800523c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f000 f887 	bl	80052ec <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00f      	beq.n	800520a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80051ea:	2101      	movs	r1, #1
 80051ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051f0:	f7ff ff16 	bl	8005020 <FLASH_WaitForLastOperation>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a38      	ldr	r2, [pc, #224]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 8005204:	f023 0308 	bic.w	r3, r3, #8
 8005208:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d05c      	beq.n	80052d0 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8005216:	2102      	movs	r1, #2
 8005218:	f24c 3050 	movw	r0, #50000	; 0xc350
 800521c:	f7ff ff00 	bl	8005020 <FLASH_WaitForLastOperation>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800522a:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 800522c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005230:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 8005232:	f023 0308 	bic.w	r3, r3, #8
 8005236:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800523a:	e049      	b.n	80052d0 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	e039      	b.n	80052c0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	461a      	mov	r2, r3
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f000 f8b2 	bl	80053c0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8005268:	2101      	movs	r1, #1
 800526a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800526e:	f7ff fed7 	bl	8005020 <FLASH_WaitForLastOperation>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	491a      	ldr	r1, [pc, #104]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_FLASHEx_Erase+0x190>)
 800527e:	4013      	ands	r3, r2
 8005280:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800528e:	2102      	movs	r1, #2
 8005290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005294:	f7ff fec4 	bl	8005020 <FLASH_WaitForLastOperation>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 800529e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80052a2:	4910      	ldr	r1, [pc, #64]	; (80052e4 <HAL_FLASHEx_Erase+0x18c>)
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_FLASHEx_Erase+0x190>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	601a      	str	r2, [r3, #0]
          break;
 80052b8:	e00a      	b.n	80052d0 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3301      	adds	r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3bd      	bcc.n	800524c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_FLASHEx_Erase+0x188>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	751a      	strb	r2, [r3, #20]

  return status;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	24002824 	.word	0x24002824
 80052e4:	52002000 	.word	0x52002000
 80052e8:	fffff8fb 	.word	0xfffff8fb

080052ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d122      	bne.n	8005346 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8005300:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <FLASH_MassErase+0xd0>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <FLASH_MassErase+0xd0>)
 8005306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800530a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800530c:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <FLASH_MassErase+0xd0>)
 800530e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <FLASH_MassErase+0xd0>)
 8005314:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005318:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800531c:	4b27      	ldr	r3, [pc, #156]	; (80053bc <FLASH_MassErase+0xd0>)
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	4926      	ldr	r1, [pc, #152]	; (80053bc <FLASH_MassErase+0xd0>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4313      	orrs	r3, r2
 8005326:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8005328:	4b24      	ldr	r3, [pc, #144]	; (80053bc <FLASH_MassErase+0xd0>)
 800532a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800532e:	4923      	ldr	r1, [pc, #140]	; (80053bc <FLASH_MassErase+0xd0>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <FLASH_MassErase+0xd0>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <FLASH_MassErase+0xd0>)
 800533e:	f043 0310 	orr.w	r3, r3, #16
 8005342:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8005344:	e033      	b.n	80053ae <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <FLASH_MassErase+0xd0>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <FLASH_MassErase+0xd0>)
 8005356:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800535a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <FLASH_MassErase+0xd0>)
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	4916      	ldr	r1, [pc, #88]	; (80053bc <FLASH_MassErase+0xd0>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4313      	orrs	r3, r2
 8005366:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <FLASH_MassErase+0xd0>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4a13      	ldr	r2, [pc, #76]	; (80053bc <FLASH_MassErase+0xd0>)
 800536e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8005372:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <FLASH_MassErase+0xd0>)
 8005380:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <FLASH_MassErase+0xd0>)
 8005386:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800538a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <FLASH_MassErase+0xd0>)
 8005390:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005394:	4909      	ldr	r1, [pc, #36]	; (80053bc <FLASH_MassErase+0xd0>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <FLASH_MassErase+0xd0>)
 80053a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80053a4:	4a05      	ldr	r2, [pc, #20]	; (80053bc <FLASH_MassErase+0xd0>)
 80053a6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80053aa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	52002000 	.word	0x52002000

080053c0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d010      	beq.n	80053f8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <FLASH_Erase_Sector+0x78>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <FLASH_Erase_Sector+0x78>)
 80053dc:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80053e0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <FLASH_Erase_Sector+0x78>)
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0219      	lsls	r1, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	4313      	orrs	r3, r2
 80053f0:	4a11      	ldr	r2, [pc, #68]	; (8005438 <FLASH_Erase_Sector+0x78>)
 80053f2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80053f6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d014      	beq.n	800542c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <FLASH_Erase_Sector+0x78>)
 8005404:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <FLASH_Erase_Sector+0x78>)
 800540a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800540e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <FLASH_Erase_Sector+0x78>)
 8005414:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	0219      	lsls	r1, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	430b      	orrs	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	4a05      	ldr	r2, [pc, #20]	; (8005438 <FLASH_Erase_Sector+0x78>)
 8005424:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8005428:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	52002000 	.word	0x52002000

0800543c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_GPIO_Init+0x234>)
 800544c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800544e:	e194      	b.n	800577a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2101      	movs	r1, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	4013      	ands	r3, r2
 800545e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8186 	beq.w	8005774 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d005      	beq.n	8005480 <HAL_GPIO_Init+0x44>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d130      	bne.n	80054e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	2203      	movs	r2, #3
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054b6:	2201      	movs	r2, #1
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 0201 	and.w	r2, r3, #1
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d017      	beq.n	800551e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2203      	movs	r2, #3
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d123      	bne.n	8005572 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	08da      	lsrs	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3208      	adds	r2, #8
 8005532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	220f      	movs	r2, #15
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	08da      	lsrs	r2, r3, #3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3208      	adds	r2, #8
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	2203      	movs	r2, #3
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0203 	and.w	r2, r3, #3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80e0 	beq.w	8005774 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b4:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <HAL_GPIO_Init+0x238>)
 80055b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055ba:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <HAL_GPIO_Init+0x238>)
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80055c4:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <HAL_GPIO_Init+0x238>)
 80055c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055d2:	4a29      	ldr	r2, [pc, #164]	; (8005678 <HAL_GPIO_Init+0x23c>)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3302      	adds	r3, #2
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	220f      	movs	r2, #15
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_GPIO_Init+0x240>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d052      	beq.n	80056a4 <HAL_GPIO_Init+0x268>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_GPIO_Init+0x244>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d031      	beq.n	800566a <HAL_GPIO_Init+0x22e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <HAL_GPIO_Init+0x248>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d02b      	beq.n	8005666 <HAL_GPIO_Init+0x22a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <HAL_GPIO_Init+0x24c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d025      	beq.n	8005662 <HAL_GPIO_Init+0x226>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <HAL_GPIO_Init+0x250>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <HAL_GPIO_Init+0x222>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_GPIO_Init+0x254>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d019      	beq.n	800565a <HAL_GPIO_Init+0x21e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <HAL_GPIO_Init+0x258>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_GPIO_Init+0x21a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_GPIO_Init+0x25c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00d      	beq.n	8005652 <HAL_GPIO_Init+0x216>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a18      	ldr	r2, [pc, #96]	; (800569c <HAL_GPIO_Init+0x260>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <HAL_GPIO_Init+0x212>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <HAL_GPIO_Init+0x264>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_GPIO_Init+0x20e>
 8005646:	2309      	movs	r3, #9
 8005648:	e02d      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800564a:	230a      	movs	r3, #10
 800564c:	e02b      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800564e:	2308      	movs	r3, #8
 8005650:	e029      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 8005652:	2307      	movs	r3, #7
 8005654:	e027      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 8005656:	2306      	movs	r3, #6
 8005658:	e025      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800565a:	2305      	movs	r3, #5
 800565c:	e023      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800565e:	2304      	movs	r3, #4
 8005660:	e021      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 8005662:	2303      	movs	r3, #3
 8005664:	e01f      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 8005666:	2302      	movs	r3, #2
 8005668:	e01d      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800566a:	2301      	movs	r3, #1
 800566c:	e01b      	b.n	80056a6 <HAL_GPIO_Init+0x26a>
 800566e:	bf00      	nop
 8005670:	58000080 	.word	0x58000080
 8005674:	58024400 	.word	0x58024400
 8005678:	58000400 	.word	0x58000400
 800567c:	58020000 	.word	0x58020000
 8005680:	58020400 	.word	0x58020400
 8005684:	58020800 	.word	0x58020800
 8005688:	58020c00 	.word	0x58020c00
 800568c:	58021000 	.word	0x58021000
 8005690:	58021400 	.word	0x58021400
 8005694:	58021800 	.word	0x58021800
 8005698:	58021c00 	.word	0x58021c00
 800569c:	58022000 	.word	0x58022000
 80056a0:	58022400 	.word	0x58022400
 80056a4:	2300      	movs	r3, #0
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	f002 0203 	and.w	r2, r2, #3
 80056ac:	0092      	lsls	r2, r2, #2
 80056ae:	4093      	lsls	r3, r2
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b6:	4938      	ldr	r1, [pc, #224]	; (8005798 <HAL_GPIO_Init+0x35c>)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	3302      	adds	r3, #2
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	43db      	mvns	r3, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	f47f ae63 	bne.w	8005450 <HAL_GPIO_Init+0x14>
  }
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	3724      	adds	r7, #36	; 0x24
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	58000400 	.word	0x58000400

0800579c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_PWREx_ConfigSupply+0x70>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d00a      	beq.n	80057c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_PWREx_ConfigSupply+0x70>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d001      	beq.n	80057c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e01f      	b.n	8005802 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e01d      	b.n	8005802 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_PWREx_ConfigSupply+0x70>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f023 0207 	bic.w	r2, r3, #7
 80057ce:	490f      	ldr	r1, [pc, #60]	; (800580c <HAL_PWREx_ConfigSupply+0x70>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057d6:	f7fc fbf9 	bl	8001fcc <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057dc:	e009      	b.n	80057f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057de:	f7fc fbf5 	bl	8001fcc <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ec:	d901      	bls.n	80057f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e007      	b.n	8005802 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_PWREx_ConfigSupply+0x70>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d1ee      	bne.n	80057de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	58024800 	.word	0x58024800

08005810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f000 bc1d 	b.w	800605e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8087 	beq.w	8005940 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005832:	4b99      	ldr	r3, [pc, #612]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800583c:	4b96      	ldr	r3, [pc, #600]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	2b10      	cmp	r3, #16
 8005846:	d007      	beq.n	8005858 <HAL_RCC_OscConfig+0x48>
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b18      	cmp	r3, #24
 800584c:	d110      	bne.n	8005870 <HAL_RCC_OscConfig+0x60>
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d10b      	bne.n	8005870 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	4b8f      	ldr	r3, [pc, #572]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d06c      	beq.n	800593e <HAL_RCC_OscConfig+0x12e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d168      	bne.n	800593e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e3f6      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d106      	bne.n	8005888 <HAL_RCC_OscConfig+0x78>
 800587a:	4b87      	ldr	r3, [pc, #540]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a86      	ldr	r2, [pc, #536]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e02e      	b.n	80058e6 <HAL_RCC_OscConfig+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <HAL_RCC_OscConfig+0x9a>
 8005890:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4b7e      	ldr	r3, [pc, #504]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7d      	ldr	r2, [pc, #500]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e01d      	b.n	80058e6 <HAL_RCC_OscConfig+0xd6>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b2:	d10c      	bne.n	80058ce <HAL_RCC_OscConfig+0xbe>
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a77      	ldr	r2, [pc, #476]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b75      	ldr	r3, [pc, #468]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a74      	ldr	r2, [pc, #464]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e00b      	b.n	80058e6 <HAL_RCC_OscConfig+0xd6>
 80058ce:	4b72      	ldr	r3, [pc, #456]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a71      	ldr	r2, [pc, #452]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	4b6f      	ldr	r3, [pc, #444]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6e      	ldr	r2, [pc, #440]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80058e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc fb6d 	bl	8001fcc <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f6:	f7fc fb69 	bl	8001fcc <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e3aa      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005908:	4b63      	ldr	r3, [pc, #396]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0xe6>
 8005914:	e014      	b.n	8005940 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fc fb59 	bl	8001fcc <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591e:	f7fc fb55 	bl	8001fcc <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b64      	cmp	r3, #100	; 0x64
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e396      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005930:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x10e>
 800593c:	e000      	b.n	8005940 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80cb 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b52      	ldr	r3, [pc, #328]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005956:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005958:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_RCC_OscConfig+0x164>
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b18      	cmp	r3, #24
 8005968:	d156      	bne.n	8005a18 <HAL_RCC_OscConfig+0x208>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d151      	bne.n	8005a18 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_OscConfig+0x17c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e368      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800598c:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f023 0219 	bic.w	r2, r3, #25
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	493f      	ldr	r1, [pc, #252]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800599e:	f7fc fb15 	bl	8001fcc <HAL_GetTick>
 80059a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a6:	f7fc fb11 	bl	8001fcc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e352      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c4:	f7fc fb0e 	bl	8001fe4 <HAL_GetREVID>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d817      	bhi.n	8005a02 <HAL_RCC_OscConfig+0x1f2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d108      	bne.n	80059ec <HAL_RCC_OscConfig+0x1dc>
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059e2:	4a2d      	ldr	r2, [pc, #180]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059ea:	e07b      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	4927      	ldr	r1, [pc, #156]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a00:	e070      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	4921      	ldr	r1, [pc, #132]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a16:	e065      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d048      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f023 0219 	bic.w	r2, r3, #25
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	491a      	ldr	r1, [pc, #104]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fc facb 	bl	8001fcc <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3a:	f7fc fac7 	bl	8001fcc <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e308      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4c:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a58:	f7fc fac4 	bl	8001fe4 <HAL_GetREVID>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d81a      	bhi.n	8005a9c <HAL_RCC_OscConfig+0x28c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCC_OscConfig+0x270>
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a76:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7c:	6053      	str	r3, [r2, #4]
 8005a7e:	e031      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	031b      	lsls	r3, r3, #12
 8005a8e:	4902      	ldr	r1, [pc, #8]	; (8005a98 <HAL_RCC_OscConfig+0x288>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
 8005a94:	e026      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	4b9a      	ldr	r3, [pc, #616]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	4997      	ldr	r1, [pc, #604]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
 8005ab0:	e018      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab2:	4b95      	ldr	r3, [pc, #596]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a94      	ldr	r2, [pc, #592]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abe:	f7fc fa85 	bl	8001fcc <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac6:	f7fc fa81 	bl	8001fcc <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e2c2      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ad8:	4b8b      	ldr	r3, [pc, #556]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f0      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a9 	beq.w	8005c44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af2:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005afa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005afc:	4b82      	ldr	r3, [pc, #520]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d007      	beq.n	8005b18 <HAL_RCC_OscConfig+0x308>
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b18      	cmp	r3, #24
 8005b0c:	d13a      	bne.n	8005b84 <HAL_RCC_OscConfig+0x374>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d135      	bne.n	8005b84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b18:	4b7b      	ldr	r3, [pc, #492]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_OscConfig+0x320>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e296      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b30:	f7fc fa58 	bl	8001fe4 <HAL_GetREVID>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d817      	bhi.n	8005b6e <HAL_RCC_OscConfig+0x35e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d108      	bne.n	8005b58 <HAL_RCC_OscConfig+0x348>
 8005b46:	4b70      	ldr	r3, [pc, #448]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b4e:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b56:	e075      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b58:	4b6b      	ldr	r3, [pc, #428]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	069b      	lsls	r3, r3, #26
 8005b66:	4968      	ldr	r1, [pc, #416]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b6c:	e06a      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b6e:	4b66      	ldr	r3, [pc, #408]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	4962      	ldr	r1, [pc, #392]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b82:	e05f      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d042      	beq.n	8005c12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b8c:	4b5e      	ldr	r3, [pc, #376]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5d      	ldr	r2, [pc, #372]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc fa18 	bl	8001fcc <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ba0:	f7fc fa14 	bl	8001fcc <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e255      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bb2:	4b55      	ldr	r3, [pc, #340]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bbe:	f7fc fa11 	bl	8001fe4 <HAL_GetREVID>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d817      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x3ec>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d108      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3d6>
 8005bd4:	4b4c      	ldr	r3, [pc, #304]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005bdc:	4a4a      	ldr	r2, [pc, #296]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e02e      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	069b      	lsls	r3, r3, #26
 8005bf4:	4944      	ldr	r1, [pc, #272]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	604b      	str	r3, [r1, #4]
 8005bfa:	e023      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
 8005bfc:	4b42      	ldr	r3, [pc, #264]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	493f      	ldr	r1, [pc, #252]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60cb      	str	r3, [r1, #12]
 8005c10:	e018      	b.n	8005c44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c12:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fc f9d5 	bl	8001fcc <HAL_GetTick>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c26:	f7fc f9d1 	bl	8001fcc <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e212      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c38:	4b33      	ldr	r3, [pc, #204]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d036      	beq.n	8005cbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d019      	beq.n	8005c8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c58:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fc f9b2 	bl	8001fcc <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6c:	f7fc f9ae 	bl	8001fcc <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e1ef      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x45c>
 8005c8a:	e018      	b.n	8005cbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fc f998 	bl	8001fcc <HAL_GetTick>
 8005c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fc f994 	bl	8001fcc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1d5      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d039      	beq.n	8005d3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0c      	ldr	r2, [pc, #48]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cde:	f7fc f975 	bl	8001fcc <HAL_GetTick>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ce6:	f7fc f971 	bl	8001fcc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1b2      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCC_OscConfig+0x4f8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x4d6>
 8005d04:	e01b      	b.n	8005d3e <HAL_RCC_OscConfig+0x52e>
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d0c:	4b9b      	ldr	r3, [pc, #620]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a9a      	ldr	r2, [pc, #616]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d18:	f7fc f958 	bl	8001fcc <HAL_GetTick>
 8005d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d20:	f7fc f954 	bl	8001fcc <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e195      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d32:	4b92      	ldr	r3, [pc, #584]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8081 	beq.w	8005e4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d4c:	4b8c      	ldr	r3, [pc, #560]	; (8005f80 <HAL_RCC_OscConfig+0x770>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a8b      	ldr	r2, [pc, #556]	; (8005f80 <HAL_RCC_OscConfig+0x770>)
 8005d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d58:	f7fc f938 	bl	8001fcc <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d60:	f7fc f934 	bl	8001fcc <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e175      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d72:	4b83      	ldr	r3, [pc, #524]	; (8005f80 <HAL_RCC_OscConfig+0x770>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d106      	bne.n	8005d94 <HAL_RCC_OscConfig+0x584>
 8005d86:	4b7d      	ldr	r3, [pc, #500]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
 8005d92:	e02d      	b.n	8005df0 <HAL_RCC_OscConfig+0x5e0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCC_OscConfig+0x5a6>
 8005d9c:	4b77      	ldr	r3, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da0:	4a76      	ldr	r2, [pc, #472]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	6713      	str	r3, [r2, #112]	; 0x70
 8005da8:	4b74      	ldr	r3, [pc, #464]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	4a73      	ldr	r2, [pc, #460]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dae:	f023 0304 	bic.w	r3, r3, #4
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
 8005db4:	e01c      	b.n	8005df0 <HAL_RCC_OscConfig+0x5e0>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x5c8>
 8005dbe:	4b6f      	ldr	r3, [pc, #444]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	4a6e      	ldr	r2, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dca:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0x5e0>
 8005dd8:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	4a67      	ldr	r2, [pc, #412]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70
 8005de4:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4a64      	ldr	r2, [pc, #400]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fc f8e8 	bl	8001fcc <HAL_GetTick>
 8005dfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fc f8e4 	bl	8001fcc <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e123      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e16:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ee      	beq.n	8005e00 <HAL_RCC_OscConfig+0x5f0>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e24:	f7fc f8d2 	bl	8001fcc <HAL_GetTick>
 8005e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fc f8ce 	bl	8001fcc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e10d      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e42:	4b4e      	ldr	r3, [pc, #312]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1ee      	bne.n	8005e2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8102 	beq.w	800605c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e58:	4b48      	ldr	r3, [pc, #288]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e60:	2b18      	cmp	r3, #24
 8005e62:	f000 80bd 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	f040 809e 	bne.w	8005fac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e70:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fc f8a6 	bl	8001fcc <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fc f8a2 	bl	8001fcc <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0e3      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ea6:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <HAL_RCC_OscConfig+0x774>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	4931      	ldr	r1, [pc, #196]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	628b      	str	r3, [r1, #40]	; 0x28
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	025b      	lsls	r3, r3, #9
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eec:	4923      	ldr	r1, [pc, #140]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f02:	4b21      	ldr	r3, [pc, #132]	; (8005f88 <HAL_RCC_OscConfig+0x778>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f0a:	00d2      	lsls	r2, r2, #3
 8005f0c:	491b      	ldr	r1, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	f023 020c 	bic.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	4917      	ldr	r1, [pc, #92]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	f023 0202 	bic.w	r2, r3, #2
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	4912      	ldr	r1, [pc, #72]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <HAL_RCC_OscConfig+0x76c>)
 8005f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fc f82b 	bl	8001fcc <HAL_GetTick>
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f78:	e011      	b.n	8005f9e <HAL_RCC_OscConfig+0x78e>
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	58024800 	.word	0x58024800
 8005f84:	fffffc0c 	.word	0xfffffc0c
 8005f88:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fc f81e 	bl	8001fcc <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e05f      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f9e:	4b32      	ldr	r3, [pc, #200]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x77c>
 8005faa:	e057      	b.n	800605c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fc f808 	bl	8001fcc <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fc f804 	bl	8001fcc <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e045      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd2:	4b25      	ldr	r3, [pc, #148]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x7b0>
 8005fde:	e03d      	b.n	800605c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_RCC_OscConfig+0x858>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d031      	beq.n	8006058 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f003 0203 	and.w	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d12a      	bne.n	8006058 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600e:	429a      	cmp	r2, r3
 8006010:	d122      	bne.n	8006058 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800601e:	429a      	cmp	r2, r3
 8006020:	d11a      	bne.n	8006058 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	0a5b      	lsrs	r3, r3, #9
 8006026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d111      	bne.n	8006058 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006042:	429a      	cmp	r2, r3
 8006044:	d108      	bne.n	8006058 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	0e1b      	lsrs	r3, r3, #24
 800604a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d001      	beq.n	800605c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3730      	adds	r7, #48	; 0x30
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400

0800606c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e19c      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006080:	4b8a      	ldr	r3, [pc, #552]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d910      	bls.n	80060b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608e:	4b87      	ldr	r3, [pc, #540]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 020f 	bic.w	r2, r3, #15
 8006096:	4985      	ldr	r1, [pc, #532]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800609e:	4b83      	ldr	r3, [pc, #524]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d001      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e184      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	4b7b      	ldr	r3, [pc, #492]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d908      	bls.n	80060de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060cc:	4b78      	ldr	r3, [pc, #480]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	4975      	ldr	r1, [pc, #468]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	4b70      	ldr	r3, [pc, #448]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d908      	bls.n	800610c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060fa:	4b6d      	ldr	r3, [pc, #436]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	496a      	ldr	r1, [pc, #424]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006108:	4313      	orrs	r3, r2
 800610a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	4b64      	ldr	r3, [pc, #400]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006124:	429a      	cmp	r2, r3
 8006126:	d908      	bls.n	800613a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006128:	4b61      	ldr	r3, [pc, #388]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	495e      	ldr	r1, [pc, #376]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006136:	4313      	orrs	r3, r2
 8006138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d010      	beq.n	8006168 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	4b59      	ldr	r3, [pc, #356]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006152:	429a      	cmp	r2, r3
 8006154:	d908      	bls.n	8006168 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006156:	4b56      	ldr	r3, [pc, #344]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	4953      	ldr	r1, [pc, #332]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006164:	4313      	orrs	r3, r2
 8006166:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d010      	beq.n	8006196 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	4b4d      	ldr	r3, [pc, #308]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	429a      	cmp	r2, r3
 8006182:	d908      	bls.n	8006196 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006184:	4b4a      	ldr	r3, [pc, #296]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f023 020f 	bic.w	r2, r3, #15
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4947      	ldr	r1, [pc, #284]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006192:	4313      	orrs	r3, r2
 8006194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d055      	beq.n	800624e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061a2:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4940      	ldr	r1, [pc, #256]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061bc:	4b3c      	ldr	r3, [pc, #240]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d121      	bne.n	800620c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0f6      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061d4:	4b36      	ldr	r3, [pc, #216]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d115      	bne.n	800620c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0ea      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ec:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0de      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061fc:	4b2c      	ldr	r3, [pc, #176]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0d6      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800620c:	4b28      	ldr	r3, [pc, #160]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f023 0207 	bic.w	r2, r3, #7
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4925      	ldr	r1, [pc, #148]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800621a:	4313      	orrs	r3, r2
 800621c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621e:	f7fb fed5 	bl	8001fcc <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006224:	e00a      	b.n	800623c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006226:	f7fb fed1 	bl	8001fcc <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f241 3288 	movw	r2, #5000	; 0x1388
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e0be      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	429a      	cmp	r2, r3
 800624c:	d1eb      	bne.n	8006226 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d010      	beq.n	800627c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	4b14      	ldr	r3, [pc, #80]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	429a      	cmp	r2, r3
 8006268:	d208      	bcs.n	800627c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f023 020f 	bic.w	r2, r3, #15
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	490e      	ldr	r1, [pc, #56]	; (80062b0 <HAL_RCC_ClockConfig+0x244>)
 8006278:	4313      	orrs	r3, r2
 800627a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d214      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 020f 	bic.w	r2, r3, #15
 8006292:	4906      	ldr	r1, [pc, #24]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629a:	4b04      	ldr	r3, [pc, #16]	; (80062ac <HAL_RCC_ClockConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e086      	b.n	80063ba <HAL_RCC_ClockConfig+0x34e>
 80062ac:	52002000 	.word	0x52002000
 80062b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d208      	bcs.n	80062e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062d0:	4b3c      	ldr	r3, [pc, #240]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4939      	ldr	r1, [pc, #228]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d010      	beq.n	8006310 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d208      	bcs.n	8006310 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	492e      	ldr	r1, [pc, #184]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 800630c:	4313      	orrs	r3, r2
 800630e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d010      	beq.n	800633e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006328:	429a      	cmp	r2, r3
 800632a:	d208      	bcs.n	800633e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	4922      	ldr	r1, [pc, #136]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 800633a:	4313      	orrs	r3, r2
 800633c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d010      	beq.n	800636c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006356:	429a      	cmp	r2, r3
 8006358:	d208      	bcs.n	800636c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800635a:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	4917      	ldr	r1, [pc, #92]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 8006368:	4313      	orrs	r3, r2
 800636a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800636c:	f000 f834 	bl	80063d8 <HAL_RCC_GetSysClockFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	4912      	ldr	r1, [pc, #72]	; (80063c8 <HAL_RCC_ClockConfig+0x35c>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_RCC_ClockConfig+0x358>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <HAL_RCC_ClockConfig+0x35c>)
 8006394:	5cd3      	ldrb	r3, [r2, r3]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <HAL_RCC_ClockConfig+0x360>)
 80063a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063a4:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x364>)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_RCC_ClockConfig+0x368>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa ff20 	bl	80011f4 <HAL_InitTick>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
 80063c8:	0800eeac 	.word	0x0800eeac
 80063cc:	24000004 	.word	0x24000004
 80063d0:	24000000 	.word	0x24000000
 80063d4:	24000008 	.word	0x24000008

080063d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	; 0x24
 80063dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063de:	4bb3      	ldr	r3, [pc, #716]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e6:	2b18      	cmp	r3, #24
 80063e8:	f200 8155 	bhi.w	8006696 <HAL_RCC_GetSysClockFreq+0x2be>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006459 	.word	0x08006459
 80063f8:	08006697 	.word	0x08006697
 80063fc:	08006697 	.word	0x08006697
 8006400:	08006697 	.word	0x08006697
 8006404:	08006697 	.word	0x08006697
 8006408:	08006697 	.word	0x08006697
 800640c:	08006697 	.word	0x08006697
 8006410:	08006697 	.word	0x08006697
 8006414:	0800647f 	.word	0x0800647f
 8006418:	08006697 	.word	0x08006697
 800641c:	08006697 	.word	0x08006697
 8006420:	08006697 	.word	0x08006697
 8006424:	08006697 	.word	0x08006697
 8006428:	08006697 	.word	0x08006697
 800642c:	08006697 	.word	0x08006697
 8006430:	08006697 	.word	0x08006697
 8006434:	08006485 	.word	0x08006485
 8006438:	08006697 	.word	0x08006697
 800643c:	08006697 	.word	0x08006697
 8006440:	08006697 	.word	0x08006697
 8006444:	08006697 	.word	0x08006697
 8006448:	08006697 	.word	0x08006697
 800644c:	08006697 	.word	0x08006697
 8006450:	08006697 	.word	0x08006697
 8006454:	0800648b 	.word	0x0800648b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006458:	4b94      	ldr	r3, [pc, #592]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006464:	4b91      	ldr	r3, [pc, #580]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	08db      	lsrs	r3, r3, #3
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	4a90      	ldr	r2, [pc, #576]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
 8006474:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006476:	e111      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006478:	4b8d      	ldr	r3, [pc, #564]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800647a:	61bb      	str	r3, [r7, #24]
    break;
 800647c:	e10e      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800647e:	4b8d      	ldr	r3, [pc, #564]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006480:	61bb      	str	r3, [r7, #24]
    break;
 8006482:	e10b      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006484:	4b8c      	ldr	r3, [pc, #560]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006486:	61bb      	str	r3, [r7, #24]
    break;
 8006488:	e108      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800648a:	4b88      	ldr	r3, [pc, #544]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006494:	4b85      	ldr	r3, [pc, #532]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064a0:	4b82      	ldr	r3, [pc, #520]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80064aa:	4b80      	ldr	r3, [pc, #512]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80e1 	beq.w	8006690 <HAL_RCC_GetSysClockFreq+0x2b8>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	f000 8083 	beq.w	80065dc <HAL_RCC_GetSysClockFreq+0x204>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	f200 80a1 	bhi.w	8006620 <HAL_RCC_GetSysClockFreq+0x248>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0x114>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d056      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ea:	e099      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ec:	4b6f      	ldr	r3, [pc, #444]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d02d      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064f8:	4b6c      	ldr	r3, [pc, #432]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	08db      	lsrs	r3, r3, #3
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	4a6b      	ldr	r2, [pc, #428]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
 8006508:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006522:	4b62      	ldr	r3, [pc, #392]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006532:	ed97 6a02 	vldr	s12, [r7, #8]
 8006536:	eddf 5a61 	vldr	s11, [pc, #388]	; 80066bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800653a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006552:	e087      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80066c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006566:	4b51      	ldr	r3, [pc, #324]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006576:	ed97 6a02 	vldr	s12, [r7, #8]
 800657a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80066bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800657e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006596:	e065      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80066c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065aa:	4b40      	ldr	r3, [pc, #256]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80065be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80066bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065da:	e043      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80066c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ee:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006602:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80066bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800661e:	e021      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80066c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800662e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006642:	ed97 6a02 	vldr	s12, [r7, #8]
 8006646:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80066bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800664a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006662:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	0a5b      	lsrs	r3, r3, #9
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	3301      	adds	r3, #1
 8006670:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800667c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006688:	ee17 3a90 	vmov	r3, s15
 800668c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800668e:	e005      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
    break;
 8006694:	e002      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006698:	61bb      	str	r3, [r7, #24]
    break;
 800669a:	bf00      	nop
  }

  return sysclockfreq;
 800669c:	69bb      	ldr	r3, [r7, #24]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3724      	adds	r7, #36	; 0x24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	58024400 	.word	0x58024400
 80066b0:	03d09000 	.word	0x03d09000
 80066b4:	003d0900 	.word	0x003d0900
 80066b8:	017d7840 	.word	0x017d7840
 80066bc:	46000000 	.word	0x46000000
 80066c0:	4c742400 	.word	0x4c742400
 80066c4:	4a742400 	.word	0x4a742400
 80066c8:	4bbebc20 	.word	0x4bbebc20

080066cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066d2:	f7ff fe81 	bl	80063d8 <HAL_RCC_GetSysClockFreq>
 80066d6:	4602      	mov	r2, r0
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <HAL_RCC_GetHCLKFreq+0x50>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	490f      	ldr	r1, [pc, #60]	; (8006720 <HAL_RCC_GetHCLKFreq+0x54>)
 80066e4:	5ccb      	ldrb	r3, [r1, r3]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <HAL_RCC_GetHCLKFreq+0x50>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <HAL_RCC_GetHCLKFreq+0x54>)
 80066fa:	5cd3      	ldrb	r3, [r2, r3]
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	4a07      	ldr	r2, [pc, #28]	; (8006724 <HAL_RCC_GetHCLKFreq+0x58>)
 8006708:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800670a:	4a07      	ldr	r2, [pc, #28]	; (8006728 <HAL_RCC_GetHCLKFreq+0x5c>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <HAL_RCC_GetHCLKFreq+0x58>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	58024400 	.word	0x58024400
 8006720:	0800eeac 	.word	0x0800eeac
 8006724:	24000004 	.word	0x24000004
 8006728:	24000000 	.word	0x24000000

0800672c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006730:	f7ff ffcc 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4904      	ldr	r1, [pc, #16]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800674c:	4618      	mov	r0, r3
 800674e:	bd80      	pop	{r7, pc}
 8006750:	58024400 	.word	0x58024400
 8006754:	0800eeac 	.word	0x0800eeac

08006758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800675c:	f7ff ffb6 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8006760:	4602      	mov	r2, r0
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	4904      	ldr	r1, [pc, #16]	; (8006780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	f003 031f 	and.w	r3, r3, #31
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006778:	4618      	mov	r0, r3
 800677a:	bd80      	pop	{r7, pc}
 800677c:	58024400 	.word	0x58024400
 8006780:	0800eeac 	.word	0x0800eeac

08006784 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	223f      	movs	r2, #63	; 0x3f
 8006792:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0207 	and.w	r2, r3, #7
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80067ac:	4b14      	ldr	r3, [pc, #80]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 020f 	and.w	r2, r3, #15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCC_GetClockConfig+0x7c>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_RCC_GetClockConfig+0x80>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	58024400 	.word	0x58024400
 8006804:	52002000 	.word	0x52002000

08006808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006814:	2300      	movs	r3, #0
 8006816:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d03f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800682c:	d02a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800682e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006832:	d824      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006838:	d018      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800683a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683e:	d81e      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006848:	d007      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800684a:	e018      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800684c:	4ba3      	ldr	r3, [pc, #652]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	4aa2      	ldr	r2, [pc, #648]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006858:	e015      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f9d5 	bl	8007c10 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800686a:	e00c      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3324      	adds	r3, #36	; 0x24
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fa7e 	bl	8007d74 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800687c:	e003      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
      break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800688c:	4b93      	ldr	r3, [pc, #588]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006898:	4990      	ldr	r1, [pc, #576]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800689a:	4313      	orrs	r3, r2
 800689c:	650b      	str	r3, [r1, #80]	; 0x50
 800689e:	e001      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d03d      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d826      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068d5 	.word	0x080068d5
 80068c4:	080068e3 	.word	0x080068e3
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	4a80      	ldr	r2, [pc, #512]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068e0:	e015      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3304      	adds	r3, #4
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f991 	bl	8007c10 <RCCEx_PLL2_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068f2:	e00c      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fa3a 	bl	8007d74 <RCCEx_PLL3_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006904:	e003      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
      break;
 800690a:	e000      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800690c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006914:	4b71      	ldr	r3, [pc, #452]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	f023 0207 	bic.w	r2, r3, #7
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006920:	496e      	ldr	r1, [pc, #440]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006922:	4313      	orrs	r3, r2
 8006924:	650b      	str	r3, [r1, #80]	; 0x50
 8006926:	e001      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006934:	2b00      	cmp	r3, #0
 8006936:	d042      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006940:	d02b      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	d825      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006948:	2bc0      	cmp	r3, #192	; 0xc0
 800694a:	d028      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800694c:	2bc0      	cmp	r3, #192	; 0xc0
 800694e:	d821      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006950:	2b80      	cmp	r3, #128	; 0x80
 8006952:	d016      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d81d      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d007      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006960:	e018      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006962:	4b5e      	ldr	r3, [pc, #376]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	4a5d      	ldr	r2, [pc, #372]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800696e:	e017      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f94a 	bl	8007c10 <RCCEx_PLL2_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006980:	e00e      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 f9f3 	bl	8007d74 <RCCEx_PLL3_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006992:	e005      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
      break;
 8006998:	e002      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800699a:	bf00      	nop
 800699c:	e000      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800699e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80069a6:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	494a      	ldr	r1, [pc, #296]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	650b      	str	r3, [r1, #80]	; 0x50
 80069b8:	e001      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d049      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d4:	d030      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80069d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069da:	d82a      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069e0:	d02c      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80069e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069e6:	d824      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ec:	d018      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f2:	d81e      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80069f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069fc:	d007      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80069fe:	e018      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a35      	ldr	r2, [pc, #212]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a0c:	e017      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f8fb 	bl	8007c10 <RCCEx_PLL2_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006a1e:	e00e      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3324      	adds	r3, #36	; 0x24
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f9a4 	bl	8007d74 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a30:	e005      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
      break;
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a52:	4922      	ldr	r1, [pc, #136]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	658b      	str	r3, [r1, #88]	; 0x58
 8006a58:	e001      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d04b      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a74:	d030      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a7a:	d82a      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a80:	d02e      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006a82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a86:	d824      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a8c:	d018      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a92:	d81e      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a9c:	d007      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006a9e:	e018      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aac:	e019      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f8ab 	bl	8007c10 <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006abe:	e010      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f954 	bl	8007d74 <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ad0:	e007      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad6:	e004      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006ad8:	bf00      	nop
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006adc:	58024400 	.word	0x58024400
      break;
 8006ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ae8:	4b99      	ldr	r3, [pc, #612]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006af6:	4996      	ldr	r1, [pc, #600]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	658b      	str	r3, [r1, #88]	; 0x58
 8006afc:	e001      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d032      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	2b30      	cmp	r3, #48	; 0x30
 8006b14:	d01c      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006b16:	2b30      	cmp	r3, #48	; 0x30
 8006b18:	d817      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d00c      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d813      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d016      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d10f      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2a:	4b89      	ldr	r3, [pc, #548]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	4a88      	ldr	r2, [pc, #544]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b36:	e00e      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f866 	bl	8007c10 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006b48:	e005      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b5c:	4b7c      	ldr	r3, [pc, #496]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b68:	4979      	ldr	r1, [pc, #484]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b6e:	e001      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d047      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b88:	d030      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8e:	d82a      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b94:	d02c      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b9a:	d824      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba0:	d018      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d81e      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb0:	d007      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006bb2:	e018      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb4:	4b66      	ldr	r3, [pc, #408]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	4a65      	ldr	r2, [pc, #404]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bc0:	e017      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f821 	bl	8007c10 <RCCEx_PLL2_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e00e      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f8ca 	bl	8007d74 <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006be4:	e005      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bea:	e002      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006bec:	bf00      	nop
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d109      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bf8:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	4952      	ldr	r1, [pc, #328]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	650b      	str	r3, [r1, #80]	; 0x50
 8006c0a:	e001      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d049      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c24:	d02e      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c2a:	d828      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c30:	d02a      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c36:	d822      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c3c:	d026      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c42:	d81c      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c48:	d010      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4e:	d816      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01d      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c58:	d111      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 ffd5 	bl	8007c10 <RCCEx_PLL2_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c6a:	e012      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	2101      	movs	r1, #1
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f87e 	bl	8007d74 <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c7c:	e009      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
      break;
 8006c82:	e006      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c84:	bf00      	nop
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c88:	bf00      	nop
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c98:	4b2d      	ldr	r3, [pc, #180]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca4:	492a      	ldr	r1, [pc, #168]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8006caa:	e001      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d04d      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cc6:	d02e      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ccc:	d828      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d02a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d822      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cde:	d026      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ce4:	d81c      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cea:	d010      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf0:	d816      	bhi.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01d      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d111      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	2101      	movs	r1, #1
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 ff84 	bl	8007c10 <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d0c:	e012      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3324      	adds	r3, #36	; 0x24
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 f82d 	bl	8007d74 <RCCEx_PLL3_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d1e:	e009      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
      break;
 8006d24:	e006      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d26:	bf00      	nop
 8006d28:	e004      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e002      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e000      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10c      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d3a:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d48:	4901      	ldr	r1, [pc, #4]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d4e:	e003      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02f      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6c:	d00e      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d72:	d814      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7c:	d10f      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7e:	4baf      	ldr	r3, [pc, #700]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4aae      	ldr	r2, [pc, #696]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d8a:	e00c      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 ff3c 	bl	8007c10 <RCCEx_PLL2_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d9c:	e003      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	75fb      	strb	r3, [r7, #23]
      break;
 8006da2:	e000      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dac:	4ba3      	ldr	r3, [pc, #652]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	49a0      	ldr	r1, [pc, #640]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8006dbe:	e001      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d032      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d81b      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e17 	.word	0x08006e17
 8006de4:	08006df1 	.word	0x08006df1
 8006de8:	08006dff 	.word	0x08006dff
 8006dec:	08006e17 	.word	0x08006e17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4b92      	ldr	r3, [pc, #584]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	4a91      	ldr	r2, [pc, #580]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 ff03 	bl	8007c10 <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e1e:	4b87      	ldr	r3, [pc, #540]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	f023 0203 	bic.w	r2, r3, #3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	4984      	ldr	r1, [pc, #528]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8086 	beq.w	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e44:	4b7e      	ldr	r3, [pc, #504]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7d      	ldr	r2, [pc, #500]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e50:	f7fb f8bc 	bl	8001fcc <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e56:	e009      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e58:	f7fb f8b8 	bl	8001fcc <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	d902      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	75fb      	strb	r3, [r7, #23]
        break;
 8006e6a:	e005      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e6c:	4b74      	ldr	r3, [pc, #464]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ef      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d166      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e7e:	4b6f      	ldr	r3, [pc, #444]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e88:	4053      	eors	r3, r2
 8006e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e92:	4b6a      	ldr	r3, [pc, #424]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e9c:	4b67      	ldr	r3, [pc, #412]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	4a66      	ldr	r2, [pc, #408]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ea8:	4b64      	ldr	r3, [pc, #400]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eb4:	4a61      	ldr	r2, [pc, #388]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec4:	d115      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec6:	f7fb f881 	bl	8001fcc <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ecc:	e00b      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ece:	f7fb f87d 	bl	8001fcc <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d902      	bls.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee6:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0ed      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d126      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f06:	d10d      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006f08:	4b4c      	ldr	r3, [pc, #304]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f16:	0919      	lsrs	r1, r3, #4
 8006f18:	4b4a      	ldr	r3, [pc, #296]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006f1a:	400b      	ands	r3, r1
 8006f1c:	4947      	ldr	r1, [pc, #284]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	610b      	str	r3, [r1, #16]
 8006f22:	e005      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006f24:	4b45      	ldr	r3, [pc, #276]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	4a44      	ldr	r2, [pc, #272]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f2e:	6113      	str	r3, [r2, #16]
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3e:	493f      	ldr	r1, [pc, #252]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	670b      	str	r3, [r1, #112]	; 0x70
 8006f44:	e004      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	75bb      	strb	r3, [r7, #22]
 8006f4a:	e001      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8085 	beq.w	8007068 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f62:	2b28      	cmp	r3, #40	; 0x28
 8006f64:	d866      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08007049 	.word	0x08007049
 8006f70:	08007035 	.word	0x08007035
 8006f74:	08007035 	.word	0x08007035
 8006f78:	08007035 	.word	0x08007035
 8006f7c:	08007035 	.word	0x08007035
 8006f80:	08007035 	.word	0x08007035
 8006f84:	08007035 	.word	0x08007035
 8006f88:	08007035 	.word	0x08007035
 8006f8c:	08007011 	.word	0x08007011
 8006f90:	08007035 	.word	0x08007035
 8006f94:	08007035 	.word	0x08007035
 8006f98:	08007035 	.word	0x08007035
 8006f9c:	08007035 	.word	0x08007035
 8006fa0:	08007035 	.word	0x08007035
 8006fa4:	08007035 	.word	0x08007035
 8006fa8:	08007035 	.word	0x08007035
 8006fac:	08007023 	.word	0x08007023
 8006fb0:	08007035 	.word	0x08007035
 8006fb4:	08007035 	.word	0x08007035
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	08007035 	.word	0x08007035
 8006fc4:	08007035 	.word	0x08007035
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	08007049 	.word	0x08007049
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007035 	.word	0x08007035
 8006fd8:	08007035 	.word	0x08007035
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007035 	.word	0x08007035
 8006fec:	08007049 	.word	0x08007049
 8006ff0:	08007035 	.word	0x08007035
 8006ff4:	08007035 	.word	0x08007035
 8006ff8:	08007035 	.word	0x08007035
 8006ffc:	08007035 	.word	0x08007035
 8007000:	08007035 	.word	0x08007035
 8007004:	08007035 	.word	0x08007035
 8007008:	08007035 	.word	0x08007035
 800700c:	08007049 	.word	0x08007049
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fdfa 	bl	8007c10 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007020:	e013      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3324      	adds	r3, #36	; 0x24
 8007026:	2101      	movs	r1, #1
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fea3 	bl	8007d74 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007032:	e00a      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	75fb      	strb	r3, [r7, #23]
      break;
 8007038:	e007      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	58024800 	.word	0x58024800
 8007044:	00ffffcf 	.word	0x00ffffcf
      break;
 8007048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007050:	4b96      	ldr	r3, [pc, #600]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705c:	4993      	ldr	r1, [pc, #588]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	654b      	str	r3, [r1, #84]	; 0x54
 8007062:	e001      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d038      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007078:	2b05      	cmp	r3, #5
 800707a:	d821      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070c7 	.word	0x080070c7
 8007088:	0800709d 	.word	0x0800709d
 800708c:	080070af 	.word	0x080070af
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	2101      	movs	r1, #1
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fdb4 	bl	8007c10 <RCCEx_PLL2_Config>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070ac:	e00c      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3324      	adds	r3, #36	; 0x24
 80070b2:	2101      	movs	r1, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe5d 	bl	8007d74 <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070be:	e003      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
      break;
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80070c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070ce:	4b77      	ldr	r3, [pc, #476]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d2:	f023 0207 	bic.w	r2, r3, #7
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070da:	4974      	ldr	r1, [pc, #464]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	654b      	str	r3, [r1, #84]	; 0x54
 80070e0:	e001      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d03a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d821      	bhi.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80070fc:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007147 	.word	0x08007147
 8007108:	0800711d 	.word	0x0800711d
 800710c:	0800712f 	.word	0x0800712f
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	2101      	movs	r1, #1
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fd74 	bl	8007c10 <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800712c:	e00c      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	2101      	movs	r1, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fe1d 	bl	8007d74 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800713e:	e003      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	75fb      	strb	r3, [r7, #23]
      break;
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800714e:	4b57      	ldr	r3, [pc, #348]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007152:	f023 0207 	bic.w	r2, r3, #7
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	4953      	ldr	r1, [pc, #332]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800715e:	4313      	orrs	r3, r2
 8007160:	658b      	str	r3, [r1, #88]	; 0x58
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d04b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800717e:	d02e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007184:	d828      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718a:	d02a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007190:	d822      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007196:	d026      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800719c:	d81c      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800719e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a2:	d010      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80071a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a8:	d816      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01d      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80071ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b2:	d111      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fd28 	bl	8007c10 <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071c4:	e012      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fdd1 	bl	8007d74 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071d6:	e009      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80071ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071f2:	4b2e      	ldr	r3, [pc, #184]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	492a      	ldr	r1, [pc, #168]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007202:	4313      	orrs	r3, r2
 8007204:	654b      	str	r3, [r1, #84]	; 0x54
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d04d      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007222:	d02e      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007224:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007228:	d828      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722e:	d02a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d822      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800723a:	d026      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800723c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007240:	d81c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007246:	d010      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724c:	d816      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01d      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007256:	d111      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fcd6 	bl	8007c10 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007268:	e012      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3324      	adds	r3, #36	; 0x24
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fd7f 	bl	8007d74 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800727a:	e009      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007282:	bf00      	nop
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800728e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10c      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a4:	4901      	ldr	r1, [pc, #4]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	658b      	str	r3, [r1, #88]	; 0x58
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80072ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d04b      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072ca:	d02e      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80072cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072d0:	d828      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d6:	d02a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80072d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072dc:	d822      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072e2:	d026      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80072e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072e8:	d81c      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ee:	d010      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80072f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f4:	d816      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01d      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	d111      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fc82 	bl	8007c10 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007310:	e012      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3324      	adds	r3, #36	; 0x24
 8007316:	2102      	movs	r1, #2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fd2b 	bl	8007d74 <RCCEx_PLL3_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007322:	e009      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
      break;
 8007328:	e006      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800732a:	bf00      	nop
 800732c:	e004      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800732e:	bf00      	nop
 8007330:	e002      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007332:	bf00      	nop
 8007334:	e000      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800733e:	4b9d      	ldr	r3, [pc, #628]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800734c:	4999      	ldr	r1, [pc, #612]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800734e:	4313      	orrs	r3, r2
 8007350:	658b      	str	r3, [r1, #88]	; 0x58
 8007352:	e001      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d10a      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fcfc 	bl	8007d74 <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007386:	4b8b      	ldr	r3, [pc, #556]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007394:	4987      	ldr	r1, [pc, #540]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007396:	4313      	orrs	r3, r2
 8007398:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b0:	d10a      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3324      	adds	r3, #36	; 0x24
 80073b6:	2102      	movs	r1, #2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fcdb 	bl	8007d74 <RCCEx_PLL3_Config>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073c8:	4b7a      	ldr	r3, [pc, #488]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d6:	4977      	ldr	r1, [pc, #476]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d034      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f2:	d01d      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80073f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f8:	d817      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80073fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007402:	d009      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007404:	e011      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fbff 	bl	8007c10 <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007416:	e00c      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fca8 	bl	8007d74 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007438:	4b5e      	ldr	r3, [pc, #376]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007446:	495b      	ldr	r1, [pc, #364]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007448:	4313      	orrs	r3, r2
 800744a:	658b      	str	r3, [r1, #88]	; 0x58
 800744c:	e001      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d033      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007468:	d01c      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800746a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800746e:	d816      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007474:	d003      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800747a:	d007      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800747c:	e00f      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4b4d      	ldr	r3, [pc, #308]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	4a4c      	ldr	r2, [pc, #304]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800748a:	e00c      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fc6e 	bl	8007d74 <RCCEx_PLL3_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
      break;
 80074a2:	e000      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80074a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074ac:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ba:	493e      	ldr	r1, [pc, #248]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	654b      	str	r3, [r1, #84]	; 0x54
 80074c0:	e001      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d029      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074de:	d007      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e2:	4b34      	ldr	r3, [pc, #208]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	4a33      	ldr	r2, [pc, #204]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074ee:	e00b      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fb8a 	bl	8007c10 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007500:	e002      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]
      break;
 8007506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800750e:	4b29      	ldr	r3, [pc, #164]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	4926      	ldr	r1, [pc, #152]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800751c:	4313      	orrs	r3, r2
 800751e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007520:	e001      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fc1b 	bl	8007d74 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d033      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755c:	d017      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d811      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007568:	d013      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d80b      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007578:	d106      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007586:	e007      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]
      break;
 800758c:	e004      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075aa:	4902      	ldr	r1, [pc, #8]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	654b      	str	r3, [r1, #84]	; 0x54
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80075b2:	bf00      	nop
 80075b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075c8:	4b31      	ldr	r3, [pc, #196]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	492e      	ldr	r1, [pc, #184]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075e6:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075f4:	4926      	ldr	r1, [pc, #152]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007606:	4b22      	ldr	r3, [pc, #136]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007612:	491f      	ldr	r1, [pc, #124]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007614:	4313      	orrs	r3, r2
 8007616:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4a19      	ldr	r2, [pc, #100]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800762a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800762e:	6113      	str	r3, [r2, #16]
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800763a:	4915      	ldr	r1, [pc, #84]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da08      	bge.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007648:	4b11      	ldr	r3, [pc, #68]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800764a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007654:	490e      	ldr	r1, [pc, #56]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007656:	4313      	orrs	r3, r2
 8007658:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007666:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	4906      	ldr	r1, [pc, #24]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007676:	4313      	orrs	r3, r2
 8007678:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800767a:	7dbb      	ldrb	r3, [r7, #22]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e000      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400

08007694 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007698:	f7ff f818 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	4904      	ldr	r1, [pc, #16]	; (80076bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	58024400 	.word	0x58024400
 80076bc:	0800eeac 	.word	0x0800eeac

080076c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b089      	sub	sp, #36	; 0x24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c8:	4ba1      	ldr	r3, [pc, #644]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80076d2:	4b9f      	ldr	r3, [pc, #636]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	0b1b      	lsrs	r3, r3, #12
 80076d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076de:	4b9c      	ldr	r3, [pc, #624]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80076ea:	4b99      	ldr	r3, [pc, #612]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	08db      	lsrs	r3, r3, #3
 80076f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8111 	beq.w	8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f000 8083 	beq.w	800781c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b02      	cmp	r3, #2
 800771a:	f200 80a1 	bhi.w	8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d056      	beq.n	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800772a:	e099      	b.n	8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800772c:	4b88      	ldr	r3, [pc, #544]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02d      	beq.n	8007794 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007738:	4b85      	ldr	r3, [pc, #532]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	08db      	lsrs	r3, r3, #3
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	4a84      	ldr	r2, [pc, #528]	; (8007954 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
 8007748:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a03 	vldr	s12, [r7, #12]
 8007776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007792:	e087      	b.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800795c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a6:	4b6a      	ldr	r3, [pc, #424]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d6:	e065      	b.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ea:	4b59      	ldr	r3, [pc, #356]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800781a:	e043      	b.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782e:	4b48      	ldr	r3, [pc, #288]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800785e:	e021      	b.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007872:	4b37      	ldr	r3, [pc, #220]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007882:	ed97 6a03 	vldr	s12, [r7, #12]
 8007886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800788a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	0a5b      	lsrs	r3, r3, #9
 80078aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078be:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ca:	ee17 2a90 	vmov	r2, s15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f8:	ee17 2a90 	vmov	r2, s15
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	0e1b      	lsrs	r3, r3, #24
 8007906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800791a:	edd7 6a07 	vldr	s13, [r7, #28]
 800791e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007926:	ee17 2a90 	vmov	r2, s15
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800792e:	e008      	b.n	8007942 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	03d09000 	.word	0x03d09000
 8007958:	46000000 	.word	0x46000000
 800795c:	4c742400 	.word	0x4c742400
 8007960:	4a742400 	.word	0x4a742400
 8007964:	4bbebc20 	.word	0x4bbebc20

08007968 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007970:	4ba1      	ldr	r3, [pc, #644]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800797a:	4b9f      	ldr	r3, [pc, #636]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	0d1b      	lsrs	r3, r3, #20
 8007980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007984:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007986:	4b9c      	ldr	r3, [pc, #624]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007992:	4b99      	ldr	r3, [pc, #612]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	08db      	lsrs	r3, r3, #3
 8007998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8111 	beq.w	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	f000 8083 	beq.w	8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	f200 80a1 	bhi.w	8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d056      	beq.n	8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079d2:	e099      	b.n	8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d4:	4b88      	ldr	r3, [pc, #544]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d02d      	beq.n	8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079e0:	4b85      	ldr	r3, [pc, #532]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	4a84      	ldr	r2, [pc, #528]	; (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0a:	4b7b      	ldr	r3, [pc, #492]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a3a:	e087      	b.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4e:	4b6a      	ldr	r3, [pc, #424]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a7e:	e065      	b.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a92:	4b59      	ldr	r3, [pc, #356]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ac2:	e043      	b.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad6:	4b48      	ldr	r3, [pc, #288]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b06:	e021      	b.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1a:	4b37      	ldr	r3, [pc, #220]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b4c:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	0a5b      	lsrs	r3, r3, #9
 8007b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b72:	ee17 2a90 	vmov	r2, s15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007b7a:	4b1f      	ldr	r3, [pc, #124]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	0c1b      	lsrs	r3, r3, #16
 8007b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba0:	ee17 2a90 	vmov	r2, s15
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ba8:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	0e1b      	lsrs	r3, r3, #24
 8007bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bce:	ee17 2a90 	vmov	r2, s15
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bd6:	e008      	b.n	8007bea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	609a      	str	r2, [r3, #8]
}
 8007bea:	bf00      	nop
 8007bec:	3724      	adds	r7, #36	; 0x24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	03d09000 	.word	0x03d09000
 8007c00:	46000000 	.word	0x46000000
 8007c04:	4c742400 	.word	0x4c742400
 8007c08:	4a742400 	.word	0x4a742400
 8007c0c:	4bbebc20 	.word	0x4bbebc20

08007c10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c1e:	4b53      	ldr	r3, [pc, #332]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d101      	bne.n	8007c2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e099      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a4e      	ldr	r2, [pc, #312]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7fa f9c7 	bl	8001fcc <HAL_GetTick>
 8007c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c40:	e008      	b.n	8007c54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c42:	f7fa f9c3 	bl	8001fcc <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e086      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c60:	4b42      	ldr	r3, [pc, #264]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	493f      	ldr	r1, [pc, #252]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	628b      	str	r3, [r1, #40]	; 0x28
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	025b      	lsls	r3, r3, #9
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca4:	4931      	ldr	r1, [pc, #196]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	492d      	ldr	r1, [pc, #180]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cbc:	4b2b      	ldr	r3, [pc, #172]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f023 0220 	bic.w	r2, r3, #32
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4928      	ldr	r1, [pc, #160]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cce:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	f023 0310 	bic.w	r3, r3, #16
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cda:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <RCCEx_PLL2_Config+0x160>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	69d2      	ldr	r2, [r2, #28]
 8007ce6:	00d2      	lsls	r2, r2, #3
 8007ce8:	4920      	ldr	r1, [pc, #128]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cee:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cf4:	f043 0310 	orr.w	r3, r3, #16
 8007cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d0c:	e00f      	b.n	8007d2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d106      	bne.n	8007d22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d14:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d20:	e005      	b.n	8007d2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a11      	ldr	r2, [pc, #68]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7fa f947 	bl	8001fcc <HAL_GetTick>
 8007d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d40:	e008      	b.n	8007d54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d42:	f7fa f943 	bl	8001fcc <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e006      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	ffff0007 	.word	0xffff0007

08007d74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d82:	4b53      	ldr	r3, [pc, #332]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d101      	bne.n	8007d92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e099      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d92:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a4e      	ldr	r2, [pc, #312]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9e:	f7fa f915 	bl	8001fcc <HAL_GetTick>
 8007da2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007da4:	e008      	b.n	8007db8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007da6:	f7fa f911 	bl	8001fcc <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e086      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db8:	4b45      	ldr	r3, [pc, #276]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1f0      	bne.n	8007da6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dc4:	4b42      	ldr	r3, [pc, #264]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	051b      	lsls	r3, r3, #20
 8007dd2:	493f      	ldr	r1, [pc, #252]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	025b      	lsls	r3, r3, #9
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	041b      	lsls	r3, r3, #16
 8007df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	061b      	lsls	r3, r3, #24
 8007e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e08:	4931      	ldr	r1, [pc, #196]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e0e:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	492d      	ldr	r1, [pc, #180]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	4928      	ldr	r1, [pc, #160]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e32:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e3e:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <RCCEx_PLL3_Config+0x160>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	69d2      	ldr	r2, [r2, #28]
 8007e4a:	00d2      	lsls	r2, r2, #3
 8007e4c:	4920      	ldr	r1, [pc, #128]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e52:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a19      	ldr	r2, [pc, #100]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e70:	e00f      	b.n	8007e92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d106      	bne.n	8007e86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e84:	e005      	b.n	8007e92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e86:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a0e      	ldr	r2, [pc, #56]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9e:	f7fa f895 	bl	8001fcc <HAL_GetTick>
 8007ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ea4:	e008      	b.n	8007eb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ea6:	f7fa f891 	bl	8001fcc <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e006      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	ffff0007 	.word	0xffff0007

08007ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e049      	b.n	8007f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f841 	bl	8007f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f000 fa00 	bl	800831c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
	...

08007f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d001      	beq.n	8007fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e054      	b.n	800805e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a26      	ldr	r2, [pc, #152]	; (800806c <HAL_TIM_Base_Start_IT+0xd0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d022      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fde:	d01d      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a22      	ldr	r2, [pc, #136]	; (8008070 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d018      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a21      	ldr	r2, [pc, #132]	; (8008074 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d013      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1f      	ldr	r2, [pc, #124]	; (8008078 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00e      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1e      	ldr	r2, [pc, #120]	; (800807c <HAL_TIM_Base_Start_IT+0xe0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d009      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <HAL_TIM_Base_Start_IT+0xe4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d004      	beq.n	800801c <HAL_TIM_Base_Start_IT+0x80>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a1b      	ldr	r2, [pc, #108]	; (8008084 <HAL_TIM_Base_Start_IT+0xe8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d115      	bne.n	8008048 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	4b19      	ldr	r3, [pc, #100]	; (8008088 <HAL_TIM_Base_Start_IT+0xec>)
 8008024:	4013      	ands	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b06      	cmp	r3, #6
 800802c:	d015      	beq.n	800805a <HAL_TIM_Base_Start_IT+0xbe>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008034:	d011      	beq.n	800805a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008046:	e008      	b.n	800805a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e000      	b.n	800805c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40001800 	.word	0x40001800
 8008084:	40014000 	.word	0x40014000
 8008088:	00010007 	.word	0x00010007

0800808c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0202 	mvn.w	r2, #2
 80080b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f905 	bl	80082de <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8f7 	bl	80082ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f908 	bl	80082f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b04      	cmp	r3, #4
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0204 	mvn.w	r2, #4
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8db 	bl	80082de <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8cd 	bl	80082ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f8de 	bl	80082f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b08      	cmp	r3, #8
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0208 	mvn.w	r2, #8
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8b1 	bl	80082de <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8a3 	bl	80082ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8b4 	bl	80082f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d122      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d11b      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0210 	mvn.w	r2, #16
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2208      	movs	r2, #8
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f887 	bl	80082de <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f879 	bl	80082ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f88a 	bl	80082f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d107      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0201 	mvn.w	r2, #1
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f8 fd38 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d10e      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b80      	cmp	r3, #128	; 0x80
 800822a:	d107      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f914 	bl	8008464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	d10e      	bne.n	800826a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008256:	2b80      	cmp	r3, #128	; 0x80
 8008258:	d107      	bne.n	800826a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f907 	bl	8008478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d10e      	bne.n	8008296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d107      	bne.n	8008296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800828e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f838 	bl	8008306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d10e      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d107      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f06f 0220 	mvn.w	r2, #32
 80082ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8c7 	bl	8008450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a40      	ldr	r2, [pc, #256]	; (8008430 <TIM_Base_SetConfig+0x114>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d013      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833a:	d00f      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3d      	ldr	r2, [pc, #244]	; (8008434 <TIM_Base_SetConfig+0x118>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00b      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a3c      	ldr	r2, [pc, #240]	; (8008438 <TIM_Base_SetConfig+0x11c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a3b      	ldr	r2, [pc, #236]	; (800843c <TIM_Base_SetConfig+0x120>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a3a      	ldr	r2, [pc, #232]	; (8008440 <TIM_Base_SetConfig+0x124>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d108      	bne.n	800836e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2f      	ldr	r2, [pc, #188]	; (8008430 <TIM_Base_SetConfig+0x114>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01f      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837c:	d01b      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2c      	ldr	r2, [pc, #176]	; (8008434 <TIM_Base_SetConfig+0x118>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d017      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2b      	ldr	r2, [pc, #172]	; (8008438 <TIM_Base_SetConfig+0x11c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2a      	ldr	r2, [pc, #168]	; (800843c <TIM_Base_SetConfig+0x120>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00f      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a29      	ldr	r2, [pc, #164]	; (8008440 <TIM_Base_SetConfig+0x124>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a28      	ldr	r2, [pc, #160]	; (8008444 <TIM_Base_SetConfig+0x128>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a27      	ldr	r2, [pc, #156]	; (8008448 <TIM_Base_SetConfig+0x12c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a26      	ldr	r2, [pc, #152]	; (800844c <TIM_Base_SetConfig+0x130>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d108      	bne.n	80083c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a10      	ldr	r2, [pc, #64]	; (8008430 <TIM_Base_SetConfig+0x114>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00f      	beq.n	8008414 <TIM_Base_SetConfig+0xf8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a12      	ldr	r2, [pc, #72]	; (8008440 <TIM_Base_SetConfig+0x124>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_Base_SetConfig+0xf8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a11      	ldr	r2, [pc, #68]	; (8008444 <TIM_Base_SetConfig+0x128>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_Base_SetConfig+0xf8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a10      	ldr	r2, [pc, #64]	; (8008448 <TIM_Base_SetConfig+0x12c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0xf8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a0f      	ldr	r2, [pc, #60]	; (800844c <TIM_Base_SetConfig+0x130>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d103      	bne.n	800841c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	615a      	str	r2, [r3, #20]
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40010000 	.word	0x40010000
 8008434:	40000400 	.word	0x40000400
 8008438:	40000800 	.word	0x40000800
 800843c:	40000c00 	.word	0x40000c00
 8008440:	40010400 	.word	0x40010400
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400
 800844c:	40014800 	.word	0x40014800

08008450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e042      	b.n	8008524 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d106      	bne.n	80084b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7f8 fc1b 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2224      	movs	r2, #36	; 0x24
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fd36 	bl	8008f40 <UART_SetConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e022      	b.n	8008524 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 fa92 	bl	8009a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800850a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fb19 	bl	8009b54 <UART_CheckIdleState>
 8008522:	4603      	mov	r3, r0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	; 0x28
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	4613      	mov	r3, r2
 800853a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008542:	2b20      	cmp	r3, #32
 8008544:	f040 8083 	bne.w	800864e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <HAL_UART_Transmit+0x28>
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e07b      	b.n	8008650 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <HAL_UART_Transmit+0x3a>
 8008562:	2302      	movs	r3, #2
 8008564:	e074      	b.n	8008650 <HAL_UART_Transmit+0x124>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2221      	movs	r2, #33	; 0x21
 800857a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800857e:	f7f9 fd25 	bl	8001fcc <HAL_GetTick>
 8008582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859c:	d108      	bne.n	80085b0 <HAL_UART_Transmit+0x84>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	e003      	b.n	80085b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80085c0:	e02c      	b.n	800861c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2200      	movs	r2, #0
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 fb0c 	bl	8009bea <UART_WaitOnFlagUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e039      	b.n	8008650 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	3302      	adds	r3, #2
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e007      	b.n	800860a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	781a      	ldrb	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	3301      	adds	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1cc      	bne.n	80085c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	2140      	movs	r1, #64	; 0x40
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f001 fad9 	bl	8009bea <UART_WaitOnFlagUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e006      	b.n	8008650 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e000      	b.n	8008650 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800864e:	2302      	movs	r3, #2
  }
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	; 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866c:	2b20      	cmp	r3, #32
 800866e:	d142      	bne.n	80086f6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_UART_Receive_IT+0x24>
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e03b      	b.n	80086f8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_UART_Receive_IT+0x36>
 800868a:	2302      	movs	r3, #2
 800868c:	e034      	b.n	80086f8 <HAL_UART_Receive_IT+0xa0>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a17      	ldr	r2, [pc, #92]	; (8008700 <HAL_UART_Receive_IT+0xa8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01f      	beq.n	80086e6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d018      	beq.n	80086e6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	613b      	str	r3, [r7, #16]
   return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	623b      	str	r3, [r7, #32]
 80086d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	69f9      	ldr	r1, [r7, #28]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e6      	bne.n	80086b4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	461a      	mov	r2, r3
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f001 fb45 	bl	8009d7c <UART_Start_Receive_IT>
 80086f2:	4603      	mov	r3, r0
 80086f4:	e000      	b.n	80086f8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80086f6:	2302      	movs	r3, #2
  }
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3728      	adds	r7, #40	; 0x28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58000c00 	.word	0x58000c00

08008704 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008718:	2b20      	cmp	r3, #32
 800871a:	d142      	bne.n	80087a2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_UART_Receive_DMA+0x24>
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e03b      	b.n	80087a4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_UART_Receive_DMA+0x36>
 8008736:	2302      	movs	r3, #2
 8008738:	e034      	b.n	80087a4 <HAL_UART_Receive_DMA+0xa0>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <HAL_UART_Receive_DMA+0xa8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01f      	beq.n	8008792 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d018      	beq.n	8008792 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	69f9      	ldr	r1, [r7, #28]
 8008784:	6a3a      	ldr	r2, [r7, #32]
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	61bb      	str	r3, [r7, #24]
   return(result);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e6      	bne.n	8008760 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	461a      	mov	r2, r3
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f001 fc19 	bl	8009fd0 <UART_Start_Receive_DMA>
 800879e:	4603      	mov	r3, r0
 80087a0:	e000      	b.n	80087a4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80087a2:	2302      	movs	r3, #2
  }
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	58000c00 	.word	0x58000c00

080087b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b0ba      	sub	sp, #232	; 0xe8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80087da:	f640 030f 	movw	r3, #2063	; 0x80f
 80087de:	4013      	ands	r3, r2
 80087e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80087e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11b      	bne.n	8008824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f0:	f003 0320 	and.w	r3, r3, #32
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d015      	beq.n	8008824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 835a 	beq.w	8008ece <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
      }
      return;
 8008822:	e354      	b.n	8008ece <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 811f 	beq.w	8008a6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800882e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008832:	4b8b      	ldr	r3, [pc, #556]	; (8008a60 <HAL_UART_IRQHandler+0x2b0>)
 8008834:	4013      	ands	r3, r2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800883a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800883e:	4b89      	ldr	r3, [pc, #548]	; (8008a64 <HAL_UART_IRQHandler+0x2b4>)
 8008840:	4013      	ands	r3, r2
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 8112 	beq.w	8008a6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d011      	beq.n	8008878 <HAL_UART_IRQHandler+0xc8>
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2201      	movs	r2, #1
 8008866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886e:	f043 0201 	orr.w	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d011      	beq.n	80088a8 <HAL_UART_IRQHandler+0xf8>
 8008884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2202      	movs	r2, #2
 8008896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889e:	f043 0204 	orr.w	r2, r3, #4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d011      	beq.n	80088d8 <HAL_UART_IRQHandler+0x128>
 80088b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2204      	movs	r2, #4
 80088c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ce:	f043 0202 	orr.w	r2, r3, #2
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088dc:	f003 0308 	and.w	r3, r3, #8
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d017      	beq.n	8008914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80088f4:	4b5a      	ldr	r3, [pc, #360]	; (8008a60 <HAL_UART_IRQHandler+0x2b0>)
 80088f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890a:	f043 0208 	orr.w	r2, r3, #8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891c:	2b00      	cmp	r3, #0
 800891e:	d012      	beq.n	8008946 <HAL_UART_IRQHandler+0x196>
 8008920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00c      	beq.n	8008946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 82c0 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	d013      	beq.n	8008986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800895e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800896a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800898c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d005      	beq.n	80089aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800899e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d04f      	beq.n	8008a4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fbfa 	bl	800a1a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d141      	bne.n	8008a42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3308      	adds	r3, #8
 80089e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1d9      	bne.n	80089be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d013      	beq.n	8008a3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a16:	4a14      	ldr	r2, [pc, #80]	; (8008a68 <HAL_UART_IRQHandler+0x2b8>)
 8008a18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fa fcb0 	bl	8003384 <HAL_DMA_Abort_IT>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d017      	beq.n	8008a5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a38:	e00f      	b.n	8008a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa6a 	bl	8008f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a40:	e00b      	b.n	8008a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa66 	bl	8008f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a48:	e007      	b.n	8008a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa62 	bl	8008f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008a58:	e23b      	b.n	8008ed2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5a:	bf00      	nop
    return;
 8008a5c:	e239      	b.n	8008ed2 <HAL_UART_IRQHandler+0x722>
 8008a5e:	bf00      	nop
 8008a60:	10000001 	.word	0x10000001
 8008a64:	04000120 	.word	0x04000120
 8008a68:	0800a44b 	.word	0x0800a44b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f040 81ce 	bne.w	8008e12 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 81c7 	beq.w	8008e12 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 81c0 	beq.w	8008e12 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2210      	movs	r2, #16
 8008a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	f040 813b 	bne.w	8008d20 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a8b      	ldr	r2, [pc, #556]	; (8008ce0 <HAL_UART_IRQHandler+0x530>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d059      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a89      	ldr	r2, [pc, #548]	; (8008ce4 <HAL_UART_IRQHandler+0x534>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d053      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a87      	ldr	r2, [pc, #540]	; (8008ce8 <HAL_UART_IRQHandler+0x538>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d04d      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a85      	ldr	r2, [pc, #532]	; (8008cec <HAL_UART_IRQHandler+0x53c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d047      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a83      	ldr	r2, [pc, #524]	; (8008cf0 <HAL_UART_IRQHandler+0x540>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d041      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a81      	ldr	r2, [pc, #516]	; (8008cf4 <HAL_UART_IRQHandler+0x544>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d03b      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a7f      	ldr	r2, [pc, #508]	; (8008cf8 <HAL_UART_IRQHandler+0x548>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d035      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a7d      	ldr	r2, [pc, #500]	; (8008cfc <HAL_UART_IRQHandler+0x54c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d02f      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a7b      	ldr	r2, [pc, #492]	; (8008d00 <HAL_UART_IRQHandler+0x550>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d029      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a79      	ldr	r2, [pc, #484]	; (8008d04 <HAL_UART_IRQHandler+0x554>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d023      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a77      	ldr	r2, [pc, #476]	; (8008d08 <HAL_UART_IRQHandler+0x558>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d01d      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a75      	ldr	r2, [pc, #468]	; (8008d0c <HAL_UART_IRQHandler+0x55c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d017      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a73      	ldr	r2, [pc, #460]	; (8008d10 <HAL_UART_IRQHandler+0x560>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d011      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a71      	ldr	r2, [pc, #452]	; (8008d14 <HAL_UART_IRQHandler+0x564>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00b      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a6f      	ldr	r2, [pc, #444]	; (8008d18 <HAL_UART_IRQHandler+0x568>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d005      	beq.n	8008b6a <HAL_UART_IRQHandler+0x3ba>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a6d      	ldr	r2, [pc, #436]	; (8008d1c <HAL_UART_IRQHandler+0x56c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d105      	bne.n	8008b76 <HAL_UART_IRQHandler+0x3c6>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	e004      	b.n	8008b80 <HAL_UART_IRQHandler+0x3d0>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 81a4 	beq.w	8008ed6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	f080 819c 	bcs.w	8008ed6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb2:	f000 8086 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1da      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c12:	f023 0301 	bic.w	r3, r3, #1
 8008c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e1      	bne.n	8008c00 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3308      	adds	r3, #8
 8008c42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e3      	bne.n	8008c3c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c92:	f023 0310 	bic.w	r3, r3, #16
 8008c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ca6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e4      	bne.n	8008c82 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fa f843 	bl	8002d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f926 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cdc:	e0fb      	b.n	8008ed6 <HAL_UART_IRQHandler+0x726>
 8008cde:	bf00      	nop
 8008ce0:	40020010 	.word	0x40020010
 8008ce4:	40020028 	.word	0x40020028
 8008ce8:	40020040 	.word	0x40020040
 8008cec:	40020058 	.word	0x40020058
 8008cf0:	40020070 	.word	0x40020070
 8008cf4:	40020088 	.word	0x40020088
 8008cf8:	400200a0 	.word	0x400200a0
 8008cfc:	400200b8 	.word	0x400200b8
 8008d00:	40020410 	.word	0x40020410
 8008d04:	40020428 	.word	0x40020428
 8008d08:	40020440 	.word	0x40020440
 8008d0c:	40020458 	.word	0x40020458
 8008d10:	40020470 	.word	0x40020470
 8008d14:	40020488 	.word	0x40020488
 8008d18:	400204a0 	.word	0x400204a0
 8008d1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80cc 	beq.w	8008eda <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8008d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80c7 	beq.w	8008eda <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e4      	bne.n	8008d4c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3308      	adds	r3, #8
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	623b      	str	r3, [r7, #32]
   return(result);
 8008d92:	6a3a      	ldr	r2, [r7, #32]
 8008d94:	4b54      	ldr	r3, [pc, #336]	; (8008ee8 <HAL_UART_IRQHandler+0x738>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008da6:	633a      	str	r2, [r7, #48]	; 0x30
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e3      	bne.n	8008d82 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	69b9      	ldr	r1, [r7, #24]
 8008df6:	69fa      	ldr	r2, [r7, #28]
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e4      	bne.n	8008dce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f88c 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e10:	e063      	b.n	8008eda <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <HAL_UART_IRQHandler+0x68c>
 8008e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d008      	beq.n	8008e3c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 ffa5 	bl	800ad84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e3a:	e051      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d014      	beq.n	8008e72 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d008      	beq.n	8008e72 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d03a      	beq.n	8008ede <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
    }
    return;
 8008e70:	e035      	b.n	8008ede <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_UART_IRQHandler+0x6e2>
 8008e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 faf3 	bl	800a476 <UART_EndTransmit_IT>
    return;
 8008e90:	e026      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x702>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 ff7e 	bl	800adac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008eb0:	e016      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d010      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x730>
 8008ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da0c      	bge.n	8008ee0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 ff66 	bl	800ad98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ecc:	e008      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8008ece:	bf00      	nop
 8008ed0:	e006      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8008ed2:	bf00      	nop
 8008ed4:	e004      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8008ed6:	bf00      	nop
 8008ed8:	e002      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8008ede:	bf00      	nop
  }
}
 8008ee0:	37e8      	adds	r7, #232	; 0xe8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	effffffe 	.word	0xeffffffe

08008eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f44:	b092      	sub	sp, #72	; 0x48
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	4bbe      	ldr	r3, [pc, #760]	; (8009268 <UART_SetConfig+0x328>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4ab3      	ldr	r2, [pc, #716]	; (800926c <UART_SetConfig+0x32c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d004      	beq.n	8008fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	4baf      	ldr	r3, [pc, #700]	; (8009270 <UART_SetConfig+0x330>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	6812      	ldr	r2, [r2, #0]
 8008fba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	f023 010f 	bic.w	r1, r3, #15
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4aa6      	ldr	r2, [pc, #664]	; (8009274 <UART_SetConfig+0x334>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d177      	bne.n	80090d0 <UART_SetConfig+0x190>
 8008fe0:	4ba5      	ldr	r3, [pc, #660]	; (8009278 <UART_SetConfig+0x338>)
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fe8:	2b28      	cmp	r3, #40	; 0x28
 8008fea:	d86d      	bhi.n	80090c8 <UART_SetConfig+0x188>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0xb4>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	08009099 	.word	0x08009099
 8008ff8:	080090c9 	.word	0x080090c9
 8008ffc:	080090c9 	.word	0x080090c9
 8009000:	080090c9 	.word	0x080090c9
 8009004:	080090c9 	.word	0x080090c9
 8009008:	080090c9 	.word	0x080090c9
 800900c:	080090c9 	.word	0x080090c9
 8009010:	080090c9 	.word	0x080090c9
 8009014:	080090a1 	.word	0x080090a1
 8009018:	080090c9 	.word	0x080090c9
 800901c:	080090c9 	.word	0x080090c9
 8009020:	080090c9 	.word	0x080090c9
 8009024:	080090c9 	.word	0x080090c9
 8009028:	080090c9 	.word	0x080090c9
 800902c:	080090c9 	.word	0x080090c9
 8009030:	080090c9 	.word	0x080090c9
 8009034:	080090a9 	.word	0x080090a9
 8009038:	080090c9 	.word	0x080090c9
 800903c:	080090c9 	.word	0x080090c9
 8009040:	080090c9 	.word	0x080090c9
 8009044:	080090c9 	.word	0x080090c9
 8009048:	080090c9 	.word	0x080090c9
 800904c:	080090c9 	.word	0x080090c9
 8009050:	080090c9 	.word	0x080090c9
 8009054:	080090b1 	.word	0x080090b1
 8009058:	080090c9 	.word	0x080090c9
 800905c:	080090c9 	.word	0x080090c9
 8009060:	080090c9 	.word	0x080090c9
 8009064:	080090c9 	.word	0x080090c9
 8009068:	080090c9 	.word	0x080090c9
 800906c:	080090c9 	.word	0x080090c9
 8009070:	080090c9 	.word	0x080090c9
 8009074:	080090b9 	.word	0x080090b9
 8009078:	080090c9 	.word	0x080090c9
 800907c:	080090c9 	.word	0x080090c9
 8009080:	080090c9 	.word	0x080090c9
 8009084:	080090c9 	.word	0x080090c9
 8009088:	080090c9 	.word	0x080090c9
 800908c:	080090c9 	.word	0x080090c9
 8009090:	080090c9 	.word	0x080090c9
 8009094:	080090c1 	.word	0x080090c1
 8009098:	2301      	movs	r3, #1
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e222      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e21e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090a8:	2308      	movs	r3, #8
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e21a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090b0:	2310      	movs	r3, #16
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e216      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090b8:	2320      	movs	r3, #32
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e212      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e20e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e20a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a69      	ldr	r2, [pc, #420]	; (800927c <UART_SetConfig+0x33c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d130      	bne.n	800913c <UART_SetConfig+0x1fc>
 80090da:	4b67      	ldr	r3, [pc, #412]	; (8009278 <UART_SetConfig+0x338>)
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d826      	bhi.n	8009134 <UART_SetConfig+0x1f4>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0x1ac>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009105 	.word	0x08009105
 80090f0:	0800910d 	.word	0x0800910d
 80090f4:	08009115 	.word	0x08009115
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	08009125 	.word	0x08009125
 8009100:	0800912d 	.word	0x0800912d
 8009104:	2300      	movs	r3, #0
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e1ec      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800910c:	2304      	movs	r3, #4
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e1e8      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009114:	2308      	movs	r3, #8
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e1e4      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800911c:	2310      	movs	r3, #16
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e1e0      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009124:	2320      	movs	r3, #32
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e1dc      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800912c:	2340      	movs	r3, #64	; 0x40
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e1d8      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e1d4      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a4f      	ldr	r2, [pc, #316]	; (8009280 <UART_SetConfig+0x340>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d130      	bne.n	80091a8 <UART_SetConfig+0x268>
 8009146:	4b4c      	ldr	r3, [pc, #304]	; (8009278 <UART_SetConfig+0x338>)
 8009148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b05      	cmp	r3, #5
 8009150:	d826      	bhi.n	80091a0 <UART_SetConfig+0x260>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0x218>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009171 	.word	0x08009171
 800915c:	08009179 	.word	0x08009179
 8009160:	08009181 	.word	0x08009181
 8009164:	08009189 	.word	0x08009189
 8009168:	08009191 	.word	0x08009191
 800916c:	08009199 	.word	0x08009199
 8009170:	2300      	movs	r3, #0
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e1b6      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009178:	2304      	movs	r3, #4
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e1b2      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009180:	2308      	movs	r3, #8
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e1ae      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009188:	2310      	movs	r3, #16
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e1aa      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009190:	2320      	movs	r3, #32
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e1a6      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e1a2      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e19e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a35      	ldr	r2, [pc, #212]	; (8009284 <UART_SetConfig+0x344>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d130      	bne.n	8009214 <UART_SetConfig+0x2d4>
 80091b2:	4b31      	ldr	r3, [pc, #196]	; (8009278 <UART_SetConfig+0x338>)
 80091b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d826      	bhi.n	800920c <UART_SetConfig+0x2cc>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <UART_SetConfig+0x284>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091dd 	.word	0x080091dd
 80091c8:	080091e5 	.word	0x080091e5
 80091cc:	080091ed 	.word	0x080091ed
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091fd 	.word	0x080091fd
 80091d8:	08009205 	.word	0x08009205
 80091dc:	2300      	movs	r3, #0
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e180      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091e4:	2304      	movs	r3, #4
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ea:	e17c      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091ec:	2308      	movs	r3, #8
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f2:	e178      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091f4:	2310      	movs	r3, #16
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e174      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80091fc:	2320      	movs	r3, #32
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e170      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009204:	2340      	movs	r3, #64	; 0x40
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920a:	e16c      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e168      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <UART_SetConfig+0x348>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d142      	bne.n	80092a4 <UART_SetConfig+0x364>
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <UART_SetConfig+0x338>)
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b05      	cmp	r3, #5
 8009228:	d838      	bhi.n	800929c <UART_SetConfig+0x35c>
 800922a:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <UART_SetConfig+0x2f0>)
 800922c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009230:	08009249 	.word	0x08009249
 8009234:	08009251 	.word	0x08009251
 8009238:	08009259 	.word	0x08009259
 800923c:	08009261 	.word	0x08009261
 8009240:	0800928d 	.word	0x0800928d
 8009244:	08009295 	.word	0x08009295
 8009248:	2300      	movs	r3, #0
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924e:	e14a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009250:	2304      	movs	r3, #4
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009256:	e146      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009258:	2308      	movs	r3, #8
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800925e:	e142      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009260:	2310      	movs	r3, #16
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009266:	e13e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009268:	cfff69f3 	.word	0xcfff69f3
 800926c:	58000c00 	.word	0x58000c00
 8009270:	11fff4ff 	.word	0x11fff4ff
 8009274:	40011000 	.word	0x40011000
 8009278:	58024400 	.word	0x58024400
 800927c:	40004400 	.word	0x40004400
 8009280:	40004800 	.word	0x40004800
 8009284:	40004c00 	.word	0x40004c00
 8009288:	40005000 	.word	0x40005000
 800928c:	2320      	movs	r3, #32
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e128      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929a:	e124      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800929c:	2380      	movs	r3, #128	; 0x80
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a2:	e120      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4acb      	ldr	r2, [pc, #812]	; (80095d8 <UART_SetConfig+0x698>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d176      	bne.n	800939c <UART_SetConfig+0x45c>
 80092ae:	4bcb      	ldr	r3, [pc, #812]	; (80095dc <UART_SetConfig+0x69c>)
 80092b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092b6:	2b28      	cmp	r3, #40	; 0x28
 80092b8:	d86c      	bhi.n	8009394 <UART_SetConfig+0x454>
 80092ba:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <UART_SetConfig+0x380>)
 80092bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c0:	08009365 	.word	0x08009365
 80092c4:	08009395 	.word	0x08009395
 80092c8:	08009395 	.word	0x08009395
 80092cc:	08009395 	.word	0x08009395
 80092d0:	08009395 	.word	0x08009395
 80092d4:	08009395 	.word	0x08009395
 80092d8:	08009395 	.word	0x08009395
 80092dc:	08009395 	.word	0x08009395
 80092e0:	0800936d 	.word	0x0800936d
 80092e4:	08009395 	.word	0x08009395
 80092e8:	08009395 	.word	0x08009395
 80092ec:	08009395 	.word	0x08009395
 80092f0:	08009395 	.word	0x08009395
 80092f4:	08009395 	.word	0x08009395
 80092f8:	08009395 	.word	0x08009395
 80092fc:	08009395 	.word	0x08009395
 8009300:	08009375 	.word	0x08009375
 8009304:	08009395 	.word	0x08009395
 8009308:	08009395 	.word	0x08009395
 800930c:	08009395 	.word	0x08009395
 8009310:	08009395 	.word	0x08009395
 8009314:	08009395 	.word	0x08009395
 8009318:	08009395 	.word	0x08009395
 800931c:	08009395 	.word	0x08009395
 8009320:	0800937d 	.word	0x0800937d
 8009324:	08009395 	.word	0x08009395
 8009328:	08009395 	.word	0x08009395
 800932c:	08009395 	.word	0x08009395
 8009330:	08009395 	.word	0x08009395
 8009334:	08009395 	.word	0x08009395
 8009338:	08009395 	.word	0x08009395
 800933c:	08009395 	.word	0x08009395
 8009340:	08009385 	.word	0x08009385
 8009344:	08009395 	.word	0x08009395
 8009348:	08009395 	.word	0x08009395
 800934c:	08009395 	.word	0x08009395
 8009350:	08009395 	.word	0x08009395
 8009354:	08009395 	.word	0x08009395
 8009358:	08009395 	.word	0x08009395
 800935c:	08009395 	.word	0x08009395
 8009360:	0800938d 	.word	0x0800938d
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e0bc      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800936c:	2304      	movs	r3, #4
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e0b8      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e0b4      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800937c:	2310      	movs	r3, #16
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e0b0      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009384:	2320      	movs	r3, #32
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e0ac      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e0a8      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009394:	2380      	movs	r3, #128	; 0x80
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e0a4      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a8f      	ldr	r2, [pc, #572]	; (80095e0 <UART_SetConfig+0x6a0>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d130      	bne.n	8009408 <UART_SetConfig+0x4c8>
 80093a6:	4b8d      	ldr	r3, [pc, #564]	; (80095dc <UART_SetConfig+0x69c>)
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d826      	bhi.n	8009400 <UART_SetConfig+0x4c0>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x478>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093d1 	.word	0x080093d1
 80093bc:	080093d9 	.word	0x080093d9
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	080093e9 	.word	0x080093e9
 80093c8:	080093f1 	.word	0x080093f1
 80093cc:	080093f9 	.word	0x080093f9
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e086      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e082      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e07e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e07a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80093f0:	2320      	movs	r3, #32
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e076      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e072      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009400:	2380      	movs	r3, #128	; 0x80
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e06e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a75      	ldr	r2, [pc, #468]	; (80095e4 <UART_SetConfig+0x6a4>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d130      	bne.n	8009474 <UART_SetConfig+0x534>
 8009412:	4b72      	ldr	r3, [pc, #456]	; (80095dc <UART_SetConfig+0x69c>)
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b05      	cmp	r3, #5
 800941c:	d826      	bhi.n	800946c <UART_SetConfig+0x52c>
 800941e:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0x4e4>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	0800943d 	.word	0x0800943d
 8009428:	08009445 	.word	0x08009445
 800942c:	0800944d 	.word	0x0800944d
 8009430:	08009455 	.word	0x08009455
 8009434:	0800945d 	.word	0x0800945d
 8009438:	08009465 	.word	0x08009465
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009442:	e050      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944a:	e04c      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009452:	e048      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945a:	e044      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800945c:	2320      	movs	r3, #32
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009462:	e040      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009464:	2340      	movs	r3, #64	; 0x40
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e03c      	b.n	80094e6 <UART_SetConfig+0x5a6>
 800946c:	2380      	movs	r3, #128	; 0x80
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e038      	b.n	80094e6 <UART_SetConfig+0x5a6>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a5b      	ldr	r2, [pc, #364]	; (80095e8 <UART_SetConfig+0x6a8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d130      	bne.n	80094e0 <UART_SetConfig+0x5a0>
 800947e:	4b57      	ldr	r3, [pc, #348]	; (80095dc <UART_SetConfig+0x69c>)
 8009480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	2b05      	cmp	r3, #5
 8009488:	d826      	bhi.n	80094d8 <UART_SetConfig+0x598>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0x550>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094a9 	.word	0x080094a9
 8009494:	080094b1 	.word	0x080094b1
 8009498:	080094b9 	.word	0x080094b9
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094c9 	.word	0x080094c9
 80094a4:	080094d1 	.word	0x080094d1
 80094a8:	2302      	movs	r3, #2
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ae:	e01a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094b0:	2304      	movs	r3, #4
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b6:	e016      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094b8:	2308      	movs	r3, #8
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094be:	e012      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094c0:	2310      	movs	r3, #16
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c6:	e00e      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094c8:	2320      	movs	r3, #32
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ce:	e00a      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d6:	e006      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094d8:	2380      	movs	r3, #128	; 0x80
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e002      	b.n	80094e6 <UART_SetConfig+0x5a6>
 80094e0:	2380      	movs	r3, #128	; 0x80
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a3f      	ldr	r2, [pc, #252]	; (80095e8 <UART_SetConfig+0x6a8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	f040 80f8 	bne.w	80096e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	dc46      	bgt.n	8009588 <UART_SetConfig+0x648>
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	f2c0 8082 	blt.w	8009604 <UART_SetConfig+0x6c4>
 8009500:	3b02      	subs	r3, #2
 8009502:	2b1e      	cmp	r3, #30
 8009504:	d87e      	bhi.n	8009604 <UART_SetConfig+0x6c4>
 8009506:	a201      	add	r2, pc, #4	; (adr r2, 800950c <UART_SetConfig+0x5cc>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	0800958f 	.word	0x0800958f
 8009510:	08009605 	.word	0x08009605
 8009514:	08009597 	.word	0x08009597
 8009518:	08009605 	.word	0x08009605
 800951c:	08009605 	.word	0x08009605
 8009520:	08009605 	.word	0x08009605
 8009524:	080095a7 	.word	0x080095a7
 8009528:	08009605 	.word	0x08009605
 800952c:	08009605 	.word	0x08009605
 8009530:	08009605 	.word	0x08009605
 8009534:	08009605 	.word	0x08009605
 8009538:	08009605 	.word	0x08009605
 800953c:	08009605 	.word	0x08009605
 8009540:	08009605 	.word	0x08009605
 8009544:	080095b7 	.word	0x080095b7
 8009548:	08009605 	.word	0x08009605
 800954c:	08009605 	.word	0x08009605
 8009550:	08009605 	.word	0x08009605
 8009554:	08009605 	.word	0x08009605
 8009558:	08009605 	.word	0x08009605
 800955c:	08009605 	.word	0x08009605
 8009560:	08009605 	.word	0x08009605
 8009564:	08009605 	.word	0x08009605
 8009568:	08009605 	.word	0x08009605
 800956c:	08009605 	.word	0x08009605
 8009570:	08009605 	.word	0x08009605
 8009574:	08009605 	.word	0x08009605
 8009578:	08009605 	.word	0x08009605
 800957c:	08009605 	.word	0x08009605
 8009580:	08009605 	.word	0x08009605
 8009584:	080095f7 	.word	0x080095f7
 8009588:	2b40      	cmp	r3, #64	; 0x40
 800958a:	d037      	beq.n	80095fc <UART_SetConfig+0x6bc>
 800958c:	e03a      	b.n	8009604 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800958e:	f7fe f881 	bl	8007694 <HAL_RCCEx_GetD3PCLK1Freq>
 8009592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009594:	e03c      	b.n	8009610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe f890 	bl	80076c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a4:	e034      	b.n	8009610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a6:	f107 0318 	add.w	r3, r7, #24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe f9dc 	bl	8007968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b4:	e02c      	b.n	8009610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b6:	4b09      	ldr	r3, [pc, #36]	; (80095dc <UART_SetConfig+0x69c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d016      	beq.n	80095f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <UART_SetConfig+0x69c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	4a07      	ldr	r2, [pc, #28]	; (80095ec <UART_SetConfig+0x6ac>)
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095d4:	e01c      	b.n	8009610 <UART_SetConfig+0x6d0>
 80095d6:	bf00      	nop
 80095d8:	40011400 	.word	0x40011400
 80095dc:	58024400 	.word	0x58024400
 80095e0:	40007800 	.word	0x40007800
 80095e4:	40007c00 	.word	0x40007c00
 80095e8:	58000c00 	.word	0x58000c00
 80095ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80095f0:	4b9d      	ldr	r3, [pc, #628]	; (8009868 <UART_SetConfig+0x928>)
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f4:	e00c      	b.n	8009610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095f6:	4b9d      	ldr	r3, [pc, #628]	; (800986c <UART_SetConfig+0x92c>)
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095fa:	e009      	b.n	8009610 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009602:	e005      	b.n	8009610 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800960e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 81de 	beq.w	80099d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	4a94      	ldr	r2, [pc, #592]	; (8009870 <UART_SetConfig+0x930>)
 800961e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009622:	461a      	mov	r2, r3
 8009624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009626:	fbb3 f3f2 	udiv	r3, r3, r2
 800962a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	4613      	mov	r3, r2
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	4413      	add	r3, r2
 8009636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009638:	429a      	cmp	r2, r3
 800963a:	d305      	bcc.n	8009648 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009644:	429a      	cmp	r2, r3
 8009646:	d903      	bls.n	8009650 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800964e:	e1c1      	b.n	80099d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	2200      	movs	r2, #0
 8009654:	60bb      	str	r3, [r7, #8]
 8009656:	60fa      	str	r2, [r7, #12]
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	4a84      	ldr	r2, [pc, #528]	; (8009870 <UART_SetConfig+0x930>)
 800965e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009662:	b29b      	uxth	r3, r3
 8009664:	2200      	movs	r2, #0
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800966e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009672:	f7f6 fe85 	bl	8000380 <__aeabi_uldivmod>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	f04f 0300 	mov.w	r3, #0
 8009686:	020b      	lsls	r3, r1, #8
 8009688:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800968c:	0202      	lsls	r2, r0, #8
 800968e:	6979      	ldr	r1, [r7, #20]
 8009690:	6849      	ldr	r1, [r1, #4]
 8009692:	0849      	lsrs	r1, r1, #1
 8009694:	2000      	movs	r0, #0
 8009696:	460c      	mov	r4, r1
 8009698:	4605      	mov	r5, r0
 800969a:	eb12 0804 	adds.w	r8, r2, r4
 800969e:	eb43 0905 	adc.w	r9, r3, r5
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	469a      	mov	sl, r3
 80096aa:	4693      	mov	fp, r2
 80096ac:	4652      	mov	r2, sl
 80096ae:	465b      	mov	r3, fp
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f6 fe64 	bl	8000380 <__aeabi_uldivmod>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4613      	mov	r3, r2
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c6:	d308      	bcc.n	80096da <UART_SetConfig+0x79a>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ce:	d204      	bcs.n	80096da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d6:	60da      	str	r2, [r3, #12]
 80096d8:	e17c      	b.n	80099d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80096e0:	e178      	b.n	80099d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ea:	f040 80c5 	bne.w	8009878 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80096ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	dc48      	bgt.n	8009788 <UART_SetConfig+0x848>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	db7b      	blt.n	80097f2 <UART_SetConfig+0x8b2>
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d879      	bhi.n	80097f2 <UART_SetConfig+0x8b2>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <UART_SetConfig+0x7c4>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	0800978f 	.word	0x0800978f
 8009708:	08009797 	.word	0x08009797
 800970c:	080097f3 	.word	0x080097f3
 8009710:	080097f3 	.word	0x080097f3
 8009714:	0800979f 	.word	0x0800979f
 8009718:	080097f3 	.word	0x080097f3
 800971c:	080097f3 	.word	0x080097f3
 8009720:	080097f3 	.word	0x080097f3
 8009724:	080097af 	.word	0x080097af
 8009728:	080097f3 	.word	0x080097f3
 800972c:	080097f3 	.word	0x080097f3
 8009730:	080097f3 	.word	0x080097f3
 8009734:	080097f3 	.word	0x080097f3
 8009738:	080097f3 	.word	0x080097f3
 800973c:	080097f3 	.word	0x080097f3
 8009740:	080097f3 	.word	0x080097f3
 8009744:	080097bf 	.word	0x080097bf
 8009748:	080097f3 	.word	0x080097f3
 800974c:	080097f3 	.word	0x080097f3
 8009750:	080097f3 	.word	0x080097f3
 8009754:	080097f3 	.word	0x080097f3
 8009758:	080097f3 	.word	0x080097f3
 800975c:	080097f3 	.word	0x080097f3
 8009760:	080097f3 	.word	0x080097f3
 8009764:	080097f3 	.word	0x080097f3
 8009768:	080097f3 	.word	0x080097f3
 800976c:	080097f3 	.word	0x080097f3
 8009770:	080097f3 	.word	0x080097f3
 8009774:	080097f3 	.word	0x080097f3
 8009778:	080097f3 	.word	0x080097f3
 800977c:	080097f3 	.word	0x080097f3
 8009780:	080097f3 	.word	0x080097f3
 8009784:	080097e5 	.word	0x080097e5
 8009788:	2b40      	cmp	r3, #64	; 0x40
 800978a:	d02e      	beq.n	80097ea <UART_SetConfig+0x8aa>
 800978c:	e031      	b.n	80097f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800978e:	f7fc ffcd 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 8009792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009794:	e033      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009796:	f7fc ffdf 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 800979a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800979c:	e02f      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800979e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd ff8c 	bl	80076c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ac:	e027      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ae:	f107 0318 	add.w	r3, r7, #24
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe f8d8 	bl	8007968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097bc:	e01f      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097be:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <UART_SetConfig+0x934>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097ca:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <UART_SetConfig+0x934>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	4a24      	ldr	r2, [pc, #144]	; (8009868 <UART_SetConfig+0x928>)
 80097d6:	fa22 f303 	lsr.w	r3, r2, r3
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097dc:	e00f      	b.n	80097fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80097de:	4b22      	ldr	r3, [pc, #136]	; (8009868 <UART_SetConfig+0x928>)
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e2:	e00c      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097e4:	4b21      	ldr	r3, [pc, #132]	; (800986c <UART_SetConfig+0x92c>)
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e8:	e009      	b.n	80097fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f0:	e005      	b.n	80097fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80097fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80e7 	beq.w	80099d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	4a19      	ldr	r2, [pc, #100]	; (8009870 <UART_SetConfig+0x930>)
 800980c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009810:	461a      	mov	r2, r3
 8009812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009814:	fbb3 f3f2 	udiv	r3, r3, r2
 8009818:	005a      	lsls	r2, r3, #1
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	441a      	add	r2, r3
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	fbb2 f3f3 	udiv	r3, r2, r3
 800982a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	2b0f      	cmp	r3, #15
 8009830:	d916      	bls.n	8009860 <UART_SetConfig+0x920>
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009838:	d212      	bcs.n	8009860 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	b29b      	uxth	r3, r3
 800983e:	f023 030f 	bic.w	r3, r3, #15
 8009842:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	b29a      	uxth	r2, r3
 8009850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009852:	4313      	orrs	r3, r2
 8009854:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	e0b9      	b.n	80099d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009866:	e0b5      	b.n	80099d4 <UART_SetConfig+0xa94>
 8009868:	03d09000 	.word	0x03d09000
 800986c:	003d0900 	.word	0x003d0900
 8009870:	0800efc4 	.word	0x0800efc4
 8009874:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009878:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800987c:	2b20      	cmp	r3, #32
 800987e:	dc49      	bgt.n	8009914 <UART_SetConfig+0x9d4>
 8009880:	2b00      	cmp	r3, #0
 8009882:	db7c      	blt.n	800997e <UART_SetConfig+0xa3e>
 8009884:	2b20      	cmp	r3, #32
 8009886:	d87a      	bhi.n	800997e <UART_SetConfig+0xa3e>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <UART_SetConfig+0x950>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	0800991b 	.word	0x0800991b
 8009894:	08009923 	.word	0x08009923
 8009898:	0800997f 	.word	0x0800997f
 800989c:	0800997f 	.word	0x0800997f
 80098a0:	0800992b 	.word	0x0800992b
 80098a4:	0800997f 	.word	0x0800997f
 80098a8:	0800997f 	.word	0x0800997f
 80098ac:	0800997f 	.word	0x0800997f
 80098b0:	0800993b 	.word	0x0800993b
 80098b4:	0800997f 	.word	0x0800997f
 80098b8:	0800997f 	.word	0x0800997f
 80098bc:	0800997f 	.word	0x0800997f
 80098c0:	0800997f 	.word	0x0800997f
 80098c4:	0800997f 	.word	0x0800997f
 80098c8:	0800997f 	.word	0x0800997f
 80098cc:	0800997f 	.word	0x0800997f
 80098d0:	0800994b 	.word	0x0800994b
 80098d4:	0800997f 	.word	0x0800997f
 80098d8:	0800997f 	.word	0x0800997f
 80098dc:	0800997f 	.word	0x0800997f
 80098e0:	0800997f 	.word	0x0800997f
 80098e4:	0800997f 	.word	0x0800997f
 80098e8:	0800997f 	.word	0x0800997f
 80098ec:	0800997f 	.word	0x0800997f
 80098f0:	0800997f 	.word	0x0800997f
 80098f4:	0800997f 	.word	0x0800997f
 80098f8:	0800997f 	.word	0x0800997f
 80098fc:	0800997f 	.word	0x0800997f
 8009900:	0800997f 	.word	0x0800997f
 8009904:	0800997f 	.word	0x0800997f
 8009908:	0800997f 	.word	0x0800997f
 800990c:	0800997f 	.word	0x0800997f
 8009910:	08009971 	.word	0x08009971
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d02e      	beq.n	8009976 <UART_SetConfig+0xa36>
 8009918:	e031      	b.n	800997e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800991a:	f7fc ff07 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 800991e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009920:	e033      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009922:	f7fc ff19 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 8009926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009928:	e02f      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fec6 	bl	80076c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009938:	e027      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993a:	f107 0318 	add.w	r3, r7, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe f812 	bl	8007968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009948:	e01f      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994a:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <UART_SetConfig+0xac0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <UART_SetConfig+0xac0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a28      	ldr	r2, [pc, #160]	; (8009a04 <UART_SetConfig+0xac4>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009968:	e00f      	b.n	800998a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <UART_SetConfig+0xac4>)
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996e:	e00c      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009970:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <UART_SetConfig+0xac8>)
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009974:	e009      	b.n	800998a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800997c:	e005      	b.n	800998a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009988:	bf00      	nop
    }

    if (pclk != 0U)
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d021      	beq.n	80099d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	4a1d      	ldr	r2, [pc, #116]	; (8009a0c <UART_SetConfig+0xacc>)
 8009996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999a:	461a      	mov	r2, r3
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	fbb3 f2f2 	udiv	r2, r3, r2
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	441a      	add	r2, r3
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d909      	bls.n	80099ce <UART_SetConfig+0xa8e>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c0:	d205      	bcs.n	80099ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60da      	str	r2, [r3, #12]
 80099cc:	e002      	b.n	80099d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2201      	movs	r2, #1
 80099e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2200      	movs	r2, #0
 80099e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2200      	movs	r2, #0
 80099ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80099f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3748      	adds	r7, #72	; 0x48
 80099f8:	46bd      	mov	sp, r7
 80099fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099fe:	bf00      	nop
 8009a00:	58024400 	.word	0x58024400
 8009a04:	03d09000 	.word	0x03d09000
 8009a08:	003d0900 	.word	0x003d0900
 8009a0c:	0800efc4 	.word	0x0800efc4

08009a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01a      	beq.n	8009b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0e:	d10a      	bne.n	8009b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]
  }
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b64:	f7f8 fa32 	bl	8001fcc <HAL_GetTick>
 8009b68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d10e      	bne.n	8009b96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f82f 	bl	8009bea <UART_WaitOnFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e025      	b.n	8009be2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d10e      	bne.n	8009bc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f819 	bl	8009bea <UART_WaitOnFlagUntilTimeout>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e00f      	b.n	8009be2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b09c      	sub	sp, #112	; 0x70
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	603b      	str	r3, [r7, #0]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bfa:	e0a9      	b.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	f000 80a5 	beq.w	8009d50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c06:	f7f8 f9e1 	bl	8001fcc <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x32>
 8009c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d140      	bne.n	8009c9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c30:	667b      	str	r3, [r7, #100]	; 0x64
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e6      	bne.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3308      	adds	r3, #8
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	f023 0301 	bic.w	r3, r3, #1
 8009c64:	663b      	str	r3, [r7, #96]	; 0x60
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e5      	bne.n	8009c4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e069      	b.n	8009d72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d051      	beq.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cba:	d149      	bne.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	613b      	str	r3, [r7, #16]
   return(result);
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d18:	623a      	str	r2, [r7, #32]
 8009d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	69f9      	ldr	r1, [r7, #28]
 8009d1e:	6a3a      	ldr	r2, [r7, #32]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e5      	bne.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e010      	b.n	8009d72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69da      	ldr	r2, [r3, #28]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	4013      	ands	r3, r2
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	bf0c      	ite	eq
 8009d60:	2301      	moveq	r3, #1
 8009d62:	2300      	movne	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	f43f af46 	beq.w	8009bfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3770      	adds	r7, #112	; 0x70
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b0a3      	sub	sp, #140	; 0x8c
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4613      	mov	r3, r2
 8009d88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	88fa      	ldrh	r2, [r7, #6]
 8009d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	88fa      	ldrh	r2, [r7, #6]
 8009d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dae:	d10e      	bne.n	8009dce <UART_Start_Receive_IT+0x52>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d105      	bne.n	8009dc4 <UART_Start_Receive_IT+0x48>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dc2:	e02d      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	22ff      	movs	r2, #255	; 0xff
 8009dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dcc:	e028      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10d      	bne.n	8009df2 <UART_Start_Receive_IT+0x76>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d104      	bne.n	8009de8 <UART_Start_Receive_IT+0x6c>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	22ff      	movs	r2, #255	; 0xff
 8009de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009de6:	e01b      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	227f      	movs	r2, #127	; 0x7f
 8009dec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009df0:	e016      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dfa:	d10d      	bne.n	8009e18 <UART_Start_Receive_IT+0x9c>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <UART_Start_Receive_IT+0x92>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	227f      	movs	r2, #127	; 0x7f
 8009e08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e0c:	e008      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	223f      	movs	r2, #63	; 0x3f
 8009e12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e16:	e003      	b.n	8009e20 <UART_Start_Receive_IT+0xa4>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2222      	movs	r2, #34	; 0x22
 8009e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3308      	adds	r3, #8
 8009e36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009e54:	673a      	str	r2, [r7, #112]	; 0x70
 8009e56:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009e5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009e5c:	e841 2300 	strex	r3, r2, [r1]
 8009e60:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e3      	bne.n	8009e30 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e70:	d153      	bne.n	8009f1a <UART_Start_Receive_IT+0x19e>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d34d      	bcc.n	8009f1a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e86:	d107      	bne.n	8009e98 <UART_Start_Receive_IT+0x11c>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a4b      	ldr	r2, [pc, #300]	; (8009fc0 <UART_Start_Receive_IT+0x244>)
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70
 8009e96:	e002      	b.n	8009e9e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4a4a      	ldr	r2, [pc, #296]	; (8009fc4 <UART_Start_Receive_IT+0x248>)
 8009e9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01a      	beq.n	8009ee4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ed2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ed6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e4      	bne.n	8009eae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f04:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e5      	bne.n	8009ee4 <UART_Start_Receive_IT+0x168>
 8009f18:	e04a      	b.n	8009fb0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f22:	d107      	bne.n	8009f34 <UART_Start_Receive_IT+0x1b8>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a26      	ldr	r2, [pc, #152]	; (8009fc8 <UART_Start_Receive_IT+0x24c>)
 8009f30:	671a      	str	r2, [r3, #112]	; 0x70
 8009f32:	e002      	b.n	8009f3a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4a25      	ldr	r2, [pc, #148]	; (8009fcc <UART_Start_Receive_IT+0x250>)
 8009f38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d019      	beq.n	8009f7e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009f5e:	677b      	str	r3, [r7, #116]	; 0x74
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34
 8009f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e6      	bne.n	8009f4a <UART_Start_Receive_IT+0x1ce>
 8009f7c:	e018      	b.n	8009fb0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f043 0320 	orr.w	r3, r3, #32
 8009f92:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9c:	623b      	str	r3, [r7, #32]
 8009f9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	69f9      	ldr	r1, [r7, #28]
 8009fa2:	6a3a      	ldr	r2, [r7, #32]
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e6      	bne.n	8009f7e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	378c      	adds	r7, #140	; 0x8c
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	0800aa85 	.word	0x0800aa85
 8009fc4:	0800a78d 	.word	0x0800a78d
 8009fc8:	0800a62d 	.word	0x0800a62d
 8009fcc:	0800a4cd 	.word	0x0800a4cd

08009fd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b096      	sub	sp, #88	; 0x58
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2222      	movs	r2, #34	; 0x22
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a000:	2b00      	cmp	r3, #0
 800a002:	d02c      	beq.n	800a05e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a008:	4a42      	ldr	r2, [pc, #264]	; (800a114 <UART_Start_Receive_DMA+0x144>)
 800a00a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a010:	4a41      	ldr	r2, [pc, #260]	; (800a118 <UART_Start_Receive_DMA+0x148>)
 800a012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a018:	4a40      	ldr	r2, [pc, #256]	; (800a11c <UART_Start_Receive_DMA+0x14c>)
 800a01a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a020:	2200      	movs	r2, #0
 800a022:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3324      	adds	r3, #36	; 0x24
 800a02e:	4619      	mov	r1, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a034:	461a      	mov	r2, r3
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	f7f8 fc1c 	bl	8002874 <HAL_DMA_Start_IT>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00d      	beq.n	800a05e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2210      	movs	r2, #16
 800a046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e055      	b.n	800a10a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d018      	beq.n	800a0a0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	e853 3f00 	ldrex	r3, [r3]
 800a07a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a082:	657b      	str	r3, [r7, #84]	; 0x54
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a08c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a08e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a094:	e841 2300 	strex	r3, r2, [r1]
 800a098:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1e6      	bne.n	800a06e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	f043 0301 	orr.w	r3, r3, #1
 800a0b6:	653b      	str	r3, [r7, #80]	; 0x50
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0c0:	637a      	str	r2, [r7, #52]	; 0x34
 800a0c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0f4:	623a      	str	r2, [r7, #32]
 800a0f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69f9      	ldr	r1, [r7, #28]
 800a0fa:	6a3a      	ldr	r2, [r7, #32]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	61bb      	str	r3, [r7, #24]
   return(result);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3758      	adds	r7, #88	; 0x58
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	0800a271 	.word	0x0800a271
 800a118:	0800a393 	.word	0x0800a393
 800a11c:	0800a3cb 	.word	0x0800a3cb

0800a120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b08f      	sub	sp, #60	; 0x3c
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	61fb      	str	r3, [r7, #28]
   return(result);
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a148:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a14c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e6      	bne.n	800a128 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	60bb      	str	r3, [r7, #8]
   return(result);
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a170:	633b      	str	r3, [r7, #48]	; 0x30
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a17a:	61ba      	str	r2, [r7, #24]
 800a17c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6979      	ldr	r1, [r7, #20]
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	613b      	str	r3, [r7, #16]
   return(result);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2220      	movs	r2, #32
 800a192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a196:	bf00      	nop
 800a198:	373c      	adds	r7, #60	; 0x3c
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b095      	sub	sp, #84	; 0x54
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a1cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e6      	bne.n	800a1ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	e853 3f00 	ldrex	r3, [r3]
 800a1ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <UART_EndRxTransfer+0xc8>)
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e5      	bne.n	800a1de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a216:	2b01      	cmp	r3, #1
 800a218:	d118      	bne.n	800a24c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	60bb      	str	r3, [r7, #8]
   return(result);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0310 	bic.w	r3, r3, #16
 800a22e:	647b      	str	r3, [r7, #68]	; 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6979      	ldr	r1, [r7, #20]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e6      	bne.n	800a21a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a260:	bf00      	nop
 800a262:	3754      	adds	r7, #84	; 0x54
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	effffffe 	.word	0xeffffffe

0800a270 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b09c      	sub	sp, #112	; 0x70
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a286:	d071      	beq.n	800a36c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e6      	bne.n	800a290 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d4:	f023 0301 	bic.w	r3, r3, #1
 800a2d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2e2:	647a      	str	r2, [r7, #68]	; 0x44
 800a2e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2ea:	e841 2300 	strex	r3, r2, [r1]
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e5      	bne.n	800a2c2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	623b      	str	r3, [r7, #32]
   return(result);
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a30c:	663b      	str	r3, [r7, #96]	; 0x60
 800a30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a316:	633a      	str	r2, [r7, #48]	; 0x30
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32c:	2220      	movs	r2, #32
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d118      	bne.n	800a36c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	60fb      	str	r3, [r7, #12]
   return(result);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0310 	bic.w	r3, r3, #16
 800a34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	69b9      	ldr	r1, [r7, #24]
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	617b      	str	r3, [r7, #20]
   return(result);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e6      	bne.n	800a33a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	2b01      	cmp	r3, #1
 800a372:	d107      	bne.n	800a384 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a37a:	4619      	mov	r1, r3
 800a37c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a37e:	f7fe fdd3 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a382:	e002      	b.n	800a38a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800a384:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a386:	f7f7 fc79 	bl	8001c7c <HAL_UART_RxCpltCallback>
}
 800a38a:	bf00      	nop
 800a38c:	3770      	adds	r7, #112	; 0x70
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d109      	bne.n	800a3bc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7fe fdb7 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ba:	e002      	b.n	800a3c2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7fe fd9f 	bl	8008f00 <HAL_UART_RxHalfCpltCallback>
}
 800a3c2:	bf00      	nop
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b086      	sub	sp, #24
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d109      	bne.n	800a40a <UART_DMAError+0x40>
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b21      	cmp	r3, #33	; 0x21
 800a3fa:	d106      	bne.n	800a40a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a404:	6978      	ldr	r0, [r7, #20]
 800a406:	f7ff fe8b 	bl	800a120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a414:	2b40      	cmp	r3, #64	; 0x40
 800a416:	d109      	bne.n	800a42c <UART_DMAError+0x62>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b22      	cmp	r3, #34	; 0x22
 800a41c:	d106      	bne.n	800a42c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2200      	movs	r2, #0
 800a422:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff febc 	bl	800a1a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a432:	f043 0210 	orr.w	r2, r3, #16
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a43c:	6978      	ldr	r0, [r7, #20]
 800a43e:	f7fe fd69 	bl	8008f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a442:	bf00      	nop
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7fe fd53 	bl	8008f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b088      	sub	sp, #32
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a492:	61fb      	str	r3, [r7, #28]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6979      	ldr	r1, [r7, #20]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe fd14 	bl	8008eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4c4:	bf00      	nop
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b096      	sub	sp, #88	; 0x58
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b22      	cmp	r3, #34	; 0x22
 800a4e6:	f040 8095 	bne.w	800a614 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a4f8:	b2d9      	uxtb	r1, r3
 800a4fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a504:	400a      	ands	r2, r1
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d178      	bne.n	800a624 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a546:	653b      	str	r3, [r7, #80]	; 0x50
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a550:	647b      	str	r3, [r7, #68]	; 0x44
 800a552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3308      	adds	r3, #8
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	623b      	str	r3, [r7, #32]
   return(result);
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	f023 0301 	bic.w	r3, r3, #1
 800a57a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3308      	adds	r3, #8
 800a582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a584:	633a      	str	r2, [r7, #48]	; 0x30
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e5      	bne.n	800a564 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d12e      	bne.n	800a60c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0310 	bic.w	r3, r3, #16
 800a5c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	69b9      	ldr	r1, [r7, #24]
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e6      	bne.n	800a5b4 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b10      	cmp	r3, #16
 800a5f2:	d103      	bne.n	800a5fc <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2210      	movs	r2, #16
 800a5fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7fe fc8f 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a60a:	e00b      	b.n	800a624 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7f7 fb35 	bl	8001c7c <HAL_UART_RxCpltCallback>
}
 800a612:	e007      	b.n	800a624 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0208 	orr.w	r2, r2, #8
 800a622:	619a      	str	r2, [r3, #24]
}
 800a624:	bf00      	nop
 800a626:	3758      	adds	r7, #88	; 0x58
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b096      	sub	sp, #88	; 0x58
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a63a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	2b22      	cmp	r3, #34	; 0x22
 800a646:	f040 8095 	bne.w	800a774 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a658:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a65a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a65e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a662:	4013      	ands	r3, r2
 800a664:	b29a      	uxth	r2, r3
 800a666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66e:	1c9a      	adds	r2, r3, #2
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3b01      	subs	r3, #1
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d178      	bne.n	800a784 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a6b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e6      	bne.n	800a692 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f023 0301 	bic.w	r3, r3, #1
 800a6da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e5      	bne.n	800a6c4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d12e      	bne.n	800a76c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	60bb      	str	r3, [r7, #8]
   return(result);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f023 0310 	bic.w	r3, r3, #16
 800a728:	647b      	str	r3, [r7, #68]	; 0x44
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	613b      	str	r3, [r7, #16]
   return(result);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b10      	cmp	r3, #16
 800a752:	d103      	bne.n	800a75c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2210      	movs	r2, #16
 800a75a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7fe fbdf 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a76a:	e00b      	b.n	800a784 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7f7 fa85 	bl	8001c7c <HAL_UART_RxCpltCallback>
}
 800a772:	e007      	b.n	800a784 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0208 	orr.w	r2, r2, #8
 800a782:	619a      	str	r2, [r3, #24]
}
 800a784:	bf00      	nop
 800a786:	3758      	adds	r7, #88	; 0x58
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b0a6      	sub	sp, #152	; 0x98
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a79a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c2:	2b22      	cmp	r3, #34	; 0x22
 800a7c4:	f040 814d 	bne.w	800aa62 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7d2:	e0f4      	b.n	800a9be <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7de:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a7e2:	b2d9      	uxtb	r1, r3
 800a7e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ee:	400a      	ands	r2, r1
 800a7f0:	b2d2      	uxtb	r2, r2
 800a7f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a804:	b29b      	uxth	r3, r3
 800a806:	3b01      	subs	r3, #1
 800a808:	b29a      	uxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a81a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	2b00      	cmp	r3, #0
 800a824:	d053      	beq.n	800a8ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a826:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d011      	beq.n	800a856 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00b      	beq.n	800a856 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2201      	movs	r2, #1
 800a844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a84c:	f043 0201 	orr.w	r2, r3, #1
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d011      	beq.n	800a886 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00b      	beq.n	800a886 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2202      	movs	r2, #2
 800a874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a87c:	f043 0204 	orr.w	r2, r3, #4
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a886:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d011      	beq.n	800a8b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2204      	movs	r2, #4
 800a8a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ac:	f043 0202 	orr.w	r2, r3, #2
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d006      	beq.n	800a8ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7fe fb27 	bl	8008f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d171      	bne.n	800a9be <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a8e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8fe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a90a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e4      	bne.n	800a8da <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a922:	4b56      	ldr	r3, [pc, #344]	; (800aa7c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a924:	4013      	ands	r3, r2
 800a926:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3308      	adds	r3, #8
 800a92e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a930:	657a      	str	r2, [r7, #84]	; 0x54
 800a932:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e5      	bne.n	800a910 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2220      	movs	r2, #32
 800a948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a956:	2b01      	cmp	r3, #1
 800a958:	d12e      	bne.n	800a9b8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a968:	e853 3f00 	ldrex	r3, [r3]
 800a96c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	f023 0310 	bic.w	r3, r3, #16
 800a974:	67bb      	str	r3, [r7, #120]	; 0x78
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a97e:	643b      	str	r3, [r7, #64]	; 0x40
 800a980:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e6      	bne.n	800a960 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f003 0310 	and.w	r3, r3, #16
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d103      	bne.n	800a9a8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2210      	movs	r2, #16
 800a9a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7fe fab9 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
 800a9b6:	e002      	b.n	800a9be <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7f7 f95f 	bl	8001c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d006      	beq.n	800a9d4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800a9c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a9ca:	f003 0320 	and.w	r3, r3, #32
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f47f af00 	bne.w	800a7d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d045      	beq.n	800aa72 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d23e      	bcs.n	800aa72 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa0a:	673b      	str	r3, [r7, #112]	; 0x70
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3308      	adds	r3, #8
 800aa12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e5      	bne.n	800a9f4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800aa2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f043 0320 	orr.w	r3, r3, #32
 800aa42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	6979      	ldr	r1, [r7, #20]
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	613b      	str	r3, [r7, #16]
   return(result);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e6      	bne.n	800aa2e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa60:	e007      	b.n	800aa72 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699a      	ldr	r2, [r3, #24]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 0208 	orr.w	r2, r2, #8
 800aa70:	619a      	str	r2, [r3, #24]
}
 800aa72:	bf00      	nop
 800aa74:	3798      	adds	r7, #152	; 0x98
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	effffffe 	.word	0xeffffffe
 800aa80:	0800a4cd 	.word	0x0800a4cd

0800aa84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b0a8      	sub	sp, #160	; 0xa0
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa92:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	2b22      	cmp	r3, #34	; 0x22
 800aabc:	f040 8151 	bne.w	800ad62 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aac6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aaca:	e0f8      	b.n	800acbe <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800aade:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800aae2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aae6:	4013      	ands	r3, r2
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf4:	1c9a      	adds	r2, r3, #2
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	3b01      	subs	r3, #1
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d053      	beq.n	800abca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d011      	beq.n	800ab52 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ab2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab48:	f043 0201 	orr.w	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d011      	beq.n	800ab82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ab5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00b      	beq.n	800ab82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab78:	f043 0204 	orr.w	r2, r3, #4
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d011      	beq.n	800abb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ab8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2204      	movs	r2, #4
 800aba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aba8:	f043 0202 	orr.w	r2, r3, #2
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d006      	beq.n	800abca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7fe f9a9 	bl	8008f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d173      	bne.n	800acbe <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800abe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abfa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e4      	bne.n	800abd6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac1e:	4b57      	ldr	r3, [pc, #348]	; (800ad7c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac30:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e3      	bne.n	800ac0c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d12e      	bne.n	800acb8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac70:	f023 0310 	bic.w	r3, r3, #16
 800ac74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e6      	bne.n	800ac60 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d103      	bne.n	800aca8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2210      	movs	r2, #16
 800aca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7fe f939 	bl	8008f28 <HAL_UARTEx_RxEventCallback>
 800acb6:	e002      	b.n	800acbe <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7f6 ffdf 	bl	8001c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800acc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f47f aefc 	bne.w	800aacc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acda:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d045      	beq.n	800ad72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d23e      	bcs.n	800ad72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3308      	adds	r3, #8
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	e853 3f00 	ldrex	r3, [r3]
 800ad02:	623b      	str	r3, [r7, #32]
   return(result);
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad0a:	677b      	str	r3, [r7, #116]	; 0x74
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3308      	adds	r3, #8
 800ad12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad14:	633a      	str	r2, [r7, #48]	; 0x30
 800ad16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1c:	e841 2300 	strex	r3, r2, [r1]
 800ad20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e5      	bne.n	800acf4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a15      	ldr	r2, [pc, #84]	; (800ad80 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ad2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	e853 3f00 	ldrex	r3, [r3]
 800ad3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f043 0320 	orr.w	r3, r3, #32
 800ad42:	673b      	str	r3, [r7, #112]	; 0x70
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	69b9      	ldr	r1, [r7, #24]
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	617b      	str	r3, [r7, #20]
   return(result);
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e6      	bne.n	800ad2e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad60:	e007      	b.n	800ad72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0208 	orr.w	r2, r2, #8
 800ad70:	619a      	str	r2, [r3, #24]
}
 800ad72:	bf00      	nop
 800ad74:	37a0      	adds	r7, #160	; 0xa0
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	effffffe 	.word	0xeffffffe
 800ad80:	0800a62d 	.word	0x0800a62d

0800ad84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <HAL_UARTEx_DisableFifoMode+0x16>
 800add2:	2302      	movs	r3, #2
 800add4:	e027      	b.n	800ae26 <HAL_UARTEx_DisableFifoMode+0x66>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2224      	movs	r2, #36	; 0x24
 800ade2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0201 	bic.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2220      	movs	r2, #32
 800ae18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d101      	bne.n	800ae4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae46:	2302      	movs	r3, #2
 800ae48:	e02d      	b.n	800aea6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2224      	movs	r2, #36	; 0x24
 800ae56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0201 	bic.w	r2, r2, #1
 800ae70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f850 	bl	800af2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d101      	bne.n	800aec6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aec2:	2302      	movs	r3, #2
 800aec4:	e02d      	b.n	800af22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2224      	movs	r2, #36	; 0x24
 800aed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0201 	bic.w	r2, r2, #1
 800aeec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	430a      	orrs	r2, r1
 800af00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f812 	bl	800af2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2220      	movs	r2, #32
 800af14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d108      	bne.n	800af4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af4c:	e031      	b.n	800afb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af4e:	2310      	movs	r3, #16
 800af50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af52:	2310      	movs	r3, #16
 800af54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	0e5b      	lsrs	r3, r3, #25
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	0f5b      	lsrs	r3, r3, #29
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 0307 	and.w	r3, r3, #7
 800af74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af76:	7bbb      	ldrb	r3, [r7, #14]
 800af78:	7b3a      	ldrb	r2, [r7, #12]
 800af7a:	4911      	ldr	r1, [pc, #68]	; (800afc0 <UARTEx_SetNbDataToProcess+0x94>)
 800af7c:	5c8a      	ldrb	r2, [r1, r2]
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af82:	7b3a      	ldrb	r2, [r7, #12]
 800af84:	490f      	ldr	r1, [pc, #60]	; (800afc4 <UARTEx_SetNbDataToProcess+0x98>)
 800af86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af88:	fb93 f3f2 	sdiv	r3, r3, r2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	7b7a      	ldrb	r2, [r7, #13]
 800af98:	4909      	ldr	r1, [pc, #36]	; (800afc0 <UARTEx_SetNbDataToProcess+0x94>)
 800af9a:	5c8a      	ldrb	r2, [r1, r2]
 800af9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afa0:	7b7a      	ldrb	r2, [r7, #13]
 800afa2:	4908      	ldr	r1, [pc, #32]	; (800afc4 <UARTEx_SetNbDataToProcess+0x98>)
 800afa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afa6:	fb93 f3f2 	sdiv	r3, r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	0800efdc 	.word	0x0800efdc
 800afc4:	0800efe4 	.word	0x0800efe4

0800afc8 <__NVIC_SetPriority>:
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800afd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	db0a      	blt.n	800aff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	490c      	ldr	r1, [pc, #48]	; (800b014 <__NVIC_SetPriority+0x4c>)
 800afe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afe6:	0112      	lsls	r2, r2, #4
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	440b      	add	r3, r1
 800afec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aff0:	e00a      	b.n	800b008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	4908      	ldr	r1, [pc, #32]	; (800b018 <__NVIC_SetPriority+0x50>)
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	3b04      	subs	r3, #4
 800b000:	0112      	lsls	r2, r2, #4
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	440b      	add	r3, r1
 800b006:	761a      	strb	r2, [r3, #24]
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	e000e100 	.word	0xe000e100
 800b018:	e000ed00 	.word	0xe000ed00

0800b01c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <SysTick_Handler+0x1c>)
 800b022:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b024:	f001 fd86 	bl	800cb34 <xTaskGetSchedulerState>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d001      	beq.n	800b032 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b02e:	f002 fb6b 	bl	800d708 <xPortSysTickHandler>
  }
}
 800b032:	bf00      	nop
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	e000e010 	.word	0xe000e010

0800b03c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b040:	2100      	movs	r1, #0
 800b042:	f06f 0004 	mvn.w	r0, #4
 800b046:	f7ff ffbf 	bl	800afc8 <__NVIC_SetPriority>
#endif
}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b056:	f3ef 8305 	mrs	r3, IPSR
 800b05a:	603b      	str	r3, [r7, #0]
  return(result);
 800b05c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b062:	f06f 0305 	mvn.w	r3, #5
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	e00c      	b.n	800b084 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b06a:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <osKernelInitialize+0x44>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d105      	bne.n	800b07e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b072:	4b08      	ldr	r3, [pc, #32]	; (800b094 <osKernelInitialize+0x44>)
 800b074:	2201      	movs	r2, #1
 800b076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b078:	2300      	movs	r3, #0
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	e002      	b.n	800b084 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b084:	687b      	ldr	r3, [r7, #4]
}
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	24002840 	.word	0x24002840

0800b098 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b09e:	f3ef 8305 	mrs	r3, IPSR
 800b0a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b0a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b0aa:	f06f 0305 	mvn.w	r3, #5
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	e010      	b.n	800b0d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <osKernelStart+0x48>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d109      	bne.n	800b0ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b0ba:	f7ff ffbf 	bl	800b03c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <osKernelStart+0x48>)
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b0c4:	f001 f8da 	bl	800c27c <vTaskStartScheduler>
      stat = osOK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	607b      	str	r3, [r7, #4]
 800b0cc:	e002      	b.n	800b0d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0d4:	687b      	ldr	r3, [r7, #4]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	24002840 	.word	0x24002840

0800b0e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08e      	sub	sp, #56	; 0x38
 800b0e8:	af04      	add	r7, sp, #16
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f4:	f3ef 8305 	mrs	r3, IPSR
 800b0f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b0fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d17e      	bne.n	800b1fe <osThreadNew+0x11a>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d07b      	beq.n	800b1fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b106:	2380      	movs	r3, #128	; 0x80
 800b108:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b10a:	2318      	movs	r3, #24
 800b10c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b112:	f04f 33ff 	mov.w	r3, #4294967295
 800b116:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d045      	beq.n	800b1aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <osThreadNew+0x48>
        name = attr->name;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <osThreadNew+0x6e>
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2b38      	cmp	r3, #56	; 0x38
 800b144:	d805      	bhi.n	800b152 <osThreadNew+0x6e>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <osThreadNew+0x72>
        return (NULL);
 800b152:	2300      	movs	r3, #0
 800b154:	e054      	b.n	800b200 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	089b      	lsrs	r3, r3, #2
 800b164:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00e      	beq.n	800b18c <osThreadNew+0xa8>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	2bbb      	cmp	r3, #187	; 0xbb
 800b174:	d90a      	bls.n	800b18c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d006      	beq.n	800b18c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <osThreadNew+0xa8>
        mem = 1;
 800b186:	2301      	movs	r3, #1
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	e010      	b.n	800b1ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10c      	bne.n	800b1ae <osThreadNew+0xca>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d108      	bne.n	800b1ae <osThreadNew+0xca>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d104      	bne.n	800b1ae <osThreadNew+0xca>
          mem = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61bb      	str	r3, [r7, #24]
 800b1a8:	e001      	b.n	800b1ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d110      	bne.n	800b1d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1bc:	9202      	str	r2, [sp, #8]
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 fe9e 	bl	800bf0c <xTaskCreateStatic>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	e013      	b.n	800b1fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d110      	bne.n	800b1fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	f107 0310 	add.w	r3, r7, #16
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 fee9 	bl	800bfc6 <xTaskCreate>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d001      	beq.n	800b1fe <osThreadNew+0x11a>
            hTask = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1fe:	693b      	ldr	r3, [r7, #16]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3728      	adds	r7, #40	; 0x28
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	; 0x28
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b218:	f3ef 8305 	mrs	r3, IPSR
 800b21c:	613b      	str	r3, [r7, #16]
  return(result);
 800b21e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b220:	2b00      	cmp	r3, #0
 800b222:	d15f      	bne.n	800b2e4 <osMessageQueueNew+0xdc>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d05c      	beq.n	800b2e4 <osMessageQueueNew+0xdc>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d059      	beq.n	800b2e4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d029      	beq.n	800b290 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d012      	beq.n	800b26a <osMessageQueueNew+0x62>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	2b4f      	cmp	r3, #79	; 0x4f
 800b24a:	d90e      	bls.n	800b26a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00a      	beq.n	800b26a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	695a      	ldr	r2, [r3, #20]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	68b9      	ldr	r1, [r7, #8]
 800b25c:	fb01 f303 	mul.w	r3, r1, r3
 800b260:	429a      	cmp	r2, r3
 800b262:	d302      	bcc.n	800b26a <osMessageQueueNew+0x62>
        mem = 1;
 800b264:	2301      	movs	r3, #1
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	e014      	b.n	800b294 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d110      	bne.n	800b294 <osMessageQueueNew+0x8c>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10c      	bne.n	800b294 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d108      	bne.n	800b294 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <osMessageQueueNew+0x8c>
          mem = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61bb      	str	r3, [r7, #24]
 800b28e:	e001      	b.n	800b294 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d10b      	bne.n	800b2b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691a      	ldr	r2, [r3, #16]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	9100      	str	r1, [sp, #0]
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f971 	bl	800b590 <xQueueGenericCreateStatic>
 800b2ae:	61f8      	str	r0, [r7, #28]
 800b2b0:	e008      	b.n	800b2c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d105      	bne.n	800b2c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 f9df 	bl	800b680 <xQueueGenericCreate>
 800b2c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00c      	beq.n	800b2e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	e001      	b.n	800b2dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b2dc:	6979      	ldr	r1, [r7, #20]
 800b2de:	69f8      	ldr	r0, [r7, #28]
 800b2e0:	f000 fdb6 	bl	800be50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4a07      	ldr	r2, [pc, #28]	; (800b31c <vApplicationGetIdleTaskMemory+0x2c>)
 800b300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	4a06      	ldr	r2, [pc, #24]	; (800b320 <vApplicationGetIdleTaskMemory+0x30>)
 800b306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2280      	movs	r2, #128	; 0x80
 800b30c:	601a      	str	r2, [r3, #0]
}
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	24002844 	.word	0x24002844
 800b320:	24002900 	.word	0x24002900

0800b324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4a07      	ldr	r2, [pc, #28]	; (800b350 <vApplicationGetTimerTaskMemory+0x2c>)
 800b334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4a06      	ldr	r2, [pc, #24]	; (800b354 <vApplicationGetTimerTaskMemory+0x30>)
 800b33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b342:	601a      	str	r2, [r3, #0]
}
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	24002b00 	.word	0x24002b00
 800b354:	24002bbc 	.word	0x24002bbc

0800b358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f103 0208 	add.w	r2, r3, #8
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295
 800b370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f103 0208 	add.w	r2, r3, #8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f103 0208 	add.w	r2, r3, #8
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	601a      	str	r2, [r3, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d103      	bne.n	800b41a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e00c      	b.n	800b434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3308      	adds	r3, #8
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e002      	b.n	800b428 <vListInsert+0x2e>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	429a      	cmp	r2, r3
 800b432:	d2f6      	bcs.n	800b422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6892      	ldr	r2, [r2, #8]
 800b482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6852      	ldr	r2, [r2, #4]
 800b48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d103      	bne.n	800b4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	689a      	ldr	r2, [r3, #8]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4ea:	f002 f87b 	bl	800d5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	68f9      	ldr	r1, [r7, #12]
 800b4f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	441a      	add	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51a:	3b01      	subs	r3, #1
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b520:	fb01 f303 	mul.w	r3, r1, r3
 800b524:	441a      	add	r2, r3
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22ff      	movs	r2, #255	; 0xff
 800b52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	22ff      	movs	r2, #255	; 0xff
 800b536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d114      	bne.n	800b56a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01a      	beq.n	800b57e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3310      	adds	r3, #16
 800b54c:	4618      	mov	r0, r3
 800b54e:	f001 f92f 	bl	800c7b0 <xTaskRemoveFromEventList>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d012      	beq.n	800b57e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <xQueueGenericReset+0xcc>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	e009      	b.n	800b57e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3310      	adds	r3, #16
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fef2 	bl	800b358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff feed 	bl	800b358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b57e:	f002 f861 	bl	800d644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b582:	2301      	movs	r3, #1
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08e      	sub	sp, #56	; 0x38
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <xQueueGenericCreateStatic+0x52>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <xQueueGenericCreateStatic+0x56>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <xQueueGenericCreateStatic+0x58>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	623b      	str	r3, [r7, #32]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <xQueueGenericCreateStatic+0x7e>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <xQueueGenericCreateStatic+0x82>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <xQueueGenericCreateStatic+0x84>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	61fb      	str	r3, [r7, #28]
}
 800b62a:	bf00      	nop
 800b62c:	e7fe      	b.n	800b62c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b62e:	2350      	movs	r3, #80	; 0x50
 800b630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b50      	cmp	r3, #80	; 0x50
 800b636:	d00a      	beq.n	800b64e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	61bb      	str	r3, [r7, #24]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b64e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00d      	beq.n	800b676 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	4613      	mov	r3, r2
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f83f 	bl	800b6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b678:	4618      	mov	r0, r3
 800b67a:	3730      	adds	r7, #48	; 0x30
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08a      	sub	sp, #40	; 0x28
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	613b      	str	r3, [r7, #16]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
 800b6b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3350      	adds	r3, #80	; 0x50
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f002 f8b5 	bl	800d828 <pvPortMalloc>
 800b6be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d011      	beq.n	800b6ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	3350      	adds	r3, #80	; 0x50
 800b6ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6d8:	79fa      	ldrb	r2, [r7, #7]
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f805 	bl	800b6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e002      	b.n	800b716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b722:	2101      	movs	r1, #1
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f7ff fecb 	bl	800b4c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b732:	bf00      	nop
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b74a:	2300      	movs	r3, #0
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericSend+0x32>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d103      	bne.n	800b77c <xQueueGenericSend+0x40>
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <xQueueGenericSend+0x44>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <xQueueGenericSend+0x46>
 800b780:	2300      	movs	r3, #0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <xQueueGenericSend+0x60>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d103      	bne.n	800b7aa <xQueueGenericSend+0x6e>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d101      	bne.n	800b7ae <xQueueGenericSend+0x72>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <xQueueGenericSend+0x74>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ca:	f001 f9b3 	bl	800cb34 <xTaskGetSchedulerState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueGenericSend+0x9e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueGenericSend+0xa2>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueGenericSend+0xa4>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fa:	f001 fef3 	bl	800d5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b806:	429a      	cmp	r2, r3
 800b808:	d302      	bcc.n	800b810 <xQueueGenericSend+0xd4>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d129      	bne.n	800b864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f000 fa0b 	bl	800bc30 <prvCopyDataToQueue>
 800b81a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d010      	beq.n	800b846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	3324      	adds	r3, #36	; 0x24
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 ffc1 	bl	800c7b0 <xTaskRemoveFromEventList>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d013      	beq.n	800b85c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b834:	4b3f      	ldr	r3, [pc, #252]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	e00a      	b.n	800b85c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b84c:	4b39      	ldr	r3, [pc, #228]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b85c:	f001 fef2 	bl	800d644 <vPortExitCritical>
				return pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	e063      	b.n	800b92c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86a:	f001 feeb 	bl	800d644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	e05c      	b.n	800b92c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b878:	f107 0314 	add.w	r3, r7, #20
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fffb 	bl	800c878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b886:	f001 fedd 	bl	800d644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88a:	f000 fd67 	bl	800c35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88e:	f001 fea9 	bl	800d5e4 <vPortEnterCritical>
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d103      	bne.n	800b8a8 <xQueueGenericSend+0x16c>
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d103      	bne.n	800b8be <xQueueGenericSend+0x182>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8be:	f001 fec1 	bl	800d644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 ffea 	bl	800c8a4 <xTaskCheckForTimeOut>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d124      	bne.n	800b920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d8:	f000 faa2 	bl	800be20 <prvIsQueueFull>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d018      	beq.n	800b914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	3310      	adds	r3, #16
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 ff10 	bl	800c710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f2:	f000 fa2d 	bl	800bd50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f000 fd3f 	bl	800c378 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f af7c 	bne.w	800b7fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b902:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	e772      	b.n	800b7fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f000 fa1b 	bl	800bd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91a:	f000 fd2d 	bl	800c378 <xTaskResumeAll>
 800b91e:	e76c      	b.n	800b7fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b922:	f000 fa15 	bl	800bd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b926:	f000 fd27 	bl	800c378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b92a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3738      	adds	r7, #56	; 0x38
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b090      	sub	sp, #64	; 0x40
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d103      	bne.n	800b974 <xQueueGenericSendFromISR+0x3c>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <xQueueGenericSendFromISR+0x40>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <xQueueGenericSendFromISR+0x42>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d103      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x6a>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <xQueueGenericSendFromISR+0x6e>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <xQueueGenericSendFromISR+0x70>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	623b      	str	r3, [r7, #32]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c2:	f001 fef1 	bl	800d7a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	61fa      	str	r2, [r7, #28]
 800b9dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <xQueueGenericSendFromISR+0xbc>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d12f      	bne.n	800ba54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0a:	f000 f911 	bl	800bc30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d112      	bne.n	800ba3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d016      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	3324      	adds	r3, #36	; 0x24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fec3 	bl	800c7b0 <xTaskRemoveFromEventList>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00e      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e007      	b.n	800ba4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba42:	3301      	adds	r3, #1
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	b25a      	sxtb	r2, r3
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba52:	e001      	b.n	800ba58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3740      	adds	r7, #64	; 0x40
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08c      	sub	sp, #48	; 0x30
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <xQueueReceive+0x30>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	623b      	str	r3, [r7, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <xQueueReceive+0x3e>
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <xQueueReceive+0x42>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <xQueueReceive+0x44>
 800bab2:	2300      	movs	r3, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueReceive+0x5e>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	61fb      	str	r3, [r7, #28]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bace:	f001 f831 	bl	800cb34 <xTaskGetSchedulerState>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <xQueueReceive+0x6e>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <xQueueReceive+0x72>
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <xQueueReceive+0x74>
 800bae2:	2300      	movs	r3, #0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueReceive+0x8e>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	61bb      	str	r3, [r7, #24]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bafe:	f001 fd71 	bl	800d5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01f      	beq.n	800bb4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb12:	f000 f8f7 	bl	800bd04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	3310      	adds	r3, #16
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fe40 	bl	800c7b0 <xTaskRemoveFromEventList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <xQueueReceive+0x1bc>)
 800bb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb46:	f001 fd7d 	bl	800d644 <vPortExitCritical>
				return pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e069      	b.n	800bc22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb54:	f001 fd76 	bl	800d644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e062      	b.n	800bc22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb62:	f107 0310 	add.w	r3, r7, #16
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fe86 	bl	800c878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb70:	f001 fd68 	bl	800d644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb74:	f000 fbf2 	bl	800c35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb78:	f001 fd34 	bl	800d5e4 <vPortEnterCritical>
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb88:	d103      	bne.n	800bb92 <xQueueReceive+0x122>
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d103      	bne.n	800bba8 <xQueueReceive+0x138>
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba8:	f001 fd4c 	bl	800d644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbac:	1d3a      	adds	r2, r7, #4
 800bbae:	f107 0310 	add.w	r3, r7, #16
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fe75 	bl	800c8a4 <xTaskCheckForTimeOut>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d123      	bne.n	800bc08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f000 f917 	bl	800bdf4 <prvIsQueueEmpty>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d017      	beq.n	800bbfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	3324      	adds	r3, #36	; 0x24
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fd9b 	bl	800c710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbdc:	f000 f8b8 	bl	800bd50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbe0:	f000 fbca 	bl	800c378 <xTaskResumeAll>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d189      	bne.n	800bafe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbea:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <xQueueReceive+0x1bc>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	e780      	b.n	800bafe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfe:	f000 f8a7 	bl	800bd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc02:	f000 fbb9 	bl	800c378 <xTaskResumeAll>
 800bc06:	e77a      	b.n	800bafe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 f8a1 	bl	800bd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc0e:	f000 fbb3 	bl	800c378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	f000 f8ee 	bl	800bdf4 <prvIsQueueEmpty>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f43f af6f 	beq.w	800bafe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3730      	adds	r7, #48	; 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed04 	.word	0xe000ed04

0800bc30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10d      	bne.n	800bc6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d14d      	bne.n	800bcf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 ff88 	bl	800cb70 <xTaskPriorityDisinherit>
 800bc60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	609a      	str	r2, [r3, #8]
 800bc68:	e043      	b.n	800bcf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d119      	bne.n	800bca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6858      	ldr	r0, [r3, #4]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc78:	461a      	mov	r2, r3
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	f002 f8e1 	bl	800de42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	441a      	add	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d32b      	bcc.n	800bcf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	e026      	b.n	800bcf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68d8      	ldr	r0, [r3, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	461a      	mov	r2, r3
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	f002 f8c7 	bl	800de42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	441a      	add	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d207      	bcs.n	800bce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd8:	425b      	negs	r3, r3
 800bcda:	441a      	add	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d105      	bne.n	800bcf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcfa:	697b      	ldr	r3, [r7, #20]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d018      	beq.n	800bd48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	441a      	add	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d303      	bcc.n	800bd38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68d9      	ldr	r1, [r3, #12]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd40:	461a      	mov	r2, r3
 800bd42:	6838      	ldr	r0, [r7, #0]
 800bd44:	f002 f87d 	bl	800de42 <memcpy>
	}
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd58:	f001 fc44 	bl	800d5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd64:	e011      	b.n	800bd8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d012      	beq.n	800bd94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3324      	adds	r3, #36	; 0x24
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fd1c 	bl	800c7b0 <xTaskRemoveFromEventList>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd7e:	f000 fdf3 	bl	800c968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dce9      	bgt.n	800bd66 <prvUnlockQueue+0x16>
 800bd92:	e000      	b.n	800bd96 <prvUnlockQueue+0x46>
					break;
 800bd94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	22ff      	movs	r2, #255	; 0xff
 800bd9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd9e:	f001 fc51 	bl	800d644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bda2:	f001 fc1f 	bl	800d5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdae:	e011      	b.n	800bdd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d012      	beq.n	800bdde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	3310      	adds	r3, #16
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fcf7 	bl	800c7b0 <xTaskRemoveFromEventList>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdc8:	f000 fdce 	bl	800c968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dce9      	bgt.n	800bdb0 <prvUnlockQueue+0x60>
 800bddc:	e000      	b.n	800bde0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	22ff      	movs	r2, #255	; 0xff
 800bde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bde8:	f001 fc2c 	bl	800d644 <vPortExitCritical>
}
 800bdec:	bf00      	nop
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdfc:	f001 fbf2 	bl	800d5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e001      	b.n	800be12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f001 fc17 	bl	800d644 <vPortExitCritical>

	return xReturn;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be28:	f001 fbdc 	bl	800d5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be34:	429a      	cmp	r2, r3
 800be36:	d102      	bne.n	800be3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	e001      	b.n	800be42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be42:	f001 fbff 	bl	800d644 <vPortExitCritical>

	return xReturn;
 800be46:	68fb      	ldr	r3, [r7, #12]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	e014      	b.n	800be8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be60:	4a0f      	ldr	r2, [pc, #60]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be6c:	490c      	ldr	r1, [pc, #48]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	4413      	add	r3, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800be82:	e006      	b.n	800be92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b07      	cmp	r3, #7
 800be8e:	d9e7      	bls.n	800be60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	24002fbc 	.word	0x24002fbc

0800bea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800beb4:	f001 fb96 	bl	800d5e4 <vPortEnterCritical>
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bebe:	b25b      	sxtb	r3, r3
 800bec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec4:	d103      	bne.n	800bece <vQueueWaitForMessageRestricted+0x2a>
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d103      	bne.n	800bee4 <vQueueWaitForMessageRestricted+0x40>
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bee4:	f001 fbae 	bl	800d644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	2b00      	cmp	r3, #0
 800beee:	d106      	bne.n	800befe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	3324      	adds	r3, #36	; 0x24
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fc2d 	bl	800c758 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f7ff ff26 	bl	800bd50 <prvUnlockQueue>
	}
 800bf04:	bf00      	nop
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08e      	sub	sp, #56	; 0x38
 800bf10:	af04      	add	r7, sp, #16
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	623b      	str	r3, [r7, #32]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	61fb      	str	r3, [r7, #28]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf52:	23bc      	movs	r3, #188	; 0xbc
 800bf54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2bbc      	cmp	r3, #188	; 0xbc
 800bf5a:	d00a      	beq.n	800bf72 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	61bb      	str	r3, [r7, #24]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d01e      	beq.n	800bfb8 <xTaskCreateStatic+0xac>
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01b      	beq.n	800bfb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf92:	2300      	movs	r3, #0
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	f107 0314 	add.w	r3, r7, #20
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f850 	bl	800c050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfb2:	f000 f8f3 	bl	800c19c <prvAddNewTaskToReadyList>
 800bfb6:	e001      	b.n	800bfbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfbc:	697b      	ldr	r3, [r7, #20]
	}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b08c      	sub	sp, #48	; 0x30
 800bfca:	af04      	add	r7, sp, #16
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	603b      	str	r3, [r7, #0]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfd6:	88fb      	ldrh	r3, [r7, #6]
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 fc24 	bl	800d828 <pvPortMalloc>
 800bfe0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00e      	beq.n	800c006 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bfe8:	20bc      	movs	r0, #188	; 0xbc
 800bfea:	f001 fc1d 	bl	800d828 <pvPortMalloc>
 800bfee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	631a      	str	r2, [r3, #48]	; 0x30
 800bffc:	e005      	b.n	800c00a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f001 fcde 	bl	800d9c0 <vPortFree>
 800c004:	e001      	b.n	800c00a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d017      	beq.n	800c040 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c018:	88fa      	ldrh	r2, [r7, #6]
 800c01a:	2300      	movs	r3, #0
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	9302      	str	r3, [sp, #8]
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68b9      	ldr	r1, [r7, #8]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 f80e 	bl	800c050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c034:	69f8      	ldr	r0, [r7, #28]
 800c036:	f000 f8b1 	bl	800c19c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	e002      	b.n	800c046 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c040:	f04f 33ff 	mov.w	r3, #4294967295
 800c044:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c046:	69bb      	ldr	r3, [r7, #24]
	}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	461a      	mov	r2, r3
 800c068:	21a5      	movs	r1, #165	; 0xa5
 800c06a:	f001 fef8 	bl	800de5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c078:	440b      	add	r3, r1
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f023 0307 	bic.w	r3, r3, #7
 800c086:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00a      	beq.n	800c0a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	617b      	str	r3, [r7, #20]
}
 800c0a4:	bf00      	nop
 800c0a6:	e7fe      	b.n	800c0a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01f      	beq.n	800c0ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	e012      	b.n	800c0da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	7819      	ldrb	r1, [r3, #0]
 800c0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3334      	adds	r3, #52	; 0x34
 800c0c4:	460a      	mov	r2, r1
 800c0c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	2b0f      	cmp	r3, #15
 800c0de:	d9e9      	bls.n	800c0b4 <prvInitialiseNewTask+0x64>
 800c0e0:	e000      	b.n	800c0e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c0e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0ec:	e003      	b.n	800c0f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	2b37      	cmp	r3, #55	; 0x37
 800c0fa:	d901      	bls.n	800c100 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c0fc:	2337      	movs	r3, #55	; 0x37
 800c0fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c104:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	2200      	movs	r2, #0
 800c110:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	3304      	adds	r3, #4
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff f93e 	bl	800b398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	3318      	adds	r3, #24
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff f939 	bl	800b398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	2200      	movs	r2, #0
 800c148:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	3354      	adds	r3, #84	; 0x54
 800c150:	2260      	movs	r2, #96	; 0x60
 800c152:	2100      	movs	r1, #0
 800c154:	4618      	mov	r0, r3
 800c156:	f001 fe82 	bl	800de5e <memset>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	4a0c      	ldr	r2, [pc, #48]	; (800c190 <prvInitialiseNewTask+0x140>)
 800c15e:	659a      	str	r2, [r3, #88]	; 0x58
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	4a0c      	ldr	r2, [pc, #48]	; (800c194 <prvInitialiseNewTask+0x144>)
 800c164:	65da      	str	r2, [r3, #92]	; 0x5c
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	4a0b      	ldr	r2, [pc, #44]	; (800c198 <prvInitialiseNewTask+0x148>)
 800c16a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	69b8      	ldr	r0, [r7, #24]
 800c172:	f001 f90d 	bl	800d390 <pxPortInitialiseStack>
 800c176:	4602      	mov	r2, r0
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c188:	bf00      	nop
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	0800f00c 	.word	0x0800f00c
 800c194:	0800f02c 	.word	0x0800f02c
 800c198:	0800efec 	.word	0x0800efec

0800c19c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1a4:	f001 fa1e 	bl	800d5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1a8:	4b2d      	ldr	r3, [pc, #180]	; (800c260 <prvAddNewTaskToReadyList+0xc4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	4a2c      	ldr	r2, [pc, #176]	; (800c260 <prvAddNewTaskToReadyList+0xc4>)
 800c1b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1b2:	4b2c      	ldr	r3, [pc, #176]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d109      	bne.n	800c1ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1ba:	4a2a      	ldr	r2, [pc, #168]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1c0:	4b27      	ldr	r3, [pc, #156]	; (800c260 <prvAddNewTaskToReadyList+0xc4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d110      	bne.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1c8:	f000 fbf2 	bl	800c9b0 <prvInitialiseTaskLists>
 800c1cc:	e00d      	b.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1ce:	4b26      	ldr	r3, [pc, #152]	; (800c268 <prvAddNewTaskToReadyList+0xcc>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d109      	bne.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1d6:	4b23      	ldr	r3, [pc, #140]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d802      	bhi.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1ea:	4b20      	ldr	r3, [pc, #128]	; (800c26c <prvAddNewTaskToReadyList+0xd0>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <prvAddNewTaskToReadyList+0xd0>)
 800c1f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c1f4:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <prvAddNewTaskToReadyList+0xd0>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c200:	4b1b      	ldr	r3, [pc, #108]	; (800c270 <prvAddNewTaskToReadyList+0xd4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d903      	bls.n	800c210 <prvAddNewTaskToReadyList+0x74>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	4a18      	ldr	r2, [pc, #96]	; (800c270 <prvAddNewTaskToReadyList+0xd4>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a15      	ldr	r2, [pc, #84]	; (800c274 <prvAddNewTaskToReadyList+0xd8>)
 800c21e:	441a      	add	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7ff f8c3 	bl	800b3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c22c:	f001 fa0a 	bl	800d644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <prvAddNewTaskToReadyList+0xcc>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00e      	beq.n	800c256 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c242:	429a      	cmp	r2, r3
 800c244:	d207      	bcs.n	800c256 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c246:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <prvAddNewTaskToReadyList+0xdc>)
 800c248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	240034d0 	.word	0x240034d0
 800c264:	24002ffc 	.word	0x24002ffc
 800c268:	240034dc 	.word	0x240034dc
 800c26c:	240034ec 	.word	0x240034ec
 800c270:	240034d8 	.word	0x240034d8
 800c274:	24003000 	.word	0x24003000
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08a      	sub	sp, #40	; 0x28
 800c280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c286:	2300      	movs	r3, #0
 800c288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c28a:	463a      	mov	r2, r7
 800c28c:	1d39      	adds	r1, r7, #4
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff f82c 	bl	800b2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	9202      	str	r2, [sp, #8]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	460a      	mov	r2, r1
 800c2aa:	4924      	ldr	r1, [pc, #144]	; (800c33c <vTaskStartScheduler+0xc0>)
 800c2ac:	4824      	ldr	r0, [pc, #144]	; (800c340 <vTaskStartScheduler+0xc4>)
 800c2ae:	f7ff fe2d 	bl	800bf0c <xTaskCreateStatic>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4a23      	ldr	r2, [pc, #140]	; (800c344 <vTaskStartScheduler+0xc8>)
 800c2b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2b8:	4b22      	ldr	r3, [pc, #136]	; (800c344 <vTaskStartScheduler+0xc8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e001      	b.n	800c2ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d102      	bne.n	800c2d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2d0:	f000 fd10 	bl	800ccf4 <xTimerCreateTimerTask>
 800c2d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d11b      	bne.n	800c314 <vTaskStartScheduler+0x98>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	613b      	str	r3, [r7, #16]
}
 800c2ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2f0:	4b15      	ldr	r3, [pc, #84]	; (800c348 <vTaskStartScheduler+0xcc>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3354      	adds	r3, #84	; 0x54
 800c2f6:	4a15      	ldr	r2, [pc, #84]	; (800c34c <vTaskStartScheduler+0xd0>)
 800c2f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2fa:	4b15      	ldr	r3, [pc, #84]	; (800c350 <vTaskStartScheduler+0xd4>)
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c302:	4b14      	ldr	r3, [pc, #80]	; (800c354 <vTaskStartScheduler+0xd8>)
 800c304:	2201      	movs	r2, #1
 800c306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c308:	4b13      	ldr	r3, [pc, #76]	; (800c358 <vTaskStartScheduler+0xdc>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c30e:	f001 f8c7 	bl	800d4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c312:	e00e      	b.n	800c332 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31a:	d10a      	bne.n	800c332 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60fb      	str	r3, [r7, #12]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <vTaskStartScheduler+0xb4>
}
 800c332:	bf00      	nop
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0800ee10 	.word	0x0800ee10
 800c340:	0800c981 	.word	0x0800c981
 800c344:	240034f4 	.word	0x240034f4
 800c348:	24002ffc 	.word	0x24002ffc
 800c34c:	24000014 	.word	0x24000014
 800c350:	240034f0 	.word	0x240034f0
 800c354:	240034dc 	.word	0x240034dc
 800c358:	240034d4 	.word	0x240034d4

0800c35c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c360:	4b04      	ldr	r3, [pc, #16]	; (800c374 <vTaskSuspendAll+0x18>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3301      	adds	r3, #1
 800c366:	4a03      	ldr	r2, [pc, #12]	; (800c374 <vTaskSuspendAll+0x18>)
 800c368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c36a:	bf00      	nop
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	240034f8 	.word	0x240034f8

0800c378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c37e:	2300      	movs	r3, #0
 800c380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c386:	4b42      	ldr	r3, [pc, #264]	; (800c490 <xTaskResumeAll+0x118>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	603b      	str	r3, [r7, #0]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3a4:	f001 f91e 	bl	800d5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3a8:	4b39      	ldr	r3, [pc, #228]	; (800c490 <xTaskResumeAll+0x118>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4a38      	ldr	r2, [pc, #224]	; (800c490 <xTaskResumeAll+0x118>)
 800c3b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3b2:	4b37      	ldr	r3, [pc, #220]	; (800c490 <xTaskResumeAll+0x118>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d162      	bne.n	800c480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3ba:	4b36      	ldr	r3, [pc, #216]	; (800c494 <xTaskResumeAll+0x11c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d05e      	beq.n	800c480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3c2:	e02f      	b.n	800c424 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c4:	4b34      	ldr	r3, [pc, #208]	; (800c498 <xTaskResumeAll+0x120>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3318      	adds	r3, #24
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff f84b 	bl	800b46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff f846 	bl	800b46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e4:	4b2d      	ldr	r3, [pc, #180]	; (800c49c <xTaskResumeAll+0x124>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d903      	bls.n	800c3f4 <xTaskResumeAll+0x7c>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f0:	4a2a      	ldr	r2, [pc, #168]	; (800c49c <xTaskResumeAll+0x124>)
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4a27      	ldr	r2, [pc, #156]	; (800c4a0 <xTaskResumeAll+0x128>)
 800c402:	441a      	add	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fe ffd1 	bl	800b3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c414:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <xTaskResumeAll+0x12c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d302      	bcc.n	800c424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c41e:	4b22      	ldr	r3, [pc, #136]	; (800c4a8 <xTaskResumeAll+0x130>)
 800c420:	2201      	movs	r2, #1
 800c422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c424:	4b1c      	ldr	r3, [pc, #112]	; (800c498 <xTaskResumeAll+0x120>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1cb      	bne.n	800c3c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c432:	f000 fb5f 	bl	800caf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c436:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <xTaskResumeAll+0x134>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d010      	beq.n	800c464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c442:	f000 f847 	bl	800c4d4 <xTaskIncrementTick>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c44c:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <xTaskResumeAll+0x130>)
 800c44e:	2201      	movs	r2, #1
 800c450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	3b01      	subs	r3, #1
 800c456:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1f1      	bne.n	800c442 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <xTaskResumeAll+0x134>)
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c464:	4b10      	ldr	r3, [pc, #64]	; (800c4a8 <xTaskResumeAll+0x130>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d009      	beq.n	800c480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c46c:	2301      	movs	r3, #1
 800c46e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c470:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <xTaskResumeAll+0x138>)
 800c472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c480:	f001 f8e0 	bl	800d644 <vPortExitCritical>

	return xAlreadyYielded;
 800c484:	68bb      	ldr	r3, [r7, #8]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	240034f8 	.word	0x240034f8
 800c494:	240034d0 	.word	0x240034d0
 800c498:	24003490 	.word	0x24003490
 800c49c:	240034d8 	.word	0x240034d8
 800c4a0:	24003000 	.word	0x24003000
 800c4a4:	24002ffc 	.word	0x24002ffc
 800c4a8:	240034e4 	.word	0x240034e4
 800c4ac:	240034e0 	.word	0x240034e0
 800c4b0:	e000ed04 	.word	0xe000ed04

0800c4b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <xTaskGetTickCount+0x1c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4c0:	687b      	ldr	r3, [r7, #4]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	240034d4 	.word	0x240034d4

0800c4d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4de:	4b4f      	ldr	r3, [pc, #316]	; (800c61c <xTaskIncrementTick+0x148>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f040 808f 	bne.w	800c606 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4e8:	4b4d      	ldr	r3, [pc, #308]	; (800c620 <xTaskIncrementTick+0x14c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4f0:	4a4b      	ldr	r2, [pc, #300]	; (800c620 <xTaskIncrementTick+0x14c>)
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d120      	bne.n	800c53e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4fc:	4b49      	ldr	r3, [pc, #292]	; (800c624 <xTaskIncrementTick+0x150>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <xTaskIncrementTick+0x48>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	603b      	str	r3, [r7, #0]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <xTaskIncrementTick+0x46>
 800c51c:	4b41      	ldr	r3, [pc, #260]	; (800c624 <xTaskIncrementTick+0x150>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	4b41      	ldr	r3, [pc, #260]	; (800c628 <xTaskIncrementTick+0x154>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a3f      	ldr	r2, [pc, #252]	; (800c624 <xTaskIncrementTick+0x150>)
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	4a3f      	ldr	r2, [pc, #252]	; (800c628 <xTaskIncrementTick+0x154>)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	4b3e      	ldr	r3, [pc, #248]	; (800c62c <xTaskIncrementTick+0x158>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	4a3d      	ldr	r2, [pc, #244]	; (800c62c <xTaskIncrementTick+0x158>)
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	f000 fadb 	bl	800caf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c53e:	4b3c      	ldr	r3, [pc, #240]	; (800c630 <xTaskIncrementTick+0x15c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	429a      	cmp	r2, r3
 800c546:	d349      	bcc.n	800c5dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c548:	4b36      	ldr	r3, [pc, #216]	; (800c624 <xTaskIncrementTick+0x150>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d104      	bne.n	800c55c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c552:	4b37      	ldr	r3, [pc, #220]	; (800c630 <xTaskIncrementTick+0x15c>)
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	601a      	str	r2, [r3, #0]
					break;
 800c55a:	e03f      	b.n	800c5dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55c:	4b31      	ldr	r3, [pc, #196]	; (800c624 <xTaskIncrementTick+0x150>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d203      	bcs.n	800c57c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c574:	4a2e      	ldr	r2, [pc, #184]	; (800c630 <xTaskIncrementTick+0x15c>)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c57a:	e02f      	b.n	800c5dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	3304      	adds	r3, #4
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe ff73 	bl	800b46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	3318      	adds	r3, #24
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe ff6a 	bl	800b46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c59c:	4b25      	ldr	r3, [pc, #148]	; (800c634 <xTaskIncrementTick+0x160>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d903      	bls.n	800c5ac <xTaskIncrementTick+0xd8>
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	4a22      	ldr	r2, [pc, #136]	; (800c634 <xTaskIncrementTick+0x160>)
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4a1f      	ldr	r2, [pc, #124]	; (800c638 <xTaskIncrementTick+0x164>)
 800c5ba:	441a      	add	r2, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	3304      	adds	r3, #4
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	f7fe fef5 	bl	800b3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5cc:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <xTaskIncrementTick+0x168>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d3b8      	bcc.n	800c548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5da:	e7b5      	b.n	800c548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5dc:	4b17      	ldr	r3, [pc, #92]	; (800c63c <xTaskIncrementTick+0x168>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	4915      	ldr	r1, [pc, #84]	; (800c638 <xTaskIncrementTick+0x164>)
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	440b      	add	r3, r1
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d901      	bls.n	800c5f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <xTaskIncrementTick+0x16c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d007      	beq.n	800c610 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c600:	2301      	movs	r3, #1
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	e004      	b.n	800c610 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <xTaskIncrementTick+0x170>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3301      	adds	r3, #1
 800c60c:	4a0d      	ldr	r2, [pc, #52]	; (800c644 <xTaskIncrementTick+0x170>)
 800c60e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c610:	697b      	ldr	r3, [r7, #20]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	240034f8 	.word	0x240034f8
 800c620:	240034d4 	.word	0x240034d4
 800c624:	24003488 	.word	0x24003488
 800c628:	2400348c 	.word	0x2400348c
 800c62c:	240034e8 	.word	0x240034e8
 800c630:	240034f0 	.word	0x240034f0
 800c634:	240034d8 	.word	0x240034d8
 800c638:	24003000 	.word	0x24003000
 800c63c:	24002ffc 	.word	0x24002ffc
 800c640:	240034e4 	.word	0x240034e4
 800c644:	240034e0 	.word	0x240034e0

0800c648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c64e:	4b2a      	ldr	r3, [pc, #168]	; (800c6f8 <vTaskSwitchContext+0xb0>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c656:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <vTaskSwitchContext+0xb4>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c65c:	e046      	b.n	800c6ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c65e:	4b27      	ldr	r3, [pc, #156]	; (800c6fc <vTaskSwitchContext+0xb4>)
 800c660:	2200      	movs	r2, #0
 800c662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c664:	4b26      	ldr	r3, [pc, #152]	; (800c700 <vTaskSwitchContext+0xb8>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	e010      	b.n	800c68e <vTaskSwitchContext+0x46>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <vTaskSwitchContext+0x40>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	607b      	str	r3, [r7, #4]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <vTaskSwitchContext+0x3e>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	491d      	ldr	r1, [pc, #116]	; (800c704 <vTaskSwitchContext+0xbc>)
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	440b      	add	r3, r1
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0e4      	beq.n	800c66c <vTaskSwitchContext+0x24>
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4a15      	ldr	r2, [pc, #84]	; (800c704 <vTaskSwitchContext+0xbc>)
 800c6ae:	4413      	add	r3, r2
 800c6b0:	60bb      	str	r3, [r7, #8]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	605a      	str	r2, [r3, #4]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d104      	bne.n	800c6d2 <vTaskSwitchContext+0x8a>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	605a      	str	r2, [r3, #4]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	4a0b      	ldr	r2, [pc, #44]	; (800c708 <vTaskSwitchContext+0xc0>)
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	4a08      	ldr	r2, [pc, #32]	; (800c700 <vTaskSwitchContext+0xb8>)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <vTaskSwitchContext+0xc0>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3354      	adds	r3, #84	; 0x54
 800c6e8:	4a08      	ldr	r2, [pc, #32]	; (800c70c <vTaskSwitchContext+0xc4>)
 800c6ea:	6013      	str	r3, [r2, #0]
}
 800c6ec:	bf00      	nop
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	240034f8 	.word	0x240034f8
 800c6fc:	240034e4 	.word	0x240034e4
 800c700:	240034d8 	.word	0x240034d8
 800c704:	24003000 	.word	0x24003000
 800c708:	24002ffc 	.word	0x24002ffc
 800c70c:	24000014 	.word	0x24000014

0800c710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10a      	bne.n	800c736 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	60fb      	str	r3, [r7, #12]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c736:	4b07      	ldr	r3, [pc, #28]	; (800c754 <vTaskPlaceOnEventList+0x44>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3318      	adds	r3, #24
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7fe fe5b 	bl	800b3fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c744:	2101      	movs	r1, #1
 800c746:	6838      	ldr	r0, [r7, #0]
 800c748:	f000 fa80 	bl	800cc4c <prvAddCurrentTaskToDelayedList>
}
 800c74c:	bf00      	nop
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	24002ffc 	.word	0x24002ffc

0800c758 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	617b      	str	r3, [r7, #20]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <vTaskPlaceOnEventListRestricted+0x54>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3318      	adds	r3, #24
 800c786:	4619      	mov	r1, r3
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7fe fe12 	bl	800b3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	68b8      	ldr	r0, [r7, #8]
 800c79e:	f000 fa55 	bl	800cc4c <prvAddCurrentTaskToDelayedList>
	}
 800c7a2:	bf00      	nop
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	24002ffc 	.word	0x24002ffc

0800c7b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10a      	bne.n	800c7dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	3318      	adds	r3, #24
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fe43 	bl	800b46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e6:	4b1e      	ldr	r3, [pc, #120]	; (800c860 <xTaskRemoveFromEventList+0xb0>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d11d      	bne.n	800c82a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fe3a 	bl	800b46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7fc:	4b19      	ldr	r3, [pc, #100]	; (800c864 <xTaskRemoveFromEventList+0xb4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d903      	bls.n	800c80c <xTaskRemoveFromEventList+0x5c>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	4a16      	ldr	r2, [pc, #88]	; (800c864 <xTaskRemoveFromEventList+0xb4>)
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c810:	4613      	mov	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4a13      	ldr	r2, [pc, #76]	; (800c868 <xTaskRemoveFromEventList+0xb8>)
 800c81a:	441a      	add	r2, r3
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	3304      	adds	r3, #4
 800c820:	4619      	mov	r1, r3
 800c822:	4610      	mov	r0, r2
 800c824:	f7fe fdc5 	bl	800b3b2 <vListInsertEnd>
 800c828:	e005      	b.n	800c836 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	3318      	adds	r3, #24
 800c82e:	4619      	mov	r1, r3
 800c830:	480e      	ldr	r0, [pc, #56]	; (800c86c <xTaskRemoveFromEventList+0xbc>)
 800c832:	f7fe fdbe 	bl	800b3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83a:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <xTaskRemoveFromEventList+0xc0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	429a      	cmp	r2, r3
 800c842:	d905      	bls.n	800c850 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c844:	2301      	movs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c848:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <xTaskRemoveFromEventList+0xc4>)
 800c84a:	2201      	movs	r2, #1
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	e001      	b.n	800c854 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c850:	2300      	movs	r3, #0
 800c852:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c854:	697b      	ldr	r3, [r7, #20]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	240034f8 	.word	0x240034f8
 800c864:	240034d8 	.word	0x240034d8
 800c868:	24003000 	.word	0x24003000
 800c86c:	24003490 	.word	0x24003490
 800c870:	24002ffc 	.word	0x24002ffc
 800c874:	240034e4 	.word	0x240034e4

0800c878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c880:	4b06      	ldr	r3, [pc, #24]	; (800c89c <vTaskInternalSetTimeOutState+0x24>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c888:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <vTaskInternalSetTimeOutState+0x28>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	240034e8 	.word	0x240034e8
 800c8a0:	240034d4 	.word	0x240034d4

0800c8a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	613b      	str	r3, [r7, #16]
}
 800c8c6:	bf00      	nop
 800c8c8:	e7fe      	b.n	800c8c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	60fb      	str	r3, [r7, #12]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8e6:	f000 fe7d 	bl	800d5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <xTaskCheckForTimeOut+0xbc>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	69ba      	ldr	r2, [r7, #24]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c902:	d102      	bne.n	800c90a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c904:	2300      	movs	r3, #0
 800c906:	61fb      	str	r3, [r7, #28]
 800c908:	e023      	b.n	800c952 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	4b15      	ldr	r3, [pc, #84]	; (800c964 <xTaskCheckForTimeOut+0xc0>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	429a      	cmp	r2, r3
 800c914:	d007      	beq.n	800c926 <xTaskCheckForTimeOut+0x82>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	69ba      	ldr	r2, [r7, #24]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d302      	bcc.n	800c926 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c920:	2301      	movs	r3, #1
 800c922:	61fb      	str	r3, [r7, #28]
 800c924:	e015      	b.n	800c952 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d20b      	bcs.n	800c948 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff ff9b 	bl	800c878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c942:	2300      	movs	r3, #0
 800c944:	61fb      	str	r3, [r7, #28]
 800c946:	e004      	b.n	800c952 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c94e:	2301      	movs	r3, #1
 800c950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c952:	f000 fe77 	bl	800d644 <vPortExitCritical>

	return xReturn;
 800c956:	69fb      	ldr	r3, [r7, #28]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3720      	adds	r7, #32
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	240034d4 	.word	0x240034d4
 800c964:	240034e8 	.word	0x240034e8

0800c968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c96c:	4b03      	ldr	r3, [pc, #12]	; (800c97c <vTaskMissedYield+0x14>)
 800c96e:	2201      	movs	r2, #1
 800c970:	601a      	str	r2, [r3, #0]
}
 800c972:	bf00      	nop
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	240034e4 	.word	0x240034e4

0800c980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c988:	f000 f852 	bl	800ca30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c98c:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <prvIdleTask+0x28>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d9f9      	bls.n	800c988 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c994:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <prvIdleTask+0x2c>)
 800c996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9a4:	e7f0      	b.n	800c988 <prvIdleTask+0x8>
 800c9a6:	bf00      	nop
 800c9a8:	24003000 	.word	0x24003000
 800c9ac:	e000ed04 	.word	0xe000ed04

0800c9b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	607b      	str	r3, [r7, #4]
 800c9ba:	e00c      	b.n	800c9d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4a12      	ldr	r2, [pc, #72]	; (800ca10 <prvInitialiseTaskLists+0x60>)
 800c9c8:	4413      	add	r3, r2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fcc4 	bl	800b358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	607b      	str	r3, [r7, #4]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b37      	cmp	r3, #55	; 0x37
 800c9da:	d9ef      	bls.n	800c9bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9dc:	480d      	ldr	r0, [pc, #52]	; (800ca14 <prvInitialiseTaskLists+0x64>)
 800c9de:	f7fe fcbb 	bl	800b358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9e2:	480d      	ldr	r0, [pc, #52]	; (800ca18 <prvInitialiseTaskLists+0x68>)
 800c9e4:	f7fe fcb8 	bl	800b358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9e8:	480c      	ldr	r0, [pc, #48]	; (800ca1c <prvInitialiseTaskLists+0x6c>)
 800c9ea:	f7fe fcb5 	bl	800b358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9ee:	480c      	ldr	r0, [pc, #48]	; (800ca20 <prvInitialiseTaskLists+0x70>)
 800c9f0:	f7fe fcb2 	bl	800b358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9f4:	480b      	ldr	r0, [pc, #44]	; (800ca24 <prvInitialiseTaskLists+0x74>)
 800c9f6:	f7fe fcaf 	bl	800b358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <prvInitialiseTaskLists+0x78>)
 800c9fc:	4a05      	ldr	r2, [pc, #20]	; (800ca14 <prvInitialiseTaskLists+0x64>)
 800c9fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <prvInitialiseTaskLists+0x7c>)
 800ca02:	4a05      	ldr	r2, [pc, #20]	; (800ca18 <prvInitialiseTaskLists+0x68>)
 800ca04:	601a      	str	r2, [r3, #0]
}
 800ca06:	bf00      	nop
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	24003000 	.word	0x24003000
 800ca14:	24003460 	.word	0x24003460
 800ca18:	24003474 	.word	0x24003474
 800ca1c:	24003490 	.word	0x24003490
 800ca20:	240034a4 	.word	0x240034a4
 800ca24:	240034bc 	.word	0x240034bc
 800ca28:	24003488 	.word	0x24003488
 800ca2c:	2400348c 	.word	0x2400348c

0800ca30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca36:	e019      	b.n	800ca6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca38:	f000 fdd4 	bl	800d5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca3c:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <prvCheckTasksWaitingTermination+0x50>)
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	3304      	adds	r3, #4
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe fd0f 	bl	800b46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca4e:	4b0d      	ldr	r3, [pc, #52]	; (800ca84 <prvCheckTasksWaitingTermination+0x54>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	4a0b      	ldr	r2, [pc, #44]	; (800ca84 <prvCheckTasksWaitingTermination+0x54>)
 800ca56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca58:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <prvCheckTasksWaitingTermination+0x58>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	4a0a      	ldr	r2, [pc, #40]	; (800ca88 <prvCheckTasksWaitingTermination+0x58>)
 800ca60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca62:	f000 fdef 	bl	800d644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f810 	bl	800ca8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca6c:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <prvCheckTasksWaitingTermination+0x58>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e1      	bne.n	800ca38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	240034a4 	.word	0x240034a4
 800ca84:	240034d0 	.word	0x240034d0
 800ca88:	240034b8 	.word	0x240034b8

0800ca8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3354      	adds	r3, #84	; 0x54
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f001 fb19 	bl	800e0d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d108      	bne.n	800caba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caac:	4618      	mov	r0, r3
 800caae:	f000 ff87 	bl	800d9c0 <vPortFree>
				vPortFree( pxTCB );
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 ff84 	bl	800d9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cab8:	e018      	b.n	800caec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d103      	bne.n	800cacc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 ff7b 	bl	800d9c0 <vPortFree>
	}
 800caca:	e00f      	b.n	800caec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d00a      	beq.n	800caec <prvDeleteTCB+0x60>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60fb      	str	r3, [r7, #12]
}
 800cae8:	bf00      	nop
 800caea:	e7fe      	b.n	800caea <prvDeleteTCB+0x5e>
	}
 800caec:	bf00      	nop
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cafa:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <prvResetNextTaskUnblockTime+0x38>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d104      	bne.n	800cb0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <prvResetNextTaskUnblockTime+0x3c>)
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb0c:	e008      	b.n	800cb20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb0e:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <prvResetNextTaskUnblockTime+0x38>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4a04      	ldr	r2, [pc, #16]	; (800cb30 <prvResetNextTaskUnblockTime+0x3c>)
 800cb1e:	6013      	str	r3, [r2, #0]
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	24003488 	.word	0x24003488
 800cb30:	240034f0 	.word	0x240034f0

0800cb34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb3a:	4b0b      	ldr	r3, [pc, #44]	; (800cb68 <xTaskGetSchedulerState+0x34>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d102      	bne.n	800cb48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb42:	2301      	movs	r3, #1
 800cb44:	607b      	str	r3, [r7, #4]
 800cb46:	e008      	b.n	800cb5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb48:	4b08      	ldr	r3, [pc, #32]	; (800cb6c <xTaskGetSchedulerState+0x38>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb50:	2302      	movs	r3, #2
 800cb52:	607b      	str	r3, [r7, #4]
 800cb54:	e001      	b.n	800cb5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb56:	2300      	movs	r3, #0
 800cb58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb5a:	687b      	ldr	r3, [r7, #4]
	}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	240034dc 	.word	0x240034dc
 800cb6c:	240034f8 	.word	0x240034f8

0800cb70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d056      	beq.n	800cc34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb86:	4b2e      	ldr	r3, [pc, #184]	; (800cc40 <xTaskPriorityDisinherit+0xd0>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d00a      	beq.n	800cba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	60fb      	str	r3, [r7, #12]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60bb      	str	r3, [r7, #8]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbc8:	1e5a      	subs	r2, r3, #1
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d02c      	beq.n	800cc34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d128      	bne.n	800cc34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe fc40 	bl	800b46c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc04:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <xTaskPriorityDisinherit+0xd4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d903      	bls.n	800cc14 <xTaskPriorityDisinherit+0xa4>
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	4a0c      	ldr	r2, [pc, #48]	; (800cc44 <xTaskPriorityDisinherit+0xd4>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4a09      	ldr	r2, [pc, #36]	; (800cc48 <xTaskPriorityDisinherit+0xd8>)
 800cc22:	441a      	add	r2, r3
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	3304      	adds	r3, #4
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f7fe fbc1 	bl	800b3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc34:	697b      	ldr	r3, [r7, #20]
	}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	24002ffc 	.word	0x24002ffc
 800cc44:	240034d8 	.word	0x240034d8
 800cc48:	24003000 	.word	0x24003000

0800cc4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc56:	4b21      	ldr	r3, [pc, #132]	; (800ccdc <prvAddCurrentTaskToDelayedList+0x90>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc5c:	4b20      	ldr	r3, [pc, #128]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fc02 	bl	800b46c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d10a      	bne.n	800cc86 <prvAddCurrentTaskToDelayedList+0x3a>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc76:	4b1a      	ldr	r3, [pc, #104]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	4819      	ldr	r0, [pc, #100]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc80:	f7fe fb97 	bl	800b3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc84:	e026      	b.n	800ccd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc8e:	4b14      	ldr	r3, [pc, #80]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d209      	bcs.n	800ccb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc9e:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3304      	adds	r3, #4
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f7fe fba5 	bl	800b3fa <vListInsert>
}
 800ccb0:	e010      	b.n	800ccd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb2:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f7fe fb9b 	bl	800b3fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccc4:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d202      	bcs.n	800ccd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ccce:	4a08      	ldr	r2, [pc, #32]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	6013      	str	r3, [r2, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	240034d4 	.word	0x240034d4
 800cce0:	24002ffc 	.word	0x24002ffc
 800cce4:	240034bc 	.word	0x240034bc
 800cce8:	2400348c 	.word	0x2400348c
 800ccec:	24003488 	.word	0x24003488
 800ccf0:	240034f0 	.word	0x240034f0

0800ccf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08a      	sub	sp, #40	; 0x28
 800ccf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ccfe:	f000 fb07 	bl	800d310 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <xTimerCreateTimerTask+0x80>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d021      	beq.n	800cd4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd12:	1d3a      	adds	r2, r7, #4
 800cd14:	f107 0108 	add.w	r1, r7, #8
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe fb01 	bl	800b324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	9202      	str	r2, [sp, #8]
 800cd2a:	9301      	str	r3, [sp, #4]
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	2300      	movs	r3, #0
 800cd32:	460a      	mov	r2, r1
 800cd34:	4910      	ldr	r1, [pc, #64]	; (800cd78 <xTimerCreateTimerTask+0x84>)
 800cd36:	4811      	ldr	r0, [pc, #68]	; (800cd7c <xTimerCreateTimerTask+0x88>)
 800cd38:	f7ff f8e8 	bl	800bf0c <xTaskCreateStatic>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	4a10      	ldr	r2, [pc, #64]	; (800cd80 <xTimerCreateTimerTask+0x8c>)
 800cd40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd42:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <xTimerCreateTimerTask+0x8c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	613b      	str	r3, [r7, #16]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd6a:	697b      	ldr	r3, [r7, #20]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	2400352c 	.word	0x2400352c
 800cd78:	0800ee18 	.word	0x0800ee18
 800cd7c:	0800ceb9 	.word	0x0800ceb9
 800cd80:	24003530 	.word	0x24003530

0800cd84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08a      	sub	sp, #40	; 0x28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	623b      	str	r3, [r7, #32]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cdb2:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <xTimerGenericCommand+0x98>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d02a      	beq.n	800ce10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b05      	cmp	r3, #5
 800cdca:	dc18      	bgt.n	800cdfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cdcc:	f7ff feb2 	bl	800cb34 <xTaskGetSchedulerState>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d109      	bne.n	800cdea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cdd6:	4b11      	ldr	r3, [pc, #68]	; (800ce1c <xTimerGenericCommand+0x98>)
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	f107 0110 	add.w	r1, r7, #16
 800cdde:	2300      	movs	r3, #0
 800cde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde2:	f7fe fcab 	bl	800b73c <xQueueGenericSend>
 800cde6:	6278      	str	r0, [r7, #36]	; 0x24
 800cde8:	e012      	b.n	800ce10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cdea:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <xTimerGenericCommand+0x98>)
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	f107 0110 	add.w	r1, r7, #16
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f7fe fca1 	bl	800b73c <xQueueGenericSend>
 800cdfa:	6278      	str	r0, [r7, #36]	; 0x24
 800cdfc:	e008      	b.n	800ce10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cdfe:	4b07      	ldr	r3, [pc, #28]	; (800ce1c <xTimerGenericCommand+0x98>)
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	f107 0110 	add.w	r1, r7, #16
 800ce06:	2300      	movs	r3, #0
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	f7fe fd95 	bl	800b938 <xQueueGenericSendFromISR>
 800ce0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3728      	adds	r7, #40	; 0x28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	2400352c 	.word	0x2400352c

0800ce20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af02      	add	r7, sp, #8
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2a:	4b22      	ldr	r3, [pc, #136]	; (800ceb4 <prvProcessExpiredTimer+0x94>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	3304      	adds	r3, #4
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fe fb17 	bl	800b46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce44:	f003 0304 	and.w	r3, r3, #4
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d022      	beq.n	800ce92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	699a      	ldr	r2, [r3, #24]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	18d1      	adds	r1, r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	6978      	ldr	r0, [r7, #20]
 800ce5a:	f000 f8d1 	bl	800d000 <prvInsertTimerInActiveList>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01f      	beq.n	800cea4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce64:	2300      	movs	r3, #0
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	6978      	ldr	r0, [r7, #20]
 800ce70:	f7ff ff88 	bl	800cd84 <xTimerGenericCommand>
 800ce74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d113      	bne.n	800cea4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	60fb      	str	r3, [r7, #12]
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce98:	f023 0301 	bic.w	r3, r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	4798      	blx	r3
}
 800ceac:	bf00      	nop
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	24003524 	.word	0x24003524

0800ceb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 f857 	bl	800cf78 <prvGetNextExpireTime>
 800ceca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4619      	mov	r1, r3
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 f803 	bl	800cedc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ced6:	f000 f8d5 	bl	800d084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ceda:	e7f1      	b.n	800cec0 <prvTimerTask+0x8>

0800cedc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cee6:	f7ff fa39 	bl	800c35c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 f866 	bl	800cfc0 <prvSampleTimeNow>
 800cef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d130      	bne.n	800cf5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <prvProcessTimerOrBlockTask+0x3c>
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d806      	bhi.n	800cf18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf0a:	f7ff fa35 	bl	800c378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf0e:	68f9      	ldr	r1, [r7, #12]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff ff85 	bl	800ce20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf16:	e024      	b.n	800cf62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d008      	beq.n	800cf30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf1e:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <prvProcessTimerOrBlockTask+0x90>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <prvProcessTimerOrBlockTask+0x50>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e000      	b.n	800cf2e <prvProcessTimerOrBlockTask+0x52>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf30:	4b0f      	ldr	r3, [pc, #60]	; (800cf70 <prvProcessTimerOrBlockTask+0x94>)
 800cf32:	6818      	ldr	r0, [r3, #0]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	f7fe ffb1 	bl	800bea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf42:	f7ff fa19 	bl	800c378 <xTaskResumeAll>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf4c:	4b09      	ldr	r3, [pc, #36]	; (800cf74 <prvProcessTimerOrBlockTask+0x98>)
 800cf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	f3bf 8f6f 	isb	sy
}
 800cf5c:	e001      	b.n	800cf62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf5e:	f7ff fa0b 	bl	800c378 <xTaskResumeAll>
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	24003528 	.word	0x24003528
 800cf70:	2400352c 	.word	0x2400352c
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf80:	4b0e      	ldr	r3, [pc, #56]	; (800cfbc <prvGetNextExpireTime+0x44>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <prvGetNextExpireTime+0x16>
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	e000      	b.n	800cf90 <prvGetNextExpireTime+0x18>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d105      	bne.n	800cfa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf9c:	4b07      	ldr	r3, [pc, #28]	; (800cfbc <prvGetNextExpireTime+0x44>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	e001      	b.n	800cfac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cfac:	68fb      	ldr	r3, [r7, #12]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	24003524 	.word	0x24003524

0800cfc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cfc8:	f7ff fa74 	bl	800c4b4 <xTaskGetTickCount>
 800cfcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cfce:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <prvSampleTimeNow+0x3c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d205      	bcs.n	800cfe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cfd8:	f000 f936 	bl	800d248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	e002      	b.n	800cfea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cfea:	4a04      	ldr	r2, [pc, #16]	; (800cffc <prvSampleTimeNow+0x3c>)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cff0:	68fb      	ldr	r3, [r7, #12]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	24003534 	.word	0x24003534

0800d000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	429a      	cmp	r2, r3
 800d024:	d812      	bhi.n	800d04c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	1ad2      	subs	r2, r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	429a      	cmp	r2, r3
 800d032:	d302      	bcc.n	800d03a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d034:	2301      	movs	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
 800d038:	e01b      	b.n	800d072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d03a:	4b10      	ldr	r3, [pc, #64]	; (800d07c <prvInsertTimerInActiveList+0x7c>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3304      	adds	r3, #4
 800d042:	4619      	mov	r1, r3
 800d044:	4610      	mov	r0, r2
 800d046:	f7fe f9d8 	bl	800b3fa <vListInsert>
 800d04a:	e012      	b.n	800d072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d206      	bcs.n	800d062 <prvInsertTimerInActiveList+0x62>
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d302      	bcc.n	800d062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d05c:	2301      	movs	r3, #1
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	e007      	b.n	800d072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d062:	4b07      	ldr	r3, [pc, #28]	; (800d080 <prvInsertTimerInActiveList+0x80>)
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3304      	adds	r3, #4
 800d06a:	4619      	mov	r1, r3
 800d06c:	4610      	mov	r0, r2
 800d06e:	f7fe f9c4 	bl	800b3fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d072:	697b      	ldr	r3, [r7, #20]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	24003528 	.word	0x24003528
 800d080:	24003524 	.word	0x24003524

0800d084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08e      	sub	sp, #56	; 0x38
 800d088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d08a:	e0ca      	b.n	800d222 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	da18      	bge.n	800d0c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d092:	1d3b      	adds	r3, r7, #4
 800d094:	3304      	adds	r3, #4
 800d096:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d10a      	bne.n	800d0b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	61fb      	str	r3, [r7, #28]
}
 800d0b0:	bf00      	nop
 800d0b2:	e7fe      	b.n	800d0b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ba:	6850      	ldr	r0, [r2, #4]
 800d0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0be:	6892      	ldr	r2, [r2, #8]
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f2c0 80aa 	blt.w	800d220 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	695b      	ldr	r3, [r3, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe f9c5 	bl	800b46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0e2:	463b      	mov	r3, r7
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7ff ff6b 	bl	800cfc0 <prvSampleTimeNow>
 800d0ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b09      	cmp	r3, #9
 800d0f0:	f200 8097 	bhi.w	800d222 <prvProcessReceivedCommands+0x19e>
 800d0f4:	a201      	add	r2, pc, #4	; (adr r2, 800d0fc <prvProcessReceivedCommands+0x78>)
 800d0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fa:	bf00      	nop
 800d0fc:	0800d125 	.word	0x0800d125
 800d100:	0800d125 	.word	0x0800d125
 800d104:	0800d125 	.word	0x0800d125
 800d108:	0800d199 	.word	0x0800d199
 800d10c:	0800d1ad 	.word	0x0800d1ad
 800d110:	0800d1f7 	.word	0x0800d1f7
 800d114:	0800d125 	.word	0x0800d125
 800d118:	0800d125 	.word	0x0800d125
 800d11c:	0800d199 	.word	0x0800d199
 800d120:	0800d1ad 	.word	0x0800d1ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d12a:	f043 0301 	orr.w	r3, r3, #1
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	18d1      	adds	r1, r2, r3
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d144:	f7ff ff5c 	bl	800d000 <prvInsertTimerInActiveList>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d069      	beq.n	800d222 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d154:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	2b00      	cmp	r3, #0
 800d162:	d05e      	beq.n	800d222 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	441a      	add	r2, r3
 800d16c:	2300      	movs	r3, #0
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	2300      	movs	r3, #0
 800d172:	2100      	movs	r1, #0
 800d174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d176:	f7ff fe05 	bl	800cd84 <xTimerGenericCommand>
 800d17a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d14f      	bne.n	800d222 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	61bb      	str	r3, [r7, #24]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d19e:	f023 0301 	bic.w	r3, r3, #1
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1aa:	e03a      	b.n	800d222 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1be:	68ba      	ldr	r2, [r7, #8]
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10a      	bne.n	800d1e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	617b      	str	r3, [r7, #20]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	699a      	ldr	r2, [r3, #24]
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	18d1      	adds	r1, r2, r3
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f0:	f7ff ff06 	bl	800d000 <prvInsertTimerInActiveList>
					break;
 800d1f4:	e015      	b.n	800d222 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d206:	f000 fbdb 	bl	800d9c0 <vPortFree>
 800d20a:	e00a      	b.n	800d222 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d212:	f023 0301 	bic.w	r3, r3, #1
 800d216:	b2da      	uxtb	r2, r3
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d21e:	e000      	b.n	800d222 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d220:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <prvProcessReceivedCommands+0x1c0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	1d39      	adds	r1, r7, #4
 800d228:	2200      	movs	r2, #0
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fc20 	bl	800ba70 <xQueueReceive>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	f47f af2a 	bne.w	800d08c <prvProcessReceivedCommands+0x8>
	}
}
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
 800d23c:	3730      	adds	r7, #48	; 0x30
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2400352c 	.word	0x2400352c

0800d248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d24e:	e048      	b.n	800d2e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d250:	4b2d      	ldr	r3, [pc, #180]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25a:	4b2b      	ldr	r3, [pc, #172]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3304      	adds	r3, #4
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe f8ff 	bl	800b46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d27c:	f003 0304 	and.w	r3, r3, #4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d02e      	beq.n	800d2e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4413      	add	r3, r2
 800d28c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	429a      	cmp	r2, r3
 800d294:	d90e      	bls.n	800d2b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2a2:	4b19      	ldr	r3, [pc, #100]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f7fe f8a4 	bl	800b3fa <vListInsert>
 800d2b2:	e016      	b.n	800d2e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	2100      	movs	r1, #0
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f7ff fd60 	bl	800cd84 <xTimerGenericCommand>
 800d2c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	603b      	str	r3, [r7, #0]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2e2:	4b09      	ldr	r3, [pc, #36]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1b1      	bne.n	800d250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d2f2:	4b06      	ldr	r3, [pc, #24]	; (800d30c <prvSwitchTimerLists+0xc4>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a04      	ldr	r2, [pc, #16]	; (800d308 <prvSwitchTimerLists+0xc0>)
 800d2f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2fa:	4a04      	ldr	r2, [pc, #16]	; (800d30c <prvSwitchTimerLists+0xc4>)
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	6013      	str	r3, [r2, #0]
}
 800d300:	bf00      	nop
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	24003524 	.word	0x24003524
 800d30c:	24003528 	.word	0x24003528

0800d310 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d316:	f000 f965 	bl	800d5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d31a:	4b15      	ldr	r3, [pc, #84]	; (800d370 <prvCheckForValidListAndQueue+0x60>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d120      	bne.n	800d364 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d322:	4814      	ldr	r0, [pc, #80]	; (800d374 <prvCheckForValidListAndQueue+0x64>)
 800d324:	f7fe f818 	bl	800b358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d328:	4813      	ldr	r0, [pc, #76]	; (800d378 <prvCheckForValidListAndQueue+0x68>)
 800d32a:	f7fe f815 	bl	800b358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d32e:	4b13      	ldr	r3, [pc, #76]	; (800d37c <prvCheckForValidListAndQueue+0x6c>)
 800d330:	4a10      	ldr	r2, [pc, #64]	; (800d374 <prvCheckForValidListAndQueue+0x64>)
 800d332:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d334:	4b12      	ldr	r3, [pc, #72]	; (800d380 <prvCheckForValidListAndQueue+0x70>)
 800d336:	4a10      	ldr	r2, [pc, #64]	; (800d378 <prvCheckForValidListAndQueue+0x68>)
 800d338:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d33a:	2300      	movs	r3, #0
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	4b11      	ldr	r3, [pc, #68]	; (800d384 <prvCheckForValidListAndQueue+0x74>)
 800d340:	4a11      	ldr	r2, [pc, #68]	; (800d388 <prvCheckForValidListAndQueue+0x78>)
 800d342:	2110      	movs	r1, #16
 800d344:	200a      	movs	r0, #10
 800d346:	f7fe f923 	bl	800b590 <xQueueGenericCreateStatic>
 800d34a:	4603      	mov	r3, r0
 800d34c:	4a08      	ldr	r2, [pc, #32]	; (800d370 <prvCheckForValidListAndQueue+0x60>)
 800d34e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <prvCheckForValidListAndQueue+0x60>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d005      	beq.n	800d364 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <prvCheckForValidListAndQueue+0x60>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	490b      	ldr	r1, [pc, #44]	; (800d38c <prvCheckForValidListAndQueue+0x7c>)
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fe fd76 	bl	800be50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d364:	f000 f96e 	bl	800d644 <vPortExitCritical>
}
 800d368:	bf00      	nop
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	2400352c 	.word	0x2400352c
 800d374:	240034fc 	.word	0x240034fc
 800d378:	24003510 	.word	0x24003510
 800d37c:	24003524 	.word	0x24003524
 800d380:	24003528 	.word	0x24003528
 800d384:	240035d8 	.word	0x240035d8
 800d388:	24003538 	.word	0x24003538
 800d38c:	0800ee20 	.word	0x0800ee20

0800d390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3b04      	subs	r3, #4
 800d3a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3b04      	subs	r3, #4
 800d3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f023 0201 	bic.w	r2, r3, #1
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3b04      	subs	r3, #4
 800d3be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3c0:	4a0c      	ldr	r2, [pc, #48]	; (800d3f4 <pxPortInitialiseStack+0x64>)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3b14      	subs	r3, #20
 800d3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	3b04      	subs	r3, #4
 800d3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f06f 0202 	mvn.w	r2, #2
 800d3de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3b20      	subs	r3, #32
 800d3e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	0800d3f9 	.word	0x0800d3f9

0800d3f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d402:	4b12      	ldr	r3, [pc, #72]	; (800d44c <prvTaskExitError+0x54>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40a:	d00a      	beq.n	800d422 <prvTaskExitError+0x2a>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	60fb      	str	r3, [r7, #12]
}
 800d41e:	bf00      	nop
 800d420:	e7fe      	b.n	800d420 <prvTaskExitError+0x28>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	60bb      	str	r3, [r7, #8]
}
 800d434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d436:	bf00      	nop
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d0fc      	beq.n	800d438 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d43e:	bf00      	nop
 800d440:	bf00      	nop
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	24000010 	.word	0x24000010

0800d450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d450:	4b07      	ldr	r3, [pc, #28]	; (800d470 <pxCurrentTCBConst2>)
 800d452:	6819      	ldr	r1, [r3, #0]
 800d454:	6808      	ldr	r0, [r1, #0]
 800d456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45a:	f380 8809 	msr	PSP, r0
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f04f 0000 	mov.w	r0, #0
 800d466:	f380 8811 	msr	BASEPRI, r0
 800d46a:	4770      	bx	lr
 800d46c:	f3af 8000 	nop.w

0800d470 <pxCurrentTCBConst2>:
 800d470:	24002ffc 	.word	0x24002ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d474:	bf00      	nop
 800d476:	bf00      	nop

0800d478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d478:	4808      	ldr	r0, [pc, #32]	; (800d49c <prvPortStartFirstTask+0x24>)
 800d47a:	6800      	ldr	r0, [r0, #0]
 800d47c:	6800      	ldr	r0, [r0, #0]
 800d47e:	f380 8808 	msr	MSP, r0
 800d482:	f04f 0000 	mov.w	r0, #0
 800d486:	f380 8814 	msr	CONTROL, r0
 800d48a:	b662      	cpsie	i
 800d48c:	b661      	cpsie	f
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	df00      	svc	0
 800d498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d49a:	bf00      	nop
 800d49c:	e000ed08 	.word	0xe000ed08

0800d4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4a6:	4b46      	ldr	r3, [pc, #280]	; (800d5c0 <xPortStartScheduler+0x120>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a46      	ldr	r2, [pc, #280]	; (800d5c4 <xPortStartScheduler+0x124>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d10a      	bne.n	800d4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	613b      	str	r3, [r7, #16]
}
 800d4c2:	bf00      	nop
 800d4c4:	e7fe      	b.n	800d4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d4c6:	4b3e      	ldr	r3, [pc, #248]	; (800d5c0 <xPortStartScheduler+0x120>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a3f      	ldr	r2, [pc, #252]	; (800d5c8 <xPortStartScheduler+0x128>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d10a      	bne.n	800d4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	60fb      	str	r3, [r7, #12]
}
 800d4e2:	bf00      	nop
 800d4e4:	e7fe      	b.n	800d4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4e6:	4b39      	ldr	r3, [pc, #228]	; (800d5cc <xPortStartScheduler+0x12c>)
 800d4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	22ff      	movs	r2, #255	; 0xff
 800d4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	4b31      	ldr	r3, [pc, #196]	; (800d5d0 <xPortStartScheduler+0x130>)
 800d50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d50e:	4b31      	ldr	r3, [pc, #196]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d510:	2207      	movs	r2, #7
 800d512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d514:	e009      	b.n	800d52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d516:	4b2f      	ldr	r3, [pc, #188]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	4a2d      	ldr	r2, [pc, #180]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	b2db      	uxtb	r3, r3
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	b2db      	uxtb	r3, r3
 800d528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d532:	2b80      	cmp	r3, #128	; 0x80
 800d534:	d0ef      	beq.n	800d516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d536:	4b27      	ldr	r3, [pc, #156]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f1c3 0307 	rsb	r3, r3, #7
 800d53e:	2b04      	cmp	r3, #4
 800d540:	d00a      	beq.n	800d558 <xPortStartScheduler+0xb8>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	60bb      	str	r3, [r7, #8]
}
 800d554:	bf00      	nop
 800d556:	e7fe      	b.n	800d556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d558:	4b1e      	ldr	r3, [pc, #120]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	021b      	lsls	r3, r3, #8
 800d55e:	4a1d      	ldr	r2, [pc, #116]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d562:	4b1c      	ldr	r3, [pc, #112]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d56a:	4a1a      	ldr	r2, [pc, #104]	; (800d5d4 <xPortStartScheduler+0x134>)
 800d56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	b2da      	uxtb	r2, r3
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d576:	4b18      	ldr	r3, [pc, #96]	; (800d5d8 <xPortStartScheduler+0x138>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a17      	ldr	r2, [pc, #92]	; (800d5d8 <xPortStartScheduler+0x138>)
 800d57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <xPortStartScheduler+0x138>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a14      	ldr	r2, [pc, #80]	; (800d5d8 <xPortStartScheduler+0x138>)
 800d588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d58e:	f000 f8dd 	bl	800d74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d592:	4b12      	ldr	r3, [pc, #72]	; (800d5dc <xPortStartScheduler+0x13c>)
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d598:	f000 f8fc 	bl	800d794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d59c:	4b10      	ldr	r3, [pc, #64]	; (800d5e0 <xPortStartScheduler+0x140>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a0f      	ldr	r2, [pc, #60]	; (800d5e0 <xPortStartScheduler+0x140>)
 800d5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5a8:	f7ff ff66 	bl	800d478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5ac:	f7ff f84c 	bl	800c648 <vTaskSwitchContext>
	prvTaskExitError();
 800d5b0:	f7ff ff22 	bl	800d3f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	e000ed00 	.word	0xe000ed00
 800d5c4:	410fc271 	.word	0x410fc271
 800d5c8:	410fc270 	.word	0x410fc270
 800d5cc:	e000e400 	.word	0xe000e400
 800d5d0:	24003628 	.word	0x24003628
 800d5d4:	2400362c 	.word	0x2400362c
 800d5d8:	e000ed20 	.word	0xe000ed20
 800d5dc:	24000010 	.word	0x24000010
 800d5e0:	e000ef34 	.word	0xe000ef34

0800d5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	607b      	str	r3, [r7, #4]
}
 800d5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5fe:	4b0f      	ldr	r3, [pc, #60]	; (800d63c <vPortEnterCritical+0x58>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	4a0d      	ldr	r2, [pc, #52]	; (800d63c <vPortEnterCritical+0x58>)
 800d606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d608:	4b0c      	ldr	r3, [pc, #48]	; (800d63c <vPortEnterCritical+0x58>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d10f      	bne.n	800d630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d610:	4b0b      	ldr	r3, [pc, #44]	; (800d640 <vPortEnterCritical+0x5c>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <vPortEnterCritical+0x4c>
	__asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	603b      	str	r3, [r7, #0]
}
 800d62c:	bf00      	nop
 800d62e:	e7fe      	b.n	800d62e <vPortEnterCritical+0x4a>
	}
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	24000010 	.word	0x24000010
 800d640:	e000ed04 	.word	0xe000ed04

0800d644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d64a:	4b12      	ldr	r3, [pc, #72]	; (800d694 <vPortExitCritical+0x50>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10a      	bne.n	800d668 <vPortExitCritical+0x24>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	607b      	str	r3, [r7, #4]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d668:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <vPortExitCritical+0x50>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	4a09      	ldr	r2, [pc, #36]	; (800d694 <vPortExitCritical+0x50>)
 800d670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d672:	4b08      	ldr	r3, [pc, #32]	; (800d694 <vPortExitCritical+0x50>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d105      	bne.n	800d686 <vPortExitCritical+0x42>
 800d67a:	2300      	movs	r3, #0
 800d67c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	f383 8811 	msr	BASEPRI, r3
}
 800d684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d686:	bf00      	nop
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	24000010 	.word	0x24000010
	...

0800d6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6a0:	f3ef 8009 	mrs	r0, PSP
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	4b15      	ldr	r3, [pc, #84]	; (800d700 <pxCurrentTCBConst>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	f01e 0f10 	tst.w	lr, #16
 800d6b0:	bf08      	it	eq
 800d6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ba:	6010      	str	r0, [r2, #0]
 800d6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6c4:	f380 8811 	msr	BASEPRI, r0
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f7fe ffba 	bl	800c648 <vTaskSwitchContext>
 800d6d4:	f04f 0000 	mov.w	r0, #0
 800d6d8:	f380 8811 	msr	BASEPRI, r0
 800d6dc:	bc09      	pop	{r0, r3}
 800d6de:	6819      	ldr	r1, [r3, #0]
 800d6e0:	6808      	ldr	r0, [r1, #0]
 800d6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e6:	f01e 0f10 	tst.w	lr, #16
 800d6ea:	bf08      	it	eq
 800d6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6f0:	f380 8809 	msr	PSP, r0
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w

0800d700 <pxCurrentTCBConst>:
 800d700:	24002ffc 	.word	0x24002ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop

0800d708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	607b      	str	r3, [r7, #4]
}
 800d720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d722:	f7fe fed7 	bl	800c4d4 <xTaskIncrementTick>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d72c:	4b06      	ldr	r3, [pc, #24]	; (800d748 <xPortSysTickHandler+0x40>)
 800d72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	2300      	movs	r3, #0
 800d736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	f383 8811 	msr	BASEPRI, r3
}
 800d73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d740:	bf00      	nop
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	e000ed04 	.word	0xe000ed04

0800d74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d74c:	b480      	push	{r7}
 800d74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d750:	4b0b      	ldr	r3, [pc, #44]	; (800d780 <vPortSetupTimerInterrupt+0x34>)
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d756:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <vPortSetupTimerInterrupt+0x38>)
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d75c:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <vPortSetupTimerInterrupt+0x3c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <vPortSetupTimerInterrupt+0x40>)
 800d762:	fba2 2303 	umull	r2, r3, r2, r3
 800d766:	099b      	lsrs	r3, r3, #6
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <vPortSetupTimerInterrupt+0x44>)
 800d76a:	3b01      	subs	r3, #1
 800d76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d76e:	4b04      	ldr	r3, [pc, #16]	; (800d780 <vPortSetupTimerInterrupt+0x34>)
 800d770:	2207      	movs	r2, #7
 800d772:	601a      	str	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	e000e010 	.word	0xe000e010
 800d784:	e000e018 	.word	0xe000e018
 800d788:	24000000 	.word	0x24000000
 800d78c:	10624dd3 	.word	0x10624dd3
 800d790:	e000e014 	.word	0xe000e014

0800d794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7a4 <vPortEnableVFP+0x10>
 800d798:	6801      	ldr	r1, [r0, #0]
 800d79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d79e:	6001      	str	r1, [r0, #0]
 800d7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7a2:	bf00      	nop
 800d7a4:	e000ed88 	.word	0xe000ed88

0800d7a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7ae:	f3ef 8305 	mrs	r3, IPSR
 800d7b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b0f      	cmp	r3, #15
 800d7b8:	d914      	bls.n	800d7e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d7ba:	4a17      	ldr	r2, [pc, #92]	; (800d818 <vPortValidateInterruptPriority+0x70>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4413      	add	r3, r2
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d7c4:	4b15      	ldr	r3, [pc, #84]	; (800d81c <vPortValidateInterruptPriority+0x74>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	7afa      	ldrb	r2, [r7, #11]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d20a      	bcs.n	800d7e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	607b      	str	r3, [r7, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	e7fe      	b.n	800d7e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <vPortValidateInterruptPriority+0x78>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7ec:	4b0d      	ldr	r3, [pc, #52]	; (800d824 <vPortValidateInterruptPriority+0x7c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d90a      	bls.n	800d80a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	603b      	str	r3, [r7, #0]
}
 800d806:	bf00      	nop
 800d808:	e7fe      	b.n	800d808 <vPortValidateInterruptPriority+0x60>
	}
 800d80a:	bf00      	nop
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	e000e3f0 	.word	0xe000e3f0
 800d81c:	24003628 	.word	0x24003628
 800d820:	e000ed0c 	.word	0xe000ed0c
 800d824:	2400362c 	.word	0x2400362c

0800d828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08a      	sub	sp, #40	; 0x28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d834:	f7fe fd92 	bl	800c35c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d838:	4b5b      	ldr	r3, [pc, #364]	; (800d9a8 <pvPortMalloc+0x180>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d840:	f000 f920 	bl	800da84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d844:	4b59      	ldr	r3, [pc, #356]	; (800d9ac <pvPortMalloc+0x184>)
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4013      	ands	r3, r2
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f040 8093 	bne.w	800d978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d01d      	beq.n	800d894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d858:	2208      	movs	r2, #8
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4413      	add	r3, r2
 800d85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f003 0307 	and.w	r3, r3, #7
 800d866:	2b00      	cmp	r3, #0
 800d868:	d014      	beq.n	800d894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f023 0307 	bic.w	r3, r3, #7
 800d870:	3308      	adds	r3, #8
 800d872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f003 0307 	and.w	r3, r3, #7
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00a      	beq.n	800d894 <pvPortMalloc+0x6c>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	617b      	str	r3, [r7, #20]
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d06e      	beq.n	800d978 <pvPortMalloc+0x150>
 800d89a:	4b45      	ldr	r3, [pc, #276]	; (800d9b0 <pvPortMalloc+0x188>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d869      	bhi.n	800d978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8a4:	4b43      	ldr	r3, [pc, #268]	; (800d9b4 <pvPortMalloc+0x18c>)
 800d8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8a8:	4b42      	ldr	r3, [pc, #264]	; (800d9b4 <pvPortMalloc+0x18c>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8ae:	e004      	b.n	800d8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d903      	bls.n	800d8cc <pvPortMalloc+0xa4>
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1f1      	bne.n	800d8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8cc:	4b36      	ldr	r3, [pc, #216]	; (800d9a8 <pvPortMalloc+0x180>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d050      	beq.n	800d978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2208      	movs	r2, #8
 800d8dc:	4413      	add	r3, r2
 800d8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	1ad2      	subs	r2, r2, r3
 800d8f0:	2308      	movs	r3, #8
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d91f      	bls.n	800d938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	f003 0307 	and.w	r3, r3, #7
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00a      	beq.n	800d920 <pvPortMalloc+0xf8>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	613b      	str	r3, [r7, #16]
}
 800d91c:	bf00      	nop
 800d91e:	e7fe      	b.n	800d91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	1ad2      	subs	r2, r2, r3
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d932:	69b8      	ldr	r0, [r7, #24]
 800d934:	f000 f908 	bl	800db48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d938:	4b1d      	ldr	r3, [pc, #116]	; (800d9b0 <pvPortMalloc+0x188>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	4a1b      	ldr	r2, [pc, #108]	; (800d9b0 <pvPortMalloc+0x188>)
 800d944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d946:	4b1a      	ldr	r3, [pc, #104]	; (800d9b0 <pvPortMalloc+0x188>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	4b1b      	ldr	r3, [pc, #108]	; (800d9b8 <pvPortMalloc+0x190>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d203      	bcs.n	800d95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d952:	4b17      	ldr	r3, [pc, #92]	; (800d9b0 <pvPortMalloc+0x188>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a18      	ldr	r2, [pc, #96]	; (800d9b8 <pvPortMalloc+0x190>)
 800d958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	4b13      	ldr	r3, [pc, #76]	; (800d9ac <pvPortMalloc+0x184>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	431a      	orrs	r2, r3
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	2200      	movs	r2, #0
 800d96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d96e:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <pvPortMalloc+0x194>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	3301      	adds	r3, #1
 800d974:	4a11      	ldr	r2, [pc, #68]	; (800d9bc <pvPortMalloc+0x194>)
 800d976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d978:	f7fe fcfe 	bl	800c378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00a      	beq.n	800d99c <pvPortMalloc+0x174>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	60fb      	str	r3, [r7, #12]
}
 800d998:	bf00      	nop
 800d99a:	e7fe      	b.n	800d99a <pvPortMalloc+0x172>
	return pvReturn;
 800d99c:	69fb      	ldr	r3, [r7, #28]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3728      	adds	r7, #40	; 0x28
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	24007238 	.word	0x24007238
 800d9ac:	2400724c 	.word	0x2400724c
 800d9b0:	2400723c 	.word	0x2400723c
 800d9b4:	24007230 	.word	0x24007230
 800d9b8:	24007240 	.word	0x24007240
 800d9bc:	24007244 	.word	0x24007244

0800d9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d04d      	beq.n	800da6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9d2:	2308      	movs	r3, #8
 800d9d4:	425b      	negs	r3, r3
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	4413      	add	r3, r2
 800d9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	4b24      	ldr	r3, [pc, #144]	; (800da78 <vPortFree+0xb8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10a      	bne.n	800da04 <vPortFree+0x44>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	60fb      	str	r3, [r7, #12]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00a      	beq.n	800da22 <vPortFree+0x62>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	60bb      	str	r3, [r7, #8]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	4b14      	ldr	r3, [pc, #80]	; (800da78 <vPortFree+0xb8>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4013      	ands	r3, r2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d01e      	beq.n	800da6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d11a      	bne.n	800da6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	685a      	ldr	r2, [r3, #4]
 800da3c:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <vPortFree+0xb8>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	43db      	mvns	r3, r3
 800da42:	401a      	ands	r2, r3
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da48:	f7fe fc88 	bl	800c35c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	685a      	ldr	r2, [r3, #4]
 800da50:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <vPortFree+0xbc>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4413      	add	r3, r2
 800da56:	4a09      	ldr	r2, [pc, #36]	; (800da7c <vPortFree+0xbc>)
 800da58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da5a:	6938      	ldr	r0, [r7, #16]
 800da5c:	f000 f874 	bl	800db48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da60:	4b07      	ldr	r3, [pc, #28]	; (800da80 <vPortFree+0xc0>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3301      	adds	r3, #1
 800da66:	4a06      	ldr	r2, [pc, #24]	; (800da80 <vPortFree+0xc0>)
 800da68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da6a:	f7fe fc85 	bl	800c378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da6e:	bf00      	nop
 800da70:	3718      	adds	r7, #24
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	2400724c 	.word	0x2400724c
 800da7c:	2400723c 	.word	0x2400723c
 800da80:	24007248 	.word	0x24007248

0800da84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800da8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da90:	4b27      	ldr	r3, [pc, #156]	; (800db30 <prvHeapInit+0xac>)
 800da92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00c      	beq.n	800dab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3307      	adds	r3, #7
 800daa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f023 0307 	bic.w	r3, r3, #7
 800daaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	4a1f      	ldr	r2, [pc, #124]	; (800db30 <prvHeapInit+0xac>)
 800dab4:	4413      	add	r3, r2
 800dab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dabc:	4a1d      	ldr	r2, [pc, #116]	; (800db34 <prvHeapInit+0xb0>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dac2:	4b1c      	ldr	r3, [pc, #112]	; (800db34 <prvHeapInit+0xb0>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	4413      	add	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dad0:	2208      	movs	r2, #8
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	1a9b      	subs	r3, r3, r2
 800dad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0307 	bic.w	r3, r3, #7
 800dade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	4a15      	ldr	r2, [pc, #84]	; (800db38 <prvHeapInit+0xb4>)
 800dae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dae6:	4b14      	ldr	r3, [pc, #80]	; (800db38 <prvHeapInit+0xb4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2200      	movs	r2, #0
 800daec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daee:	4b12      	ldr	r3, [pc, #72]	; (800db38 <prvHeapInit+0xb4>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	1ad2      	subs	r2, r2, r3
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db04:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <prvHeapInit+0xb4>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4a0a      	ldr	r2, [pc, #40]	; (800db3c <prvHeapInit+0xb8>)
 800db12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	4a09      	ldr	r2, [pc, #36]	; (800db40 <prvHeapInit+0xbc>)
 800db1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db1c:	4b09      	ldr	r3, [pc, #36]	; (800db44 <prvHeapInit+0xc0>)
 800db1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db22:	601a      	str	r2, [r3, #0]
}
 800db24:	bf00      	nop
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	24003630 	.word	0x24003630
 800db34:	24007230 	.word	0x24007230
 800db38:	24007238 	.word	0x24007238
 800db3c:	24007240 	.word	0x24007240
 800db40:	2400723c 	.word	0x2400723c
 800db44:	2400724c 	.word	0x2400724c

0800db48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db50:	4b28      	ldr	r3, [pc, #160]	; (800dbf4 <prvInsertBlockIntoFreeList+0xac>)
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	e002      	b.n	800db5c <prvInsertBlockIntoFreeList+0x14>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d8f7      	bhi.n	800db56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	4413      	add	r3, r2
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d108      	bne.n	800db8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	441a      	add	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68ba      	ldr	r2, [r7, #8]
 800db94:	441a      	add	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d118      	bne.n	800dbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	4b15      	ldr	r3, [pc, #84]	; (800dbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d00d      	beq.n	800dbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	441a      	add	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	e008      	b.n	800dbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e003      	b.n	800dbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d002      	beq.n	800dbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbe6:	bf00      	nop
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	24007230 	.word	0x24007230
 800dbf8:	24007238 	.word	0x24007238

0800dbfc <__errno>:
 800dbfc:	4b01      	ldr	r3, [pc, #4]	; (800dc04 <__errno+0x8>)
 800dbfe:	6818      	ldr	r0, [r3, #0]
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	24000014 	.word	0x24000014

0800dc08 <std>:
 800dc08:	2300      	movs	r3, #0
 800dc0a:	b510      	push	{r4, lr}
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc16:	6083      	str	r3, [r0, #8]
 800dc18:	8181      	strh	r1, [r0, #12]
 800dc1a:	6643      	str	r3, [r0, #100]	; 0x64
 800dc1c:	81c2      	strh	r2, [r0, #14]
 800dc1e:	6183      	str	r3, [r0, #24]
 800dc20:	4619      	mov	r1, r3
 800dc22:	2208      	movs	r2, #8
 800dc24:	305c      	adds	r0, #92	; 0x5c
 800dc26:	f000 f91a 	bl	800de5e <memset>
 800dc2a:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <std+0x38>)
 800dc2c:	6263      	str	r3, [r4, #36]	; 0x24
 800dc2e:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <std+0x3c>)
 800dc30:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc32:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <std+0x40>)
 800dc34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc36:	4b05      	ldr	r3, [pc, #20]	; (800dc4c <std+0x44>)
 800dc38:	6224      	str	r4, [r4, #32]
 800dc3a:	6323      	str	r3, [r4, #48]	; 0x30
 800dc3c:	bd10      	pop	{r4, pc}
 800dc3e:	bf00      	nop
 800dc40:	0800e1a9 	.word	0x0800e1a9
 800dc44:	0800e1cb 	.word	0x0800e1cb
 800dc48:	0800e203 	.word	0x0800e203
 800dc4c:	0800e227 	.word	0x0800e227

0800dc50 <_cleanup_r>:
 800dc50:	4901      	ldr	r1, [pc, #4]	; (800dc58 <_cleanup_r+0x8>)
 800dc52:	f000 b8af 	b.w	800ddb4 <_fwalk_reent>
 800dc56:	bf00      	nop
 800dc58:	0800e501 	.word	0x0800e501

0800dc5c <__sfmoreglue>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	2268      	movs	r2, #104	; 0x68
 800dc60:	1e4d      	subs	r5, r1, #1
 800dc62:	4355      	muls	r5, r2
 800dc64:	460e      	mov	r6, r1
 800dc66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc6a:	f000 f921 	bl	800deb0 <_malloc_r>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	b140      	cbz	r0, 800dc84 <__sfmoreglue+0x28>
 800dc72:	2100      	movs	r1, #0
 800dc74:	e9c0 1600 	strd	r1, r6, [r0]
 800dc78:	300c      	adds	r0, #12
 800dc7a:	60a0      	str	r0, [r4, #8]
 800dc7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc80:	f000 f8ed 	bl	800de5e <memset>
 800dc84:	4620      	mov	r0, r4
 800dc86:	bd70      	pop	{r4, r5, r6, pc}

0800dc88 <__sfp_lock_acquire>:
 800dc88:	4801      	ldr	r0, [pc, #4]	; (800dc90 <__sfp_lock_acquire+0x8>)
 800dc8a:	f000 b8d8 	b.w	800de3e <__retarget_lock_acquire_recursive>
 800dc8e:	bf00      	nop
 800dc90:	24007251 	.word	0x24007251

0800dc94 <__sfp_lock_release>:
 800dc94:	4801      	ldr	r0, [pc, #4]	; (800dc9c <__sfp_lock_release+0x8>)
 800dc96:	f000 b8d3 	b.w	800de40 <__retarget_lock_release_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	24007251 	.word	0x24007251

0800dca0 <__sinit_lock_acquire>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__sinit_lock_acquire+0x8>)
 800dca2:	f000 b8cc 	b.w	800de3e <__retarget_lock_acquire_recursive>
 800dca6:	bf00      	nop
 800dca8:	24007252 	.word	0x24007252

0800dcac <__sinit_lock_release>:
 800dcac:	4801      	ldr	r0, [pc, #4]	; (800dcb4 <__sinit_lock_release+0x8>)
 800dcae:	f000 b8c7 	b.w	800de40 <__retarget_lock_release_recursive>
 800dcb2:	bf00      	nop
 800dcb4:	24007252 	.word	0x24007252

0800dcb8 <__sinit>:
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	4604      	mov	r4, r0
 800dcbc:	f7ff fff0 	bl	800dca0 <__sinit_lock_acquire>
 800dcc0:	69a3      	ldr	r3, [r4, #24]
 800dcc2:	b11b      	cbz	r3, 800dccc <__sinit+0x14>
 800dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc8:	f7ff bff0 	b.w	800dcac <__sinit_lock_release>
 800dccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dcd0:	6523      	str	r3, [r4, #80]	; 0x50
 800dcd2:	4b13      	ldr	r3, [pc, #76]	; (800dd20 <__sinit+0x68>)
 800dcd4:	4a13      	ldr	r2, [pc, #76]	; (800dd24 <__sinit+0x6c>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800dcda:	42a3      	cmp	r3, r4
 800dcdc:	bf04      	itt	eq
 800dcde:	2301      	moveq	r3, #1
 800dce0:	61a3      	streq	r3, [r4, #24]
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 f820 	bl	800dd28 <__sfp>
 800dce8:	6060      	str	r0, [r4, #4]
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 f81c 	bl	800dd28 <__sfp>
 800dcf0:	60a0      	str	r0, [r4, #8]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 f818 	bl	800dd28 <__sfp>
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	60e0      	str	r0, [r4, #12]
 800dcfc:	2104      	movs	r1, #4
 800dcfe:	6860      	ldr	r0, [r4, #4]
 800dd00:	f7ff ff82 	bl	800dc08 <std>
 800dd04:	68a0      	ldr	r0, [r4, #8]
 800dd06:	2201      	movs	r2, #1
 800dd08:	2109      	movs	r1, #9
 800dd0a:	f7ff ff7d 	bl	800dc08 <std>
 800dd0e:	68e0      	ldr	r0, [r4, #12]
 800dd10:	2202      	movs	r2, #2
 800dd12:	2112      	movs	r1, #18
 800dd14:	f7ff ff78 	bl	800dc08 <std>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	61a3      	str	r3, [r4, #24]
 800dd1c:	e7d2      	b.n	800dcc4 <__sinit+0xc>
 800dd1e:	bf00      	nop
 800dd20:	0800f04c 	.word	0x0800f04c
 800dd24:	0800dc51 	.word	0x0800dc51

0800dd28 <__sfp>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	4607      	mov	r7, r0
 800dd2c:	f7ff ffac 	bl	800dc88 <__sfp_lock_acquire>
 800dd30:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <__sfp+0x84>)
 800dd32:	681e      	ldr	r6, [r3, #0]
 800dd34:	69b3      	ldr	r3, [r6, #24]
 800dd36:	b913      	cbnz	r3, 800dd3e <__sfp+0x16>
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f7ff ffbd 	bl	800dcb8 <__sinit>
 800dd3e:	3648      	adds	r6, #72	; 0x48
 800dd40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd44:	3b01      	subs	r3, #1
 800dd46:	d503      	bpl.n	800dd50 <__sfp+0x28>
 800dd48:	6833      	ldr	r3, [r6, #0]
 800dd4a:	b30b      	cbz	r3, 800dd90 <__sfp+0x68>
 800dd4c:	6836      	ldr	r6, [r6, #0]
 800dd4e:	e7f7      	b.n	800dd40 <__sfp+0x18>
 800dd50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd54:	b9d5      	cbnz	r5, 800dd8c <__sfp+0x64>
 800dd56:	4b16      	ldr	r3, [pc, #88]	; (800ddb0 <__sfp+0x88>)
 800dd58:	60e3      	str	r3, [r4, #12]
 800dd5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd5e:	6665      	str	r5, [r4, #100]	; 0x64
 800dd60:	f000 f86c 	bl	800de3c <__retarget_lock_init_recursive>
 800dd64:	f7ff ff96 	bl	800dc94 <__sfp_lock_release>
 800dd68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd70:	6025      	str	r5, [r4, #0]
 800dd72:	61a5      	str	r5, [r4, #24]
 800dd74:	2208      	movs	r2, #8
 800dd76:	4629      	mov	r1, r5
 800dd78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd7c:	f000 f86f 	bl	800de5e <memset>
 800dd80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd88:	4620      	mov	r0, r4
 800dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd8c:	3468      	adds	r4, #104	; 0x68
 800dd8e:	e7d9      	b.n	800dd44 <__sfp+0x1c>
 800dd90:	2104      	movs	r1, #4
 800dd92:	4638      	mov	r0, r7
 800dd94:	f7ff ff62 	bl	800dc5c <__sfmoreglue>
 800dd98:	4604      	mov	r4, r0
 800dd9a:	6030      	str	r0, [r6, #0]
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d1d5      	bne.n	800dd4c <__sfp+0x24>
 800dda0:	f7ff ff78 	bl	800dc94 <__sfp_lock_release>
 800dda4:	230c      	movs	r3, #12
 800dda6:	603b      	str	r3, [r7, #0]
 800dda8:	e7ee      	b.n	800dd88 <__sfp+0x60>
 800ddaa:	bf00      	nop
 800ddac:	0800f04c 	.word	0x0800f04c
 800ddb0:	ffff0001 	.word	0xffff0001

0800ddb4 <_fwalk_reent>:
 800ddb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb8:	4606      	mov	r6, r0
 800ddba:	4688      	mov	r8, r1
 800ddbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ddc0:	2700      	movs	r7, #0
 800ddc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddc6:	f1b9 0901 	subs.w	r9, r9, #1
 800ddca:	d505      	bpl.n	800ddd8 <_fwalk_reent+0x24>
 800ddcc:	6824      	ldr	r4, [r4, #0]
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	d1f7      	bne.n	800ddc2 <_fwalk_reent+0xe>
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddd8:	89ab      	ldrh	r3, [r5, #12]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d907      	bls.n	800ddee <_fwalk_reent+0x3a>
 800ddde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dde2:	3301      	adds	r3, #1
 800dde4:	d003      	beq.n	800ddee <_fwalk_reent+0x3a>
 800dde6:	4629      	mov	r1, r5
 800dde8:	4630      	mov	r0, r6
 800ddea:	47c0      	blx	r8
 800ddec:	4307      	orrs	r7, r0
 800ddee:	3568      	adds	r5, #104	; 0x68
 800ddf0:	e7e9      	b.n	800ddc6 <_fwalk_reent+0x12>
	...

0800ddf4 <__libc_init_array>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	4d0d      	ldr	r5, [pc, #52]	; (800de2c <__libc_init_array+0x38>)
 800ddf8:	4c0d      	ldr	r4, [pc, #52]	; (800de30 <__libc_init_array+0x3c>)
 800ddfa:	1b64      	subs	r4, r4, r5
 800ddfc:	10a4      	asrs	r4, r4, #2
 800ddfe:	2600      	movs	r6, #0
 800de00:	42a6      	cmp	r6, r4
 800de02:	d109      	bne.n	800de18 <__libc_init_array+0x24>
 800de04:	4d0b      	ldr	r5, [pc, #44]	; (800de34 <__libc_init_array+0x40>)
 800de06:	4c0c      	ldr	r4, [pc, #48]	; (800de38 <__libc_init_array+0x44>)
 800de08:	f000 ffa8 	bl	800ed5c <_init>
 800de0c:	1b64      	subs	r4, r4, r5
 800de0e:	10a4      	asrs	r4, r4, #2
 800de10:	2600      	movs	r6, #0
 800de12:	42a6      	cmp	r6, r4
 800de14:	d105      	bne.n	800de22 <__libc_init_array+0x2e>
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1c:	4798      	blx	r3
 800de1e:	3601      	adds	r6, #1
 800de20:	e7ee      	b.n	800de00 <__libc_init_array+0xc>
 800de22:	f855 3b04 	ldr.w	r3, [r5], #4
 800de26:	4798      	blx	r3
 800de28:	3601      	adds	r6, #1
 800de2a:	e7f2      	b.n	800de12 <__libc_init_array+0x1e>
 800de2c:	0800f08c 	.word	0x0800f08c
 800de30:	0800f08c 	.word	0x0800f08c
 800de34:	0800f08c 	.word	0x0800f08c
 800de38:	0800f090 	.word	0x0800f090

0800de3c <__retarget_lock_init_recursive>:
 800de3c:	4770      	bx	lr

0800de3e <__retarget_lock_acquire_recursive>:
 800de3e:	4770      	bx	lr

0800de40 <__retarget_lock_release_recursive>:
 800de40:	4770      	bx	lr

0800de42 <memcpy>:
 800de42:	440a      	add	r2, r1
 800de44:	4291      	cmp	r1, r2
 800de46:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4a:	d100      	bne.n	800de4e <memcpy+0xc>
 800de4c:	4770      	bx	lr
 800de4e:	b510      	push	{r4, lr}
 800de50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de58:	4291      	cmp	r1, r2
 800de5a:	d1f9      	bne.n	800de50 <memcpy+0xe>
 800de5c:	bd10      	pop	{r4, pc}

0800de5e <memset>:
 800de5e:	4402      	add	r2, r0
 800de60:	4603      	mov	r3, r0
 800de62:	4293      	cmp	r3, r2
 800de64:	d100      	bne.n	800de68 <memset+0xa>
 800de66:	4770      	bx	lr
 800de68:	f803 1b01 	strb.w	r1, [r3], #1
 800de6c:	e7f9      	b.n	800de62 <memset+0x4>
	...

0800de70 <sbrk_aligned>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	4e0e      	ldr	r6, [pc, #56]	; (800deac <sbrk_aligned+0x3c>)
 800de74:	460c      	mov	r4, r1
 800de76:	6831      	ldr	r1, [r6, #0]
 800de78:	4605      	mov	r5, r0
 800de7a:	b911      	cbnz	r1, 800de82 <sbrk_aligned+0x12>
 800de7c:	f000 f984 	bl	800e188 <_sbrk_r>
 800de80:	6030      	str	r0, [r6, #0]
 800de82:	4621      	mov	r1, r4
 800de84:	4628      	mov	r0, r5
 800de86:	f000 f97f 	bl	800e188 <_sbrk_r>
 800de8a:	1c43      	adds	r3, r0, #1
 800de8c:	d00a      	beq.n	800dea4 <sbrk_aligned+0x34>
 800de8e:	1cc4      	adds	r4, r0, #3
 800de90:	f024 0403 	bic.w	r4, r4, #3
 800de94:	42a0      	cmp	r0, r4
 800de96:	d007      	beq.n	800dea8 <sbrk_aligned+0x38>
 800de98:	1a21      	subs	r1, r4, r0
 800de9a:	4628      	mov	r0, r5
 800de9c:	f000 f974 	bl	800e188 <_sbrk_r>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d101      	bne.n	800dea8 <sbrk_aligned+0x38>
 800dea4:	f04f 34ff 	mov.w	r4, #4294967295
 800dea8:	4620      	mov	r0, r4
 800deaa:	bd70      	pop	{r4, r5, r6, pc}
 800deac:	24007258 	.word	0x24007258

0800deb0 <_malloc_r>:
 800deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb4:	1ccd      	adds	r5, r1, #3
 800deb6:	f025 0503 	bic.w	r5, r5, #3
 800deba:	3508      	adds	r5, #8
 800debc:	2d0c      	cmp	r5, #12
 800debe:	bf38      	it	cc
 800dec0:	250c      	movcc	r5, #12
 800dec2:	2d00      	cmp	r5, #0
 800dec4:	4607      	mov	r7, r0
 800dec6:	db01      	blt.n	800decc <_malloc_r+0x1c>
 800dec8:	42a9      	cmp	r1, r5
 800deca:	d905      	bls.n	800ded8 <_malloc_r+0x28>
 800decc:	230c      	movs	r3, #12
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	2600      	movs	r6, #0
 800ded2:	4630      	mov	r0, r6
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	4e2e      	ldr	r6, [pc, #184]	; (800df94 <_malloc_r+0xe4>)
 800deda:	f000 fbc5 	bl	800e668 <__malloc_lock>
 800dede:	6833      	ldr	r3, [r6, #0]
 800dee0:	461c      	mov	r4, r3
 800dee2:	bb34      	cbnz	r4, 800df32 <_malloc_r+0x82>
 800dee4:	4629      	mov	r1, r5
 800dee6:	4638      	mov	r0, r7
 800dee8:	f7ff ffc2 	bl	800de70 <sbrk_aligned>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	4604      	mov	r4, r0
 800def0:	d14d      	bne.n	800df8e <_malloc_r+0xde>
 800def2:	6834      	ldr	r4, [r6, #0]
 800def4:	4626      	mov	r6, r4
 800def6:	2e00      	cmp	r6, #0
 800def8:	d140      	bne.n	800df7c <_malloc_r+0xcc>
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	4631      	mov	r1, r6
 800defe:	4638      	mov	r0, r7
 800df00:	eb04 0803 	add.w	r8, r4, r3
 800df04:	f000 f940 	bl	800e188 <_sbrk_r>
 800df08:	4580      	cmp	r8, r0
 800df0a:	d13a      	bne.n	800df82 <_malloc_r+0xd2>
 800df0c:	6821      	ldr	r1, [r4, #0]
 800df0e:	3503      	adds	r5, #3
 800df10:	1a6d      	subs	r5, r5, r1
 800df12:	f025 0503 	bic.w	r5, r5, #3
 800df16:	3508      	adds	r5, #8
 800df18:	2d0c      	cmp	r5, #12
 800df1a:	bf38      	it	cc
 800df1c:	250c      	movcc	r5, #12
 800df1e:	4629      	mov	r1, r5
 800df20:	4638      	mov	r0, r7
 800df22:	f7ff ffa5 	bl	800de70 <sbrk_aligned>
 800df26:	3001      	adds	r0, #1
 800df28:	d02b      	beq.n	800df82 <_malloc_r+0xd2>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	442b      	add	r3, r5
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	e00e      	b.n	800df50 <_malloc_r+0xa0>
 800df32:	6822      	ldr	r2, [r4, #0]
 800df34:	1b52      	subs	r2, r2, r5
 800df36:	d41e      	bmi.n	800df76 <_malloc_r+0xc6>
 800df38:	2a0b      	cmp	r2, #11
 800df3a:	d916      	bls.n	800df6a <_malloc_r+0xba>
 800df3c:	1961      	adds	r1, r4, r5
 800df3e:	42a3      	cmp	r3, r4
 800df40:	6025      	str	r5, [r4, #0]
 800df42:	bf18      	it	ne
 800df44:	6059      	strne	r1, [r3, #4]
 800df46:	6863      	ldr	r3, [r4, #4]
 800df48:	bf08      	it	eq
 800df4a:	6031      	streq	r1, [r6, #0]
 800df4c:	5162      	str	r2, [r4, r5]
 800df4e:	604b      	str	r3, [r1, #4]
 800df50:	4638      	mov	r0, r7
 800df52:	f104 060b 	add.w	r6, r4, #11
 800df56:	f000 fb8d 	bl	800e674 <__malloc_unlock>
 800df5a:	f026 0607 	bic.w	r6, r6, #7
 800df5e:	1d23      	adds	r3, r4, #4
 800df60:	1af2      	subs	r2, r6, r3
 800df62:	d0b6      	beq.n	800ded2 <_malloc_r+0x22>
 800df64:	1b9b      	subs	r3, r3, r6
 800df66:	50a3      	str	r3, [r4, r2]
 800df68:	e7b3      	b.n	800ded2 <_malloc_r+0x22>
 800df6a:	6862      	ldr	r2, [r4, #4]
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	bf0c      	ite	eq
 800df70:	6032      	streq	r2, [r6, #0]
 800df72:	605a      	strne	r2, [r3, #4]
 800df74:	e7ec      	b.n	800df50 <_malloc_r+0xa0>
 800df76:	4623      	mov	r3, r4
 800df78:	6864      	ldr	r4, [r4, #4]
 800df7a:	e7b2      	b.n	800dee2 <_malloc_r+0x32>
 800df7c:	4634      	mov	r4, r6
 800df7e:	6876      	ldr	r6, [r6, #4]
 800df80:	e7b9      	b.n	800def6 <_malloc_r+0x46>
 800df82:	230c      	movs	r3, #12
 800df84:	603b      	str	r3, [r7, #0]
 800df86:	4638      	mov	r0, r7
 800df88:	f000 fb74 	bl	800e674 <__malloc_unlock>
 800df8c:	e7a1      	b.n	800ded2 <_malloc_r+0x22>
 800df8e:	6025      	str	r5, [r4, #0]
 800df90:	e7de      	b.n	800df50 <_malloc_r+0xa0>
 800df92:	bf00      	nop
 800df94:	24007254 	.word	0x24007254

0800df98 <iprintf>:
 800df98:	b40f      	push	{r0, r1, r2, r3}
 800df9a:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <iprintf+0x2c>)
 800df9c:	b513      	push	{r0, r1, r4, lr}
 800df9e:	681c      	ldr	r4, [r3, #0]
 800dfa0:	b124      	cbz	r4, 800dfac <iprintf+0x14>
 800dfa2:	69a3      	ldr	r3, [r4, #24]
 800dfa4:	b913      	cbnz	r3, 800dfac <iprintf+0x14>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7ff fe86 	bl	800dcb8 <__sinit>
 800dfac:	ab05      	add	r3, sp, #20
 800dfae:	9a04      	ldr	r2, [sp, #16]
 800dfb0:	68a1      	ldr	r1, [r4, #8]
 800dfb2:	9301      	str	r3, [sp, #4]
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f000 fbd9 	bl	800e76c <_vfiprintf_r>
 800dfba:	b002      	add	sp, #8
 800dfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc0:	b004      	add	sp, #16
 800dfc2:	4770      	bx	lr
 800dfc4:	24000014 	.word	0x24000014

0800dfc8 <_puts_r>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	460e      	mov	r6, r1
 800dfcc:	4605      	mov	r5, r0
 800dfce:	b118      	cbz	r0, 800dfd8 <_puts_r+0x10>
 800dfd0:	6983      	ldr	r3, [r0, #24]
 800dfd2:	b90b      	cbnz	r3, 800dfd8 <_puts_r+0x10>
 800dfd4:	f7ff fe70 	bl	800dcb8 <__sinit>
 800dfd8:	69ab      	ldr	r3, [r5, #24]
 800dfda:	68ac      	ldr	r4, [r5, #8]
 800dfdc:	b913      	cbnz	r3, 800dfe4 <_puts_r+0x1c>
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f7ff fe6a 	bl	800dcb8 <__sinit>
 800dfe4:	4b2c      	ldr	r3, [pc, #176]	; (800e098 <_puts_r+0xd0>)
 800dfe6:	429c      	cmp	r4, r3
 800dfe8:	d120      	bne.n	800e02c <_puts_r+0x64>
 800dfea:	686c      	ldr	r4, [r5, #4]
 800dfec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfee:	07db      	lsls	r3, r3, #31
 800dff0:	d405      	bmi.n	800dffe <_puts_r+0x36>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	0598      	lsls	r0, r3, #22
 800dff6:	d402      	bmi.n	800dffe <_puts_r+0x36>
 800dff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dffa:	f7ff ff20 	bl	800de3e <__retarget_lock_acquire_recursive>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	0719      	lsls	r1, r3, #28
 800e002:	d51d      	bpl.n	800e040 <_puts_r+0x78>
 800e004:	6923      	ldr	r3, [r4, #16]
 800e006:	b1db      	cbz	r3, 800e040 <_puts_r+0x78>
 800e008:	3e01      	subs	r6, #1
 800e00a:	68a3      	ldr	r3, [r4, #8]
 800e00c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e010:	3b01      	subs	r3, #1
 800e012:	60a3      	str	r3, [r4, #8]
 800e014:	bb39      	cbnz	r1, 800e066 <_puts_r+0x9e>
 800e016:	2b00      	cmp	r3, #0
 800e018:	da38      	bge.n	800e08c <_puts_r+0xc4>
 800e01a:	4622      	mov	r2, r4
 800e01c:	210a      	movs	r1, #10
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 f906 	bl	800e230 <__swbuf_r>
 800e024:	3001      	adds	r0, #1
 800e026:	d011      	beq.n	800e04c <_puts_r+0x84>
 800e028:	250a      	movs	r5, #10
 800e02a:	e011      	b.n	800e050 <_puts_r+0x88>
 800e02c:	4b1b      	ldr	r3, [pc, #108]	; (800e09c <_puts_r+0xd4>)
 800e02e:	429c      	cmp	r4, r3
 800e030:	d101      	bne.n	800e036 <_puts_r+0x6e>
 800e032:	68ac      	ldr	r4, [r5, #8]
 800e034:	e7da      	b.n	800dfec <_puts_r+0x24>
 800e036:	4b1a      	ldr	r3, [pc, #104]	; (800e0a0 <_puts_r+0xd8>)
 800e038:	429c      	cmp	r4, r3
 800e03a:	bf08      	it	eq
 800e03c:	68ec      	ldreq	r4, [r5, #12]
 800e03e:	e7d5      	b.n	800dfec <_puts_r+0x24>
 800e040:	4621      	mov	r1, r4
 800e042:	4628      	mov	r0, r5
 800e044:	f000 f958 	bl	800e2f8 <__swsetup_r>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0dd      	beq.n	800e008 <_puts_r+0x40>
 800e04c:	f04f 35ff 	mov.w	r5, #4294967295
 800e050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e052:	07da      	lsls	r2, r3, #31
 800e054:	d405      	bmi.n	800e062 <_puts_r+0x9a>
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	059b      	lsls	r3, r3, #22
 800e05a:	d402      	bmi.n	800e062 <_puts_r+0x9a>
 800e05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e05e:	f7ff feef 	bl	800de40 <__retarget_lock_release_recursive>
 800e062:	4628      	mov	r0, r5
 800e064:	bd70      	pop	{r4, r5, r6, pc}
 800e066:	2b00      	cmp	r3, #0
 800e068:	da04      	bge.n	800e074 <_puts_r+0xac>
 800e06a:	69a2      	ldr	r2, [r4, #24]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	dc06      	bgt.n	800e07e <_puts_r+0xb6>
 800e070:	290a      	cmp	r1, #10
 800e072:	d004      	beq.n	800e07e <_puts_r+0xb6>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	6022      	str	r2, [r4, #0]
 800e07a:	7019      	strb	r1, [r3, #0]
 800e07c:	e7c5      	b.n	800e00a <_puts_r+0x42>
 800e07e:	4622      	mov	r2, r4
 800e080:	4628      	mov	r0, r5
 800e082:	f000 f8d5 	bl	800e230 <__swbuf_r>
 800e086:	3001      	adds	r0, #1
 800e088:	d1bf      	bne.n	800e00a <_puts_r+0x42>
 800e08a:	e7df      	b.n	800e04c <_puts_r+0x84>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	250a      	movs	r5, #10
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	6022      	str	r2, [r4, #0]
 800e094:	701d      	strb	r5, [r3, #0]
 800e096:	e7db      	b.n	800e050 <_puts_r+0x88>
 800e098:	0800f00c 	.word	0x0800f00c
 800e09c:	0800f02c 	.word	0x0800f02c
 800e0a0:	0800efec 	.word	0x0800efec

0800e0a4 <puts>:
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <puts+0xc>)
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	f7ff bf8d 	b.w	800dfc8 <_puts_r>
 800e0ae:	bf00      	nop
 800e0b0:	24000014 	.word	0x24000014

0800e0b4 <cleanup_glue>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	6809      	ldr	r1, [r1, #0]
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	b109      	cbz	r1, 800e0c2 <cleanup_glue+0xe>
 800e0be:	f7ff fff9 	bl	800e0b4 <cleanup_glue>
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ca:	f000 bad9 	b.w	800e680 <_free_r>
	...

0800e0d0 <_reclaim_reent>:
 800e0d0:	4b2c      	ldr	r3, [pc, #176]	; (800e184 <_reclaim_reent+0xb4>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4283      	cmp	r3, r0
 800e0d6:	b570      	push	{r4, r5, r6, lr}
 800e0d8:	4604      	mov	r4, r0
 800e0da:	d051      	beq.n	800e180 <_reclaim_reent+0xb0>
 800e0dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e0de:	b143      	cbz	r3, 800e0f2 <_reclaim_reent+0x22>
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d14a      	bne.n	800e17c <_reclaim_reent+0xac>
 800e0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0e8:	6819      	ldr	r1, [r3, #0]
 800e0ea:	b111      	cbz	r1, 800e0f2 <_reclaim_reent+0x22>
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f000 fac7 	bl	800e680 <_free_r>
 800e0f2:	6961      	ldr	r1, [r4, #20]
 800e0f4:	b111      	cbz	r1, 800e0fc <_reclaim_reent+0x2c>
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fac2 	bl	800e680 <_free_r>
 800e0fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e0fe:	b111      	cbz	r1, 800e106 <_reclaim_reent+0x36>
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fabd 	bl	800e680 <_free_r>
 800e106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e108:	b111      	cbz	r1, 800e110 <_reclaim_reent+0x40>
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 fab8 	bl	800e680 <_free_r>
 800e110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e112:	b111      	cbz	r1, 800e11a <_reclaim_reent+0x4a>
 800e114:	4620      	mov	r0, r4
 800e116:	f000 fab3 	bl	800e680 <_free_r>
 800e11a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e11c:	b111      	cbz	r1, 800e124 <_reclaim_reent+0x54>
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 faae 	bl	800e680 <_free_r>
 800e124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e126:	b111      	cbz	r1, 800e12e <_reclaim_reent+0x5e>
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 faa9 	bl	800e680 <_free_r>
 800e12e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e130:	b111      	cbz	r1, 800e138 <_reclaim_reent+0x68>
 800e132:	4620      	mov	r0, r4
 800e134:	f000 faa4 	bl	800e680 <_free_r>
 800e138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e13a:	b111      	cbz	r1, 800e142 <_reclaim_reent+0x72>
 800e13c:	4620      	mov	r0, r4
 800e13e:	f000 fa9f 	bl	800e680 <_free_r>
 800e142:	69a3      	ldr	r3, [r4, #24]
 800e144:	b1e3      	cbz	r3, 800e180 <_reclaim_reent+0xb0>
 800e146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e148:	4620      	mov	r0, r4
 800e14a:	4798      	blx	r3
 800e14c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e14e:	b1b9      	cbz	r1, 800e180 <_reclaim_reent+0xb0>
 800e150:	4620      	mov	r0, r4
 800e152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e156:	f7ff bfad 	b.w	800e0b4 <cleanup_glue>
 800e15a:	5949      	ldr	r1, [r1, r5]
 800e15c:	b941      	cbnz	r1, 800e170 <_reclaim_reent+0xa0>
 800e15e:	3504      	adds	r5, #4
 800e160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e162:	2d80      	cmp	r5, #128	; 0x80
 800e164:	68d9      	ldr	r1, [r3, #12]
 800e166:	d1f8      	bne.n	800e15a <_reclaim_reent+0x8a>
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fa89 	bl	800e680 <_free_r>
 800e16e:	e7ba      	b.n	800e0e6 <_reclaim_reent+0x16>
 800e170:	680e      	ldr	r6, [r1, #0]
 800e172:	4620      	mov	r0, r4
 800e174:	f000 fa84 	bl	800e680 <_free_r>
 800e178:	4631      	mov	r1, r6
 800e17a:	e7ef      	b.n	800e15c <_reclaim_reent+0x8c>
 800e17c:	2500      	movs	r5, #0
 800e17e:	e7ef      	b.n	800e160 <_reclaim_reent+0x90>
 800e180:	bd70      	pop	{r4, r5, r6, pc}
 800e182:	bf00      	nop
 800e184:	24000014 	.word	0x24000014

0800e188 <_sbrk_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d06      	ldr	r5, [pc, #24]	; (800e1a4 <_sbrk_r+0x1c>)
 800e18c:	2300      	movs	r3, #0
 800e18e:	4604      	mov	r4, r0
 800e190:	4608      	mov	r0, r1
 800e192:	602b      	str	r3, [r5, #0]
 800e194:	f7f3 f95a 	bl	800144c <_sbrk>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	d102      	bne.n	800e1a2 <_sbrk_r+0x1a>
 800e19c:	682b      	ldr	r3, [r5, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <_sbrk_r+0x1a>
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	2400725c 	.word	0x2400725c

0800e1a8 <__sread>:
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b0:	f000 fda0 	bl	800ecf4 <_read_r>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	bfab      	itete	ge
 800e1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e1bc:	181b      	addge	r3, r3, r0
 800e1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1c2:	bfac      	ite	ge
 800e1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1c6:	81a3      	strhlt	r3, [r4, #12]
 800e1c8:	bd10      	pop	{r4, pc}

0800e1ca <__swrite>:
 800e1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ce:	461f      	mov	r7, r3
 800e1d0:	898b      	ldrh	r3, [r1, #12]
 800e1d2:	05db      	lsls	r3, r3, #23
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	4616      	mov	r6, r2
 800e1da:	d505      	bpl.n	800e1e8 <__swrite+0x1e>
 800e1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e0:	2302      	movs	r3, #2
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f000 f9c8 	bl	800e578 <_lseek_r>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1f2:	81a3      	strh	r3, [r4, #12]
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fe:	f000 b869 	b.w	800e2d4 <_write_r>

0800e202 <__sseek>:
 800e202:	b510      	push	{r4, lr}
 800e204:	460c      	mov	r4, r1
 800e206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e20a:	f000 f9b5 	bl	800e578 <_lseek_r>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	bf15      	itete	ne
 800e214:	6560      	strne	r0, [r4, #84]	; 0x54
 800e216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e21e:	81a3      	strheq	r3, [r4, #12]
 800e220:	bf18      	it	ne
 800e222:	81a3      	strhne	r3, [r4, #12]
 800e224:	bd10      	pop	{r4, pc}

0800e226 <__sclose>:
 800e226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e22a:	f000 b8d3 	b.w	800e3d4 <_close_r>
	...

0800e230 <__swbuf_r>:
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e232:	460e      	mov	r6, r1
 800e234:	4614      	mov	r4, r2
 800e236:	4605      	mov	r5, r0
 800e238:	b118      	cbz	r0, 800e242 <__swbuf_r+0x12>
 800e23a:	6983      	ldr	r3, [r0, #24]
 800e23c:	b90b      	cbnz	r3, 800e242 <__swbuf_r+0x12>
 800e23e:	f7ff fd3b 	bl	800dcb8 <__sinit>
 800e242:	4b21      	ldr	r3, [pc, #132]	; (800e2c8 <__swbuf_r+0x98>)
 800e244:	429c      	cmp	r4, r3
 800e246:	d12b      	bne.n	800e2a0 <__swbuf_r+0x70>
 800e248:	686c      	ldr	r4, [r5, #4]
 800e24a:	69a3      	ldr	r3, [r4, #24]
 800e24c:	60a3      	str	r3, [r4, #8]
 800e24e:	89a3      	ldrh	r3, [r4, #12]
 800e250:	071a      	lsls	r2, r3, #28
 800e252:	d52f      	bpl.n	800e2b4 <__swbuf_r+0x84>
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	b36b      	cbz	r3, 800e2b4 <__swbuf_r+0x84>
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	6820      	ldr	r0, [r4, #0]
 800e25c:	1ac0      	subs	r0, r0, r3
 800e25e:	6963      	ldr	r3, [r4, #20]
 800e260:	b2f6      	uxtb	r6, r6
 800e262:	4283      	cmp	r3, r0
 800e264:	4637      	mov	r7, r6
 800e266:	dc04      	bgt.n	800e272 <__swbuf_r+0x42>
 800e268:	4621      	mov	r1, r4
 800e26a:	4628      	mov	r0, r5
 800e26c:	f000 f948 	bl	800e500 <_fflush_r>
 800e270:	bb30      	cbnz	r0, 800e2c0 <__swbuf_r+0x90>
 800e272:	68a3      	ldr	r3, [r4, #8]
 800e274:	3b01      	subs	r3, #1
 800e276:	60a3      	str	r3, [r4, #8]
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	6022      	str	r2, [r4, #0]
 800e27e:	701e      	strb	r6, [r3, #0]
 800e280:	6963      	ldr	r3, [r4, #20]
 800e282:	3001      	adds	r0, #1
 800e284:	4283      	cmp	r3, r0
 800e286:	d004      	beq.n	800e292 <__swbuf_r+0x62>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	07db      	lsls	r3, r3, #31
 800e28c:	d506      	bpl.n	800e29c <__swbuf_r+0x6c>
 800e28e:	2e0a      	cmp	r6, #10
 800e290:	d104      	bne.n	800e29c <__swbuf_r+0x6c>
 800e292:	4621      	mov	r1, r4
 800e294:	4628      	mov	r0, r5
 800e296:	f000 f933 	bl	800e500 <_fflush_r>
 800e29a:	b988      	cbnz	r0, 800e2c0 <__swbuf_r+0x90>
 800e29c:	4638      	mov	r0, r7
 800e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <__swbuf_r+0x9c>)
 800e2a2:	429c      	cmp	r4, r3
 800e2a4:	d101      	bne.n	800e2aa <__swbuf_r+0x7a>
 800e2a6:	68ac      	ldr	r4, [r5, #8]
 800e2a8:	e7cf      	b.n	800e24a <__swbuf_r+0x1a>
 800e2aa:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <__swbuf_r+0xa0>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	bf08      	it	eq
 800e2b0:	68ec      	ldreq	r4, [r5, #12]
 800e2b2:	e7ca      	b.n	800e24a <__swbuf_r+0x1a>
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f000 f81e 	bl	800e2f8 <__swsetup_r>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d0cb      	beq.n	800e258 <__swbuf_r+0x28>
 800e2c0:	f04f 37ff 	mov.w	r7, #4294967295
 800e2c4:	e7ea      	b.n	800e29c <__swbuf_r+0x6c>
 800e2c6:	bf00      	nop
 800e2c8:	0800f00c 	.word	0x0800f00c
 800e2cc:	0800f02c 	.word	0x0800f02c
 800e2d0:	0800efec 	.word	0x0800efec

0800e2d4 <_write_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4d07      	ldr	r5, [pc, #28]	; (800e2f4 <_write_r+0x20>)
 800e2d8:	4604      	mov	r4, r0
 800e2da:	4608      	mov	r0, r1
 800e2dc:	4611      	mov	r1, r2
 800e2de:	2200      	movs	r2, #0
 800e2e0:	602a      	str	r2, [r5, #0]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f7f3 f861 	bl	80013aa <_write>
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	d102      	bne.n	800e2f2 <_write_r+0x1e>
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	b103      	cbz	r3, 800e2f2 <_write_r+0x1e>
 800e2f0:	6023      	str	r3, [r4, #0]
 800e2f2:	bd38      	pop	{r3, r4, r5, pc}
 800e2f4:	2400725c 	.word	0x2400725c

0800e2f8 <__swsetup_r>:
 800e2f8:	4b32      	ldr	r3, [pc, #200]	; (800e3c4 <__swsetup_r+0xcc>)
 800e2fa:	b570      	push	{r4, r5, r6, lr}
 800e2fc:	681d      	ldr	r5, [r3, #0]
 800e2fe:	4606      	mov	r6, r0
 800e300:	460c      	mov	r4, r1
 800e302:	b125      	cbz	r5, 800e30e <__swsetup_r+0x16>
 800e304:	69ab      	ldr	r3, [r5, #24]
 800e306:	b913      	cbnz	r3, 800e30e <__swsetup_r+0x16>
 800e308:	4628      	mov	r0, r5
 800e30a:	f7ff fcd5 	bl	800dcb8 <__sinit>
 800e30e:	4b2e      	ldr	r3, [pc, #184]	; (800e3c8 <__swsetup_r+0xd0>)
 800e310:	429c      	cmp	r4, r3
 800e312:	d10f      	bne.n	800e334 <__swsetup_r+0x3c>
 800e314:	686c      	ldr	r4, [r5, #4]
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e31c:	0719      	lsls	r1, r3, #28
 800e31e:	d42c      	bmi.n	800e37a <__swsetup_r+0x82>
 800e320:	06dd      	lsls	r5, r3, #27
 800e322:	d411      	bmi.n	800e348 <__swsetup_r+0x50>
 800e324:	2309      	movs	r3, #9
 800e326:	6033      	str	r3, [r6, #0]
 800e328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e32c:	81a3      	strh	r3, [r4, #12]
 800e32e:	f04f 30ff 	mov.w	r0, #4294967295
 800e332:	e03e      	b.n	800e3b2 <__swsetup_r+0xba>
 800e334:	4b25      	ldr	r3, [pc, #148]	; (800e3cc <__swsetup_r+0xd4>)
 800e336:	429c      	cmp	r4, r3
 800e338:	d101      	bne.n	800e33e <__swsetup_r+0x46>
 800e33a:	68ac      	ldr	r4, [r5, #8]
 800e33c:	e7eb      	b.n	800e316 <__swsetup_r+0x1e>
 800e33e:	4b24      	ldr	r3, [pc, #144]	; (800e3d0 <__swsetup_r+0xd8>)
 800e340:	429c      	cmp	r4, r3
 800e342:	bf08      	it	eq
 800e344:	68ec      	ldreq	r4, [r5, #12]
 800e346:	e7e6      	b.n	800e316 <__swsetup_r+0x1e>
 800e348:	0758      	lsls	r0, r3, #29
 800e34a:	d512      	bpl.n	800e372 <__swsetup_r+0x7a>
 800e34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e34e:	b141      	cbz	r1, 800e362 <__swsetup_r+0x6a>
 800e350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e354:	4299      	cmp	r1, r3
 800e356:	d002      	beq.n	800e35e <__swsetup_r+0x66>
 800e358:	4630      	mov	r0, r6
 800e35a:	f000 f991 	bl	800e680 <_free_r>
 800e35e:	2300      	movs	r3, #0
 800e360:	6363      	str	r3, [r4, #52]	; 0x34
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	2300      	movs	r3, #0
 800e36c:	6063      	str	r3, [r4, #4]
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f043 0308 	orr.w	r3, r3, #8
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	6923      	ldr	r3, [r4, #16]
 800e37c:	b94b      	cbnz	r3, 800e392 <__swsetup_r+0x9a>
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e388:	d003      	beq.n	800e392 <__swsetup_r+0x9a>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4630      	mov	r0, r6
 800e38e:	f000 f92b 	bl	800e5e8 <__smakebuf_r>
 800e392:	89a0      	ldrh	r0, [r4, #12]
 800e394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e398:	f010 0301 	ands.w	r3, r0, #1
 800e39c:	d00a      	beq.n	800e3b4 <__swsetup_r+0xbc>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60a3      	str	r3, [r4, #8]
 800e3a2:	6963      	ldr	r3, [r4, #20]
 800e3a4:	425b      	negs	r3, r3
 800e3a6:	61a3      	str	r3, [r4, #24]
 800e3a8:	6923      	ldr	r3, [r4, #16]
 800e3aa:	b943      	cbnz	r3, 800e3be <__swsetup_r+0xc6>
 800e3ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3b0:	d1ba      	bne.n	800e328 <__swsetup_r+0x30>
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	0781      	lsls	r1, r0, #30
 800e3b6:	bf58      	it	pl
 800e3b8:	6963      	ldrpl	r3, [r4, #20]
 800e3ba:	60a3      	str	r3, [r4, #8]
 800e3bc:	e7f4      	b.n	800e3a8 <__swsetup_r+0xb0>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e7f7      	b.n	800e3b2 <__swsetup_r+0xba>
 800e3c2:	bf00      	nop
 800e3c4:	24000014 	.word	0x24000014
 800e3c8:	0800f00c 	.word	0x0800f00c
 800e3cc:	0800f02c 	.word	0x0800f02c
 800e3d0:	0800efec 	.word	0x0800efec

0800e3d4 <_close_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4d06      	ldr	r5, [pc, #24]	; (800e3f0 <_close_r+0x1c>)
 800e3d8:	2300      	movs	r3, #0
 800e3da:	4604      	mov	r4, r0
 800e3dc:	4608      	mov	r0, r1
 800e3de:	602b      	str	r3, [r5, #0]
 800e3e0:	f7f2 ffff 	bl	80013e2 <_close>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_close_r+0x1a>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_close_r+0x1a>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	2400725c 	.word	0x2400725c

0800e3f4 <__sflush_r>:
 800e3f4:	898a      	ldrh	r2, [r1, #12]
 800e3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	0710      	lsls	r0, r2, #28
 800e3fe:	460c      	mov	r4, r1
 800e400:	d458      	bmi.n	800e4b4 <__sflush_r+0xc0>
 800e402:	684b      	ldr	r3, [r1, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc05      	bgt.n	800e414 <__sflush_r+0x20>
 800e408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	dc02      	bgt.n	800e414 <__sflush_r+0x20>
 800e40e:	2000      	movs	r0, #0
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e416:	2e00      	cmp	r6, #0
 800e418:	d0f9      	beq.n	800e40e <__sflush_r+0x1a>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e420:	682f      	ldr	r7, [r5, #0]
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	d032      	beq.n	800e48c <__sflush_r+0x98>
 800e426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	075a      	lsls	r2, r3, #29
 800e42c:	d505      	bpl.n	800e43a <__sflush_r+0x46>
 800e42e:	6863      	ldr	r3, [r4, #4]
 800e430:	1ac0      	subs	r0, r0, r3
 800e432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e434:	b10b      	cbz	r3, 800e43a <__sflush_r+0x46>
 800e436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e438:	1ac0      	subs	r0, r0, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	4602      	mov	r2, r0
 800e43e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e440:	6a21      	ldr	r1, [r4, #32]
 800e442:	4628      	mov	r0, r5
 800e444:	47b0      	blx	r6
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	d106      	bne.n	800e45a <__sflush_r+0x66>
 800e44c:	6829      	ldr	r1, [r5, #0]
 800e44e:	291d      	cmp	r1, #29
 800e450:	d82c      	bhi.n	800e4ac <__sflush_r+0xb8>
 800e452:	4a2a      	ldr	r2, [pc, #168]	; (800e4fc <__sflush_r+0x108>)
 800e454:	40ca      	lsrs	r2, r1
 800e456:	07d6      	lsls	r6, r2, #31
 800e458:	d528      	bpl.n	800e4ac <__sflush_r+0xb8>
 800e45a:	2200      	movs	r2, #0
 800e45c:	6062      	str	r2, [r4, #4]
 800e45e:	04d9      	lsls	r1, r3, #19
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	6022      	str	r2, [r4, #0]
 800e464:	d504      	bpl.n	800e470 <__sflush_r+0x7c>
 800e466:	1c42      	adds	r2, r0, #1
 800e468:	d101      	bne.n	800e46e <__sflush_r+0x7a>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	b903      	cbnz	r3, 800e470 <__sflush_r+0x7c>
 800e46e:	6560      	str	r0, [r4, #84]	; 0x54
 800e470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e472:	602f      	str	r7, [r5, #0]
 800e474:	2900      	cmp	r1, #0
 800e476:	d0ca      	beq.n	800e40e <__sflush_r+0x1a>
 800e478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e47c:	4299      	cmp	r1, r3
 800e47e:	d002      	beq.n	800e486 <__sflush_r+0x92>
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f8fd 	bl	800e680 <_free_r>
 800e486:	2000      	movs	r0, #0
 800e488:	6360      	str	r0, [r4, #52]	; 0x34
 800e48a:	e7c1      	b.n	800e410 <__sflush_r+0x1c>
 800e48c:	6a21      	ldr	r1, [r4, #32]
 800e48e:	2301      	movs	r3, #1
 800e490:	4628      	mov	r0, r5
 800e492:	47b0      	blx	r6
 800e494:	1c41      	adds	r1, r0, #1
 800e496:	d1c7      	bne.n	800e428 <__sflush_r+0x34>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0c4      	beq.n	800e428 <__sflush_r+0x34>
 800e49e:	2b1d      	cmp	r3, #29
 800e4a0:	d001      	beq.n	800e4a6 <__sflush_r+0xb2>
 800e4a2:	2b16      	cmp	r3, #22
 800e4a4:	d101      	bne.n	800e4aa <__sflush_r+0xb6>
 800e4a6:	602f      	str	r7, [r5, #0]
 800e4a8:	e7b1      	b.n	800e40e <__sflush_r+0x1a>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	e7ad      	b.n	800e410 <__sflush_r+0x1c>
 800e4b4:	690f      	ldr	r7, [r1, #16]
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d0a9      	beq.n	800e40e <__sflush_r+0x1a>
 800e4ba:	0793      	lsls	r3, r2, #30
 800e4bc:	680e      	ldr	r6, [r1, #0]
 800e4be:	bf08      	it	eq
 800e4c0:	694b      	ldreq	r3, [r1, #20]
 800e4c2:	600f      	str	r7, [r1, #0]
 800e4c4:	bf18      	it	ne
 800e4c6:	2300      	movne	r3, #0
 800e4c8:	eba6 0807 	sub.w	r8, r6, r7
 800e4cc:	608b      	str	r3, [r1, #8]
 800e4ce:	f1b8 0f00 	cmp.w	r8, #0
 800e4d2:	dd9c      	ble.n	800e40e <__sflush_r+0x1a>
 800e4d4:	6a21      	ldr	r1, [r4, #32]
 800e4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4d8:	4643      	mov	r3, r8
 800e4da:	463a      	mov	r2, r7
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b0      	blx	r6
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	dc06      	bgt.n	800e4f2 <__sflush_r+0xfe>
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e78e      	b.n	800e410 <__sflush_r+0x1c>
 800e4f2:	4407      	add	r7, r0
 800e4f4:	eba8 0800 	sub.w	r8, r8, r0
 800e4f8:	e7e9      	b.n	800e4ce <__sflush_r+0xda>
 800e4fa:	bf00      	nop
 800e4fc:	20400001 	.word	0x20400001

0800e500 <_fflush_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	690b      	ldr	r3, [r1, #16]
 800e504:	4605      	mov	r5, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b913      	cbnz	r3, 800e510 <_fflush_r+0x10>
 800e50a:	2500      	movs	r5, #0
 800e50c:	4628      	mov	r0, r5
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	b118      	cbz	r0, 800e51a <_fflush_r+0x1a>
 800e512:	6983      	ldr	r3, [r0, #24]
 800e514:	b90b      	cbnz	r3, 800e51a <_fflush_r+0x1a>
 800e516:	f7ff fbcf 	bl	800dcb8 <__sinit>
 800e51a:	4b14      	ldr	r3, [pc, #80]	; (800e56c <_fflush_r+0x6c>)
 800e51c:	429c      	cmp	r4, r3
 800e51e:	d11b      	bne.n	800e558 <_fflush_r+0x58>
 800e520:	686c      	ldr	r4, [r5, #4]
 800e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0ef      	beq.n	800e50a <_fflush_r+0xa>
 800e52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e52c:	07d0      	lsls	r0, r2, #31
 800e52e:	d404      	bmi.n	800e53a <_fflush_r+0x3a>
 800e530:	0599      	lsls	r1, r3, #22
 800e532:	d402      	bmi.n	800e53a <_fflush_r+0x3a>
 800e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e536:	f7ff fc82 	bl	800de3e <__retarget_lock_acquire_recursive>
 800e53a:	4628      	mov	r0, r5
 800e53c:	4621      	mov	r1, r4
 800e53e:	f7ff ff59 	bl	800e3f4 <__sflush_r>
 800e542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e544:	07da      	lsls	r2, r3, #31
 800e546:	4605      	mov	r5, r0
 800e548:	d4e0      	bmi.n	800e50c <_fflush_r+0xc>
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	059b      	lsls	r3, r3, #22
 800e54e:	d4dd      	bmi.n	800e50c <_fflush_r+0xc>
 800e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e552:	f7ff fc75 	bl	800de40 <__retarget_lock_release_recursive>
 800e556:	e7d9      	b.n	800e50c <_fflush_r+0xc>
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <_fflush_r+0x70>)
 800e55a:	429c      	cmp	r4, r3
 800e55c:	d101      	bne.n	800e562 <_fflush_r+0x62>
 800e55e:	68ac      	ldr	r4, [r5, #8]
 800e560:	e7df      	b.n	800e522 <_fflush_r+0x22>
 800e562:	4b04      	ldr	r3, [pc, #16]	; (800e574 <_fflush_r+0x74>)
 800e564:	429c      	cmp	r4, r3
 800e566:	bf08      	it	eq
 800e568:	68ec      	ldreq	r4, [r5, #12]
 800e56a:	e7da      	b.n	800e522 <_fflush_r+0x22>
 800e56c:	0800f00c 	.word	0x0800f00c
 800e570:	0800f02c 	.word	0x0800f02c
 800e574:	0800efec 	.word	0x0800efec

0800e578 <_lseek_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4d07      	ldr	r5, [pc, #28]	; (800e598 <_lseek_r+0x20>)
 800e57c:	4604      	mov	r4, r0
 800e57e:	4608      	mov	r0, r1
 800e580:	4611      	mov	r1, r2
 800e582:	2200      	movs	r2, #0
 800e584:	602a      	str	r2, [r5, #0]
 800e586:	461a      	mov	r2, r3
 800e588:	f7f2 ff52 	bl	8001430 <_lseek>
 800e58c:	1c43      	adds	r3, r0, #1
 800e58e:	d102      	bne.n	800e596 <_lseek_r+0x1e>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	b103      	cbz	r3, 800e596 <_lseek_r+0x1e>
 800e594:	6023      	str	r3, [r4, #0]
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	2400725c 	.word	0x2400725c

0800e59c <__swhatbuf_r>:
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	460e      	mov	r6, r1
 800e5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	b096      	sub	sp, #88	; 0x58
 800e5a8:	4614      	mov	r4, r2
 800e5aa:	461d      	mov	r5, r3
 800e5ac:	da08      	bge.n	800e5c0 <__swhatbuf_r+0x24>
 800e5ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	602a      	str	r2, [r5, #0]
 800e5b6:	061a      	lsls	r2, r3, #24
 800e5b8:	d410      	bmi.n	800e5dc <__swhatbuf_r+0x40>
 800e5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5be:	e00e      	b.n	800e5de <__swhatbuf_r+0x42>
 800e5c0:	466a      	mov	r2, sp
 800e5c2:	f000 fba9 	bl	800ed18 <_fstat_r>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	dbf1      	blt.n	800e5ae <__swhatbuf_r+0x12>
 800e5ca:	9a01      	ldr	r2, [sp, #4]
 800e5cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5d4:	425a      	negs	r2, r3
 800e5d6:	415a      	adcs	r2, r3
 800e5d8:	602a      	str	r2, [r5, #0]
 800e5da:	e7ee      	b.n	800e5ba <__swhatbuf_r+0x1e>
 800e5dc:	2340      	movs	r3, #64	; 0x40
 800e5de:	2000      	movs	r0, #0
 800e5e0:	6023      	str	r3, [r4, #0]
 800e5e2:	b016      	add	sp, #88	; 0x58
 800e5e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e5e8 <__smakebuf_r>:
 800e5e8:	898b      	ldrh	r3, [r1, #12]
 800e5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5ec:	079d      	lsls	r5, r3, #30
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	d507      	bpl.n	800e604 <__smakebuf_r+0x1c>
 800e5f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	6123      	str	r3, [r4, #16]
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	6163      	str	r3, [r4, #20]
 800e600:	b002      	add	sp, #8
 800e602:	bd70      	pop	{r4, r5, r6, pc}
 800e604:	ab01      	add	r3, sp, #4
 800e606:	466a      	mov	r2, sp
 800e608:	f7ff ffc8 	bl	800e59c <__swhatbuf_r>
 800e60c:	9900      	ldr	r1, [sp, #0]
 800e60e:	4605      	mov	r5, r0
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff fc4d 	bl	800deb0 <_malloc_r>
 800e616:	b948      	cbnz	r0, 800e62c <__smakebuf_r+0x44>
 800e618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e61c:	059a      	lsls	r2, r3, #22
 800e61e:	d4ef      	bmi.n	800e600 <__smakebuf_r+0x18>
 800e620:	f023 0303 	bic.w	r3, r3, #3
 800e624:	f043 0302 	orr.w	r3, r3, #2
 800e628:	81a3      	strh	r3, [r4, #12]
 800e62a:	e7e3      	b.n	800e5f4 <__smakebuf_r+0xc>
 800e62c:	4b0d      	ldr	r3, [pc, #52]	; (800e664 <__smakebuf_r+0x7c>)
 800e62e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e638:	81a3      	strh	r3, [r4, #12]
 800e63a:	9b00      	ldr	r3, [sp, #0]
 800e63c:	6163      	str	r3, [r4, #20]
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	6120      	str	r0, [r4, #16]
 800e642:	b15b      	cbz	r3, 800e65c <__smakebuf_r+0x74>
 800e644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e648:	4630      	mov	r0, r6
 800e64a:	f000 fb77 	bl	800ed3c <_isatty_r>
 800e64e:	b128      	cbz	r0, 800e65c <__smakebuf_r+0x74>
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	f023 0303 	bic.w	r3, r3, #3
 800e656:	f043 0301 	orr.w	r3, r3, #1
 800e65a:	81a3      	strh	r3, [r4, #12]
 800e65c:	89a0      	ldrh	r0, [r4, #12]
 800e65e:	4305      	orrs	r5, r0
 800e660:	81a5      	strh	r5, [r4, #12]
 800e662:	e7cd      	b.n	800e600 <__smakebuf_r+0x18>
 800e664:	0800dc51 	.word	0x0800dc51

0800e668 <__malloc_lock>:
 800e668:	4801      	ldr	r0, [pc, #4]	; (800e670 <__malloc_lock+0x8>)
 800e66a:	f7ff bbe8 	b.w	800de3e <__retarget_lock_acquire_recursive>
 800e66e:	bf00      	nop
 800e670:	24007250 	.word	0x24007250

0800e674 <__malloc_unlock>:
 800e674:	4801      	ldr	r0, [pc, #4]	; (800e67c <__malloc_unlock+0x8>)
 800e676:	f7ff bbe3 	b.w	800de40 <__retarget_lock_release_recursive>
 800e67a:	bf00      	nop
 800e67c:	24007250 	.word	0x24007250

0800e680 <_free_r>:
 800e680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e682:	2900      	cmp	r1, #0
 800e684:	d044      	beq.n	800e710 <_free_r+0x90>
 800e686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e68a:	9001      	str	r0, [sp, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f1a1 0404 	sub.w	r4, r1, #4
 800e692:	bfb8      	it	lt
 800e694:	18e4      	addlt	r4, r4, r3
 800e696:	f7ff ffe7 	bl	800e668 <__malloc_lock>
 800e69a:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <_free_r+0x94>)
 800e69c:	9801      	ldr	r0, [sp, #4]
 800e69e:	6813      	ldr	r3, [r2, #0]
 800e6a0:	b933      	cbnz	r3, 800e6b0 <_free_r+0x30>
 800e6a2:	6063      	str	r3, [r4, #4]
 800e6a4:	6014      	str	r4, [r2, #0]
 800e6a6:	b003      	add	sp, #12
 800e6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6ac:	f7ff bfe2 	b.w	800e674 <__malloc_unlock>
 800e6b0:	42a3      	cmp	r3, r4
 800e6b2:	d908      	bls.n	800e6c6 <_free_r+0x46>
 800e6b4:	6825      	ldr	r5, [r4, #0]
 800e6b6:	1961      	adds	r1, r4, r5
 800e6b8:	428b      	cmp	r3, r1
 800e6ba:	bf01      	itttt	eq
 800e6bc:	6819      	ldreq	r1, [r3, #0]
 800e6be:	685b      	ldreq	r3, [r3, #4]
 800e6c0:	1949      	addeq	r1, r1, r5
 800e6c2:	6021      	streq	r1, [r4, #0]
 800e6c4:	e7ed      	b.n	800e6a2 <_free_r+0x22>
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	b10b      	cbz	r3, 800e6d0 <_free_r+0x50>
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	d9fa      	bls.n	800e6c6 <_free_r+0x46>
 800e6d0:	6811      	ldr	r1, [r2, #0]
 800e6d2:	1855      	adds	r5, r2, r1
 800e6d4:	42a5      	cmp	r5, r4
 800e6d6:	d10b      	bne.n	800e6f0 <_free_r+0x70>
 800e6d8:	6824      	ldr	r4, [r4, #0]
 800e6da:	4421      	add	r1, r4
 800e6dc:	1854      	adds	r4, r2, r1
 800e6de:	42a3      	cmp	r3, r4
 800e6e0:	6011      	str	r1, [r2, #0]
 800e6e2:	d1e0      	bne.n	800e6a6 <_free_r+0x26>
 800e6e4:	681c      	ldr	r4, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	6053      	str	r3, [r2, #4]
 800e6ea:	4421      	add	r1, r4
 800e6ec:	6011      	str	r1, [r2, #0]
 800e6ee:	e7da      	b.n	800e6a6 <_free_r+0x26>
 800e6f0:	d902      	bls.n	800e6f8 <_free_r+0x78>
 800e6f2:	230c      	movs	r3, #12
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	e7d6      	b.n	800e6a6 <_free_r+0x26>
 800e6f8:	6825      	ldr	r5, [r4, #0]
 800e6fa:	1961      	adds	r1, r4, r5
 800e6fc:	428b      	cmp	r3, r1
 800e6fe:	bf04      	itt	eq
 800e700:	6819      	ldreq	r1, [r3, #0]
 800e702:	685b      	ldreq	r3, [r3, #4]
 800e704:	6063      	str	r3, [r4, #4]
 800e706:	bf04      	itt	eq
 800e708:	1949      	addeq	r1, r1, r5
 800e70a:	6021      	streq	r1, [r4, #0]
 800e70c:	6054      	str	r4, [r2, #4]
 800e70e:	e7ca      	b.n	800e6a6 <_free_r+0x26>
 800e710:	b003      	add	sp, #12
 800e712:	bd30      	pop	{r4, r5, pc}
 800e714:	24007254 	.word	0x24007254

0800e718 <__sfputc_r>:
 800e718:	6893      	ldr	r3, [r2, #8]
 800e71a:	3b01      	subs	r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	b410      	push	{r4}
 800e720:	6093      	str	r3, [r2, #8]
 800e722:	da08      	bge.n	800e736 <__sfputc_r+0x1e>
 800e724:	6994      	ldr	r4, [r2, #24]
 800e726:	42a3      	cmp	r3, r4
 800e728:	db01      	blt.n	800e72e <__sfputc_r+0x16>
 800e72a:	290a      	cmp	r1, #10
 800e72c:	d103      	bne.n	800e736 <__sfputc_r+0x1e>
 800e72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e732:	f7ff bd7d 	b.w	800e230 <__swbuf_r>
 800e736:	6813      	ldr	r3, [r2, #0]
 800e738:	1c58      	adds	r0, r3, #1
 800e73a:	6010      	str	r0, [r2, #0]
 800e73c:	7019      	strb	r1, [r3, #0]
 800e73e:	4608      	mov	r0, r1
 800e740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e744:	4770      	bx	lr

0800e746 <__sfputs_r>:
 800e746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e748:	4606      	mov	r6, r0
 800e74a:	460f      	mov	r7, r1
 800e74c:	4614      	mov	r4, r2
 800e74e:	18d5      	adds	r5, r2, r3
 800e750:	42ac      	cmp	r4, r5
 800e752:	d101      	bne.n	800e758 <__sfputs_r+0x12>
 800e754:	2000      	movs	r0, #0
 800e756:	e007      	b.n	800e768 <__sfputs_r+0x22>
 800e758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e75c:	463a      	mov	r2, r7
 800e75e:	4630      	mov	r0, r6
 800e760:	f7ff ffda 	bl	800e718 <__sfputc_r>
 800e764:	1c43      	adds	r3, r0, #1
 800e766:	d1f3      	bne.n	800e750 <__sfputs_r+0xa>
 800e768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e76c <_vfiprintf_r>:
 800e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	460d      	mov	r5, r1
 800e772:	b09d      	sub	sp, #116	; 0x74
 800e774:	4614      	mov	r4, r2
 800e776:	4698      	mov	r8, r3
 800e778:	4606      	mov	r6, r0
 800e77a:	b118      	cbz	r0, 800e784 <_vfiprintf_r+0x18>
 800e77c:	6983      	ldr	r3, [r0, #24]
 800e77e:	b90b      	cbnz	r3, 800e784 <_vfiprintf_r+0x18>
 800e780:	f7ff fa9a 	bl	800dcb8 <__sinit>
 800e784:	4b89      	ldr	r3, [pc, #548]	; (800e9ac <_vfiprintf_r+0x240>)
 800e786:	429d      	cmp	r5, r3
 800e788:	d11b      	bne.n	800e7c2 <_vfiprintf_r+0x56>
 800e78a:	6875      	ldr	r5, [r6, #4]
 800e78c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e78e:	07d9      	lsls	r1, r3, #31
 800e790:	d405      	bmi.n	800e79e <_vfiprintf_r+0x32>
 800e792:	89ab      	ldrh	r3, [r5, #12]
 800e794:	059a      	lsls	r2, r3, #22
 800e796:	d402      	bmi.n	800e79e <_vfiprintf_r+0x32>
 800e798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e79a:	f7ff fb50 	bl	800de3e <__retarget_lock_acquire_recursive>
 800e79e:	89ab      	ldrh	r3, [r5, #12]
 800e7a0:	071b      	lsls	r3, r3, #28
 800e7a2:	d501      	bpl.n	800e7a8 <_vfiprintf_r+0x3c>
 800e7a4:	692b      	ldr	r3, [r5, #16]
 800e7a6:	b9eb      	cbnz	r3, 800e7e4 <_vfiprintf_r+0x78>
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f7ff fda4 	bl	800e2f8 <__swsetup_r>
 800e7b0:	b1c0      	cbz	r0, 800e7e4 <_vfiprintf_r+0x78>
 800e7b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7b4:	07dc      	lsls	r4, r3, #31
 800e7b6:	d50e      	bpl.n	800e7d6 <_vfiprintf_r+0x6a>
 800e7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7bc:	b01d      	add	sp, #116	; 0x74
 800e7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c2:	4b7b      	ldr	r3, [pc, #492]	; (800e9b0 <_vfiprintf_r+0x244>)
 800e7c4:	429d      	cmp	r5, r3
 800e7c6:	d101      	bne.n	800e7cc <_vfiprintf_r+0x60>
 800e7c8:	68b5      	ldr	r5, [r6, #8]
 800e7ca:	e7df      	b.n	800e78c <_vfiprintf_r+0x20>
 800e7cc:	4b79      	ldr	r3, [pc, #484]	; (800e9b4 <_vfiprintf_r+0x248>)
 800e7ce:	429d      	cmp	r5, r3
 800e7d0:	bf08      	it	eq
 800e7d2:	68f5      	ldreq	r5, [r6, #12]
 800e7d4:	e7da      	b.n	800e78c <_vfiprintf_r+0x20>
 800e7d6:	89ab      	ldrh	r3, [r5, #12]
 800e7d8:	0598      	lsls	r0, r3, #22
 800e7da:	d4ed      	bmi.n	800e7b8 <_vfiprintf_r+0x4c>
 800e7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7de:	f7ff fb2f 	bl	800de40 <__retarget_lock_release_recursive>
 800e7e2:	e7e9      	b.n	800e7b8 <_vfiprintf_r+0x4c>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e8:	2320      	movs	r3, #32
 800e7ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7f2:	2330      	movs	r3, #48	; 0x30
 800e7f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9b8 <_vfiprintf_r+0x24c>
 800e7f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7fc:	f04f 0901 	mov.w	r9, #1
 800e800:	4623      	mov	r3, r4
 800e802:	469a      	mov	sl, r3
 800e804:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e808:	b10a      	cbz	r2, 800e80e <_vfiprintf_r+0xa2>
 800e80a:	2a25      	cmp	r2, #37	; 0x25
 800e80c:	d1f9      	bne.n	800e802 <_vfiprintf_r+0x96>
 800e80e:	ebba 0b04 	subs.w	fp, sl, r4
 800e812:	d00b      	beq.n	800e82c <_vfiprintf_r+0xc0>
 800e814:	465b      	mov	r3, fp
 800e816:	4622      	mov	r2, r4
 800e818:	4629      	mov	r1, r5
 800e81a:	4630      	mov	r0, r6
 800e81c:	f7ff ff93 	bl	800e746 <__sfputs_r>
 800e820:	3001      	adds	r0, #1
 800e822:	f000 80aa 	beq.w	800e97a <_vfiprintf_r+0x20e>
 800e826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e828:	445a      	add	r2, fp
 800e82a:	9209      	str	r2, [sp, #36]	; 0x24
 800e82c:	f89a 3000 	ldrb.w	r3, [sl]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f000 80a2 	beq.w	800e97a <_vfiprintf_r+0x20e>
 800e836:	2300      	movs	r3, #0
 800e838:	f04f 32ff 	mov.w	r2, #4294967295
 800e83c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e840:	f10a 0a01 	add.w	sl, sl, #1
 800e844:	9304      	str	r3, [sp, #16]
 800e846:	9307      	str	r3, [sp, #28]
 800e848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e84c:	931a      	str	r3, [sp, #104]	; 0x68
 800e84e:	4654      	mov	r4, sl
 800e850:	2205      	movs	r2, #5
 800e852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e856:	4858      	ldr	r0, [pc, #352]	; (800e9b8 <_vfiprintf_r+0x24c>)
 800e858:	f7f1 fd42 	bl	80002e0 <memchr>
 800e85c:	9a04      	ldr	r2, [sp, #16]
 800e85e:	b9d8      	cbnz	r0, 800e898 <_vfiprintf_r+0x12c>
 800e860:	06d1      	lsls	r1, r2, #27
 800e862:	bf44      	itt	mi
 800e864:	2320      	movmi	r3, #32
 800e866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e86a:	0713      	lsls	r3, r2, #28
 800e86c:	bf44      	itt	mi
 800e86e:	232b      	movmi	r3, #43	; 0x2b
 800e870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e874:	f89a 3000 	ldrb.w	r3, [sl]
 800e878:	2b2a      	cmp	r3, #42	; 0x2a
 800e87a:	d015      	beq.n	800e8a8 <_vfiprintf_r+0x13c>
 800e87c:	9a07      	ldr	r2, [sp, #28]
 800e87e:	4654      	mov	r4, sl
 800e880:	2000      	movs	r0, #0
 800e882:	f04f 0c0a 	mov.w	ip, #10
 800e886:	4621      	mov	r1, r4
 800e888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e88c:	3b30      	subs	r3, #48	; 0x30
 800e88e:	2b09      	cmp	r3, #9
 800e890:	d94e      	bls.n	800e930 <_vfiprintf_r+0x1c4>
 800e892:	b1b0      	cbz	r0, 800e8c2 <_vfiprintf_r+0x156>
 800e894:	9207      	str	r2, [sp, #28]
 800e896:	e014      	b.n	800e8c2 <_vfiprintf_r+0x156>
 800e898:	eba0 0308 	sub.w	r3, r0, r8
 800e89c:	fa09 f303 	lsl.w	r3, r9, r3
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	9304      	str	r3, [sp, #16]
 800e8a4:	46a2      	mov	sl, r4
 800e8a6:	e7d2      	b.n	800e84e <_vfiprintf_r+0xe2>
 800e8a8:	9b03      	ldr	r3, [sp, #12]
 800e8aa:	1d19      	adds	r1, r3, #4
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	9103      	str	r1, [sp, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bfbb      	ittet	lt
 800e8b4:	425b      	neglt	r3, r3
 800e8b6:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ba:	9307      	strge	r3, [sp, #28]
 800e8bc:	9307      	strlt	r3, [sp, #28]
 800e8be:	bfb8      	it	lt
 800e8c0:	9204      	strlt	r2, [sp, #16]
 800e8c2:	7823      	ldrb	r3, [r4, #0]
 800e8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8c6:	d10c      	bne.n	800e8e2 <_vfiprintf_r+0x176>
 800e8c8:	7863      	ldrb	r3, [r4, #1]
 800e8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e8cc:	d135      	bne.n	800e93a <_vfiprintf_r+0x1ce>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	1d1a      	adds	r2, r3, #4
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	9203      	str	r2, [sp, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfb8      	it	lt
 800e8da:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8de:	3402      	adds	r4, #2
 800e8e0:	9305      	str	r3, [sp, #20]
 800e8e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9c8 <_vfiprintf_r+0x25c>
 800e8e6:	7821      	ldrb	r1, [r4, #0]
 800e8e8:	2203      	movs	r2, #3
 800e8ea:	4650      	mov	r0, sl
 800e8ec:	f7f1 fcf8 	bl	80002e0 <memchr>
 800e8f0:	b140      	cbz	r0, 800e904 <_vfiprintf_r+0x198>
 800e8f2:	2340      	movs	r3, #64	; 0x40
 800e8f4:	eba0 000a 	sub.w	r0, r0, sl
 800e8f8:	fa03 f000 	lsl.w	r0, r3, r0
 800e8fc:	9b04      	ldr	r3, [sp, #16]
 800e8fe:	4303      	orrs	r3, r0
 800e900:	3401      	adds	r4, #1
 800e902:	9304      	str	r3, [sp, #16]
 800e904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e908:	482c      	ldr	r0, [pc, #176]	; (800e9bc <_vfiprintf_r+0x250>)
 800e90a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e90e:	2206      	movs	r2, #6
 800e910:	f7f1 fce6 	bl	80002e0 <memchr>
 800e914:	2800      	cmp	r0, #0
 800e916:	d03f      	beq.n	800e998 <_vfiprintf_r+0x22c>
 800e918:	4b29      	ldr	r3, [pc, #164]	; (800e9c0 <_vfiprintf_r+0x254>)
 800e91a:	bb1b      	cbnz	r3, 800e964 <_vfiprintf_r+0x1f8>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	3307      	adds	r3, #7
 800e920:	f023 0307 	bic.w	r3, r3, #7
 800e924:	3308      	adds	r3, #8
 800e926:	9303      	str	r3, [sp, #12]
 800e928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e92a:	443b      	add	r3, r7
 800e92c:	9309      	str	r3, [sp, #36]	; 0x24
 800e92e:	e767      	b.n	800e800 <_vfiprintf_r+0x94>
 800e930:	fb0c 3202 	mla	r2, ip, r2, r3
 800e934:	460c      	mov	r4, r1
 800e936:	2001      	movs	r0, #1
 800e938:	e7a5      	b.n	800e886 <_vfiprintf_r+0x11a>
 800e93a:	2300      	movs	r3, #0
 800e93c:	3401      	adds	r4, #1
 800e93e:	9305      	str	r3, [sp, #20]
 800e940:	4619      	mov	r1, r3
 800e942:	f04f 0c0a 	mov.w	ip, #10
 800e946:	4620      	mov	r0, r4
 800e948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e94c:	3a30      	subs	r2, #48	; 0x30
 800e94e:	2a09      	cmp	r2, #9
 800e950:	d903      	bls.n	800e95a <_vfiprintf_r+0x1ee>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d0c5      	beq.n	800e8e2 <_vfiprintf_r+0x176>
 800e956:	9105      	str	r1, [sp, #20]
 800e958:	e7c3      	b.n	800e8e2 <_vfiprintf_r+0x176>
 800e95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e95e:	4604      	mov	r4, r0
 800e960:	2301      	movs	r3, #1
 800e962:	e7f0      	b.n	800e946 <_vfiprintf_r+0x1da>
 800e964:	ab03      	add	r3, sp, #12
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	462a      	mov	r2, r5
 800e96a:	4b16      	ldr	r3, [pc, #88]	; (800e9c4 <_vfiprintf_r+0x258>)
 800e96c:	a904      	add	r1, sp, #16
 800e96e:	4630      	mov	r0, r6
 800e970:	f3af 8000 	nop.w
 800e974:	4607      	mov	r7, r0
 800e976:	1c78      	adds	r0, r7, #1
 800e978:	d1d6      	bne.n	800e928 <_vfiprintf_r+0x1bc>
 800e97a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e97c:	07d9      	lsls	r1, r3, #31
 800e97e:	d405      	bmi.n	800e98c <_vfiprintf_r+0x220>
 800e980:	89ab      	ldrh	r3, [r5, #12]
 800e982:	059a      	lsls	r2, r3, #22
 800e984:	d402      	bmi.n	800e98c <_vfiprintf_r+0x220>
 800e986:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e988:	f7ff fa5a 	bl	800de40 <__retarget_lock_release_recursive>
 800e98c:	89ab      	ldrh	r3, [r5, #12]
 800e98e:	065b      	lsls	r3, r3, #25
 800e990:	f53f af12 	bmi.w	800e7b8 <_vfiprintf_r+0x4c>
 800e994:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e996:	e711      	b.n	800e7bc <_vfiprintf_r+0x50>
 800e998:	ab03      	add	r3, sp, #12
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	462a      	mov	r2, r5
 800e99e:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <_vfiprintf_r+0x258>)
 800e9a0:	a904      	add	r1, sp, #16
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f000 f880 	bl	800eaa8 <_printf_i>
 800e9a8:	e7e4      	b.n	800e974 <_vfiprintf_r+0x208>
 800e9aa:	bf00      	nop
 800e9ac:	0800f00c 	.word	0x0800f00c
 800e9b0:	0800f02c 	.word	0x0800f02c
 800e9b4:	0800efec 	.word	0x0800efec
 800e9b8:	0800f050 	.word	0x0800f050
 800e9bc:	0800f05a 	.word	0x0800f05a
 800e9c0:	00000000 	.word	0x00000000
 800e9c4:	0800e747 	.word	0x0800e747
 800e9c8:	0800f056 	.word	0x0800f056

0800e9cc <_printf_common>:
 800e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	4699      	mov	r9, r3
 800e9d4:	688a      	ldr	r2, [r1, #8]
 800e9d6:	690b      	ldr	r3, [r1, #16]
 800e9d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	bfb8      	it	lt
 800e9e0:	4613      	movlt	r3, r2
 800e9e2:	6033      	str	r3, [r6, #0]
 800e9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	b10a      	cbz	r2, 800e9f2 <_printf_common+0x26>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	6033      	str	r3, [r6, #0]
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	0699      	lsls	r1, r3, #26
 800e9f6:	bf42      	ittt	mi
 800e9f8:	6833      	ldrmi	r3, [r6, #0]
 800e9fa:	3302      	addmi	r3, #2
 800e9fc:	6033      	strmi	r3, [r6, #0]
 800e9fe:	6825      	ldr	r5, [r4, #0]
 800ea00:	f015 0506 	ands.w	r5, r5, #6
 800ea04:	d106      	bne.n	800ea14 <_printf_common+0x48>
 800ea06:	f104 0a19 	add.w	sl, r4, #25
 800ea0a:	68e3      	ldr	r3, [r4, #12]
 800ea0c:	6832      	ldr	r2, [r6, #0]
 800ea0e:	1a9b      	subs	r3, r3, r2
 800ea10:	42ab      	cmp	r3, r5
 800ea12:	dc26      	bgt.n	800ea62 <_printf_common+0x96>
 800ea14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea18:	1e13      	subs	r3, r2, #0
 800ea1a:	6822      	ldr	r2, [r4, #0]
 800ea1c:	bf18      	it	ne
 800ea1e:	2301      	movne	r3, #1
 800ea20:	0692      	lsls	r2, r2, #26
 800ea22:	d42b      	bmi.n	800ea7c <_printf_common+0xb0>
 800ea24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea28:	4649      	mov	r1, r9
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c0      	blx	r8
 800ea2e:	3001      	adds	r0, #1
 800ea30:	d01e      	beq.n	800ea70 <_printf_common+0xa4>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	68e5      	ldr	r5, [r4, #12]
 800ea36:	6832      	ldr	r2, [r6, #0]
 800ea38:	f003 0306 	and.w	r3, r3, #6
 800ea3c:	2b04      	cmp	r3, #4
 800ea3e:	bf08      	it	eq
 800ea40:	1aad      	subeq	r5, r5, r2
 800ea42:	68a3      	ldr	r3, [r4, #8]
 800ea44:	6922      	ldr	r2, [r4, #16]
 800ea46:	bf0c      	ite	eq
 800ea48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea4c:	2500      	movne	r5, #0
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	bfc4      	itt	gt
 800ea52:	1a9b      	subgt	r3, r3, r2
 800ea54:	18ed      	addgt	r5, r5, r3
 800ea56:	2600      	movs	r6, #0
 800ea58:	341a      	adds	r4, #26
 800ea5a:	42b5      	cmp	r5, r6
 800ea5c:	d11a      	bne.n	800ea94 <_printf_common+0xc8>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e008      	b.n	800ea74 <_printf_common+0xa8>
 800ea62:	2301      	movs	r3, #1
 800ea64:	4652      	mov	r2, sl
 800ea66:	4649      	mov	r1, r9
 800ea68:	4638      	mov	r0, r7
 800ea6a:	47c0      	blx	r8
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d103      	bne.n	800ea78 <_printf_common+0xac>
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	3501      	adds	r5, #1
 800ea7a:	e7c6      	b.n	800ea0a <_printf_common+0x3e>
 800ea7c:	18e1      	adds	r1, r4, r3
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	2030      	movs	r0, #48	; 0x30
 800ea82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea86:	4422      	add	r2, r4
 800ea88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea90:	3302      	adds	r3, #2
 800ea92:	e7c7      	b.n	800ea24 <_printf_common+0x58>
 800ea94:	2301      	movs	r3, #1
 800ea96:	4622      	mov	r2, r4
 800ea98:	4649      	mov	r1, r9
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c0      	blx	r8
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d0e6      	beq.n	800ea70 <_printf_common+0xa4>
 800eaa2:	3601      	adds	r6, #1
 800eaa4:	e7d9      	b.n	800ea5a <_printf_common+0x8e>
	...

0800eaa8 <_printf_i>:
 800eaa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaac:	7e0f      	ldrb	r7, [r1, #24]
 800eaae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eab0:	2f78      	cmp	r7, #120	; 0x78
 800eab2:	4691      	mov	r9, r2
 800eab4:	4680      	mov	r8, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	469a      	mov	sl, r3
 800eaba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eabe:	d807      	bhi.n	800ead0 <_printf_i+0x28>
 800eac0:	2f62      	cmp	r7, #98	; 0x62
 800eac2:	d80a      	bhi.n	800eada <_printf_i+0x32>
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	f000 80d8 	beq.w	800ec7a <_printf_i+0x1d2>
 800eaca:	2f58      	cmp	r7, #88	; 0x58
 800eacc:	f000 80a3 	beq.w	800ec16 <_printf_i+0x16e>
 800ead0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ead4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ead8:	e03a      	b.n	800eb50 <_printf_i+0xa8>
 800eada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eade:	2b15      	cmp	r3, #21
 800eae0:	d8f6      	bhi.n	800ead0 <_printf_i+0x28>
 800eae2:	a101      	add	r1, pc, #4	; (adr r1, 800eae8 <_printf_i+0x40>)
 800eae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eae8:	0800eb41 	.word	0x0800eb41
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800ead1 	.word	0x0800ead1
 800eaf4:	0800ead1 	.word	0x0800ead1
 800eaf8:	0800ead1 	.word	0x0800ead1
 800eafc:	0800ead1 	.word	0x0800ead1
 800eb00:	0800eb55 	.word	0x0800eb55
 800eb04:	0800ead1 	.word	0x0800ead1
 800eb08:	0800ead1 	.word	0x0800ead1
 800eb0c:	0800ead1 	.word	0x0800ead1
 800eb10:	0800ead1 	.word	0x0800ead1
 800eb14:	0800ec61 	.word	0x0800ec61
 800eb18:	0800eb85 	.word	0x0800eb85
 800eb1c:	0800ec43 	.word	0x0800ec43
 800eb20:	0800ead1 	.word	0x0800ead1
 800eb24:	0800ead1 	.word	0x0800ead1
 800eb28:	0800ec83 	.word	0x0800ec83
 800eb2c:	0800ead1 	.word	0x0800ead1
 800eb30:	0800eb85 	.word	0x0800eb85
 800eb34:	0800ead1 	.word	0x0800ead1
 800eb38:	0800ead1 	.word	0x0800ead1
 800eb3c:	0800ec4b 	.word	0x0800ec4b
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	1d1a      	adds	r2, r3, #4
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	602a      	str	r2, [r5, #0]
 800eb48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb50:	2301      	movs	r3, #1
 800eb52:	e0a3      	b.n	800ec9c <_printf_i+0x1f4>
 800eb54:	6820      	ldr	r0, [r4, #0]
 800eb56:	6829      	ldr	r1, [r5, #0]
 800eb58:	0606      	lsls	r6, r0, #24
 800eb5a:	f101 0304 	add.w	r3, r1, #4
 800eb5e:	d50a      	bpl.n	800eb76 <_printf_i+0xce>
 800eb60:	680e      	ldr	r6, [r1, #0]
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	da03      	bge.n	800eb70 <_printf_i+0xc8>
 800eb68:	232d      	movs	r3, #45	; 0x2d
 800eb6a:	4276      	negs	r6, r6
 800eb6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb70:	485e      	ldr	r0, [pc, #376]	; (800ecec <_printf_i+0x244>)
 800eb72:	230a      	movs	r3, #10
 800eb74:	e019      	b.n	800ebaa <_printf_i+0x102>
 800eb76:	680e      	ldr	r6, [r1, #0]
 800eb78:	602b      	str	r3, [r5, #0]
 800eb7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb7e:	bf18      	it	ne
 800eb80:	b236      	sxthne	r6, r6
 800eb82:	e7ef      	b.n	800eb64 <_printf_i+0xbc>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	6820      	ldr	r0, [r4, #0]
 800eb88:	1d19      	adds	r1, r3, #4
 800eb8a:	6029      	str	r1, [r5, #0]
 800eb8c:	0601      	lsls	r1, r0, #24
 800eb8e:	d501      	bpl.n	800eb94 <_printf_i+0xec>
 800eb90:	681e      	ldr	r6, [r3, #0]
 800eb92:	e002      	b.n	800eb9a <_printf_i+0xf2>
 800eb94:	0646      	lsls	r6, r0, #25
 800eb96:	d5fb      	bpl.n	800eb90 <_printf_i+0xe8>
 800eb98:	881e      	ldrh	r6, [r3, #0]
 800eb9a:	4854      	ldr	r0, [pc, #336]	; (800ecec <_printf_i+0x244>)
 800eb9c:	2f6f      	cmp	r7, #111	; 0x6f
 800eb9e:	bf0c      	ite	eq
 800eba0:	2308      	moveq	r3, #8
 800eba2:	230a      	movne	r3, #10
 800eba4:	2100      	movs	r1, #0
 800eba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebaa:	6865      	ldr	r5, [r4, #4]
 800ebac:	60a5      	str	r5, [r4, #8]
 800ebae:	2d00      	cmp	r5, #0
 800ebb0:	bfa2      	ittt	ge
 800ebb2:	6821      	ldrge	r1, [r4, #0]
 800ebb4:	f021 0104 	bicge.w	r1, r1, #4
 800ebb8:	6021      	strge	r1, [r4, #0]
 800ebba:	b90e      	cbnz	r6, 800ebc0 <_printf_i+0x118>
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	d04d      	beq.n	800ec5c <_printf_i+0x1b4>
 800ebc0:	4615      	mov	r5, r2
 800ebc2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ebc6:	fb03 6711 	mls	r7, r3, r1, r6
 800ebca:	5dc7      	ldrb	r7, [r0, r7]
 800ebcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ebd0:	4637      	mov	r7, r6
 800ebd2:	42bb      	cmp	r3, r7
 800ebd4:	460e      	mov	r6, r1
 800ebd6:	d9f4      	bls.n	800ebc2 <_printf_i+0x11a>
 800ebd8:	2b08      	cmp	r3, #8
 800ebda:	d10b      	bne.n	800ebf4 <_printf_i+0x14c>
 800ebdc:	6823      	ldr	r3, [r4, #0]
 800ebde:	07de      	lsls	r6, r3, #31
 800ebe0:	d508      	bpl.n	800ebf4 <_printf_i+0x14c>
 800ebe2:	6923      	ldr	r3, [r4, #16]
 800ebe4:	6861      	ldr	r1, [r4, #4]
 800ebe6:	4299      	cmp	r1, r3
 800ebe8:	bfde      	ittt	le
 800ebea:	2330      	movle	r3, #48	; 0x30
 800ebec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ebf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ebf4:	1b52      	subs	r2, r2, r5
 800ebf6:	6122      	str	r2, [r4, #16]
 800ebf8:	f8cd a000 	str.w	sl, [sp]
 800ebfc:	464b      	mov	r3, r9
 800ebfe:	aa03      	add	r2, sp, #12
 800ec00:	4621      	mov	r1, r4
 800ec02:	4640      	mov	r0, r8
 800ec04:	f7ff fee2 	bl	800e9cc <_printf_common>
 800ec08:	3001      	adds	r0, #1
 800ec0a:	d14c      	bne.n	800eca6 <_printf_i+0x1fe>
 800ec0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec10:	b004      	add	sp, #16
 800ec12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec16:	4835      	ldr	r0, [pc, #212]	; (800ecec <_printf_i+0x244>)
 800ec18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec1c:	6829      	ldr	r1, [r5, #0]
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec24:	6029      	str	r1, [r5, #0]
 800ec26:	061d      	lsls	r5, r3, #24
 800ec28:	d514      	bpl.n	800ec54 <_printf_i+0x1ac>
 800ec2a:	07df      	lsls	r7, r3, #31
 800ec2c:	bf44      	itt	mi
 800ec2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ec32:	6023      	strmi	r3, [r4, #0]
 800ec34:	b91e      	cbnz	r6, 800ec3e <_printf_i+0x196>
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	f023 0320 	bic.w	r3, r3, #32
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	2310      	movs	r3, #16
 800ec40:	e7b0      	b.n	800eba4 <_printf_i+0xfc>
 800ec42:	6823      	ldr	r3, [r4, #0]
 800ec44:	f043 0320 	orr.w	r3, r3, #32
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	2378      	movs	r3, #120	; 0x78
 800ec4c:	4828      	ldr	r0, [pc, #160]	; (800ecf0 <_printf_i+0x248>)
 800ec4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec52:	e7e3      	b.n	800ec1c <_printf_i+0x174>
 800ec54:	0659      	lsls	r1, r3, #25
 800ec56:	bf48      	it	mi
 800ec58:	b2b6      	uxthmi	r6, r6
 800ec5a:	e7e6      	b.n	800ec2a <_printf_i+0x182>
 800ec5c:	4615      	mov	r5, r2
 800ec5e:	e7bb      	b.n	800ebd8 <_printf_i+0x130>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	6826      	ldr	r6, [r4, #0]
 800ec64:	6961      	ldr	r1, [r4, #20]
 800ec66:	1d18      	adds	r0, r3, #4
 800ec68:	6028      	str	r0, [r5, #0]
 800ec6a:	0635      	lsls	r5, r6, #24
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	d501      	bpl.n	800ec74 <_printf_i+0x1cc>
 800ec70:	6019      	str	r1, [r3, #0]
 800ec72:	e002      	b.n	800ec7a <_printf_i+0x1d2>
 800ec74:	0670      	lsls	r0, r6, #25
 800ec76:	d5fb      	bpl.n	800ec70 <_printf_i+0x1c8>
 800ec78:	8019      	strh	r1, [r3, #0]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6123      	str	r3, [r4, #16]
 800ec7e:	4615      	mov	r5, r2
 800ec80:	e7ba      	b.n	800ebf8 <_printf_i+0x150>
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	1d1a      	adds	r2, r3, #4
 800ec86:	602a      	str	r2, [r5, #0]
 800ec88:	681d      	ldr	r5, [r3, #0]
 800ec8a:	6862      	ldr	r2, [r4, #4]
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f7f1 fb26 	bl	80002e0 <memchr>
 800ec94:	b108      	cbz	r0, 800ec9a <_printf_i+0x1f2>
 800ec96:	1b40      	subs	r0, r0, r5
 800ec98:	6060      	str	r0, [r4, #4]
 800ec9a:	6863      	ldr	r3, [r4, #4]
 800ec9c:	6123      	str	r3, [r4, #16]
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eca4:	e7a8      	b.n	800ebf8 <_printf_i+0x150>
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	462a      	mov	r2, r5
 800ecaa:	4649      	mov	r1, r9
 800ecac:	4640      	mov	r0, r8
 800ecae:	47d0      	blx	sl
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d0ab      	beq.n	800ec0c <_printf_i+0x164>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	079b      	lsls	r3, r3, #30
 800ecb8:	d413      	bmi.n	800ece2 <_printf_i+0x23a>
 800ecba:	68e0      	ldr	r0, [r4, #12]
 800ecbc:	9b03      	ldr	r3, [sp, #12]
 800ecbe:	4298      	cmp	r0, r3
 800ecc0:	bfb8      	it	lt
 800ecc2:	4618      	movlt	r0, r3
 800ecc4:	e7a4      	b.n	800ec10 <_printf_i+0x168>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	4632      	mov	r2, r6
 800ecca:	4649      	mov	r1, r9
 800eccc:	4640      	mov	r0, r8
 800ecce:	47d0      	blx	sl
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	d09b      	beq.n	800ec0c <_printf_i+0x164>
 800ecd4:	3501      	adds	r5, #1
 800ecd6:	68e3      	ldr	r3, [r4, #12]
 800ecd8:	9903      	ldr	r1, [sp, #12]
 800ecda:	1a5b      	subs	r3, r3, r1
 800ecdc:	42ab      	cmp	r3, r5
 800ecde:	dcf2      	bgt.n	800ecc6 <_printf_i+0x21e>
 800ece0:	e7eb      	b.n	800ecba <_printf_i+0x212>
 800ece2:	2500      	movs	r5, #0
 800ece4:	f104 0619 	add.w	r6, r4, #25
 800ece8:	e7f5      	b.n	800ecd6 <_printf_i+0x22e>
 800ecea:	bf00      	nop
 800ecec:	0800f061 	.word	0x0800f061
 800ecf0:	0800f072 	.word	0x0800f072

0800ecf4 <_read_r>:
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	4d07      	ldr	r5, [pc, #28]	; (800ed14 <_read_r+0x20>)
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	4608      	mov	r0, r1
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	2200      	movs	r2, #0
 800ed00:	602a      	str	r2, [r5, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	f7f2 fb34 	bl	8001370 <_read>
 800ed08:	1c43      	adds	r3, r0, #1
 800ed0a:	d102      	bne.n	800ed12 <_read_r+0x1e>
 800ed0c:	682b      	ldr	r3, [r5, #0]
 800ed0e:	b103      	cbz	r3, 800ed12 <_read_r+0x1e>
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	bd38      	pop	{r3, r4, r5, pc}
 800ed14:	2400725c 	.word	0x2400725c

0800ed18 <_fstat_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4d07      	ldr	r5, [pc, #28]	; (800ed38 <_fstat_r+0x20>)
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	4604      	mov	r4, r0
 800ed20:	4608      	mov	r0, r1
 800ed22:	4611      	mov	r1, r2
 800ed24:	602b      	str	r3, [r5, #0]
 800ed26:	f7f2 fb68 	bl	80013fa <_fstat>
 800ed2a:	1c43      	adds	r3, r0, #1
 800ed2c:	d102      	bne.n	800ed34 <_fstat_r+0x1c>
 800ed2e:	682b      	ldr	r3, [r5, #0]
 800ed30:	b103      	cbz	r3, 800ed34 <_fstat_r+0x1c>
 800ed32:	6023      	str	r3, [r4, #0]
 800ed34:	bd38      	pop	{r3, r4, r5, pc}
 800ed36:	bf00      	nop
 800ed38:	2400725c 	.word	0x2400725c

0800ed3c <_isatty_r>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	4d06      	ldr	r5, [pc, #24]	; (800ed58 <_isatty_r+0x1c>)
 800ed40:	2300      	movs	r3, #0
 800ed42:	4604      	mov	r4, r0
 800ed44:	4608      	mov	r0, r1
 800ed46:	602b      	str	r3, [r5, #0]
 800ed48:	f7f2 fb67 	bl	800141a <_isatty>
 800ed4c:	1c43      	adds	r3, r0, #1
 800ed4e:	d102      	bne.n	800ed56 <_isatty_r+0x1a>
 800ed50:	682b      	ldr	r3, [r5, #0]
 800ed52:	b103      	cbz	r3, 800ed56 <_isatty_r+0x1a>
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	2400725c 	.word	0x2400725c

0800ed5c <_init>:
 800ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5e:	bf00      	nop
 800ed60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed62:	bc08      	pop	{r3}
 800ed64:	469e      	mov	lr, r3
 800ed66:	4770      	bx	lr

0800ed68 <_fini>:
 800ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6a:	bf00      	nop
 800ed6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed6e:	bc08      	pop	{r3}
 800ed70:	469e      	mov	lr, r3
 800ed72:	4770      	bx	lr
