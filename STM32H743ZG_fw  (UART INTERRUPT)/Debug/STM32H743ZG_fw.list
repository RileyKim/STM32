
STM32H743ZG_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c93c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda8  0800cda8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800cda8  0800cda8  0001cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb0  0800cdb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb0  0800cdb0  0001cdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800cdb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070b4  24000078  0800ce30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400712c  0800ce30  0002712c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d448  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a5  00000000  00000000  0004d4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00051c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00053698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b0ca  00000000  00000000  00054ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024386  00000000  00000000  0008ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00170d91  00000000  00000000  000b4330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002250c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  00225114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cbc4 	.word	0x0800cbc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800cbc4 	.word	0x0800cbc4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_Z7bspInitv>:





void bspInit(void){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_Z6millisv>:

void delay(uint32_t ms){
	HAL_Delay(ms);
}

uint32_t millis(void){
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 8000696:	f001 f8a5 	bl	80017e4 <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f001 f84e 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f848 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fa14 	bl	8000ad8 <MX_GPIO_Init>
  MX_UART8_Init();
 80006b0:	f000 f90e 	bl	80008d0 <MX_UART8_Init>
  MX_USART6_UART_Init();
 80006b4:	f000 f9a4 	bl	8000a00 <MX_USART6_UART_Init>
  MX_UART5_Init();
 80006b8:	f000 f8be 	bl	8000838 <MX_UART5_Init>
  MX_DMA_Init();
 80006bc:	f000 f9ec 	bl	8000a98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f952 	bl	8000968 <MX_USART1_UART_Init>
//  HAL_UART_Receive_DMA(&huart5, rxBuffer, 100);
//  HAL_UART_Transmit_DMA(&huart8, rxBuffer, 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f008 ff80 	bl	80095c8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gyroQueue */
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <main+0x70>)
 80006ca:	2104      	movs	r1, #4
 80006cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006d0:	f009 f856 	bl	8009780 <osMessageQueueNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <main+0x74>)
 80006d8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDebug */
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <main+0x78>)
 80006dc:	2100      	movs	r1, #0
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x7c>)
 80006e0:	f008 ffbc 	bl	800965c <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <main+0x80>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensing */
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <main+0x84>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <main+0x88>)
 80006f0:	f008 ffb4 	bl	800965c <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <main+0x8c>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* creation of TaskMain */
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 80006fa:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <main+0x90>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <main+0x94>)
 8000700:	f008 ffac 	bl	800965c <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <main+0x98>)
 8000708:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070a:	f008 ff81 	bl	8009610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x6e>
 8000710:	0800ccbc 	.word	0x0800ccbc
 8000714:	2400258c 	.word	0x2400258c
 8000718:	0800cc50 	.word	0x0800cc50
 800071c:	0800162f 	.word	0x0800162f
 8000720:	2400034c 	.word	0x2400034c
 8000724:	0800cc74 	.word	0x0800cc74
 8000728:	08001651 	.word	0x08001651
 800072c:	24000c0c 	.word	0x24000c0c
 8000730:	0800cc98 	.word	0x0800cc98
 8000734:	08001643 	.word	0x08001643
 8000738:	240014cc 	.word	0x240014cc

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	; 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	224c      	movs	r2, #76	; 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00b fd50 	bl	800c1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00b fd4a 	bl	800c1f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075c:	2002      	movs	r0, #2
 800075e:	f003 fd0f 	bl	8004180 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <SystemClock_Config+0xf4>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	4a31      	ldr	r2, [pc, #196]	; (8000830 <SystemClock_Config+0xf4>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <SystemClock_Config+0xf4>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <SystemClock_Config+0xf8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <SystemClock_Config+0xf8>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xf8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000798:	bf00      	nop
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xf8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a6:	d1f8      	bne.n	800079a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007c0:	231e      	movs	r3, #30
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d0:	230c      	movs	r3, #12
 80007d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fd07 	bl	80041f4 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007ec:	f000 f9dc 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	233f      	movs	r3, #63	; 0x3f
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fc:	2308      	movs	r3, #8
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f91a 	bl	8004a50 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000822:	f000 f9c1 	bl	8000ba8 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	; 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58000400 	.word	0x58000400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_UART5_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_UART5_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_UART5_Init+0x90>)
 8000844:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_UART5_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_UART5_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_UART5_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_UART5_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_UART5_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_UART5_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_UART5_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_UART5_Init+0x90>)
 8000882:	f006 faf5 	bl	8006e70 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f98c 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_UART5_Init+0x90>)
 8000894:	f008 fd89 	bl	80093aa <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f983 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_UART5_Init+0x90>)
 80008a6:	f008 fdbe 	bl	8009426 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f97a 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_UART5_Init+0x90>)
 80008b6:	f008 fd3f 	bl	8009338 <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f972 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000094 	.word	0x24000094
 80008cc:	40005000 	.word	0x40005000

080008d0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_UART8_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_UART8_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_UART8_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_UART8_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_UART8_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_UART8_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_UART8_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_UART8_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_UART8_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_UART8_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_UART8_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_UART8_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_UART8_Init+0x90>)
 800091a:	f006 faa9 	bl	8006e70 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f940 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_UART8_Init+0x90>)
 800092c:	f008 fd3d 	bl	80093aa <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f937 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_UART8_Init+0x90>)
 800093e:	f008 fd72 	bl	8009426 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f92e 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_UART8_Init+0x90>)
 800094e:	f008 fcf3 	bl	8009338 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f926 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000124 	.word	0x24000124
 8000964:	40007c00 	.word	0x40007c00

08000968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_USART1_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009b2:	f006 fa5d 	bl	8006e70 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f8f4 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009c4:	f008 fcf1 	bl	80093aa <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f8eb 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009d6:	f008 fd26 	bl	8009426 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f8e2 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009e6:	f008 fca7 	bl	8009338 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f8da 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	240001b4 	.word	0x240001b4
 80009fc:	40011000 	.word	0x40011000

08000a00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART6_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a4a:	f006 fa11 	bl	8006e70 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f8a8 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a5c:	f008 fca5 	bl	80093aa <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f89f 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a6e:	f008 fcda 	bl	8009426 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f896 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a7e:	f008 fc5b 	bl	8009338 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f88e 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	24000244 	.word	0x24000244
 8000a94:	40011400 	.word	0x40011400

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000ab0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f000 ff5f 	bl	8001984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ac6:	200b      	movs	r0, #11
 8000ac8:	f000 ff76 	bl	80019b8 <HAL_NVIC_EnableIRQ>

}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

}
 8000b74:	bf00      	nop
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b96:	f000 fe11 	bl	80017bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x38>)
 8000bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_MspInit+0x38>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x38>)
 8000bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f06f 0001 	mvn.w	r0, #1
 8000be0:	f000 fed0 	bl	8001984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0c0      	sub	sp, #256	; 0x100
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0c:	22bc      	movs	r2, #188	; 0xbc
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00b faed 	bl	800c1f0 <memset>
  if(huart->Instance==UART5)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a9a      	ldr	r2, [pc, #616]	; (8000e84 <HAL_UART_MspInit+0x294>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d14b      	bne.n	8000cb8 <HAL_UART_MspInit+0xc8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fadc 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff ffb5 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c3e:	4b92      	ldr	r3, [pc, #584]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c44:	4a90      	ldr	r2, [pc, #576]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c4e:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a89      	ldr	r2, [pc, #548]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PB5     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000c7a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000c94:	230e      	movs	r3, #14
 8000c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	487a      	ldr	r0, [pc, #488]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000ca2:	f003 f8bd 	bl	8003e20 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2035      	movs	r0, #53	; 0x35
 8000cac:	f000 fe6a 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000cb0:	2035      	movs	r0, #53	; 0x35
 8000cb2:	f000 fe81 	bl	80019b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cb6:	e169      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART8)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a74      	ldr	r2, [pc, #464]	; (8000e90 <HAL_UART_MspInit+0x2a0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d14a      	bne.n	8000d58 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fa8b 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000cdc:	f7ff ff64 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ce0:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce6:	4a68      	ldr	r2, [pc, #416]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf0:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a60      	ldr	r2, [pc, #384]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000d34:	2308      	movs	r3, #8
 8000d36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4854      	ldr	r0, [pc, #336]	; (8000e94 <HAL_UART_MspInit+0x2a4>)
 8000d42:	f003 f86d 	bl	8003e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2053      	movs	r0, #83	; 0x53
 8000d4c:	f000 fe1a 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000d50:	2053      	movs	r0, #83	; 0x53
 8000d52:	f000 fe31 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 8000d56:	e119      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_UART_MspInit+0x2a8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 80a0 	bne.w	8000ea4 <HAL_UART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fa3a 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_MspInit+0x192>
      Error_Handler();
 8000d7e:	f7ff ff13 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d88:	4a3f      	ldr	r2, [pc, #252]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a38      	ldr	r2, [pc, #224]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000de2:	4619      	mov	r1, r3
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000de6:	f003 f81b 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e02:	2307      	movs	r3, #7
 8000e04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481f      	ldr	r0, [pc, #124]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000e10:	f003 f806 	bl	8003e20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0x2b0>)
 8000e18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e1c:	2229      	movs	r2, #41	; 0x29
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e56:	f000 fdbd 	bl	80019d4 <HAL_DMA_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8000e60:	f7ff fea2 	bl	8000ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e68:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2105      	movs	r1, #5
 8000e74:	2025      	movs	r0, #37	; 0x25
 8000e76:	f000 fd85 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e7a:	2025      	movs	r0, #37	; 0x25
 8000e7c:	f000 fd9c 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 8000e80:	e084      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
 8000e82:	bf00      	nop
 8000e84:	40005000 	.word	0x40005000
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	40007c00 	.word	0x40007c00
 8000e94:	58021000 	.word	0x58021000
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	240002d4 	.word	0x240002d4
 8000ea0:	40020010 	.word	0x40020010
  else if(huart->Instance==USART6)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <HAL_UART_MspInit+0x3a8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d16e      	bne.n	8000f8c <HAL_UART_MspInit+0x39c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 f995 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8000ec8:	f7ff fe6e 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x3b0>)
 8000f4c:	f002 ff68 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_UART_MspInit+0x3b4>)
 8000f78:	f002 ff52 	bl	8003e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2105      	movs	r1, #5
 8000f80:	2047      	movs	r0, #71	; 0x47
 8000f82:	f000 fcff 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f86:	2047      	movs	r0, #71	; 0x47
 8000f88:	f000 fd16 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58021800 	.word	0x58021800

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d844      	bhi.n	8001040 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f000 fce2 	bl	8001984 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 fcf9 	bl	80019b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fc6:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_InitTick+0xb0>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_InitTick+0xb4>)
 8000fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <HAL_InitTick+0xb4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_InitTick+0xb4>)
 8000fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 f8b7 	bl	8005168 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ffa:	f004 f89f 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_InitTick+0xb8>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3b01      	subs	r3, #1
 8001010:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_InitTick+0xbc>)
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_InitTick+0xc0>)
 8001016:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0xbc>)
 800101a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_InitTick+0xbc>)
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_InitTick+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_InitTick+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_InitTick+0xbc>)
 8001034:	f005 fc42 	bl	80068bc <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <HAL_InitTick+0xa6>
 800103e:	e001      	b.n	8001044 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e005      	b.n	8001050 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_InitTick+0xbc>)
 8001046:	f005 fc9b 	bl	8006980 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	24000008 	.word	0x24000008
 800105c:	58024400 	.word	0x58024400
 8001060:	431bde83 	.word	0x431bde83
 8001064:	24002590 	.word	0x24002590
 8001068:	40010000 	.word	0x40010000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Stream0_IRQHandler+0x10>)
 800109e:	f001 fd59 	bl	8002b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	240002d4 	.word	0x240002d4

080010ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM1_UP_IRQHandler+0x10>)
 80010b2:	f005 fcdd 	bl	8006a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24002590 	.word	0x24002590

080010c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART1_IRQHandler+0x10>)
 80010c6:	f006 f80f 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240001b4 	.word	0x240001b4

080010d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <UART5_IRQHandler+0x10>)
 80010da:	f006 f805 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000094 	.word	0x24000094

080010e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART6_IRQHandler+0x10>)
 80010ee:	f005 fffb 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000244 	.word	0x24000244

080010fc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <UART8_IRQHandler+0x10>)
 8001102:	f005 fff1 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24000124 	.word	0x24000124

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f00b f81c 	bl	800c17c <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	24080000 	.word	0x24080000
 8001170:	00000400 	.word	0x00000400
 8001174:	240025dc 	.word	0x240025dc
 8001178:	24007130 	.word	0x24007130

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <SystemInit+0xec>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <SystemInit+0xec>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <SystemInit+0xf0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	2b06      	cmp	r3, #6
 800119a:	d807      	bhi.n	80011ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <SystemInit+0xf0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	4a31      	ldr	r2, [pc, #196]	; (800126c <SystemInit+0xf0>)
 80011a6:	f043 0307 	orr.w	r3, r3, #7
 80011aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <SystemInit+0xf4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <SystemInit+0xf4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <SystemInit+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <SystemInit+0xf4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	492b      	ldr	r1, [pc, #172]	; (8001270 <SystemInit+0xf4>)
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <SystemInit+0xf8>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemInit+0xf0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <SystemInit+0xf0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 030f 	bic.w	r3, r3, #15
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <SystemInit+0xf0>)
 80011e0:	f043 0307 	orr.w	r3, r3, #7
 80011e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SystemInit+0xf4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <SystemInit+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <SystemInit+0xf4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <SystemInit+0xf4>)
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <SystemInit+0xfc>)
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <SystemInit+0xf4>)
 8001200:	4a1e      	ldr	r2, [pc, #120]	; (800127c <SystemInit+0x100>)
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <SystemInit+0xf4>)
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <SystemInit+0x104>)
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <SystemInit+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <SystemInit+0xf4>)
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <SystemInit+0x104>)
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SystemInit+0xf4>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <SystemInit+0xf4>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <SystemInit+0x104>)
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <SystemInit+0xf4>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <SystemInit+0xf4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a10      	ldr	r2, [pc, #64]	; (8001270 <SystemInit+0xf4>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SystemInit+0xf4>)
 8001236:	2200      	movs	r2, #0
 8001238:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <SystemInit+0x108>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <SystemInit+0x10c>)
 8001240:	4013      	ands	r3, r2
 8001242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001246:	d202      	bcs.n	800124e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <SystemInit+0x110>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <SystemInit+0x114>)
 8001250:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001254:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0xec>)
 8001258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	52002000 	.word	0x52002000
 8001270:	58024400 	.word	0x58024400
 8001274:	eaf6ed7f 	.word	0xeaf6ed7f
 8001278:	02020200 	.word	0x02020200
 800127c:	01ff0000 	.word	0x01ff0000
 8001280:	01010280 	.word	0x01010280
 8001284:	5c001000 	.word	0x5c001000
 8001288:	ffff0000 	.word	0xffff0000
 800128c:	51008108 	.word	0x51008108
 8001290:	52004000 	.word	0x52004000

08001294 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]

	bool ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
	p_node->in = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	60da      	str	r2, [r3, #12]

	return ret;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]

}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <qbufferWrite>:


bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b089      	sub	sp, #36	; 0x24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80012d6:	2301      	movs	r3, #1
 80012d8:	77fb      	strb	r3, [r7, #31]
	uint32_t next_in;

	for(int i=0; i< (int)length; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	da28      	bge.n	8001338 <qbufferWrite+0x6e>
	{
		next_in = (p_node->in+1) % p_node->len;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	6892      	ldr	r2, [r2, #8]
 80012f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012f4:	fb01 f202 	mul.w	r2, r1, r2
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
		if(next_in != p_node->out)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	429a      	cmp	r2, r3
 8001304:	d011      	beq.n	800132a <qbufferWrite+0x60>
		{
			if(p_node->p_buf != NULL)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <qbufferWrite+0x58>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	441a      	add	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	440b      	add	r3, r1
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	701a      	strb	r2, [r3, #0]
			}
			p_node->in = next_in;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e002      	b.n	8001330 <qbufferWrite+0x66>
		}
		else
		{
			ret = false;
 800132a:	2300      	movs	r3, #0
 800132c:	77fb      	strb	r3, [r7, #31]
			break;
 800132e:	e003      	b.n	8001338 <qbufferWrite+0x6e>
	for(int i=0; i< (int)length; i++)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	3301      	adds	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	e7d2      	b.n	80012de <qbufferWrite+0x14>
		}
	}
	return ret;
 8001338:	7ffb      	ldrb	r3, [r7, #31]

}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <qbufferRead>:


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i<length; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d927      	bls.n	80013b2 <qbufferRead+0x6c>
	{
		if(p_node->p_buf != NULL)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <qbufferRead+0x38>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	441a      	add	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	440b      	add	r3, r1
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	701a      	strb	r2, [r3, #0]

		}

		if(p_node->out != p_node->in)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00c      	beq.n	80013a4 <qbufferRead+0x5e>
		{
			p_node->out = (p_node->out +1) % p_node->len;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	6892      	ldr	r2, [r2, #8]
 8001394:	fbb3 f1f2 	udiv	r1, r3, r2
 8001398:	fb01 f202 	mul.w	r2, r1, r2
 800139c:	1a9a      	subs	r2, r3, r2
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	e002      	b.n	80013aa <qbufferRead+0x64>
		}
		else
		{
			ret = false;
 80013a4:	2300      	movs	r3, #0
 80013a6:	75fb      	strb	r3, [r7, #23]
			break;
 80013a8:	e003      	b.n	80013b2 <qbufferRead+0x6c>
	for(int i = 0; i<length; i++)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	3301      	adds	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	e7d3      	b.n	800135a <qbufferRead+0x14>
		}
	}

	return ret;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <qbufferAvailable>:


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	441a      	add	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6892      	ldr	r2, [r2, #8]
 80013dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e0:	fb01 f202 	mul.w	r2, r1, r2
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

	return ret;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <uartInit>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...);


bool uartInit(void){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
	for(int i =0; i<UART_MAX_CH; i++){
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	dc08      	bgt.n	800141a <uartInit+0x22>
		is_open[i] = false;
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <uartInit+0x30>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
	for(int i =0; i<UART_MAX_CH; i++){
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e7f3      	b.n	8001402 <uartInit+0xa>
	}
	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	240025e0 	.word	0x240025e0

0800142c <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud){
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <uartOpen+0x1c>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d007      	beq.n	8001456 <uartOpen+0x2a>
 8001446:	e030      	b.n	80014aa <uartOpen+0x7e>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <uartOpen+0x88>)
 800144c:	2101      	movs	r1, #1
 800144e:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
			break;
 8001454:	e029      	b.n	80014aa <uartOpen+0x7e>

		case _DEF_UART2:

			qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8001456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145a:	4917      	ldr	r1, [pc, #92]	; (80014b8 <uartOpen+0x8c>)
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <uartOpen+0x90>)
 800145e:	f7ff ff19 	bl	8001294 <qbufferCreate>

			if(HAL_UART_Init(&huart1) != HAL_OK){
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <uartOpen+0x94>)
 8001464:	f005 fd04 	bl	8006e70 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf14      	ite	ne
 800146e:	2301      	movne	r3, #1
 8001470:	2300      	moveq	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <uartOpen+0x52>
				ret = false;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
				if(HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK)
				{
					ret = false;
				}
			}
			break;
 800147c:	e014      	b.n	80014a8 <uartOpen+0x7c>
				ret = true;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <uartOpen+0x88>)
 8001486:	2101      	movs	r1, #1
 8001488:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK)
 800148a:	2201      	movs	r2, #1
 800148c:	490d      	ldr	r1, [pc, #52]	; (80014c4 <uartOpen+0x98>)
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <uartOpen+0x94>)
 8001490:	f005 fdd4 	bl	800703c <HAL_UART_Receive_IT>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <uartOpen+0x7c>
					ret = false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
			break;
 80014a8:	bf00      	nop
	}

	return ret;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240025e0 	.word	0x240025e0
 80014b8:	24002604 	.word	0x24002604
 80014bc:	240025f4 	.word	0x240025f4
 80014c0:	240001b4 	.word	0x240001b4
 80014c4:	24002705 	.word	0x24002705

080014c8 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]

	switch(ch){
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <uartAvailable+0x1e>
	case _DEF_UART2:
		ret = qbufferAvailable(&qbuffer[_DEF_UART2]);
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <uartAvailable+0x28>)
 80014de:	f7ff ff6f 	bl	80013c0 <qbufferAvailable>
 80014e2:	60f8      	str	r0, [r7, #12]
		break;
 80014e4:	bf00      	nop
	}
	return ret;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	240025f4 	.word	0x240025f4

080014f4 <uartRead>:
uint8_t uartRead(uint8_t ch){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <uartRead+0x20>
		case _DEF_UART2:
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001504:	f107 030f 	add.w	r3, r7, #15
 8001508:	2201      	movs	r2, #1
 800150a:	4619      	mov	r1, r3
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <uartRead+0x2c>)
 800150e:	f7ff ff1a 	bl	8001346 <qbufferRead>
			break;
 8001512:	bf00      	nop
	}
	return ret;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240025f4 	.word	0x240025f4

08001524 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	uartPrintf(_DEF_UART2, "UART1 :  \r\n");
 800152c:	490b      	ldr	r1, [pc, #44]	; (800155c <HAL_UART_RxCpltCallback+0x38>)
 800152e:	2001      	movs	r0, #1
 8001530:	f000 f840 	bl	80015b4 <uartPrintf>
	if(huart->Instance == USART1){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_UART_RxCpltCallback+0x3c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d109      	bne.n	8001552 <HAL_UART_RxCpltCallback+0x2e>
		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 800153e:	2201      	movs	r2, #1
 8001540:	4908      	ldr	r1, [pc, #32]	; (8001564 <HAL_UART_RxCpltCallback+0x40>)
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_UART_RxCpltCallback+0x44>)
 8001544:	f7ff fec1 	bl	80012ca <qbufferWrite>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
 8001548:	2201      	movs	r2, #1
 800154a:	4906      	ldr	r1, [pc, #24]	; (8001564 <HAL_UART_RxCpltCallback+0x40>)
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <HAL_UART_RxCpltCallback+0x48>)
 800154e:	f005 fd75 	bl	800703c <HAL_UART_Receive_IT>
	}
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800cc0c 	.word	0x0800cc0c
 8001560:	40011000 	.word	0x40011000
 8001564:	24002705 	.word	0x24002705
 8001568:	240025f4 	.word	0x240025f4
 800156c:	240001b4 	.word	0x240001b4

08001570 <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length){
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef status;
	switch(ch){
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10e      	bne.n	80015a6 <uartWrite+0x36>
		case _DEF_UART2:
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29a      	uxth	r2, r3
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <uartWrite+0x40>)
 8001592:	f005 fcbd 	bl	8006f10 <HAL_UART_Transmit>
 8001596:	4603      	mov	r3, r0
 8001598:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <uartWrite+0x34>
				ret = length;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	617b      	str	r3, [r7, #20]
			}
			break;
 80015a4:	bf00      	nop
	}
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	240001b4 	.word	0x240001b4

080015b4 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...){
 80015b4:	b40e      	push	{r1, r2, r3}
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b0c5      	sub	sp, #276	; 0x114
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4602      	mov	r2, r0
 80015be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015c6:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;

	va_start(args, fmt);
 80015c8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015d4:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf , 256, fmt, args);
 80015d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015de:	f107 000c 	add.w	r0, r7, #12
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	f00a ff42 	bl	800c474 <vsniprintf>
 80015f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	uartWrite(ch, (uint8_t *)buf, len);
 80015f4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015f8:	f107 010c 	add.w	r1, r7, #12
 80015fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001600:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffb2 	bl	8001570 <uartWrite>

	va_end(args);

	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800161a:	b003      	add	sp, #12
 800161c:	4770      	bx	lr

0800161e <_Z6hwInitv>:



#include "hw.h"

void hwInit(void){
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
	bspInit();
 8001622:	f7ff f82f 	bl	8000684 <_Z7bspInitv>
	uartInit();
 8001626:	f7ff fee7 	bl	80013f8 <uartInit>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}

0800162e <DebugTask>:


extern UART_HandleTypeDef huart8;


extern "C" void DebugTask(void){
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
	hwInit();
 8001632:	f7ff fff4 	bl	800161e <_Z6hwInitv>
	apInit();
 8001636:	f000 f812 	bl	800165e <_Z6apInitv>
	apMain();
 800163a:	f000 f81f 	bl	800167c <_Z6apMainv>

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <MainTask>:


extern "C" void MainTask(void){
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SensingTask>:

extern "C" void SensingTask(void){
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_Z6apInitv>:

#include "ap.h"



void apInit(void){
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 115200);
 8001662:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fee0 	bl	800142c <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 800166c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fedb 	bl	800142c <uartOpen>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <_Z6apMainv>:


void apMain(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	pre_time = HAL_GetTick();
 8001682:	f000 f8af 	bl	80017e4 <HAL_GetTick>
 8001686:	6078      	str	r0, [r7, #4]

	while(1){
		if(HAL_GetTick()-pre_time >= 500){
 8001688:	f000 f8ac 	bl	80017e4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001696:	4293      	cmp	r3, r2
 8001698:	bf8c      	ite	hi
 800169a:	2301      	movhi	r3, #1
 800169c:	2300      	movls	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <_Z6apMainv+0x3e>
			pre_time = HAL_GetTick();
 80016a4:	f000 f89e 	bl	80017e4 <HAL_GetTick>
 80016a8:	6078      	str	r0, [r7, #4]
			uartPrintf(_DEF_UART2, "HELLO %d\r\n", millis());
 80016aa:	f7fe fff2 	bl	8000692 <_Z6millisv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <_Z6apMainv+0x6c>)
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff ff7d 	bl	80015b4 <uartPrintf>
		}

		if(uartAvailable(_DEF_UART2)>0){
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff ff04 	bl	80014c8 <uartAvailable>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0db      	beq.n	8001688 <_Z6apMainv+0xc>
			uint8_t rx_data;
			rx_data = uartRead(_DEF_UART2);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff ff0f 	bl	80014f4 <uartRead>
 80016d6:	4603      	mov	r3, r0
 80016d8:	70fb      	strb	r3, [r7, #3]
			uartPrintf(_DEF_UART2, "UART8 :  %c %X\r\n", rx_data, rx_data);
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	4903      	ldr	r1, [pc, #12]	; (80016ec <_Z6apMainv+0x70>)
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff ff67 	bl	80015b4 <uartPrintf>

		}
	}
 80016e6:	e7cf      	b.n	8001688 <_Z6apMainv+0xc>
 80016e8:	0800cc18 	.word	0x0800cc18
 80016ec:	0800cc24 	.word	0x0800cc24

080016f0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016f4:	f7ff fd42 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016fa:	e003      	b.n	8001704 <LoopCopyDataInit>

080016fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80016fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001700:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001702:	3104      	adds	r1, #4

08001704 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001708:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800170a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800170c:	d3f6      	bcc.n	80016fc <CopyDataInit>
  ldr  r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001710:	e002      	b.n	8001718 <LoopFillZerobss>

08001712 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001712:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001714:	f842 3b04 	str.w	r3, [r2], #4

08001718 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800171a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800171c:	d3f9      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f00a fd33 	bl	800c188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7fe ffbd 	bl	80006a0 <main>
  bx  lr    
 8001726:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001728:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800172c:	0800cdb8 	.word	0x0800cdb8
  ldr  r0, =_sdata
 8001730:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001734:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001738:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 800173c:	2400712c 	.word	0x2400712c

08001740 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC3_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174a:	2003      	movs	r0, #3
 800174c:	f000 f90f 	bl	800196e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001750:	f003 fb34 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_Init+0x68>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	4913      	ldr	r1, [pc, #76]	; (80017b0 <HAL_Init+0x6c>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_Init+0x68>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_Init+0x6c>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_Init+0x70>)
 8001786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_Init+0x74>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178e:	200f      	movs	r0, #15
 8001790:	f7ff fc0a 	bl	8000fa8 <HAL_InitTick>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e002      	b.n	80017a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800179e:	f7ff fa09 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	58024400 	.word	0x58024400
 80017b0:	0800ccd4 	.word	0x0800ccd4
 80017b4:	24000004 	.word	0x24000004
 80017b8:	24000000 	.word	0x24000000

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2400000c 	.word	0x2400000c
 80017e0:	24002708 	.word	0x24002708

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	24002708 	.word	0x24002708

080017fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetREVID+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0c1b      	lsrs	r3, r3, #16
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	5c001000 	.word	0x5c001000

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	4313      	orrs	r3, r2
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	05fa0000 	.word	0x05fa0000

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff4c 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001992:	f7ff ff63 	bl	800185c <__NVIC_GetPriorityGrouping>
 8001996:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7ff ffb3 	bl	8001908 <NVIC_EncodePriority>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff82 	bl	80018b4 <__NVIC_SetPriority>
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff56 	bl	8001878 <__NVIC_EnableIRQ>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ff02 	bl	80017e4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e316      	b.n	800201a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a66      	ldr	r2, [pc, #408]	; (8001b8c <HAL_DMA_Init+0x1b8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d04a      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_DMA_Init+0x1bc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d045      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_DMA_Init+0x1c0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d040      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a62      	ldr	r2, [pc, #392]	; (8001b98 <HAL_DMA_Init+0x1c4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d03b      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a60      	ldr	r2, [pc, #384]	; (8001b9c <HAL_DMA_Init+0x1c8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d036      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5f      	ldr	r2, [pc, #380]	; (8001ba0 <HAL_DMA_Init+0x1cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d031      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <HAL_DMA_Init+0x1d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02c      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5c      	ldr	r2, [pc, #368]	; (8001ba8 <HAL_DMA_Init+0x1d4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d027      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_DMA_Init+0x1d8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d022      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a59      	ldr	r2, [pc, #356]	; (8001bb0 <HAL_DMA_Init+0x1dc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01d      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_DMA_Init+0x1e0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d018      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_DMA_Init+0x1e4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d013      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <HAL_DMA_Init+0x1e8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00e      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a53      	ldr	r2, [pc, #332]	; (8001bc0 <HAL_DMA_Init+0x1ec>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d009      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_DMA_Init+0x1f0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <HAL_DMA_Init+0xb8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_DMA_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_DMA_Init+0xbc>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_DMA_Init+0xbe>
 8001a90:	2300      	movs	r3, #0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 813b 	beq.w	8001d0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_DMA_Init+0x1b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d04a      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a36      	ldr	r2, [pc, #216]	; (8001b90 <HAL_DMA_Init+0x1bc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d045      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a34      	ldr	r2, [pc, #208]	; (8001b94 <HAL_DMA_Init+0x1c0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d040      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_DMA_Init+0x1c4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d03b      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <HAL_DMA_Init+0x1c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d036      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_DMA_Init+0x1cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d031      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <HAL_DMA_Init+0x1d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02c      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_DMA_Init+0x1d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d027      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <HAL_DMA_Init+0x1d8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_DMA_Init+0x1dc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d01d      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_DMA_Init+0x1e0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d018      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_DMA_Init+0x1e4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <HAL_DMA_Init+0x1e8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00e      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <HAL_DMA_Init+0x1ec>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <HAL_DMA_Init+0x1f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_Init+0x174>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_DMA_Init+0x1f4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d108      	bne.n	8001b5a <HAL_DMA_Init+0x186>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_DMA_Init+0x196>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b6a:	e02f      	b.n	8001bcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6c:	f7ff fe3a 	bl	80017e4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d928      	bls.n	8001bcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e246      	b.n	800201a <HAL_DMA_Init+0x646>
 8001b8c:	40020010 	.word	0x40020010
 8001b90:	40020028 	.word	0x40020028
 8001b94:	40020040 	.word	0x40020040
 8001b98:	40020058 	.word	0x40020058
 8001b9c:	40020070 	.word	0x40020070
 8001ba0:	40020088 	.word	0x40020088
 8001ba4:	400200a0 	.word	0x400200a0
 8001ba8:	400200b8 	.word	0x400200b8
 8001bac:	40020410 	.word	0x40020410
 8001bb0:	40020428 	.word	0x40020428
 8001bb4:	40020440 	.word	0x40020440
 8001bb8:	40020458 	.word	0x40020458
 8001bbc:	40020470 	.word	0x40020470
 8001bc0:	40020488 	.word	0x40020488
 8001bc4:	400204a0 	.word	0x400204a0
 8001bc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1c8      	bne.n	8001b6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4b83      	ldr	r3, [pc, #524]	; (8001df4 <HAL_DMA_Init+0x420>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d107      	bne.n	8001c30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c30:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <HAL_DMA_Init+0x424>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_DMA_Init+0x428>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c3c:	d328      	bcc.n	8001c90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b28      	cmp	r3, #40	; 0x28
 8001c44:	d903      	bls.n	8001c4e <HAL_DMA_Init+0x27a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001c4c:	d917      	bls.n	8001c7e <HAL_DMA_Init+0x2aa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b3e      	cmp	r3, #62	; 0x3e
 8001c54:	d903      	bls.n	8001c5e <HAL_DMA_Init+0x28a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b42      	cmp	r3, #66	; 0x42
 8001c5c:	d90f      	bls.n	8001c7e <HAL_DMA_Init+0x2aa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b46      	cmp	r3, #70	; 0x46
 8001c64:	d903      	bls.n	8001c6e <HAL_DMA_Init+0x29a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b48      	cmp	r3, #72	; 0x48
 8001c6c:	d907      	bls.n	8001c7e <HAL_DMA_Init+0x2aa>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b4e      	cmp	r3, #78	; 0x4e
 8001c74:	d905      	bls.n	8001c82 <HAL_DMA_Init+0x2ae>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b52      	cmp	r3, #82	; 0x52
 8001c7c:	d801      	bhi.n	8001c82 <HAL_DMA_Init+0x2ae>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_Init+0x2b0>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d117      	bne.n	8001cea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 ff1d 	bl	8003b0c <DMA_CheckFifoParam>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e197      	b.n	800201a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f001 fe58 	bl	80039a8 <DMA_CalcBaseAndBitshift>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e0cd      	b.n	8001eaa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3b      	ldr	r2, [pc, #236]	; (8001e00 <HAL_DMA_Init+0x42c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d022      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a39      	ldr	r2, [pc, #228]	; (8001e04 <HAL_DMA_Init+0x430>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01d      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_DMA_Init+0x434>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d018      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <HAL_DMA_Init+0x438>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_DMA_Init+0x43c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00e      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <HAL_DMA_Init+0x440>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d009      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_DMA_Init+0x444>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d004      	beq.n	8001d5e <HAL_DMA_Init+0x38a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a30      	ldr	r2, [pc, #192]	; (8001e1c <HAL_DMA_Init+0x448>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_DMA_Init+0x38e>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_DMA_Init+0x390>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8097 	beq.w	8001e98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_DMA_Init+0x42c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d021      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_DMA_Init+0x430>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01c      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_DMA_Init+0x434>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d017      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_DMA_Init+0x438>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d012      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <HAL_DMA_Init+0x43c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00d      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_DMA_Init+0x440>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d008      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_DMA_Init+0x444>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_Init+0x3e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_DMA_Init+0x448>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_DMA_Init+0x44c>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d020      	beq.n	8001e24 <HAL_DMA_Init+0x450>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b80      	cmp	r3, #128	; 0x80
 8001de8:	d102      	bne.n	8001df0 <HAL_DMA_Init+0x41c>
 8001dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dee:	e01a      	b.n	8001e26 <HAL_DMA_Init+0x452>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e018      	b.n	8001e26 <HAL_DMA_Init+0x452>
 8001df4:	fe10803f 	.word	0xfe10803f
 8001df8:	5c001000 	.word	0x5c001000
 8001dfc:	ffff0000 	.word	0xffff0000
 8001e00:	58025408 	.word	0x58025408
 8001e04:	5802541c 	.word	0x5802541c
 8001e08:	58025430 	.word	0x58025430
 8001e0c:	58025444 	.word	0x58025444
 8001e10:	58025458 	.word	0x58025458
 8001e14:	5802546c 	.word	0x5802546c
 8001e18:	58025480 	.word	0x58025480
 8001e1c:	58025494 	.word	0x58025494
 8001e20:	fffe000f 	.word	0xfffe000f
 8001e24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68d2      	ldr	r2, [r2, #12]
 8001e2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <HAL_DMA_Init+0x650>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_DMA_Init+0x654>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 fd93 	bl	80039a8 <DMA_CalcBaseAndBitshift>
 8001e82:	4603      	mov	r3, r0
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2201      	movs	r2, #1
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e008      	b.n	8001eaa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0b7      	b.n	800201a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a5f      	ldr	r2, [pc, #380]	; (800202c <HAL_DMA_Init+0x658>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d072      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_DMA_Init+0x65c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d06d      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_DMA_Init+0x660>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d068      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <HAL_DMA_Init+0x664>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d063      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a59      	ldr	r2, [pc, #356]	; (800203c <HAL_DMA_Init+0x668>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d05e      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_DMA_Init+0x66c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d059      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_DMA_Init+0x670>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d054      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a54      	ldr	r2, [pc, #336]	; (8002048 <HAL_DMA_Init+0x674>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d04f      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a53      	ldr	r2, [pc, #332]	; (800204c <HAL_DMA_Init+0x678>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04a      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a51      	ldr	r2, [pc, #324]	; (8002050 <HAL_DMA_Init+0x67c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d045      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_DMA_Init+0x680>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d040      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	; (8002058 <HAL_DMA_Init+0x684>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d03b      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a4d      	ldr	r2, [pc, #308]	; (800205c <HAL_DMA_Init+0x688>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d036      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_DMA_Init+0x68c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d031      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_DMA_Init+0x690>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d02c      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_DMA_Init+0x694>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d027      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_DMA_Init+0x698>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d022      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_DMA_Init+0x69c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01d      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_DMA_Init+0x6a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d018      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_DMA_Init+0x6a4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a41      	ldr	r2, [pc, #260]	; (800207c <HAL_DMA_Init+0x6a8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_DMA_Init+0x6ac>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_DMA_Init+0x6b0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_DMA_Init+0x5c6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <HAL_DMA_Init+0x6b4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x5ca>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_Init+0x5cc>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f001 fe2d 	bl	8003c04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b80      	cmp	r3, #128	; 0x80
 8001fb0:	d102      	bne.n	8001fb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <HAL_DMA_Init+0x624>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d80c      	bhi.n	8001ff8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f001 feaa 	bl	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	e008      	b.n	800200a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	a7fdabf8 	.word	0xa7fdabf8
 8002028:	cccccccd 	.word	0xcccccccd
 800202c:	40020010 	.word	0x40020010
 8002030:	40020028 	.word	0x40020028
 8002034:	40020040 	.word	0x40020040
 8002038:	40020058 	.word	0x40020058
 800203c:	40020070 	.word	0x40020070
 8002040:	40020088 	.word	0x40020088
 8002044:	400200a0 	.word	0x400200a0
 8002048:	400200b8 	.word	0x400200b8
 800204c:	40020410 	.word	0x40020410
 8002050:	40020428 	.word	0x40020428
 8002054:	40020440 	.word	0x40020440
 8002058:	40020458 	.word	0x40020458
 800205c:	40020470 	.word	0x40020470
 8002060:	40020488 	.word	0x40020488
 8002064:	400204a0 	.word	0x400204a0
 8002068:	400204b8 	.word	0x400204b8
 800206c:	58025408 	.word	0x58025408
 8002070:	5802541c 	.word	0x5802541c
 8002074:	58025430 	.word	0x58025430
 8002078:	58025444 	.word	0x58025444
 800207c:	58025458 	.word	0x58025458
 8002080:	5802546c 	.word	0x5802546c
 8002084:	58025480 	.word	0x58025480
 8002088:	58025494 	.word	0x58025494

0800208c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fba6 	bl	80017e4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e2dc      	b.n	800265e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e2cd      	b.n	800265e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <HAL_DMA_Abort+0x214>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04a      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_DMA_Abort+0x218>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d045      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a73      	ldr	r2, [pc, #460]	; (80022a8 <HAL_DMA_Abort+0x21c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a71      	ldr	r2, [pc, #452]	; (80022ac <HAL_DMA_Abort+0x220>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d03b      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a70      	ldr	r2, [pc, #448]	; (80022b0 <HAL_DMA_Abort+0x224>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	; (80022b4 <HAL_DMA_Abort+0x228>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d031      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <HAL_DMA_Abort+0x22c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d02c      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6b      	ldr	r2, [pc, #428]	; (80022bc <HAL_DMA_Abort+0x230>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d027      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_DMA_Abort+0x234>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_DMA_Abort+0x238>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_DMA_Abort+0x23c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_DMA_Abort+0x240>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <HAL_DMA_Abort+0x244>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <HAL_DMA_Abort+0x248>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_DMA_Abort+0x24c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort+0xd6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_DMA_Abort+0x250>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Abort+0xda>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_DMA_Abort+0xdc>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 021e 	bic.w	r2, r2, #30
 800217a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00a      	b.n	80021aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 020e 	bic.w	r2, r2, #14
 80021a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <HAL_DMA_Abort+0x214>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d072      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_DMA_Abort+0x218>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d06d      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a39      	ldr	r2, [pc, #228]	; (80022a8 <HAL_DMA_Abort+0x21c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d068      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a37      	ldr	r2, [pc, #220]	; (80022ac <HAL_DMA_Abort+0x220>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d063      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <HAL_DMA_Abort+0x224>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_DMA_Abort+0x228>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d059      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <HAL_DMA_Abort+0x22c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d054      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_DMA_Abort+0x230>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04f      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_DMA_Abort+0x234>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <HAL_DMA_Abort+0x238>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_DMA_Abort+0x23c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_DMA_Abort+0x240>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_DMA_Abort+0x244>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <HAL_DMA_Abort+0x248>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_DMA_Abort+0x24c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_DMA_Abort+0x250>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_DMA_Abort+0x254>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Abort+0x258>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_Abort+0x25c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_DMA_Abort+0x260>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_DMA_Abort+0x264>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_DMA_Abort+0x268>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_DMA_Abort+0x26c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_Abort+0x20e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_DMA_Abort+0x270>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d132      	bne.n	8002300 <HAL_DMA_Abort+0x274>
 800229a:	2301      	movs	r3, #1
 800229c:	e031      	b.n	8002302 <HAL_DMA_Abort+0x276>
 800229e:	bf00      	nop
 80022a0:	40020010 	.word	0x40020010
 80022a4:	40020028 	.word	0x40020028
 80022a8:	40020040 	.word	0x40020040
 80022ac:	40020058 	.word	0x40020058
 80022b0:	40020070 	.word	0x40020070
 80022b4:	40020088 	.word	0x40020088
 80022b8:	400200a0 	.word	0x400200a0
 80022bc:	400200b8 	.word	0x400200b8
 80022c0:	40020410 	.word	0x40020410
 80022c4:	40020428 	.word	0x40020428
 80022c8:	40020440 	.word	0x40020440
 80022cc:	40020458 	.word	0x40020458
 80022d0:	40020470 	.word	0x40020470
 80022d4:	40020488 	.word	0x40020488
 80022d8:	400204a0 	.word	0x400204a0
 80022dc:	400204b8 	.word	0x400204b8
 80022e0:	58025408 	.word	0x58025408
 80022e4:	5802541c 	.word	0x5802541c
 80022e8:	58025430 	.word	0x58025430
 80022ec:	58025444 	.word	0x58025444
 80022f0:	58025458 	.word	0x58025458
 80022f4:	5802546c 	.word	0x5802546c
 80022f8:	58025480 	.word	0x58025480
 80022fc:	58025494 	.word	0x58025494
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002314:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_DMA_Abort+0x444>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <HAL_DMA_Abort+0x448>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_DMA_Abort+0x44c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_DMA_Abort+0x450>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <HAL_DMA_Abort+0x454>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_DMA_Abort+0x458>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a64      	ldr	r2, [pc, #400]	; (80024e8 <HAL_DMA_Abort+0x45c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a62      	ldr	r2, [pc, #392]	; (80024ec <HAL_DMA_Abort+0x460>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_DMA_Abort+0x464>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5f      	ldr	r2, [pc, #380]	; (80024f4 <HAL_DMA_Abort+0x468>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_DMA_Abort+0x46c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5c      	ldr	r2, [pc, #368]	; (80024fc <HAL_DMA_Abort+0x470>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5b      	ldr	r2, [pc, #364]	; (8002500 <HAL_DMA_Abort+0x474>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a59      	ldr	r2, [pc, #356]	; (8002504 <HAL_DMA_Abort+0x478>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_DMA_Abort+0x47c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort+0x32a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_DMA_Abort+0x480>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_Abort+0x33c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e007      	b.n	80023d8 <HAL_DMA_Abort+0x34c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023d8:	e013      	b.n	8002402 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff fa03 	bl	80017e4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d90c      	bls.n	8002402 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e12d      	b.n	800265e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e5      	bne.n	80023da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_DMA_Abort+0x444>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04a      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_DMA_Abort+0x448>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d045      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <HAL_DMA_Abort+0x44c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d040      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_DMA_Abort+0x450>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d03b      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_DMA_Abort+0x454>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d036      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_DMA_Abort+0x458>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_DMA_Abort+0x45c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d02c      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_DMA_Abort+0x460>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d027      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_DMA_Abort+0x464>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_DMA_Abort+0x468>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_DMA_Abort+0x46c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_DMA_Abort+0x470>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_DMA_Abort+0x474>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_DMA_Abort+0x478>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_DMA_Abort+0x47c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_Abort+0x422>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_DMA_Abort+0x480>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Abort+0x426>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Abort+0x428>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02b      	beq.n	8002510 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	e02a      	b.n	8002526 <HAL_DMA_Abort+0x49a>
 80024d0:	40020010 	.word	0x40020010
 80024d4:	40020028 	.word	0x40020028
 80024d8:	40020040 	.word	0x40020040
 80024dc:	40020058 	.word	0x40020058
 80024e0:	40020070 	.word	0x40020070
 80024e4:	40020088 	.word	0x40020088
 80024e8:	400200a0 	.word	0x400200a0
 80024ec:	400200b8 	.word	0x400200b8
 80024f0:	40020410 	.word	0x40020410
 80024f4:	40020428 	.word	0x40020428
 80024f8:	40020440 	.word	0x40020440
 80024fc:	40020458 	.word	0x40020458
 8002500:	40020470 	.word	0x40020470
 8002504:	40020488 	.word	0x40020488
 8002508:	400204a0 	.word	0x400204a0
 800250c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2201      	movs	r2, #1
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_DMA_Abort+0x5dc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d072      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_DMA_Abort+0x5e0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d06d      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4c      	ldr	r2, [pc, #304]	; (8002670 <HAL_DMA_Abort+0x5e4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d068      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_DMA_Abort+0x5e8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d063      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_DMA_Abort+0x5ec>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d05e      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_DMA_Abort+0x5f0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d059      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a46      	ldr	r2, [pc, #280]	; (8002680 <HAL_DMA_Abort+0x5f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d054      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a44      	ldr	r2, [pc, #272]	; (8002684 <HAL_DMA_Abort+0x5f8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d04f      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_DMA_Abort+0x5fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04a      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a41      	ldr	r2, [pc, #260]	; (800268c <HAL_DMA_Abort+0x600>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d045      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_DMA_Abort+0x604>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d040      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3e      	ldr	r2, [pc, #248]	; (8002694 <HAL_DMA_Abort+0x608>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d03b      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3d      	ldr	r2, [pc, #244]	; (8002698 <HAL_DMA_Abort+0x60c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d036      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_DMA_Abort+0x610>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <HAL_DMA_Abort+0x614>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d02c      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <HAL_DMA_Abort+0x618>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d027      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <HAL_DMA_Abort+0x61c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_DMA_Abort+0x620>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_DMA_Abort+0x624>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d018      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_DMA_Abort+0x628>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_DMA_Abort+0x62c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_DMA_Abort+0x630>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_DMA_Abort+0x634>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_DMA_Abort+0x58a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_DMA_Abort+0x638>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_DMA_Abort+0x58e>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_DMA_Abort+0x590>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002628:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800264a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	40020070 	.word	0x40020070
 800267c:	40020088 	.word	0x40020088
 8002680:	400200a0 	.word	0x400200a0
 8002684:	400200b8 	.word	0x400200b8
 8002688:	40020410 	.word	0x40020410
 800268c:	40020428 	.word	0x40020428
 8002690:	40020440 	.word	0x40020440
 8002694:	40020458 	.word	0x40020458
 8002698:	40020470 	.word	0x40020470
 800269c:	40020488 	.word	0x40020488
 80026a0:	400204a0 	.word	0x400204a0
 80026a4:	400204b8 	.word	0x400204b8
 80026a8:	58025408 	.word	0x58025408
 80026ac:	5802541c 	.word	0x5802541c
 80026b0:	58025430 	.word	0x58025430
 80026b4:	58025444 	.word	0x58025444
 80026b8:	58025458 	.word	0x58025458
 80026bc:	5802546c 	.word	0x5802546c
 80026c0:	58025480 	.word	0x58025480
 80026c4:	58025494 	.word	0x58025494

080026c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e237      	b.n	8002b4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e22c      	b.n	8002b4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_DMA_Abort_IT+0x1a0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d04a      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_DMA_Abort_IT+0x1a4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d045      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_DMA_Abort_IT+0x1a8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d040      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_DMA_Abort_IT+0x1ac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d03b      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_DMA_Abort_IT+0x1b0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d036      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_DMA_Abort_IT+0x1b4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d031      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_DMA_Abort_IT+0x1b8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02c      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_DMA_Abort_IT+0x1bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d027      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a50      	ldr	r2, [pc, #320]	; (8002888 <HAL_DMA_Abort_IT+0x1c0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d022      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_DMA_Abort_IT+0x1c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d01d      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_DMA_Abort_IT+0x1c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_DMA_Abort_IT+0x1cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_DMA_Abort_IT+0x1d0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a49      	ldr	r2, [pc, #292]	; (800289c <HAL_DMA_Abort_IT+0x1d4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a47      	ldr	r2, [pc, #284]	; (80028a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_DMA_Abort_IT+0xc8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_DMA_Abort_IT+0x1dc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Abort_IT+0xcc>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_DMA_Abort_IT+0xce>
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8086 	beq.w	80028a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2204      	movs	r2, #4
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <HAL_DMA_Abort_IT+0x1a0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04a      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2e      	ldr	r2, [pc, #184]	; (800286c <HAL_DMA_Abort_IT+0x1a4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d045      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <HAL_DMA_Abort_IT+0x1a8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d040      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_DMA_Abort_IT+0x1ac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d03b      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_DMA_Abort_IT+0x1b0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d036      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_DMA_Abort_IT+0x1b4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d031      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_DMA_Abort_IT+0x1b8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02c      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_DMA_Abort_IT+0x1bc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d027      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_DMA_Abort_IT+0x1c0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Abort_IT+0x1c4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d01d      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_DMA_Abort_IT+0x1c8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_DMA_Abort_IT+0x1cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_DMA_Abort_IT+0x1d0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_DMA_Abort_IT+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_DMA_Abort_IT+0x17c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_DMA_Abort_IT+0x1dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <HAL_DMA_Abort_IT+0x18e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e178      	b.n	8002b48 <HAL_DMA_Abort_IT+0x480>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e16f      	b.n	8002b48 <HAL_DMA_Abort_IT+0x480>
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020e 	bic.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6c      	ldr	r2, [pc, #432]	; (8002a70 <HAL_DMA_Abort_IT+0x3a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04a      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <HAL_DMA_Abort_IT+0x3ac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d045      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_DMA_Abort_IT+0x3b0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d040      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_DMA_Abort_IT+0x3b4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d03b      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <HAL_DMA_Abort_IT+0x3b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d036      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_DMA_Abort_IT+0x3bc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_DMA_Abort_IT+0x3c0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02c      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a62      	ldr	r2, [pc, #392]	; (8002a8c <HAL_DMA_Abort_IT+0x3c4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d027      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_DMA_Abort_IT+0x3c8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <HAL_DMA_Abort_IT+0x3cc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01d      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_DMA_Abort_IT+0x3d0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5c      	ldr	r2, [pc, #368]	; (8002a9c <HAL_DMA_Abort_IT+0x3d4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_DMA_Abort_IT+0x3d8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a59      	ldr	r2, [pc, #356]	; (8002aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <HAL_DMA_Abort_IT+0x3e0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_DMA_Abort_IT+0x290>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_DMA_Abort_IT+0x3e4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <HAL_DMA_Abort_IT+0x2a2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e007      	b.n	800297a <HAL_DMA_Abort_IT+0x2b2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_DMA_Abort_IT+0x3a8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d072      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_DMA_Abort_IT+0x3ac>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d06d      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a39      	ldr	r2, [pc, #228]	; (8002a78 <HAL_DMA_Abort_IT+0x3b0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d068      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <HAL_DMA_Abort_IT+0x3b4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d063      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a36      	ldr	r2, [pc, #216]	; (8002a80 <HAL_DMA_Abort_IT+0x3b8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d05e      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <HAL_DMA_Abort_IT+0x3bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d059      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a33      	ldr	r2, [pc, #204]	; (8002a88 <HAL_DMA_Abort_IT+0x3c0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d054      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_DMA_Abort_IT+0x3c4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04f      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_DMA_Abort_IT+0x3c8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_DMA_Abort_IT+0x3cc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <HAL_DMA_Abort_IT+0x3d0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_DMA_Abort_IT+0x3d4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <HAL_DMA_Abort_IT+0x3d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_DMA_Abort_IT+0x3e0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_DMA_Abort_IT+0x3e4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_DMA_Abort_IT+0x3e8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <HAL_DMA_Abort_IT+0x3ec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_DMA_Abort_IT+0x3f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_DMA_Abort_IT+0x3f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_DMA_Abort_IT+0x3f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_DMA_Abort_IT+0x3fc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_DMA_Abort_IT+0x400>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x3a2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_DMA_Abort_IT+0x404>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d132      	bne.n	8002ad0 <HAL_DMA_Abort_IT+0x408>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e031      	b.n	8002ad2 <HAL_DMA_Abort_IT+0x40a>
 8002a6e:	bf00      	nop
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
 8002ab0:	58025408 	.word	0x58025408
 8002ab4:	5802541c 	.word	0x5802541c
 8002ab8:	58025430 	.word	0x58025430
 8002abc:	58025444 	.word	0x58025444
 8002ac0:	58025458 	.word	0x58025458
 8002ac4:	5802546c 	.word	0x5802546c
 8002ac8:	58025480 	.word	0x58025480
 8002acc:	58025494 	.word	0x58025494
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b60:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_DMA_IRQHandler+0x1ac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_DMA_IRQHandler+0x1b0>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5f      	ldr	r2, [pc, #380]	; (8002d08 <HAL_DMA_IRQHandler+0x1b4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04a      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5d      	ldr	r2, [pc, #372]	; (8002d0c <HAL_DMA_IRQHandler+0x1b8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d045      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a5c      	ldr	r2, [pc, #368]	; (8002d10 <HAL_DMA_IRQHandler+0x1bc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a5a      	ldr	r2, [pc, #360]	; (8002d14 <HAL_DMA_IRQHandler+0x1c0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a59      	ldr	r2, [pc, #356]	; (8002d18 <HAL_DMA_IRQHandler+0x1c4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d036      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_DMA_IRQHandler+0x1c8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a56      	ldr	r2, [pc, #344]	; (8002d20 <HAL_DMA_IRQHandler+0x1cc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d02c      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <HAL_DMA_IRQHandler+0x1d0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d027      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <HAL_DMA_IRQHandler+0x1d4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_DMA_IRQHandler+0x1d8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_DMA_IRQHandler+0x1dc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_DMA_IRQHandler+0x1e0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <HAL_DMA_IRQHandler+0x1e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_DMA_IRQHandler+0x1e8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_DMA_IRQHandler+0x1ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xd2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <HAL_DMA_IRQHandler+0x1f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_IRQHandler+0xd6>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_DMA_IRQHandler+0xd8>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 842b 	beq.w	8003488 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80a2 	beq.w	8002d8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <HAL_DMA_IRQHandler+0x1b4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d04a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <HAL_DMA_IRQHandler+0x1b8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d045      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <HAL_DMA_IRQHandler+0x1bc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d040      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_DMA_IRQHandler+0x1c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03b      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <HAL_DMA_IRQHandler+0x1c4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d036      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_DMA_IRQHandler+0x1c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d031      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_DMA_IRQHandler+0x1cc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02c      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_DMA_IRQHandler+0x1d0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d027      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_DMA_IRQHandler+0x1d4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <HAL_DMA_IRQHandler+0x1d8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01d      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_DMA_IRQHandler+0x1dc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_DMA_IRQHandler+0x1e0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_DMA_IRQHandler+0x1e4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_DMA_IRQHandler+0x1e8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_DMA_IRQHandler+0x1ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x194>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_DMA_IRQHandler+0x1f0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d12f      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x1f4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e02e      	b.n	8002d5c <HAL_DMA_IRQHandler+0x208>
 8002cfe:	bf00      	nop
 8002d00:	24000000 	.word	0x24000000
 8002d04:	1b4e81b5 	.word	0x1b4e81b5
 8002d08:	40020010 	.word	0x40020010
 8002d0c:	40020028 	.word	0x40020028
 8002d10:	40020040 	.word	0x40020040
 8002d14:	40020058 	.word	0x40020058
 8002d18:	40020070 	.word	0x40020070
 8002d1c:	40020088 	.word	0x40020088
 8002d20:	400200a0 	.word	0x400200a0
 8002d24:	400200b8 	.word	0x400200b8
 8002d28:	40020410 	.word	0x40020410
 8002d2c:	40020428 	.word	0x40020428
 8002d30:	40020440 	.word	0x40020440
 8002d34:	40020458 	.word	0x40020458
 8002d38:	40020470 	.word	0x40020470
 8002d3c:	40020488 	.word	0x40020488
 8002d40:	400204a0 	.word	0x400204a0
 8002d44:	400204b8 	.word	0x400204b8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2208      	movs	r2, #8
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_DMA_IRQHandler+0x3f8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04a      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a67      	ldr	r2, [pc, #412]	; (8002f50 <HAL_DMA_IRQHandler+0x3fc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d045      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a66      	ldr	r2, [pc, #408]	; (8002f54 <HAL_DMA_IRQHandler+0x400>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a64      	ldr	r2, [pc, #400]	; (8002f58 <HAL_DMA_IRQHandler+0x404>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_DMA_IRQHandler+0x408>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a61      	ldr	r2, [pc, #388]	; (8002f60 <HAL_DMA_IRQHandler+0x40c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_DMA_IRQHandler+0x410>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_DMA_IRQHandler+0x414>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_DMA_IRQHandler+0x418>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_DMA_IRQHandler+0x41c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_DMA_IRQHandler+0x420>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_DMA_IRQHandler+0x424>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_DMA_IRQHandler+0x428>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_DMA_IRQHandler+0x42c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_DMA_IRQHandler+0x430>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ee>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_DMA_IRQHandler+0x434>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10a      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x304>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e003      	b.n	8002e60 <HAL_DMA_IRQHandler+0x30c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f043 0202 	orr.w	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2204      	movs	r2, #4
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 808f 	beq.w	8002fb4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <HAL_DMA_IRQHandler+0x3f8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d04a      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_DMA_IRQHandler+0x3fc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d045      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_DMA_IRQHandler+0x400>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d040      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_DMA_IRQHandler+0x404>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d03b      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_DMA_IRQHandler+0x408>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d036      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_DMA_IRQHandler+0x40c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d031      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_DMA_IRQHandler+0x410>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d02c      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_DMA_IRQHandler+0x414>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d027      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_DMA_IRQHandler+0x418>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_DMA_IRQHandler+0x41c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01d      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_DMA_IRQHandler+0x420>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d018      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_DMA_IRQHandler+0x424>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_DMA_IRQHandler+0x428>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_DMA_IRQHandler+0x42c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d009      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_DMA_IRQHandler+0x430>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3e2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <HAL_DMA_IRQHandler+0x434>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12a      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x438>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e023      	b.n	8002f94 <HAL_DMA_IRQHandler+0x440>
 8002f4c:	40020010 	.word	0x40020010
 8002f50:	40020028 	.word	0x40020028
 8002f54:	40020040 	.word	0x40020040
 8002f58:	40020058 	.word	0x40020058
 8002f5c:	40020070 	.word	0x40020070
 8002f60:	40020088 	.word	0x40020088
 8002f64:	400200a0 	.word	0x400200a0
 8002f68:	400200b8 	.word	0x400200b8
 8002f6c:	40020410 	.word	0x40020410
 8002f70:	40020428 	.word	0x40020428
 8002f74:	40020440 	.word	0x40020440
 8002f78:	40020458 	.word	0x40020458
 8002f7c:	40020470 	.word	0x40020470
 8002f80:	40020488 	.word	0x40020488
 8002f84:	400204a0 	.word	0x400204a0
 8002f88:	400204b8 	.word	0x400204b8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a6 	beq.w	8003116 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a85      	ldr	r2, [pc, #532]	; (80031e4 <HAL_DMA_IRQHandler+0x690>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04a      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a83      	ldr	r2, [pc, #524]	; (80031e8 <HAL_DMA_IRQHandler+0x694>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d045      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a82      	ldr	r2, [pc, #520]	; (80031ec <HAL_DMA_IRQHandler+0x698>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d040      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a80      	ldr	r2, [pc, #512]	; (80031f0 <HAL_DMA_IRQHandler+0x69c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d03b      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7f      	ldr	r2, [pc, #508]	; (80031f4 <HAL_DMA_IRQHandler+0x6a0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d036      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a7d      	ldr	r2, [pc, #500]	; (80031f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d031      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_DMA_IRQHandler+0x6a8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d02c      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a7a      	ldr	r2, [pc, #488]	; (8003200 <HAL_DMA_IRQHandler+0x6ac>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d027      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a79      	ldr	r2, [pc, #484]	; (8003204 <HAL_DMA_IRQHandler+0x6b0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_DMA_IRQHandler+0x6b4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a76      	ldr	r2, [pc, #472]	; (800320c <HAL_DMA_IRQHandler+0x6b8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a74      	ldr	r2, [pc, #464]	; (8003210 <HAL_DMA_IRQHandler+0x6bc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a73      	ldr	r2, [pc, #460]	; (8003214 <HAL_DMA_IRQHandler+0x6c0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a71      	ldr	r2, [pc, #452]	; (8003218 <HAL_DMA_IRQHandler+0x6c4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_DMA_IRQHandler+0x6c8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_IRQHandler+0x516>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6e      	ldr	r2, [pc, #440]	; (8003220 <HAL_DMA_IRQHandler+0x6cc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10a      	bne.n	8003080 <HAL_DMA_IRQHandler+0x52c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e009      	b.n	8003094 <HAL_DMA_IRQHandler+0x540>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03e      	beq.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2210      	movs	r2, #16
 80030a2:	409a      	lsls	r2, r3
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d108      	bne.n	80030d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d024      	beq.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
 80030d4:	e01f      	b.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01b      	beq.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
 80030e6:	e016      	b.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0208 	bic.w	r2, r2, #8
 8003104:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8110 	beq.w	800334c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <HAL_DMA_IRQHandler+0x690>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_DMA_IRQHandler+0x694>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d045      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_DMA_IRQHandler+0x698>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d040      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <HAL_DMA_IRQHandler+0x69c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d03b      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_DMA_IRQHandler+0x6a0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d036      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d031      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a23      	ldr	r2, [pc, #140]	; (80031fc <HAL_DMA_IRQHandler+0x6a8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_DMA_IRQHandler+0x6ac>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d027      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_DMA_IRQHandler+0x6b0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d022      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_DMA_IRQHandler+0x6b4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d01d      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_DMA_IRQHandler+0x6b8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d018      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_DMA_IRQHandler+0x6bc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_DMA_IRQHandler+0x6c0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_DMA_IRQHandler+0x6c4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_DMA_IRQHandler+0x6c8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_IRQHandler+0x678>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_DMA_IRQHandler+0x6cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d12b      	bne.n	8003224 <HAL_DMA_IRQHandler+0x6d0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e02a      	b.n	8003238 <HAL_DMA_IRQHandler+0x6e4>
 80031e2:	bf00      	nop
 80031e4:	40020010 	.word	0x40020010
 80031e8:	40020028 	.word	0x40020028
 80031ec:	40020040 	.word	0x40020040
 80031f0:	40020058 	.word	0x40020058
 80031f4:	40020070 	.word	0x40020070
 80031f8:	40020088 	.word	0x40020088
 80031fc:	400200a0 	.word	0x400200a0
 8003200:	400200b8 	.word	0x400200b8
 8003204:	40020410 	.word	0x40020410
 8003208:	40020428 	.word	0x40020428
 800320c:	40020440 	.word	0x40020440
 8003210:	40020458 	.word	0x40020458
 8003214:	40020470 	.word	0x40020470
 8003218:	40020488 	.word	0x40020488
 800321c:	400204a0 	.word	0x400204a0
 8003220:	400204b8 	.word	0x400204b8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8087 	beq.w	800334c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2220      	movs	r2, #32
 8003248:	409a      	lsls	r2, r3
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b04      	cmp	r3, #4
 8003258:	d139      	bne.n	80032ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0216 	bic.w	r2, r2, #22
 8003268:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003278:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <HAL_DMA_IRQHandler+0x736>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0208 	bic.w	r2, r2, #8
 8003298:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	223f      	movs	r2, #63	; 0x3f
 80032a4:	409a      	lsls	r2, r3
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 834a 	beq.w	8003958 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
          }
          return;
 80032cc:	e344      	b.n	8003958 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02c      	beq.n	800334c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e027      	b.n	800334c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d023      	beq.n	800334c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e01e      	b.n	800334c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0210 	bic.w	r2, r2, #16
 800332a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8306 	beq.w	8003962 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8088 	beq.w	8003474 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2204      	movs	r2, #4
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7a      	ldr	r2, [pc, #488]	; (800355c <HAL_DMA_IRQHandler+0xa08>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04a      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a79      	ldr	r2, [pc, #484]	; (8003560 <HAL_DMA_IRQHandler+0xa0c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d045      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a77      	ldr	r2, [pc, #476]	; (8003564 <HAL_DMA_IRQHandler+0xa10>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d040      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a76      	ldr	r2, [pc, #472]	; (8003568 <HAL_DMA_IRQHandler+0xa14>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d03b      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a74      	ldr	r2, [pc, #464]	; (800356c <HAL_DMA_IRQHandler+0xa18>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d036      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <HAL_DMA_IRQHandler+0xa1c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d031      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a71      	ldr	r2, [pc, #452]	; (8003574 <HAL_DMA_IRQHandler+0xa20>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02c      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a70      	ldr	r2, [pc, #448]	; (8003578 <HAL_DMA_IRQHandler+0xa24>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d027      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6e      	ldr	r2, [pc, #440]	; (800357c <HAL_DMA_IRQHandler+0xa28>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6d      	ldr	r2, [pc, #436]	; (8003580 <HAL_DMA_IRQHandler+0xa2c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01d      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <HAL_DMA_IRQHandler+0xa30>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6a      	ldr	r2, [pc, #424]	; (8003588 <HAL_DMA_IRQHandler+0xa34>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a68      	ldr	r2, [pc, #416]	; (800358c <HAL_DMA_IRQHandler+0xa38>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a67      	ldr	r2, [pc, #412]	; (8003590 <HAL_DMA_IRQHandler+0xa3c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_DMA_IRQHandler+0xa40>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_DMA_IRQHandler+0x8b8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a64      	ldr	r2, [pc, #400]	; (8003598 <HAL_DMA_IRQHandler+0xa44>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d108      	bne.n	800341e <HAL_DMA_IRQHandler+0x8ca>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e007      	b.n	800342e <HAL_DMA_IRQHandler+0x8da>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3301      	adds	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	429a      	cmp	r2, r3
 8003438:	d307      	bcc.n	800344a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f2      	bne.n	800342e <HAL_DMA_IRQHandler+0x8da>
 8003448:	e000      	b.n	800344c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800344a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2203      	movs	r2, #3
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003462:	e003      	b.n	800346c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8272 	beq.w	8003962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e26c      	b.n	8003962 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a43      	ldr	r2, [pc, #268]	; (800359c <HAL_DMA_IRQHandler+0xa48>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a42      	ldr	r2, [pc, #264]	; (80035a0 <HAL_DMA_IRQHandler+0xa4c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01d      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <HAL_DMA_IRQHandler+0xa50>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <HAL_DMA_IRQHandler+0xa54>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <HAL_DMA_IRQHandler+0xa58>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <HAL_DMA_IRQHandler+0xa5c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3a      	ldr	r2, [pc, #232]	; (80035b4 <HAL_DMA_IRQHandler+0xa60>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x984>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <HAL_DMA_IRQHandler+0xa64>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_IRQHandler+0x988>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_DMA_IRQHandler+0x98a>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 823f 	beq.w	8003962 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2204      	movs	r2, #4
 80034f6:	409a      	lsls	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80cd 	beq.w	800369c <HAL_DMA_IRQHandler+0xb48>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80c7 	beq.w	800369c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2204      	movs	r2, #4
 8003518:	409a      	lsls	r2, r3
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d049      	beq.n	80035bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8210 	beq.w	800395c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003544:	e20a      	b.n	800395c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8206 	beq.w	800395c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003558:	e200      	b.n	800395c <HAL_DMA_IRQHandler+0xe08>
 800355a:	bf00      	nop
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d160      	bne.n	8003688 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7f      	ldr	r2, [pc, #508]	; (80037c8 <HAL_DMA_IRQHandler+0xc74>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d04a      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7d      	ldr	r2, [pc, #500]	; (80037cc <HAL_DMA_IRQHandler+0xc78>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d045      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7c      	ldr	r2, [pc, #496]	; (80037d0 <HAL_DMA_IRQHandler+0xc7c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d040      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <HAL_DMA_IRQHandler+0xc80>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d03b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a79      	ldr	r2, [pc, #484]	; (80037d8 <HAL_DMA_IRQHandler+0xc84>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d036      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a77      	ldr	r2, [pc, #476]	; (80037dc <HAL_DMA_IRQHandler+0xc88>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d031      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a76      	ldr	r2, [pc, #472]	; (80037e0 <HAL_DMA_IRQHandler+0xc8c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d02c      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a74      	ldr	r2, [pc, #464]	; (80037e4 <HAL_DMA_IRQHandler+0xc90>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d027      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_DMA_IRQHandler+0xc94>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a71      	ldr	r2, [pc, #452]	; (80037ec <HAL_DMA_IRQHandler+0xc98>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01d      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a70      	ldr	r2, [pc, #448]	; (80037f0 <HAL_DMA_IRQHandler+0xc9c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_DMA_IRQHandler+0xca0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a6d      	ldr	r2, [pc, #436]	; (80037f8 <HAL_DMA_IRQHandler+0xca4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6b      	ldr	r2, [pc, #428]	; (80037fc <HAL_DMA_IRQHandler+0xca8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <HAL_DMA_IRQHandler+0xcac>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_DMA_IRQHandler+0xb12>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_DMA_IRQHandler+0xcb0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <HAL_DMA_IRQHandler+0xb24>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0208 	bic.w	r2, r2, #8
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e007      	b.n	8003688 <HAL_DMA_IRQHandler+0xb34>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8165 	beq.w	800395c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369a:	e15f      	b.n	800395c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2202      	movs	r2, #2
 80036a6:	409a      	lsls	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80c5 	beq.w	800383c <HAL_DMA_IRQHandler+0xce8>
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80bf 	beq.w	800383c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2202      	movs	r2, #2
 80036c8:	409a      	lsls	r2, r3
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 813a 	beq.w	8003960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f4:	e134      	b.n	8003960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8130 	beq.w	8003960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003708:	e12a      	b.n	8003960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8089 	bne.w	8003828 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_DMA_IRQHandler+0xc74>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_DMA_IRQHandler+0xc78>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_DMA_IRQHandler+0xc7c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <HAL_DMA_IRQHandler+0xc80>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <HAL_DMA_IRQHandler+0xc84>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_DMA_IRQHandler+0xc88>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_DMA_IRQHandler+0xc8c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <HAL_DMA_IRQHandler+0xc90>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_DMA_IRQHandler+0xc94>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <HAL_DMA_IRQHandler+0xc98>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_DMA_IRQHandler+0xc9c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <HAL_DMA_IRQHandler+0xca0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_DMA_IRQHandler+0xca4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a17      	ldr	r2, [pc, #92]	; (80037fc <HAL_DMA_IRQHandler+0xca8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_DMA_IRQHandler+0xcac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xc62>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_DMA_IRQHandler+0xcb0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d128      	bne.n	8003808 <HAL_DMA_IRQHandler+0xcb4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0214 	bic.w	r2, r2, #20
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e027      	b.n	8003818 <HAL_DMA_IRQHandler+0xcc4>
 80037c8:	40020010 	.word	0x40020010
 80037cc:	40020028 	.word	0x40020028
 80037d0:	40020040 	.word	0x40020040
 80037d4:	40020058 	.word	0x40020058
 80037d8:	40020070 	.word	0x40020070
 80037dc:	40020088 	.word	0x40020088
 80037e0:	400200a0 	.word	0x400200a0
 80037e4:	400200b8 	.word	0x400200b8
 80037e8:	40020410 	.word	0x40020410
 80037ec:	40020428 	.word	0x40020428
 80037f0:	40020440 	.word	0x40020440
 80037f4:	40020458 	.word	0x40020458
 80037f8:	40020470 	.word	0x40020470
 80037fc:	40020488 	.word	0x40020488
 8003800:	400204a0 	.word	0x400204a0
 8003804:	400204b8 	.word	0x400204b8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020a 	bic.w	r2, r2, #10
 8003816:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8097 	beq.w	8003960 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800383a:	e091      	b.n	8003960 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2208      	movs	r2, #8
 8003846:	409a      	lsls	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8088 	beq.w	8003962 <HAL_DMA_IRQHandler+0xe0e>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8082 	beq.w	8003962 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a41      	ldr	r2, [pc, #260]	; (8003968 <HAL_DMA_IRQHandler+0xe14>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_DMA_IRQHandler+0xe18>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3e      	ldr	r2, [pc, #248]	; (8003970 <HAL_DMA_IRQHandler+0xe1c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <HAL_DMA_IRQHandler+0xe20>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_DMA_IRQHandler+0xe24>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a39      	ldr	r2, [pc, #228]	; (800397c <HAL_DMA_IRQHandler+0xe28>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a38      	ldr	r2, [pc, #224]	; (8003980 <HAL_DMA_IRQHandler+0xe2c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a36      	ldr	r2, [pc, #216]	; (8003984 <HAL_DMA_IRQHandler+0xe30>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a35      	ldr	r2, [pc, #212]	; (8003988 <HAL_DMA_IRQHandler+0xe34>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <HAL_DMA_IRQHandler+0xe38>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <HAL_DMA_IRQHandler+0xe3c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_DMA_IRQHandler+0xe40>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <HAL_DMA_IRQHandler+0xe44>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2d      	ldr	r2, [pc, #180]	; (800399c <HAL_DMA_IRQHandler+0xe48>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <HAL_DMA_IRQHandler+0xe4c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_IRQHandler+0xdaa>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_DMA_IRQHandler+0xe50>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <HAL_DMA_IRQHandler+0xdbc>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 021c 	bic.w	r2, r2, #28
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <HAL_DMA_IRQHandler+0xdcc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020e 	bic.w	r2, r2, #14
 800391e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2201      	movs	r2, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
 8003956:	e004      	b.n	8003962 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003960:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8

080039a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a42      	ldr	r2, [pc, #264]	; (8003ac0 <DMA_CalcBaseAndBitshift+0x118>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d04a      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a41      	ldr	r2, [pc, #260]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x11c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d045      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x120>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d040      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a3e      	ldr	r2, [pc, #248]	; (8003acc <DMA_CalcBaseAndBitshift+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d03b      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a3c      	ldr	r2, [pc, #240]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x128>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d036      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x12c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d031      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a39      	ldr	r2, [pc, #228]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x130>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02c      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a38      	ldr	r2, [pc, #224]	; (8003adc <DMA_CalcBaseAndBitshift+0x134>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d027      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a36      	ldr	r2, [pc, #216]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x138>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d022      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d01d      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a33      	ldr	r2, [pc, #204]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x140>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d018      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a32      	ldr	r2, [pc, #200]	; (8003aec <DMA_CalcBaseAndBitshift+0x144>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <DMA_CalcBaseAndBitshift+0x148>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00e      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d009      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <DMA_CalcBaseAndBitshift+0x150>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <DMA_CalcBaseAndBitshift+0xa8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <DMA_CalcBaseAndBitshift+0x154>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <DMA_CalcBaseAndBitshift+0xac>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <DMA_CalcBaseAndBitshift+0xae>
 8003a54:	2300      	movs	r3, #0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d024      	beq.n	8003aa4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3b10      	subs	r3, #16
 8003a62:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <DMA_CalcBaseAndBitshift+0x158>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	4a24      	ldr	r2, [pc, #144]	; (8003b04 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d908      	bls.n	8003a94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <DMA_CalcBaseAndBitshift+0x160>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58
 8003a92:	e00d      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <DMA_CalcBaseAndBitshift+0x160>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa2:	e005      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40020010 	.word	0x40020010
 8003ac4:	40020028 	.word	0x40020028
 8003ac8:	40020040 	.word	0x40020040
 8003acc:	40020058 	.word	0x40020058
 8003ad0:	40020070 	.word	0x40020070
 8003ad4:	40020088 	.word	0x40020088
 8003ad8:	400200a0 	.word	0x400200a0
 8003adc:	400200b8 	.word	0x400200b8
 8003ae0:	40020410 	.word	0x40020410
 8003ae4:	40020428 	.word	0x40020428
 8003ae8:	40020440 	.word	0x40020440
 8003aec:	40020458 	.word	0x40020458
 8003af0:	40020470 	.word	0x40020470
 8003af4:	40020488 	.word	0x40020488
 8003af8:	400204a0 	.word	0x400204a0
 8003afc:	400204b8 	.word	0x400204b8
 8003b00:	aaaaaaab 	.word	0xaaaaaaab
 8003b04:	0800cce4 	.word	0x0800cce4
 8003b08:	fffffc00 	.word	0xfffffc00

08003b0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d120      	bne.n	8003b62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d858      	bhi.n	8003bda <DMA_CheckFifoParam+0xce>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <DMA_CheckFifoParam+0x24>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b53 	.word	0x08003b53
 8003b38:	08003b41 	.word	0x08003b41
 8003b3c:	08003bdb 	.word	0x08003bdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d048      	beq.n	8003bde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b50:	e045      	b.n	8003bde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b5a:	d142      	bne.n	8003be2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b60:	e03f      	b.n	8003be2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6a:	d123      	bne.n	8003bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d838      	bhi.n	8003be6 <DMA_CheckFifoParam+0xda>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <DMA_CheckFifoParam+0x70>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b93 	.word	0x08003b93
 8003b84:	08003b8d 	.word	0x08003b8d
 8003b88:	08003ba5 	.word	0x08003ba5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b90:	e030      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d025      	beq.n	8003bea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ba2:	e022      	b.n	8003bea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bac:	d11f      	bne.n	8003bee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bb2:	e01c      	b.n	8003bee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d902      	bls.n	8003bc2 <DMA_CheckFifoParam+0xb6>
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d003      	beq.n	8003bc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bc0:	e018      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bc6:	e015      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8003bd8:	e00b      	b.n	8003bf2 <DMA_CheckFifoParam+0xe6>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e00a      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003bde:	bf00      	nop
 8003be0:	e008      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003be2:	bf00      	nop
 8003be4:	e006      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
    break;
 8003bf2:	bf00      	nop
    }
  }

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a38      	ldr	r2, [pc, #224]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a36      	ldr	r2, [pc, #216]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a35      	ldr	r2, [pc, #212]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a33      	ldr	r2, [pc, #204]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a30      	ldr	r2, [pc, #192]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01a      	beq.n	8003ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b08      	subs	r3, #8
 8003c74:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ca0:	e024      	b.n	8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3b10      	subs	r3, #16
 8003caa:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d806      	bhi.n	8003cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d902      	bls.n	8003cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	58025408 	.word	0x58025408
 8003cfc:	5802541c 	.word	0x5802541c
 8003d00:	58025430 	.word	0x58025430
 8003d04:	58025444 	.word	0x58025444
 8003d08:	58025458 	.word	0x58025458
 8003d0c:	5802546c 	.word	0x5802546c
 8003d10:	58025480 	.word	0x58025480
 8003d14:	58025494 	.word	0x58025494
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	16009600 	.word	0x16009600
 8003d20:	58025880 	.word	0x58025880
 8003d24:	aaaaaaab 	.word	0xaaaaaaab
 8003d28:	400204b8 	.word	0x400204b8
 8003d2c:	4002040f 	.word	0x4002040f
 8003d30:	10008200 	.word	0x10008200
 8003d34:	40020880 	.word	0x40020880

08003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d04a      	beq.n	8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d847      	bhi.n	8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01d      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8003dc2:	e009      	b.n	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	58025408 	.word	0x58025408
 8003df4:	5802541c 	.word	0x5802541c
 8003df8:	58025430 	.word	0x58025430
 8003dfc:	58025444 	.word	0x58025444
 8003e00:	58025458 	.word	0x58025458
 8003e04:	5802546c 	.word	0x5802546c
 8003e08:	58025480 	.word	0x58025480
 8003e0c:	58025494 	.word	0x58025494
 8003e10:	1600963f 	.word	0x1600963f
 8003e14:	58025940 	.word	0x58025940
 8003e18:	1000823f 	.word	0x1000823f
 8003e1c:	40020940 	.word	0x40020940

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e2e:	4b89      	ldr	r3, [pc, #548]	; (8004054 <HAL_GPIO_Init+0x234>)
 8003e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e32:	e194      	b.n	800415e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8186 	beq.w	8004158 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d005      	beq.n	8003e64 <HAL_GPIO_Init+0x44>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d130      	bne.n	8003ec6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0201 	and.w	r2, r3, #1
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d017      	beq.n	8003f02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d123      	bne.n	8003f56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	08da      	lsrs	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3208      	adds	r2, #8
 8003f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	220f      	movs	r2, #15
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0203 	and.w	r2, r3, #3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80e0 	beq.w	8004158 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f98:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <HAL_GPIO_Init+0x238>)
 8003f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f9e:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <HAL_GPIO_Init+0x238>)
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_GPIO_Init+0x238>)
 8003faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a29      	ldr	r2, [pc, #164]	; (800405c <HAL_GPIO_Init+0x23c>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <HAL_GPIO_Init+0x240>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d052      	beq.n	8004088 <HAL_GPIO_Init+0x268>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <HAL_GPIO_Init+0x244>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d031      	beq.n	800404e <HAL_GPIO_Init+0x22e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_GPIO_Init+0x248>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02b      	beq.n	800404a <HAL_GPIO_Init+0x22a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	; (800406c <HAL_GPIO_Init+0x24c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d025      	beq.n	8004046 <HAL_GPIO_Init+0x226>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_GPIO_Init+0x250>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <HAL_GPIO_Init+0x222>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_GPIO_Init+0x254>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d019      	beq.n	800403e <HAL_GPIO_Init+0x21e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_GPIO_Init+0x258>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_GPIO_Init+0x21a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_GPIO_Init+0x25c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00d      	beq.n	8004036 <HAL_GPIO_Init+0x216>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_GPIO_Init+0x260>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <HAL_GPIO_Init+0x212>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <HAL_GPIO_Init+0x264>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_GPIO_Init+0x20e>
 800402a:	2309      	movs	r3, #9
 800402c:	e02d      	b.n	800408a <HAL_GPIO_Init+0x26a>
 800402e:	230a      	movs	r3, #10
 8004030:	e02b      	b.n	800408a <HAL_GPIO_Init+0x26a>
 8004032:	2308      	movs	r3, #8
 8004034:	e029      	b.n	800408a <HAL_GPIO_Init+0x26a>
 8004036:	2307      	movs	r3, #7
 8004038:	e027      	b.n	800408a <HAL_GPIO_Init+0x26a>
 800403a:	2306      	movs	r3, #6
 800403c:	e025      	b.n	800408a <HAL_GPIO_Init+0x26a>
 800403e:	2305      	movs	r3, #5
 8004040:	e023      	b.n	800408a <HAL_GPIO_Init+0x26a>
 8004042:	2304      	movs	r3, #4
 8004044:	e021      	b.n	800408a <HAL_GPIO_Init+0x26a>
 8004046:	2303      	movs	r3, #3
 8004048:	e01f      	b.n	800408a <HAL_GPIO_Init+0x26a>
 800404a:	2302      	movs	r3, #2
 800404c:	e01d      	b.n	800408a <HAL_GPIO_Init+0x26a>
 800404e:	2301      	movs	r3, #1
 8004050:	e01b      	b.n	800408a <HAL_GPIO_Init+0x26a>
 8004052:	bf00      	nop
 8004054:	58000080 	.word	0x58000080
 8004058:	58024400 	.word	0x58024400
 800405c:	58000400 	.word	0x58000400
 8004060:	58020000 	.word	0x58020000
 8004064:	58020400 	.word	0x58020400
 8004068:	58020800 	.word	0x58020800
 800406c:	58020c00 	.word	0x58020c00
 8004070:	58021000 	.word	0x58021000
 8004074:	58021400 	.word	0x58021400
 8004078:	58021800 	.word	0x58021800
 800407c:	58021c00 	.word	0x58021c00
 8004080:	58022000 	.word	0x58022000
 8004084:	58022400 	.word	0x58022400
 8004088:	2300      	movs	r3, #0
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	f002 0203 	and.w	r2, r2, #3
 8004090:	0092      	lsls	r2, r2, #2
 8004092:	4093      	lsls	r3, r2
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800409a:	4938      	ldr	r1, [pc, #224]	; (800417c <HAL_GPIO_Init+0x35c>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	f47f ae63 	bne.w	8003e34 <HAL_GPIO_Init+0x14>
  }
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	58000400 	.word	0x58000400

08004180 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_PWREx_ConfigSupply+0x70>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d00a      	beq.n	80041aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004194:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <HAL_PWREx_ConfigSupply+0x70>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d001      	beq.n	80041a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01f      	b.n	80041e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e01d      	b.n	80041e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041aa:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_PWREx_ConfigSupply+0x70>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 0207 	bic.w	r2, r3, #7
 80041b2:	490f      	ldr	r1, [pc, #60]	; (80041f0 <HAL_PWREx_ConfigSupply+0x70>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041ba:	f7fd fb13 	bl	80017e4 <HAL_GetTick>
 80041be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041c0:	e009      	b.n	80041d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041c2:	f7fd fb0f 	bl	80017e4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d0:	d901      	bls.n	80041d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e007      	b.n	80041e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_PWREx_ConfigSupply+0x70>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	d1ee      	bne.n	80041c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58024800 	.word	0x58024800

080041f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f000 bc1d 	b.w	8004a42 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8087 	beq.w	8004324 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004216:	4b99      	ldr	r3, [pc, #612]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004220:	4b96      	ldr	r3, [pc, #600]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	2b10      	cmp	r3, #16
 800422a:	d007      	beq.n	800423c <HAL_RCC_OscConfig+0x48>
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b18      	cmp	r3, #24
 8004230:	d110      	bne.n	8004254 <HAL_RCC_OscConfig+0x60>
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d10b      	bne.n	8004254 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	4b8f      	ldr	r3, [pc, #572]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d06c      	beq.n	8004322 <HAL_RCC_OscConfig+0x12e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d168      	bne.n	8004322 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e3f6      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d106      	bne.n	800426c <HAL_RCC_OscConfig+0x78>
 800425e:	4b87      	ldr	r3, [pc, #540]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a86      	ldr	r2, [pc, #536]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e02e      	b.n	80042ca <HAL_RCC_OscConfig+0xd6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10c      	bne.n	800428e <HAL_RCC_OscConfig+0x9a>
 8004274:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a80      	ldr	r2, [pc, #512]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b7e      	ldr	r3, [pc, #504]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7d      	ldr	r2, [pc, #500]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e01d      	b.n	80042ca <HAL_RCC_OscConfig+0xd6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004296:	d10c      	bne.n	80042b2 <HAL_RCC_OscConfig+0xbe>
 8004298:	4b78      	ldr	r3, [pc, #480]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a77      	ldr	r2, [pc, #476]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800429e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b75      	ldr	r3, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a74      	ldr	r2, [pc, #464]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e00b      	b.n	80042ca <HAL_RCC_OscConfig+0xd6>
 80042b2:	4b72      	ldr	r3, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a71      	ldr	r2, [pc, #452]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d013      	beq.n	80042fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd fa87 	bl	80017e4 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042da:	f7fd fa83 	bl	80017e4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e3aa      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ec:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0xe6>
 80042f8:	e014      	b.n	8004324 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd fa73 	bl	80017e4 <HAL_GetTick>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004302:	f7fd fa6f 	bl	80017e4 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	; 0x64
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e396      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x10e>
 8004320:	e000      	b.n	8004324 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004322:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80cb 	beq.w	80044c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004332:	4b52      	ldr	r3, [pc, #328]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800433a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_RCC_OscConfig+0x164>
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b18      	cmp	r3, #24
 800434c:	d156      	bne.n	80043fc <HAL_RCC_OscConfig+0x208>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d151      	bne.n	80043fc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004358:	4b48      	ldr	r3, [pc, #288]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_OscConfig+0x17c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e368      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 0219 	bic.w	r2, r3, #25
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	493f      	ldr	r1, [pc, #252]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004382:	f7fd fa2f 	bl	80017e4 <HAL_GetTick>
 8004386:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd fa2b 	bl	80017e4 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e352      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800439c:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	f7fd fa28 	bl	80017fc <HAL_GetREVID>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d817      	bhi.n	80043e6 <HAL_RCC_OscConfig+0x1f2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d108      	bne.n	80043d0 <HAL_RCC_OscConfig+0x1dc>
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043c6:	4a2d      	ldr	r2, [pc, #180]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ce:	e07b      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b2a      	ldr	r3, [pc, #168]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	4927      	ldr	r1, [pc, #156]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	e070      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	4921      	ldr	r1, [pc, #132]	; (800447c <HAL_RCC_OscConfig+0x288>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fa:	e065      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d048      	beq.n	8004496 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 0219 	bic.w	r2, r3, #25
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	491a      	ldr	r1, [pc, #104]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd f9e5 	bl	80017e4 <HAL_GetTick>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441e:	f7fd f9e1 	bl	80017e4 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e308      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	f7fd f9de 	bl	80017fc <HAL_GetREVID>
 8004440:	4603      	mov	r3, r0
 8004442:	f241 0203 	movw	r2, #4099	; 0x1003
 8004446:	4293      	cmp	r3, r2
 8004448:	d81a      	bhi.n	8004480 <HAL_RCC_OscConfig+0x28c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d108      	bne.n	8004464 <HAL_RCC_OscConfig+0x270>
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_RCC_OscConfig+0x288>)
 800445c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004460:	6053      	str	r3, [r2, #4]
 8004462:	e031      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	4902      	ldr	r1, [pc, #8]	; (800447c <HAL_RCC_OscConfig+0x288>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	e026      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	4b9a      	ldr	r3, [pc, #616]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	4997      	ldr	r1, [pc, #604]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
 8004494:	e018      	b.n	80044c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b95      	ldr	r3, [pc, #596]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a94      	ldr	r2, [pc, #592]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fd f99f 	bl	80017e4 <HAL_GetTick>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd f99b 	bl	80017e4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e2c2      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044bc:	4b8b      	ldr	r3, [pc, #556]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80a9 	beq.w	8004628 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b85      	ldr	r3, [pc, #532]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e0:	4b82      	ldr	r3, [pc, #520]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d007      	beq.n	80044fc <HAL_RCC_OscConfig+0x308>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b18      	cmp	r3, #24
 80044f0:	d13a      	bne.n	8004568 <HAL_RCC_OscConfig+0x374>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d135      	bne.n	8004568 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044fc:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x320>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e296      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004514:	f7fd f972 	bl	80017fc <HAL_GetREVID>
 8004518:	4603      	mov	r3, r0
 800451a:	f241 0203 	movw	r2, #4099	; 0x1003
 800451e:	4293      	cmp	r3, r2
 8004520:	d817      	bhi.n	8004552 <HAL_RCC_OscConfig+0x35e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d108      	bne.n	800453c <HAL_RCC_OscConfig+0x348>
 800452a:	4b70      	ldr	r3, [pc, #448]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004532:	4a6e      	ldr	r2, [pc, #440]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004538:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800453a:	e075      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800453c:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	069b      	lsls	r3, r3, #26
 800454a:	4968      	ldr	r1, [pc, #416]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004550:	e06a      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004552:	4b66      	ldr	r3, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	061b      	lsls	r3, r3, #24
 8004560:	4962      	ldr	r1, [pc, #392]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004566:	e05f      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d042      	beq.n	80045f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004570:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd f932 	bl	80017e4 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004584:	f7fd f92e 	bl	80017e4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e255      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004596:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045a2:	f7fd f92b 	bl	80017fc <HAL_GetREVID>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d817      	bhi.n	80045e0 <HAL_RCC_OscConfig+0x3ec>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d108      	bne.n	80045ca <HAL_RCC_OscConfig+0x3d6>
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045c0:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c6:	6053      	str	r3, [r2, #4]
 80045c8:	e02e      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
 80045ca:	4b48      	ldr	r3, [pc, #288]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	4944      	ldr	r1, [pc, #272]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
 80045de:	e023      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
 80045e0:	4b42      	ldr	r3, [pc, #264]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	493f      	ldr	r1, [pc, #252]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60cb      	str	r3, [r1, #12]
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045f6:	4b3d      	ldr	r3, [pc, #244]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3c      	ldr	r2, [pc, #240]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fd f8ef 	bl	80017e4 <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800460a:	f7fd f8eb 	bl	80017e4 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e212      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800461c:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d036      	beq.n	80046a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d019      	beq.n	8004670 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463c:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fd f8cc 	bl	80017e4 <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7fd f8c8 	bl	80017e4 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1ef      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x45c>
 800466e:	e018      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fd f8b2 	bl	80017e4 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004684:	f7fd f8ae 	bl	80017e4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1d5      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d039      	beq.n	8004722 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046c2:	f7fd f88f 	bl	80017e4 <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046ca:	f7fd f88b 	bl	80017e4 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1b2      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_OscConfig+0x4f8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x4d6>
 80046e8:	e01b      	b.n	8004722 <HAL_RCC_OscConfig+0x52e>
 80046ea:	bf00      	nop
 80046ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046f0:	4b9b      	ldr	r3, [pc, #620]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a9a      	ldr	r2, [pc, #616]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046fc:	f7fd f872 	bl	80017e4 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004704:	f7fd f86e 	bl	80017e4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e195      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004716:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8081 	beq.w	8004832 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004730:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <HAL_RCC_OscConfig+0x770>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a8b      	ldr	r2, [pc, #556]	; (8004964 <HAL_RCC_OscConfig+0x770>)
 8004736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800473c:	f7fd f852 	bl	80017e4 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004744:	f7fd f84e 	bl	80017e4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e175      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004756:	4b83      	ldr	r3, [pc, #524]	; (8004964 <HAL_RCC_OscConfig+0x770>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x584>
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a7c      	ldr	r2, [pc, #496]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
 8004776:	e02d      	b.n	80047d4 <HAL_RCC_OscConfig+0x5e0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0x5a6>
 8004780:	4b77      	ldr	r3, [pc, #476]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a76      	ldr	r2, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	4b74      	ldr	r3, [pc, #464]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a73      	ldr	r2, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x5e0>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c8>
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	4a6b      	ldr	r2, [pc, #428]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ba:	e00b      	b.n	80047d4 <HAL_RCC_OscConfig+0x5e0>
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a64      	ldr	r2, [pc, #400]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fd f802 	bl	80017e4 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fc fffe 	bl	80017e4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e123      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fa:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCC_OscConfig+0x5f0>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fc ffec 	bl	80017e4 <HAL_GetTick>
 800480c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fc ffe8 	bl	80017e4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e10d      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 8102 	beq.w	8004a40 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800483c:	4b48      	ldr	r3, [pc, #288]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004844:	2b18      	cmp	r3, #24
 8004846:	f000 80bd 	beq.w	80049c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 809e 	bne.w	8004990 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a41      	ldr	r2, [pc, #260]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc ffc0 	bl	80017e4 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fc ffbc 	bl	80017e4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0e3      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487a:	4b39      	ldr	r3, [pc, #228]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_OscConfig+0x774>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	430a      	orrs	r2, r1
 800489a:	4931      	ldr	r1, [pc, #196]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	628b      	str	r3, [r1, #40]	; 0x28
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	3b01      	subs	r3, #1
 80048b0:	025b      	lsls	r3, r3, #9
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	3b01      	subs	r3, #1
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d0:	4923      	ldr	r1, [pc, #140]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	4a21      	ldr	r2, [pc, #132]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e6:	4b21      	ldr	r3, [pc, #132]	; (800496c <HAL_RCC_OscConfig+0x778>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048ee:	00d2      	lsls	r2, r2, #3
 80048f0:	491b      	ldr	r1, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f023 020c 	bic.w	r2, r3, #12
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4917      	ldr	r1, [pc, #92]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	f023 0202 	bic.w	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	4912      	ldr	r1, [pc, #72]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a04      	ldr	r2, [pc, #16]	; (8004960 <HAL_RCC_OscConfig+0x76c>)
 8004950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fc ff45 	bl	80017e4 <HAL_GetTick>
 800495a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800495c:	e011      	b.n	8004982 <HAL_RCC_OscConfig+0x78e>
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
 8004964:	58024800 	.word	0x58024800
 8004968:	fffffc0c 	.word	0xfffffc0c
 800496c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004970:	f7fc ff38 	bl	80017e4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e05f      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004982:	4b32      	ldr	r3, [pc, #200]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x77c>
 800498e:	e057      	b.n	8004a40 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004990:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 8004996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fc ff22 	bl	80017e4 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fc ff1e 	bl	80017e4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x7b0>
 80049c2:	e03d      	b.n	8004a40 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_OscConfig+0x858>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d031      	beq.n	8004a3c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d12a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d122      	bne.n	8004a3c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0a5b      	lsrs	r3, r3, #9
 8004a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d108      	bne.n	8004a3c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3730      	adds	r7, #48	; 0x30
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400

08004a50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e19c      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b8a      	ldr	r3, [pc, #552]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d910      	bls.n	8004a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b87      	ldr	r3, [pc, #540]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 020f 	bic.w	r2, r3, #15
 8004a7a:	4985      	ldr	r1, [pc, #532]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	4b83      	ldr	r3, [pc, #524]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e184      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	4b7b      	ldr	r3, [pc, #492]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d908      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ab0:	4b78      	ldr	r3, [pc, #480]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	4975      	ldr	r1, [pc, #468]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d908      	bls.n	8004af0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ade:	4b6d      	ldr	r3, [pc, #436]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	496a      	ldr	r1, [pc, #424]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	4b64      	ldr	r3, [pc, #400]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d908      	bls.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	495e      	ldr	r1, [pc, #376]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d010      	beq.n	8004b4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d908      	bls.n	8004b4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b3a:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	4953      	ldr	r1, [pc, #332]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d908      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f023 020f 	bic.w	r2, r3, #15
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4947      	ldr	r1, [pc, #284]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d055      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	4940      	ldr	r1, [pc, #256]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba0:	4b3c      	ldr	r3, [pc, #240]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d121      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0f6      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb8:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d115      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0ea      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bd0:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0de      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be0:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0d6      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f023 0207 	bic.w	r2, r3, #7
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4925      	ldr	r1, [pc, #148]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7fc fdef 	bl	80017e4 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0a:	f7fc fdeb 	bl	80017e4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0be      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d1eb      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d208      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f023 020f 	bic.w	r2, r3, #15
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	490e      	ldr	r1, [pc, #56]	; (8004c94 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d214      	bcs.n	8004c98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 020f 	bic.w	r2, r3, #15
 8004c76:	4906      	ldr	r1, [pc, #24]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <HAL_RCC_ClockConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e086      	b.n	8004d9e <HAL_RCC_ClockConfig+0x34e>
 8004c90:	52002000 	.word	0x52002000
 8004c94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	4b3f      	ldr	r3, [pc, #252]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d208      	bcs.n	8004cc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cb4:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	4939      	ldr	r1, [pc, #228]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d208      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ce2:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	492e      	ldr	r1, [pc, #184]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	4b28      	ldr	r3, [pc, #160]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d208      	bcs.n	8004d22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4922      	ldr	r1, [pc, #136]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d208      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4917      	ldr	r1, [pc, #92]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d50:	f000 f834 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	4912      	ldr	r1, [pc, #72]	; (8004dac <HAL_RCC_ClockConfig+0x35c>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_RCC_ClockConfig+0x358>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <HAL_RCC_ClockConfig+0x35c>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x360>)
 8004d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d88:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <HAL_RCC_ClockConfig+0x364>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x368>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fc f908 	bl	8000fa8 <HAL_InitTick>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
 8004dac:	0800ccd4 	.word	0x0800ccd4
 8004db0:	24000004 	.word	0x24000004
 8004db4:	24000000 	.word	0x24000000
 8004db8:	24000008 	.word	0x24000008

08004dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b089      	sub	sp, #36	; 0x24
 8004dc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc2:	4bb3      	ldr	r3, [pc, #716]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dca:	2b18      	cmp	r3, #24
 8004dcc:	f200 8155 	bhi.w	800507a <HAL_RCC_GetSysClockFreq+0x2be>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	0800507b 	.word	0x0800507b
 8004de0:	0800507b 	.word	0x0800507b
 8004de4:	0800507b 	.word	0x0800507b
 8004de8:	0800507b 	.word	0x0800507b
 8004dec:	0800507b 	.word	0x0800507b
 8004df0:	0800507b 	.word	0x0800507b
 8004df4:	0800507b 	.word	0x0800507b
 8004df8:	08004e63 	.word	0x08004e63
 8004dfc:	0800507b 	.word	0x0800507b
 8004e00:	0800507b 	.word	0x0800507b
 8004e04:	0800507b 	.word	0x0800507b
 8004e08:	0800507b 	.word	0x0800507b
 8004e0c:	0800507b 	.word	0x0800507b
 8004e10:	0800507b 	.word	0x0800507b
 8004e14:	0800507b 	.word	0x0800507b
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	0800507b 	.word	0x0800507b
 8004e20:	0800507b 	.word	0x0800507b
 8004e24:	0800507b 	.word	0x0800507b
 8004e28:	0800507b 	.word	0x0800507b
 8004e2c:	0800507b 	.word	0x0800507b
 8004e30:	0800507b 	.word	0x0800507b
 8004e34:	0800507b 	.word	0x0800507b
 8004e38:	08004e6f 	.word	0x08004e6f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e3c:	4b94      	ldr	r3, [pc, #592]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e48:	4b91      	ldr	r3, [pc, #580]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	4a90      	ldr	r2, [pc, #576]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e5a:	e111      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e5c:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e5e:	61bb      	str	r3, [r7, #24]
    break;
 8004e60:	e10e      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e62:	4b8d      	ldr	r3, [pc, #564]	; (8005098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e64:	61bb      	str	r3, [r7, #24]
    break;
 8004e66:	e10b      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e68:	4b8c      	ldr	r3, [pc, #560]	; (800509c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e6a:	61bb      	str	r3, [r7, #24]
    break;
 8004e6c:	e108      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e78:	4b85      	ldr	r3, [pc, #532]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e84:	4b82      	ldr	r3, [pc, #520]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e8e:	4b80      	ldr	r3, [pc, #512]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80e1 	beq.w	8005074 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	f000 8083 	beq.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x204>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	f200 80a1 	bhi.w	8005004 <HAL_RCC_GetSysClockFreq+0x248>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x114>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d056      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ece:	e099      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed0:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02d      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004edc:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a6b      	ldr	r2, [pc, #428]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f1a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f36:	e087      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b51      	ldr	r3, [pc, #324]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f5e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7a:	e065      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b40      	ldr	r3, [pc, #256]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fbe:	e043      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050ac <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005002:	e021      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a02 	vldr	s12, [r7, #8]
 800502a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005046:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	0a5b      	lsrs	r3, r3, #9
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	3301      	adds	r3, #1
 8005054:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005060:	edd7 6a07 	vldr	s13, [r7, #28]
 8005064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506c:	ee17 3a90 	vmov	r3, s15
 8005070:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005072:	e005      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    break;
 8005078:	e002      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800507c:	61bb      	str	r3, [r7, #24]
    break;
 800507e:	bf00      	nop
  }

  return sysclockfreq;
 8005080:	69bb      	ldr	r3, [r7, #24]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	03d09000 	.word	0x03d09000
 8005098:	003d0900 	.word	0x003d0900
 800509c:	017d7840 	.word	0x017d7840
 80050a0:	46000000 	.word	0x46000000
 80050a4:	4c742400 	.word	0x4c742400
 80050a8:	4a742400 	.word	0x4a742400
 80050ac:	4bbebc20 	.word	0x4bbebc20

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050b6:	f7ff fe81 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_GetHCLKFreq+0x50>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490f      	ldr	r1, [pc, #60]	; (8005104 <HAL_RCC_GetHCLKFreq+0x54>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	fa22 f303 	lsr.w	r3, r2, r3
 80050d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <HAL_RCC_GetHCLKFreq+0x50>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_RCC_GetHCLKFreq+0x54>)
 80050de:	5cd3      	ldrb	r3, [r2, r3]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <HAL_RCC_GetHCLKFreq+0x58>)
 80050ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <HAL_RCC_GetHCLKFreq+0x5c>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <HAL_RCC_GetHCLKFreq+0x58>)
 80050f6:	681b      	ldr	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58024400 	.word	0x58024400
 8005104:	0800ccd4 	.word	0x0800ccd4
 8005108:	24000004 	.word	0x24000004
 800510c:	24000000 	.word	0x24000000

08005110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005114:	f7ff ffcc 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400
 8005138:	0800ccd4 	.word	0x0800ccd4

0800513c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005140:	f7ff ffb6 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	58024400 	.word	0x58024400
 8005164:	0800ccd4 	.word	0x0800ccd4

08005168 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	223f      	movs	r2, #63	; 0x3f
 8005176:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0207 	and.w	r2, r3, #7
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80051a8:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_GetClockConfig+0x7c>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetClockConfig+0x80>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	58024400 	.word	0x58024400
 80051e8:	52002000 	.word	0x52002000

080051ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051f4:	2300      	movs	r3, #0
 80051f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f8:	2300      	movs	r3, #0
 80051fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d03f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005210:	d02a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005212:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005216:	d824      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521c:	d018      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005222:	d81e      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d007      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800522e:	e018      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4ba3      	ldr	r3, [pc, #652]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4aa2      	ldr	r2, [pc, #648]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800523c:	e015      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2102      	movs	r1, #2
 8005244:	4618      	mov	r0, r3
 8005246:	f001 f9d5 	bl	80065f4 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800524e:	e00c      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3324      	adds	r3, #36	; 0x24
 8005254:	2102      	movs	r1, #2
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fa7e 	bl	8006758 <RCCEx_PLL3_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
      break;
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005270:	4b93      	ldr	r3, [pc, #588]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800527c:	4990      	ldr	r1, [pc, #576]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800527e:	4313      	orrs	r3, r2
 8005280:	650b      	str	r3, [r1, #80]	; 0x50
 8005282:	e001      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d03d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	2b04      	cmp	r3, #4
 800529a:	d826      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052c7 	.word	0x080052c7
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052f1 	.word	0x080052f1
 80052b4:	080052f1 	.word	0x080052f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b8:	4b81      	ldr	r3, [pc, #516]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a80      	ldr	r2, [pc, #512]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052c4:	e015      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f991 	bl	80065f4 <RCCEx_PLL2_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052d6:	e00c      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fa3a 	bl	8006758 <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052e8:	e003      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
      break;
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80052f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f8:	4b71      	ldr	r3, [pc, #452]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	f023 0207 	bic.w	r2, r3, #7
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	496e      	ldr	r1, [pc, #440]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	650b      	str	r3, [r1, #80]	; 0x50
 800530a:	e001      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d042      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d02b      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532a:	d825      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800532c:	2bc0      	cmp	r3, #192	; 0xc0
 800532e:	d028      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005330:	2bc0      	cmp	r3, #192	; 0xc0
 8005332:	d821      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d016      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d81d      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d007      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005344:	e018      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005346:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	4a5d      	ldr	r2, [pc, #372]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800534c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005352:	e017      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f001 f94a 	bl	80065f4 <RCCEx_PLL2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005364:	e00e      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3324      	adds	r3, #36	; 0x24
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f001 f9f3 	bl	8006758 <RCCEx_PLL3_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
      break;
 800537c:	e002      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800538a:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	494a      	ldr	r1, [pc, #296]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005398:	4313      	orrs	r3, r2
 800539a:	650b      	str	r3, [r1, #80]	; 0x50
 800539c:	e001      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d049      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b8:	d030      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80053ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053be:	d82a      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053c4:	d02c      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80053c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053ca:	d824      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d0:	d018      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d6:	d81e      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80053dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e0:	d007      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80053e2:	e018      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e4:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a35      	ldr	r2, [pc, #212]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053f0:	e017      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f8fb 	bl	80065f4 <RCCEx_PLL2_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005402:	e00e      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3324      	adds	r3, #36	; 0x24
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f9a4 	bl	8006758 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005414:	e005      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	e002      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005436:	4922      	ldr	r1, [pc, #136]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	658b      	str	r3, [r1, #88]	; 0x58
 800543c:	e001      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04b      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005458:	d030      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800545a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545e:	d82a      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005460:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005464:	d02e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005466:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800546a:	d824      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800546c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005470:	d018      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005476:	d81e      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800547c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005480:	d007      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005482:	e018      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005490:	e019      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f8ab 	bl	80065f4 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054a2:	e010      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3324      	adds	r3, #36	; 0x24
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f954 	bl	8006758 <RCCEx_PLL3_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054b4:	e007      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ba:	e004      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80054bc:	bf00      	nop
 80054be:	e002      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80054c0:	58024400 	.word	0x58024400
      break;
 80054c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054cc:	4b99      	ldr	r3, [pc, #612]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054da:	4996      	ldr	r1, [pc, #600]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	658b      	str	r3, [r1, #88]	; 0x58
 80054e0:	e001      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d032      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f6:	2b30      	cmp	r3, #48	; 0x30
 80054f8:	d01c      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80054fa:	2b30      	cmp	r3, #48	; 0x30
 80054fc:	d817      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d00c      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005502:	2b20      	cmp	r3, #32
 8005504:	d813      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d016      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800550a:	2b10      	cmp	r3, #16
 800550c:	d10f      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800550e:	4b89      	ldr	r3, [pc, #548]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	4a88      	ldr	r2, [pc, #544]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800551a:	e00e      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f866 	bl	80065f4 <RCCEx_PLL2_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800552c:	e005      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
      break;
 8005532:	e002      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005540:	4b7c      	ldr	r3, [pc, #496]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554c:	4979      	ldr	r1, [pc, #484]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800554e:	4313      	orrs	r3, r2
 8005550:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005552:	e001      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d047      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800556c:	d030      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800556e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005572:	d82a      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005578:	d02c      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800557a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800557e:	d824      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005584:	d018      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558a:	d81e      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005596:	e018      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005598:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055a4:	e017      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f821 	bl	80065f4 <RCCEx_PLL2_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055b6:	e00e      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f8ca 	bl	8006758 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055c8:	e005      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80055d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055dc:	4b55      	ldr	r3, [pc, #340]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	4952      	ldr	r1, [pc, #328]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	650b      	str	r3, [r1, #80]	; 0x50
 80055ee:	e001      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d049      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005608:	d02e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800560a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800560e:	d828      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005614:	d02a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800561a:	d822      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800561c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005620:	d026      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005626:	d81c      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562c:	d010      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800562e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005632:	d816      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01d      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d111      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	2101      	movs	r1, #1
 8005644:	4618      	mov	r0, r3
 8005646:	f000 ffd5 	bl	80065f4 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800564e:	e012      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	2101      	movs	r1, #1
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f87e 	bl	8006758 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005660:	e009      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
      break;
 8005666:	e006      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005668:	bf00      	nop
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800567c:	4b2d      	ldr	r3, [pc, #180]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	492a      	ldr	r1, [pc, #168]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800568a:	4313      	orrs	r3, r2
 800568c:	650b      	str	r3, [r1, #80]	; 0x50
 800568e:	e001      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d04d      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056aa:	d02e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80056ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056b0:	d828      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d02a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056bc:	d822      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056c2:	d026      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80056c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056c8:	d81c      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d010      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80056d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d4:	d816      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80056da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056de:	d111      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	2101      	movs	r1, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff84 	bl	80065f4 <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056f0:	e012      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3324      	adds	r3, #36	; 0x24
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f82d 	bl	8006758 <RCCEx_PLL3_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005702:	e009      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
      break;
 8005708:	e006      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800570a:	bf00      	nop
 800570c:	e004      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800572c:	4901      	ldr	r1, [pc, #4]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800572e:	4313      	orrs	r3, r2
 8005730:	658b      	str	r3, [r1, #88]	; 0x58
 8005732:	e003      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d02f      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005750:	d00e      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005756:	d814      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800575c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005760:	d10f      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005762:	4baf      	ldr	r3, [pc, #700]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	4aae      	ldr	r2, [pc, #696]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800576c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	2101      	movs	r1, #1
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ff3c 	bl	80065f4 <RCCEx_PLL2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
      break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005790:	4ba3      	ldr	r3, [pc, #652]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	49a0      	ldr	r1, [pc, #640]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	650b      	str	r3, [r1, #80]	; 0x50
 80057a2:	e001      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d032      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d81b      	bhi.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057d5 	.word	0x080057d5
 80057cc:	080057e3 	.word	0x080057e3
 80057d0:	080057fb 	.word	0x080057fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a91      	ldr	r2, [pc, #580]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 ff03 	bl	80065f4 <RCCEx_PLL2_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057f2:	e003      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80057fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005802:	4b87      	ldr	r3, [pc, #540]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f023 0203 	bic.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	4984      	ldr	r1, [pc, #528]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005810:	4313      	orrs	r3, r2
 8005812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005814:	e001      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8086 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005828:	4b7e      	ldr	r3, [pc, #504]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7d      	ldr	r2, [pc, #500]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005834:	f7fb ffd6 	bl	80017e4 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583a:	e009      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fb ffd2 	bl	80017e4 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d902      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	75fb      	strb	r3, [r7, #23]
        break;
 800584e:	e005      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005850:	4b74      	ldr	r3, [pc, #464]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ef      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d166      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005862:	4b6f      	ldr	r3, [pc, #444]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800586c:	4053      	eors	r3, r2
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005876:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005880:	4b67      	ldr	r3, [pc, #412]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	4a66      	ldr	r2, [pc, #408]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800588c:	4b64      	ldr	r3, [pc, #400]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	4a63      	ldr	r2, [pc, #396]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005898:	4a61      	ldr	r2, [pc, #388]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a8:	d115      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fb ff9b 	bl	80017e4 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058b0:	e00b      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fb ff97 	bl	80017e4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d902      	bls.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	75fb      	strb	r3, [r7, #23]
            break;
 80058c8:	e005      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ca:	4b55      	ldr	r3, [pc, #340]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0ed      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d126      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ea:	d10d      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80058ec:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058fa:	0919      	lsrs	r1, r3, #4
 80058fc:	4b4a      	ldr	r3, [pc, #296]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80058fe:	400b      	ands	r3, r1
 8005900:	4947      	ldr	r1, [pc, #284]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005902:	4313      	orrs	r3, r2
 8005904:	610b      	str	r3, [r1, #16]
 8005906:	e005      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005908:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	4a44      	ldr	r2, [pc, #272]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800590e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005912:	6113      	str	r3, [r2, #16]
 8005914:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005922:	493f      	ldr	r1, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005924:	4313      	orrs	r3, r2
 8005926:	670b      	str	r3, [r1, #112]	; 0x70
 8005928:	e004      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
 800592e:	e001      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8085 	beq.w	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005946:	2b28      	cmp	r3, #40	; 0x28
 8005948:	d866      	bhi.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005a2d 	.word	0x08005a2d
 8005954:	08005a19 	.word	0x08005a19
 8005958:	08005a19 	.word	0x08005a19
 800595c:	08005a19 	.word	0x08005a19
 8005960:	08005a19 	.word	0x08005a19
 8005964:	08005a19 	.word	0x08005a19
 8005968:	08005a19 	.word	0x08005a19
 800596c:	08005a19 	.word	0x08005a19
 8005970:	080059f5 	.word	0x080059f5
 8005974:	08005a19 	.word	0x08005a19
 8005978:	08005a19 	.word	0x08005a19
 800597c:	08005a19 	.word	0x08005a19
 8005980:	08005a19 	.word	0x08005a19
 8005984:	08005a19 	.word	0x08005a19
 8005988:	08005a19 	.word	0x08005a19
 800598c:	08005a19 	.word	0x08005a19
 8005990:	08005a07 	.word	0x08005a07
 8005994:	08005a19 	.word	0x08005a19
 8005998:	08005a19 	.word	0x08005a19
 800599c:	08005a19 	.word	0x08005a19
 80059a0:	08005a19 	.word	0x08005a19
 80059a4:	08005a19 	.word	0x08005a19
 80059a8:	08005a19 	.word	0x08005a19
 80059ac:	08005a19 	.word	0x08005a19
 80059b0:	08005a2d 	.word	0x08005a2d
 80059b4:	08005a19 	.word	0x08005a19
 80059b8:	08005a19 	.word	0x08005a19
 80059bc:	08005a19 	.word	0x08005a19
 80059c0:	08005a19 	.word	0x08005a19
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a19 	.word	0x08005a19
 80059d8:	08005a19 	.word	0x08005a19
 80059dc:	08005a19 	.word	0x08005a19
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	08005a2d 	.word	0x08005a2d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	2101      	movs	r1, #1
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fdfa 	bl	80065f4 <RCCEx_PLL2_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a04:	e013      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3324      	adds	r3, #36	; 0x24
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fea3 	bl	8006758 <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a16:	e00a      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1c:	e007      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	58024800 	.word	0x58024800
 8005a28:	00ffffcf 	.word	0x00ffffcf
      break;
 8005a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a34:	4b96      	ldr	r3, [pc, #600]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a40:	4993      	ldr	r1, [pc, #588]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	654b      	str	r3, [r1, #84]	; 0x54
 8005a46:	e001      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d038      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d821      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005aab 	.word	0x08005aab
 8005a6c:	08005a81 	.word	0x08005a81
 8005a70:	08005a93 	.word	0x08005a93
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005aab 	.word	0x08005aab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fdb4 	bl	80065f4 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a90:	e00c      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3324      	adds	r3, #36	; 0x24
 8005a96:	2101      	movs	r1, #1
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fe5d 	bl	8006758 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ab2:	4b77      	ldr	r3, [pc, #476]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	f023 0207 	bic.w	r2, r3, #7
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	4974      	ldr	r1, [pc, #464]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ac4:	e001      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d821      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b2b 	.word	0x08005b2b
 8005aec:	08005b01 	.word	0x08005b01
 8005af0:	08005b13 	.word	0x08005b13
 8005af4:	08005b2b 	.word	0x08005b2b
 8005af8:	08005b2b 	.word	0x08005b2b
 8005afc:	08005b2b 	.word	0x08005b2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fd74 	bl	80065f4 <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b10:	e00c      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3324      	adds	r3, #36	; 0x24
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fe1d 	bl	8006758 <RCCEx_PLL3_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b32:	4b57      	ldr	r3, [pc, #348]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	f023 0207 	bic.w	r2, r3, #7
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	4953      	ldr	r1, [pc, #332]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	658b      	str	r3, [r1, #88]	; 0x58
 8005b46:	e001      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d04b      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b62:	d02e      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b68:	d828      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d02a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d822      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b7a:	d026      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005b7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b80:	d81c      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b86:	d010      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8c:	d816      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01d      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b96:	d111      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fd28 	bl	80065f4 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ba8:	e012      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3324      	adds	r3, #36	; 0x24
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fdd1 	bl	8006758 <RCCEx_PLL3_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bba:	e009      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc0:	e006      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e004      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005bca:	bf00      	nop
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd6:	4b2e      	ldr	r3, [pc, #184]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be4:	492a      	ldr	r1, [pc, #168]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	654b      	str	r3, [r1, #84]	; 0x54
 8005bea:	e001      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d04d      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c06:	d02e      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005c08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c0c:	d828      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d02a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d822      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c1e:	d026      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c24:	d81c      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c30:	d816      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01d      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fcd6 	bl	80065f4 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c4c:	e012      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	2102      	movs	r1, #2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fd7f 	bl	8006758 <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c5e:	e009      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c88:	4901      	ldr	r1, [pc, #4]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d04b      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005caa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cae:	d02e      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005cb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cb4:	d828      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d02a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d822      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005cc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cc6:	d026      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005cc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ccc:	d81c      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd8:	d816      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01d      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d111      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fc82 	bl	80065f4 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e012      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fd2b 	bl	8006758 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d06:	e009      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d22:	4b9d      	ldr	r3, [pc, #628]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d30:	4999      	ldr	r1, [pc, #612]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	658b      	str	r3, [r1, #88]	; 0x58
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d10a      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fcfc 	bl	8006758 <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d6a:	4b8b      	ldr	r3, [pc, #556]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d78:	4987      	ldr	r1, [pc, #540]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d94:	d10a      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fcdb 	bl	8006758 <RCCEx_PLL3_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dac:	4b7a      	ldr	r3, [pc, #488]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	4977      	ldr	r1, [pc, #476]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d034      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd6:	d01d      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ddc:	d817      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d009      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005de8:	e011      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fbff 	bl	80065f4 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	2102      	movs	r1, #2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fca8 	bl	8006758 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e1c:	4b5e      	ldr	r3, [pc, #376]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e2a:	495b      	ldr	r1, [pc, #364]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8005e30:	e001      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d033      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e4c:	d01c      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e52:	d816      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e58:	d003      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5e:	d007      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005e60:	e00f      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e62:	4b4d      	ldr	r3, [pc, #308]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4a4c      	ldr	r2, [pc, #304]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e6e:	e00c      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3324      	adds	r3, #36	; 0x24
 8005e74:	2101      	movs	r1, #1
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fc6e 	bl	8006758 <RCCEx_PLL3_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e80:	e003      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
      break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e90:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9e:	493e      	ldr	r1, [pc, #248]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ea4:	e001      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d029      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d007      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005ec4:	e00f      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec6:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	4a33      	ldr	r2, [pc, #204]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ed2:	e00b      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fb8a 	bl	80065f4 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ee4:	e002      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ef2:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efe:	4926      	ldr	r1, [pc, #152]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f04:	e001      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3324      	adds	r3, #36	; 0x24
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fc1b 	bl	8006758 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d033      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f40:	d017      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f46:	d811      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d013      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f52:	d80b      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d106      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f6a:	e007      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f70:	e004      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8e:	4902      	ldr	r1, [pc, #8]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	654b      	str	r3, [r1, #84]	; 0x54
 8005f94:	e004      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005f96:	bf00      	nop
 8005f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fac:	4b31      	ldr	r3, [pc, #196]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	492e      	ldr	r1, [pc, #184]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fd8:	4926      	ldr	r1, [pc, #152]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff6:	491f      	ldr	r1, [pc, #124]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800600e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006012:	6113      	str	r3, [r2, #16]
 8006014:	4b17      	ldr	r3, [pc, #92]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800601e:	4915      	ldr	r1, [pc, #84]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da08      	bge.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006038:	490e      	ldr	r1, [pc, #56]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800603a:	4313      	orrs	r3, r2
 800603c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	4906      	ldr	r1, [pc, #24]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800605a:	4313      	orrs	r3, r2
 800605c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800605e:	7dbb      	ldrb	r3, [r7, #22]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400

08006078 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800607c:	f7ff f818 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	091b      	lsrs	r3, r3, #4
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800ccd4 	.word	0x0800ccd4

080060a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060ac:	4ba1      	ldr	r3, [pc, #644]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060b6:	4b9f      	ldr	r3, [pc, #636]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	0b1b      	lsrs	r3, r3, #12
 80060bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060c2:	4b9c      	ldr	r3, [pc, #624]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060ce:	4b99      	ldr	r3, [pc, #612]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8111 	beq.w	8006314 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	f000 8083 	beq.w	8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	f200 80a1 	bhi.w	8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d056      	beq.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800610e:	e099      	b.n	8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006110:	4b88      	ldr	r3, [pc, #544]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d02d      	beq.n	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800611c:	4b85      	ldr	r3, [pc, #532]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	4a84      	ldr	r2, [pc, #528]	; (8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b7b      	ldr	r3, [pc, #492]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a03 	vldr	s12, [r7, #12]
 800615a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006176:	e087      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b6a      	ldr	r3, [pc, #424]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a03 	vldr	s12, [r7, #12]
 800619e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ba:	e065      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ce:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fe:	e043      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b48      	ldr	r3, [pc, #288]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a03 	vldr	s12, [r7, #12]
 8006226:	eddf 5a45 	vldr	s11, [pc, #276]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006242:	e021      	b.n	8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a03 	vldr	s12, [r7, #12]
 800626a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006286:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006288:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	0a5b      	lsrs	r3, r3, #9
 800628e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062b6:	4b1f      	ldr	r3, [pc, #124]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062dc:	ee17 2a90 	vmov	r2, s15
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	0e1b      	lsrs	r3, r3, #24
 80062ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800630a:	ee17 2a90 	vmov	r2, s15
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006312:	e008      	b.n	8006326 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
}
 8006326:	bf00      	nop
 8006328:	3724      	adds	r7, #36	; 0x24
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	58024400 	.word	0x58024400
 8006338:	03d09000 	.word	0x03d09000
 800633c:	46000000 	.word	0x46000000
 8006340:	4c742400 	.word	0x4c742400
 8006344:	4a742400 	.word	0x4a742400
 8006348:	4bbebc20 	.word	0x4bbebc20

0800634c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	; 0x24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006354:	4ba1      	ldr	r3, [pc, #644]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800635e:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	0d1b      	lsrs	r3, r3, #20
 8006364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006368:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800636a:	4b9c      	ldr	r3, [pc, #624]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006376:	4b99      	ldr	r3, [pc, #612]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	08db      	lsrs	r3, r3, #3
 800637c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8111 	beq.w	80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b02      	cmp	r3, #2
 800639e:	f000 8083 	beq.w	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f200 80a1 	bhi.w	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d056      	beq.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063b6:	e099      	b.n	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02d      	beq.n	8006420 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c4:	4b85      	ldr	r3, [pc, #532]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	4a84      	ldr	r2, [pc, #528]	; (80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ee:	4b7b      	ldr	r3, [pc, #492]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006402:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800641e:	e087      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006462:	e065      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a6:	e043      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b48      	ldr	r3, [pc, #288]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	e021      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006530:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	0a5b      	lsrs	r3, r3, #9
 8006536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654a:	edd7 6a07 	vldr	s13, [r7, #28]
 800654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006556:	ee17 2a90 	vmov	r2, s15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006578:	edd7 6a07 	vldr	s13, [r7, #28]
 800657c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006584:	ee17 2a90 	vmov	r2, s15
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800658c:	4b13      	ldr	r3, [pc, #76]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	0e1b      	lsrs	r3, r3, #24
 8006592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b2:	ee17 2a90 	vmov	r2, s15
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065ba:	e008      	b.n	80065ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	bf00      	nop
 80065d0:	3724      	adds	r7, #36	; 0x24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
 80065e0:	03d09000 	.word	0x03d09000
 80065e4:	46000000 	.word	0x46000000
 80065e8:	4c742400 	.word	0x4c742400
 80065ec:	4a742400 	.word	0x4a742400
 80065f0:	4bbebc20 	.word	0x4bbebc20

080065f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006602:	4b53      	ldr	r3, [pc, #332]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b03      	cmp	r3, #3
 800660c:	d101      	bne.n	8006612 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e099      	b.n	8006746 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006612:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a4e      	ldr	r2, [pc, #312]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800661c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661e:	f7fb f8e1 	bl	80017e4 <HAL_GetTick>
 8006622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006624:	e008      	b.n	8006638 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006626:	f7fb f8dd 	bl	80017e4 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e086      	b.n	8006746 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006638:	4b45      	ldr	r3, [pc, #276]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006644:	4b42      	ldr	r3, [pc, #264]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	493f      	ldr	r1, [pc, #252]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	628b      	str	r3, [r1, #40]	; 0x28
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	3b01      	subs	r3, #1
 800665e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	3b01      	subs	r3, #1
 8006668:	025b      	lsls	r3, r3, #9
 800666a:	b29b      	uxth	r3, r3
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	3b01      	subs	r3, #1
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006688:	4931      	ldr	r1, [pc, #196]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 800668a:	4313      	orrs	r3, r2
 800668c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800668e:	4b30      	ldr	r3, [pc, #192]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	492d      	ldr	r1, [pc, #180]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	f023 0220 	bic.w	r2, r3, #32
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	4928      	ldr	r1, [pc, #160]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	4a26      	ldr	r2, [pc, #152]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	f023 0310 	bic.w	r3, r3, #16
 80066bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <RCCEx_PLL2_Config+0x160>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	69d2      	ldr	r2, [r2, #28]
 80066ca:	00d2      	lsls	r2, r2, #3
 80066cc:	4920      	ldr	r1, [pc, #128]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066d2:	4b1f      	ldr	r3, [pc, #124]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066d8:	f043 0310 	orr.w	r3, r3, #16
 80066dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066e4:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066f0:	e00f      	b.n	8006712 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	4a14      	ldr	r2, [pc, #80]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 80066fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006704:	e005      	b.n	8006712 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006706:	4b12      	ldr	r3, [pc, #72]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	4a11      	ldr	r2, [pc, #68]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 800670c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006710:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a0e      	ldr	r2, [pc, #56]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 8006718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800671c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fb f861 	bl	80017e4 <HAL_GetTick>
 8006722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006724:	e008      	b.n	8006738 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006726:	f7fb f85d 	bl	80017e4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <RCCEx_PLL2_Config+0x15c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	58024400 	.word	0x58024400
 8006754:	ffff0007 	.word	0xffff0007

08006758 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006766:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b03      	cmp	r3, #3
 8006770:	d101      	bne.n	8006776 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e099      	b.n	80068aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006776:	4b4f      	ldr	r3, [pc, #316]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a4e      	ldr	r2, [pc, #312]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800677c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006782:	f7fb f82f 	bl	80017e4 <HAL_GetTick>
 8006786:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006788:	e008      	b.n	800679c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800678a:	f7fb f82b 	bl	80017e4 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e086      	b.n	80068aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800679c:	4b45      	ldr	r3, [pc, #276]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f0      	bne.n	800678a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067a8:	4b42      	ldr	r3, [pc, #264]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	051b      	lsls	r3, r3, #20
 80067b6:	493f      	ldr	r1, [pc, #252]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	628b      	str	r3, [r1, #40]	; 0x28
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	025b      	lsls	r3, r3, #9
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	061b      	lsls	r3, r3, #24
 80067e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067ec:	4931      	ldr	r1, [pc, #196]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067f2:	4b30      	ldr	r3, [pc, #192]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	492d      	ldr	r1, [pc, #180]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006804:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4928      	ldr	r1, [pc, #160]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a26      	ldr	r2, [pc, #152]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800681c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006822:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <RCCEx_PLL3_Config+0x160>)
 8006828:	4013      	ands	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	69d2      	ldr	r2, [r2, #28]
 800682e:	00d2      	lsls	r2, r2, #3
 8006830:	4920      	ldr	r1, [pc, #128]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006836:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	4a1e      	ldr	r2, [pc, #120]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800683c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800684e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006854:	e00f      	b.n	8006876 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d106      	bne.n	800686a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800685c:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006868:	e005      	b.n	8006876 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	4a11      	ldr	r2, [pc, #68]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006870:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006882:	f7fa ffaf 	bl	80017e4 <HAL_GetTick>
 8006886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006888:	e008      	b.n	800689c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800688a:	f7fa ffab 	bl	80017e4 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e006      	b.n	80068aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <RCCEx_PLL3_Config+0x15c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58024400 	.word	0x58024400
 80068b8:	ffff0007 	.word	0xffff0007

080068bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e049      	b.n	8006962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f841 	bl	800696a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f000 fa00 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d001      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e054      	b.n	8006a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d022      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c2:	d01d      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d018      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x80>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d115      	bne.n	8006a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	4b19      	ldr	r3, [pc, #100]	; (8006a6c <HAL_TIM_Base_Start_IT+0xec>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b06      	cmp	r3, #6
 8006a10:	d015      	beq.n	8006a3e <HAL_TIM_Base_Start_IT+0xbe>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d011      	beq.n	8006a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e008      	b.n	8006a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e000      	b.n	8006a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40010400 	.word	0x40010400
 8006a64:	40001800 	.word	0x40001800
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	00010007 	.word	0x00010007

08006a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d122      	bne.n	8006acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d11b      	bne.n	8006acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0202 	mvn.w	r2, #2
 8006a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f905 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8f7 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f908 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d122      	bne.n	8006b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d11b      	bne.n	8006b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0204 	mvn.w	r2, #4
 8006af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f8db 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006b0c:	e005      	b.n	8006b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8cd 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f8de 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d122      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d11b      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0208 	mvn.w	r2, #8
 8006b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f8b1 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006b60:	e005      	b.n	8006b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f8a3 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8b4 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d122      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d11b      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0210 	mvn.w	r2, #16
 8006b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f887 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006bb4:	e005      	b.n	8006bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f879 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f88a 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0201 	mvn.w	r2, #1
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7f9 ffc8 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b80      	cmp	r3, #128	; 0x80
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f914 	bl	8006e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2e:	d10e      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f907 	bl	8006e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d10e      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d107      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f838 	bl	8006cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d10e      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d107      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f06f 0220 	mvn.w	r2, #32
 8006c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8c7 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a40      	ldr	r2, [pc, #256]	; (8006e14 <TIM_Base_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a3d      	ldr	r2, [pc, #244]	; (8006e18 <TIM_Base_SetConfig+0x118>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <TIM_Base_SetConfig+0x11c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a3b      	ldr	r2, [pc, #236]	; (8006e20 <TIM_Base_SetConfig+0x120>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a3a      	ldr	r2, [pc, #232]	; (8006e24 <TIM_Base_SetConfig+0x124>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d108      	bne.n	8006d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a2f      	ldr	r2, [pc, #188]	; (8006e14 <TIM_Base_SetConfig+0x114>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d01f      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d01b      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2c      	ldr	r2, [pc, #176]	; (8006e18 <TIM_Base_SetConfig+0x118>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d017      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	; (8006e1c <TIM_Base_SetConfig+0x11c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <TIM_Base_SetConfig+0x120>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00f      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <TIM_Base_SetConfig+0x124>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00b      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <TIM_Base_SetConfig+0x128>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d007      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_Base_SetConfig+0x9a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a26      	ldr	r2, [pc, #152]	; (8006e30 <TIM_Base_SetConfig+0x130>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d108      	bne.n	8006dac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <TIM_Base_SetConfig+0x114>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00f      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <TIM_Base_SetConfig+0x124>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00b      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a11      	ldr	r2, [pc, #68]	; (8006e28 <TIM_Base_SetConfig+0x128>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d007      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a10      	ldr	r2, [pc, #64]	; (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a0f      	ldr	r2, [pc, #60]	; (8006e30 <TIM_Base_SetConfig+0x130>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d103      	bne.n	8006e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	615a      	str	r2, [r3, #20]
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800
 8006e20:	40000c00 	.word	0x40000c00
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40014400 	.word	0x40014400
 8006e30:	40014800 	.word	0x40014800

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e042      	b.n	8006f08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7f9 feab 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2224      	movs	r2, #36	; 0x24
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fcd6 	bl	8007864 <UART_SetConfig>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e022      	b.n	8006f08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fa32 	bl	8008334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fab9 	bl	8008478 <UART_CheckIdleState>
 8006f06:	4603      	mov	r3, r0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	; 0x28
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	f040 8083 	bne.w	8007032 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Transmit+0x28>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e07b      	b.n	8007034 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Transmit+0x3a>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e074      	b.n	8007034 <HAL_UART_Transmit+0x124>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2221      	movs	r2, #33	; 0x21
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f62:	f7fa fc3f 	bl	80017e4 <HAL_GetTick>
 8006f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d108      	bne.n	8006f94 <HAL_UART_Transmit+0x84>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e003      	b.n	8006f9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006fa4:	e02c      	b.n	8007000 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 faac 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e039      	b.n	8007034 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	3302      	adds	r3, #2
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	e007      	b.n	8006fee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1cc      	bne.n	8006fa6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2200      	movs	r2, #0
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f001 fa79 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e006      	b.n	8007034 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e000      	b.n	8007034 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007032:	2302      	movs	r3, #2
  }
}
 8007034:	4618      	mov	r0, r3
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007050:	2b20      	cmp	r3, #32
 8007052:	d142      	bne.n	80070da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Receive_IT+0x24>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e03b      	b.n	80070dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_UART_Receive_IT+0x36>
 800706e:	2302      	movs	r3, #2
 8007070:	e034      	b.n	80070dc <HAL_UART_Receive_IT+0xa0>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <HAL_UART_Receive_IT+0xa8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01f      	beq.n	80070ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d018      	beq.n	80070ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	613b      	str	r3, [r7, #16]
   return(result);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	623b      	str	r3, [r7, #32]
 80070b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	69f9      	ldr	r1, [r7, #28]
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e6      	bne.n	8007098 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	461a      	mov	r2, r3
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f001 fae5 	bl	80086a0 <UART_Start_Receive_IT>
 80070d6:	4603      	mov	r3, r0
 80070d8:	e000      	b.n	80070dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3728      	adds	r7, #40	; 0x28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58000c00 	.word	0x58000c00

080070e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b0ba      	sub	sp, #232	; 0xe8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800710e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007112:	f640 030f 	movw	r3, #2063	; 0x80f
 8007116:	4013      	ands	r3, r2
 8007118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800711c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11b      	bne.n	800715c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d015      	beq.n	800715c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d105      	bne.n	8007148 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 835a 	beq.w	8007806 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
      }
      return;
 800715a:	e354      	b.n	8007806 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800715c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 811f 	beq.w	80073a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007166:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800716a:	4b8b      	ldr	r3, [pc, #556]	; (8007398 <HAL_UART_IRQHandler+0x2b0>)
 800716c:	4013      	ands	r3, r2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007176:	4b89      	ldr	r3, [pc, #548]	; (800739c <HAL_UART_IRQHandler+0x2b4>)
 8007178:	4013      	ands	r3, r2
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8112 	beq.w	80073a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d011      	beq.n	80071b0 <HAL_UART_IRQHandler+0xc8>
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d011      	beq.n	80071e0 <HAL_UART_IRQHandler+0xf8>
 80071bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2202      	movs	r2, #2
 80071ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d011      	beq.n	8007210 <HAL_UART_IRQHandler+0x128>
 80071ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2204      	movs	r2, #4
 80071fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007206:	f043 0202 	orr.w	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d017      	beq.n	800724c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007228:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800722c:	4b5a      	ldr	r3, [pc, #360]	; (8007398 <HAL_UART_IRQHandler+0x2b0>)
 800722e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2208      	movs	r2, #8
 800723a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007242:	f043 0208 	orr.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <HAL_UART_IRQHandler+0x196>
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800726c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 82c0 	beq.w	800780a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d013      	beq.n	80072be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d105      	bne.n	80072ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d005      	beq.n	80072e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d04f      	beq.n	8007382 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fb06 	bl	80088f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d141      	bne.n	800737a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3308      	adds	r3, #8
 80072fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800730c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007322:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800732e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800733a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1d9      	bne.n	80072f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d013      	beq.n	8007372 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734e:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <HAL_UART_IRQHandler+0x2b8>)
 8007350:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	4618      	mov	r0, r3
 8007358:	f7fb f9b6 	bl	80026c8 <HAL_DMA_Abort_IT>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e00f      	b.n	8007392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa60 	bl	8007838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00b      	b.n	8007392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa5c 	bl	8007838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e007      	b.n	8007392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa58 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007390:	e23b      	b.n	800780a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007392:	bf00      	nop
    return;
 8007394:	e239      	b.n	800780a <HAL_UART_IRQHandler+0x722>
 8007396:	bf00      	nop
 8007398:	10000001 	.word	0x10000001
 800739c:	04000120 	.word	0x04000120
 80073a0:	080089c1 	.word	0x080089c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	f040 81ce 	bne.w	800774a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 81c7 	beq.w	800774a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 81c0 	beq.w	800774a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2210      	movs	r2, #16
 80073d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	f040 813b 	bne.w	8007658 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a8b      	ldr	r2, [pc, #556]	; (8007618 <HAL_UART_IRQHandler+0x530>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d059      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a89      	ldr	r2, [pc, #548]	; (800761c <HAL_UART_IRQHandler+0x534>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d053      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a87      	ldr	r2, [pc, #540]	; (8007620 <HAL_UART_IRQHandler+0x538>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d04d      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a85      	ldr	r2, [pc, #532]	; (8007624 <HAL_UART_IRQHandler+0x53c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d047      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a83      	ldr	r2, [pc, #524]	; (8007628 <HAL_UART_IRQHandler+0x540>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d041      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a81      	ldr	r2, [pc, #516]	; (800762c <HAL_UART_IRQHandler+0x544>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d03b      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a7f      	ldr	r2, [pc, #508]	; (8007630 <HAL_UART_IRQHandler+0x548>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d035      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a7d      	ldr	r2, [pc, #500]	; (8007634 <HAL_UART_IRQHandler+0x54c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d02f      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7b      	ldr	r2, [pc, #492]	; (8007638 <HAL_UART_IRQHandler+0x550>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d029      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a79      	ldr	r2, [pc, #484]	; (800763c <HAL_UART_IRQHandler+0x554>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d023      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a77      	ldr	r2, [pc, #476]	; (8007640 <HAL_UART_IRQHandler+0x558>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a75      	ldr	r2, [pc, #468]	; (8007644 <HAL_UART_IRQHandler+0x55c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d017      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a73      	ldr	r2, [pc, #460]	; (8007648 <HAL_UART_IRQHandler+0x560>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d011      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a71      	ldr	r2, [pc, #452]	; (800764c <HAL_UART_IRQHandler+0x564>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00b      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6f      	ldr	r2, [pc, #444]	; (8007650 <HAL_UART_IRQHandler+0x568>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d005      	beq.n	80074a2 <HAL_UART_IRQHandler+0x3ba>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a6d      	ldr	r2, [pc, #436]	; (8007654 <HAL_UART_IRQHandler+0x56c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d105      	bne.n	80074ae <HAL_UART_IRQHandler+0x3c6>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	e004      	b.n	80074b8 <HAL_UART_IRQHandler+0x3d0>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 81a4 	beq.w	800780e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074d0:	429a      	cmp	r2, r3
 80074d2:	f080 819c 	bcs.w	800780e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	f000 8086 	beq.w	80075fa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007502:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800750a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800751c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007524:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1da      	bne.n	80074ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800755c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007560:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007564:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800756e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e1      	bne.n	8007538 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007598:	66fa      	str	r2, [r7, #108]	; 0x6c
 800759a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800759e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e3      	bne.n	8007574 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ca:	f023 0310 	bic.w	r3, r3, #16
 80075ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e4      	bne.n	80075ba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fa fd49 	bl	800208c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007606:	b29b      	uxth	r3, r3
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	b29b      	uxth	r3, r3
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f91c 	bl	800784c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007614:	e0fb      	b.n	800780e <HAL_UART_IRQHandler+0x726>
 8007616:	bf00      	nop
 8007618:	40020010 	.word	0x40020010
 800761c:	40020028 	.word	0x40020028
 8007620:	40020040 	.word	0x40020040
 8007624:	40020058 	.word	0x40020058
 8007628:	40020070 	.word	0x40020070
 800762c:	40020088 	.word	0x40020088
 8007630:	400200a0 	.word	0x400200a0
 8007634:	400200b8 	.word	0x400200b8
 8007638:	40020410 	.word	0x40020410
 800763c:	40020428 	.word	0x40020428
 8007640:	40020440 	.word	0x40020440
 8007644:	40020458 	.word	0x40020458
 8007648:	40020470 	.word	0x40020470
 800764c:	40020488 	.word	0x40020488
 8007650:	400204a0 	.word	0x400204a0
 8007654:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007664:	b29b      	uxth	r3, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80cc 	beq.w	8007812 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800767a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80c7 	beq.w	8007812 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
 80076a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e4      	bne.n	8007684 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	623b      	str	r3, [r7, #32]
   return(result);
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	4b54      	ldr	r3, [pc, #336]	; (8007820 <HAL_UART_IRQHandler+0x738>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076de:	633a      	str	r2, [r7, #48]	; 0x30
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e3      	bne.n	80076ba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	60fb      	str	r3, [r7, #12]
   return(result);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0310 	bic.w	r3, r3, #16
 800771a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	617b      	str	r3, [r7, #20]
   return(result);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e4      	bne.n	8007706 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800773c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f882 	bl	800784c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007748:	e063      	b.n	8007812 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800774a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <HAL_UART_IRQHandler+0x68c>
 8007756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800776a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fdc5 	bl	80092fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007772:	e051      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b00      	cmp	r3, #0
 800777e:	d014      	beq.n	80077aa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007788:	2b00      	cmp	r3, #0
 800778a:	d105      	bne.n	8007798 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800778c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779c:	2b00      	cmp	r3, #0
 800779e:	d03a      	beq.n	8007816 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
    }
    return;
 80077a8:	e035      	b.n	8007816 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <HAL_UART_IRQHandler+0x6e2>
 80077b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 f912 	bl	80089ec <UART_EndTransmit_IT>
    return;
 80077c8:	e026      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <HAL_UART_IRQHandler+0x702>
 80077d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fd9e 	bl	8009324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077e8:	e016      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d010      	beq.n	8007818 <HAL_UART_IRQHandler+0x730>
 80077f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0c      	bge.n	8007818 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fd86 	bl	8009310 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007804:	e008      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
      return;
 8007806:	bf00      	nop
 8007808:	e006      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
    return;
 800780a:	bf00      	nop
 800780c:	e004      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
      return;
 800780e:	bf00      	nop
 8007810:	e002      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
      return;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_UART_IRQHandler+0x730>
    return;
 8007816:	bf00      	nop
  }
}
 8007818:	37e8      	adds	r7, #232	; 0xe8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	effffffe 	.word	0xeffffffe

08007824 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007868:	b092      	sub	sp, #72	; 0x48
 800786a:	af00      	add	r7, sp, #0
 800786c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	431a      	orrs	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	431a      	orrs	r2, r3
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	4313      	orrs	r3, r2
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4bbe      	ldr	r3, [pc, #760]	; (8007b8c <UART_SetConfig+0x328>)
 8007894:	4013      	ands	r3, r2
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800789c:	430b      	orrs	r3, r1
 800789e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4ab3      	ldr	r2, [pc, #716]	; (8007b90 <UART_SetConfig+0x32c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078cc:	4313      	orrs	r3, r2
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	4baf      	ldr	r3, [pc, #700]	; (8007b94 <UART_SetConfig+0x330>)
 80078d8:	4013      	ands	r3, r2
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	f023 010f 	bic.w	r1, r3, #15
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4aa6      	ldr	r2, [pc, #664]	; (8007b98 <UART_SetConfig+0x334>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d177      	bne.n	80079f4 <UART_SetConfig+0x190>
 8007904:	4ba5      	ldr	r3, [pc, #660]	; (8007b9c <UART_SetConfig+0x338>)
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800790c:	2b28      	cmp	r3, #40	; 0x28
 800790e:	d86d      	bhi.n	80079ec <UART_SetConfig+0x188>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0xb4>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079ed 	.word	0x080079ed
 8007920:	080079ed 	.word	0x080079ed
 8007924:	080079ed 	.word	0x080079ed
 8007928:	080079ed 	.word	0x080079ed
 800792c:	080079ed 	.word	0x080079ed
 8007930:	080079ed 	.word	0x080079ed
 8007934:	080079ed 	.word	0x080079ed
 8007938:	080079c5 	.word	0x080079c5
 800793c:	080079ed 	.word	0x080079ed
 8007940:	080079ed 	.word	0x080079ed
 8007944:	080079ed 	.word	0x080079ed
 8007948:	080079ed 	.word	0x080079ed
 800794c:	080079ed 	.word	0x080079ed
 8007950:	080079ed 	.word	0x080079ed
 8007954:	080079ed 	.word	0x080079ed
 8007958:	080079cd 	.word	0x080079cd
 800795c:	080079ed 	.word	0x080079ed
 8007960:	080079ed 	.word	0x080079ed
 8007964:	080079ed 	.word	0x080079ed
 8007968:	080079ed 	.word	0x080079ed
 800796c:	080079ed 	.word	0x080079ed
 8007970:	080079ed 	.word	0x080079ed
 8007974:	080079ed 	.word	0x080079ed
 8007978:	080079d5 	.word	0x080079d5
 800797c:	080079ed 	.word	0x080079ed
 8007980:	080079ed 	.word	0x080079ed
 8007984:	080079ed 	.word	0x080079ed
 8007988:	080079ed 	.word	0x080079ed
 800798c:	080079ed 	.word	0x080079ed
 8007990:	080079ed 	.word	0x080079ed
 8007994:	080079ed 	.word	0x080079ed
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079ed 	.word	0x080079ed
 80079a0:	080079ed 	.word	0x080079ed
 80079a4:	080079ed 	.word	0x080079ed
 80079a8:	080079ed 	.word	0x080079ed
 80079ac:	080079ed 	.word	0x080079ed
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	080079ed 	.word	0x080079ed
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e222      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e21e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e21a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e216      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079dc:	2320      	movs	r3, #32
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e212      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079e4:	2340      	movs	r3, #64	; 0x40
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e20e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e20a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a69      	ldr	r2, [pc, #420]	; (8007ba0 <UART_SetConfig+0x33c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d130      	bne.n	8007a60 <UART_SetConfig+0x1fc>
 80079fe:	4b67      	ldr	r3, [pc, #412]	; (8007b9c <UART_SetConfig+0x338>)
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	d826      	bhi.n	8007a58 <UART_SetConfig+0x1f4>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <UART_SetConfig+0x1ac>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e1ec      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e1e8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e1e4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e1e0      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e1dc      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e1d8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e1d4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4f      	ldr	r2, [pc, #316]	; (8007ba4 <UART_SetConfig+0x340>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d130      	bne.n	8007acc <UART_SetConfig+0x268>
 8007a6a:	4b4c      	ldr	r3, [pc, #304]	; (8007b9c <UART_SetConfig+0x338>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	d826      	bhi.n	8007ac4 <UART_SetConfig+0x260>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <UART_SetConfig+0x218>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007a95 	.word	0x08007a95
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007aa5 	.word	0x08007aa5
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007abd 	.word	0x08007abd
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e1b6      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e1b2      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e1ae      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e1aa      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ab4:	2320      	movs	r3, #32
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e1a6      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e1a2      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e19e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a35      	ldr	r2, [pc, #212]	; (8007ba8 <UART_SetConfig+0x344>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d130      	bne.n	8007b38 <UART_SetConfig+0x2d4>
 8007ad6:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <UART_SetConfig+0x338>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d826      	bhi.n	8007b30 <UART_SetConfig+0x2cc>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <UART_SetConfig+0x284>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b01 	.word	0x08007b01
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e180      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e17c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e178      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e174      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b20:	2320      	movs	r3, #32
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e170      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b28:	2340      	movs	r3, #64	; 0x40
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e16c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e168      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1b      	ldr	r2, [pc, #108]	; (8007bac <UART_SetConfig+0x348>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d142      	bne.n	8007bc8 <UART_SetConfig+0x364>
 8007b42:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <UART_SetConfig+0x338>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d838      	bhi.n	8007bc0 <UART_SetConfig+0x35c>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x2f0>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b6d 	.word	0x08007b6d
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb9 	.word	0x08007bb9
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e14a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e146      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e142      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e13e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b8c:	cfff69f3 	.word	0xcfff69f3
 8007b90:	58000c00 	.word	0x58000c00
 8007b94:	11fff4ff 	.word	0x11fff4ff
 8007b98:	40011000 	.word	0x40011000
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	40004400 	.word	0x40004400
 8007ba4:	40004800 	.word	0x40004800
 8007ba8:	40004c00 	.word	0x40004c00
 8007bac:	40005000 	.word	0x40005000
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e128      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e124      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e120      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4acb      	ldr	r2, [pc, #812]	; (8007efc <UART_SetConfig+0x698>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d176      	bne.n	8007cc0 <UART_SetConfig+0x45c>
 8007bd2:	4bcb      	ldr	r3, [pc, #812]	; (8007f00 <UART_SetConfig+0x69c>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bda:	2b28      	cmp	r3, #40	; 0x28
 8007bdc:	d86c      	bhi.n	8007cb8 <UART_SetConfig+0x454>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x380>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007cb9 	.word	0x08007cb9
 8007bec:	08007cb9 	.word	0x08007cb9
 8007bf0:	08007cb9 	.word	0x08007cb9
 8007bf4:	08007cb9 	.word	0x08007cb9
 8007bf8:	08007cb9 	.word	0x08007cb9
 8007bfc:	08007cb9 	.word	0x08007cb9
 8007c00:	08007cb9 	.word	0x08007cb9
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007cb9 	.word	0x08007cb9
 8007c0c:	08007cb9 	.word	0x08007cb9
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007cb9 	.word	0x08007cb9
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007cb9 	.word	0x08007cb9
 8007c20:	08007cb9 	.word	0x08007cb9
 8007c24:	08007c99 	.word	0x08007c99
 8007c28:	08007cb9 	.word	0x08007cb9
 8007c2c:	08007cb9 	.word	0x08007cb9
 8007c30:	08007cb9 	.word	0x08007cb9
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007cb9 	.word	0x08007cb9
 8007c3c:	08007cb9 	.word	0x08007cb9
 8007c40:	08007cb9 	.word	0x08007cb9
 8007c44:	08007ca1 	.word	0x08007ca1
 8007c48:	08007cb9 	.word	0x08007cb9
 8007c4c:	08007cb9 	.word	0x08007cb9
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007cb9 	.word	0x08007cb9
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007ca9 	.word	0x08007ca9
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007cb9 	.word	0x08007cb9
 8007c78:	08007cb9 	.word	0x08007cb9
 8007c7c:	08007cb9 	.word	0x08007cb9
 8007c80:	08007cb9 	.word	0x08007cb9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e0bc      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e0b8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e0b4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e0b0      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cae:	e0ac      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb6:	e0a8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cbe:	e0a4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a8f      	ldr	r2, [pc, #572]	; (8007f04 <UART_SetConfig+0x6a0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d130      	bne.n	8007d2c <UART_SetConfig+0x4c8>
 8007cca:	4b8d      	ldr	r3, [pc, #564]	; (8007f00 <UART_SetConfig+0x69c>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d826      	bhi.n	8007d24 <UART_SetConfig+0x4c0>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x478>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e086      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e082      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e07e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e07a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e076      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e072      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e06e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a75      	ldr	r2, [pc, #468]	; (8007f08 <UART_SetConfig+0x6a4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d130      	bne.n	8007d98 <UART_SetConfig+0x534>
 8007d36:	4b72      	ldr	r3, [pc, #456]	; (8007f00 <UART_SetConfig+0x69c>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d826      	bhi.n	8007d90 <UART_SetConfig+0x52c>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <UART_SetConfig+0x4e4>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e050      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e04c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e048      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e044      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d80:	2320      	movs	r3, #32
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e040      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d88:	2340      	movs	r3, #64	; 0x40
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e03c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e038      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a5b      	ldr	r2, [pc, #364]	; (8007f0c <UART_SetConfig+0x6a8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d130      	bne.n	8007e04 <UART_SetConfig+0x5a0>
 8007da2:	4b57      	ldr	r3, [pc, #348]	; (8007f00 <UART_SetConfig+0x69c>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d826      	bhi.n	8007dfc <UART_SetConfig+0x598>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <UART_SetConfig+0x550>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007ddd 	.word	0x08007ddd
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007ded 	.word	0x08007ded
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e01a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e016      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e00e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e00a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e006      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007e04:	2380      	movs	r3, #128	; 0x80
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a3f      	ldr	r2, [pc, #252]	; (8007f0c <UART_SetConfig+0x6a8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	f040 80f8 	bne.w	8008006 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	dc46      	bgt.n	8007eac <UART_SetConfig+0x648>
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	f2c0 8082 	blt.w	8007f28 <UART_SetConfig+0x6c4>
 8007e24:	3b02      	subs	r3, #2
 8007e26:	2b1e      	cmp	r3, #30
 8007e28:	d87e      	bhi.n	8007f28 <UART_SetConfig+0x6c4>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x5cc>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007eb3 	.word	0x08007eb3
 8007e34:	08007f29 	.word	0x08007f29
 8007e38:	08007ebb 	.word	0x08007ebb
 8007e3c:	08007f29 	.word	0x08007f29
 8007e40:	08007f29 	.word	0x08007f29
 8007e44:	08007f29 	.word	0x08007f29
 8007e48:	08007ecb 	.word	0x08007ecb
 8007e4c:	08007f29 	.word	0x08007f29
 8007e50:	08007f29 	.word	0x08007f29
 8007e54:	08007f29 	.word	0x08007f29
 8007e58:	08007f29 	.word	0x08007f29
 8007e5c:	08007f29 	.word	0x08007f29
 8007e60:	08007f29 	.word	0x08007f29
 8007e64:	08007f29 	.word	0x08007f29
 8007e68:	08007edb 	.word	0x08007edb
 8007e6c:	08007f29 	.word	0x08007f29
 8007e70:	08007f29 	.word	0x08007f29
 8007e74:	08007f29 	.word	0x08007f29
 8007e78:	08007f29 	.word	0x08007f29
 8007e7c:	08007f29 	.word	0x08007f29
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f29 	.word	0x08007f29
 8007e8c:	08007f29 	.word	0x08007f29
 8007e90:	08007f29 	.word	0x08007f29
 8007e94:	08007f29 	.word	0x08007f29
 8007e98:	08007f29 	.word	0x08007f29
 8007e9c:	08007f29 	.word	0x08007f29
 8007ea0:	08007f29 	.word	0x08007f29
 8007ea4:	08007f29 	.word	0x08007f29
 8007ea8:	08007f1b 	.word	0x08007f1b
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	d037      	beq.n	8007f20 <UART_SetConfig+0x6bc>
 8007eb0:	e03a      	b.n	8007f28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eb2:	f7fe f8e1 	bl	8006078 <HAL_RCCEx_GetD3PCLK1Freq>
 8007eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eb8:	e03c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe f8f0 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec8:	e034      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fa3c 	bl	800634c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e02c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <UART_SetConfig+0x69c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d016      	beq.n	8007f14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ee6:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <UART_SetConfig+0x69c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	f003 0303 	and.w	r3, r3, #3
 8007ef0:	4a07      	ldr	r2, [pc, #28]	; (8007f10 <UART_SetConfig+0x6ac>)
 8007ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ef8:	e01c      	b.n	8007f34 <UART_SetConfig+0x6d0>
 8007efa:	bf00      	nop
 8007efc:	40011400 	.word	0x40011400
 8007f00:	58024400 	.word	0x58024400
 8007f04:	40007800 	.word	0x40007800
 8007f08:	40007c00 	.word	0x40007c00
 8007f0c:	58000c00 	.word	0x58000c00
 8007f10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f14:	4b9d      	ldr	r3, [pc, #628]	; (800818c <UART_SetConfig+0x928>)
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f18:	e00c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f1a:	4b9d      	ldr	r3, [pc, #628]	; (8008190 <UART_SetConfig+0x92c>)
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1e:	e009      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f26:	e005      	b.n	8007f34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 81de 	beq.w	80082f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	4a94      	ldr	r2, [pc, #592]	; (8008194 <UART_SetConfig+0x930>)
 8007f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	4413      	add	r3, r2
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d305      	bcc.n	8007f6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d903      	bls.n	8007f74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f72:	e1c1      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f76:	2200      	movs	r2, #0
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	60fa      	str	r2, [r7, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	4a84      	ldr	r2, [pc, #528]	; (8008194 <UART_SetConfig+0x930>)
 8007f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2200      	movs	r2, #0
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f96:	f7f8 f9f3 	bl	8000380 <__aeabi_uldivmod>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	020b      	lsls	r3, r1, #8
 8007fac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fb0:	0202      	lsls	r2, r0, #8
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	6849      	ldr	r1, [r1, #4]
 8007fb6:	0849      	lsrs	r1, r1, #1
 8007fb8:	2000      	movs	r0, #0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	eb12 0804 	adds.w	r8, r2, r4
 8007fc2:	eb43 0905 	adc.w	r9, r3, r5
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	469a      	mov	sl, r3
 8007fce:	4693      	mov	fp, r2
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f9d2 	bl	8000380 <__aeabi_uldivmod>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fea:	d308      	bcc.n	8007ffe <UART_SetConfig+0x79a>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ff2:	d204      	bcs.n	8007ffe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	e17c      	b.n	80082f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008004:	e178      	b.n	80082f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800e:	f040 80c5 	bne.w	800819c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008012:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008016:	2b20      	cmp	r3, #32
 8008018:	dc48      	bgt.n	80080ac <UART_SetConfig+0x848>
 800801a:	2b00      	cmp	r3, #0
 800801c:	db7b      	blt.n	8008116 <UART_SetConfig+0x8b2>
 800801e:	2b20      	cmp	r3, #32
 8008020:	d879      	bhi.n	8008116 <UART_SetConfig+0x8b2>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <UART_SetConfig+0x7c4>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	080080b3 	.word	0x080080b3
 800802c:	080080bb 	.word	0x080080bb
 8008030:	08008117 	.word	0x08008117
 8008034:	08008117 	.word	0x08008117
 8008038:	080080c3 	.word	0x080080c3
 800803c:	08008117 	.word	0x08008117
 8008040:	08008117 	.word	0x08008117
 8008044:	08008117 	.word	0x08008117
 8008048:	080080d3 	.word	0x080080d3
 800804c:	08008117 	.word	0x08008117
 8008050:	08008117 	.word	0x08008117
 8008054:	08008117 	.word	0x08008117
 8008058:	08008117 	.word	0x08008117
 800805c:	08008117 	.word	0x08008117
 8008060:	08008117 	.word	0x08008117
 8008064:	08008117 	.word	0x08008117
 8008068:	080080e3 	.word	0x080080e3
 800806c:	08008117 	.word	0x08008117
 8008070:	08008117 	.word	0x08008117
 8008074:	08008117 	.word	0x08008117
 8008078:	08008117 	.word	0x08008117
 800807c:	08008117 	.word	0x08008117
 8008080:	08008117 	.word	0x08008117
 8008084:	08008117 	.word	0x08008117
 8008088:	08008117 	.word	0x08008117
 800808c:	08008117 	.word	0x08008117
 8008090:	08008117 	.word	0x08008117
 8008094:	08008117 	.word	0x08008117
 8008098:	08008117 	.word	0x08008117
 800809c:	08008117 	.word	0x08008117
 80080a0:	08008117 	.word	0x08008117
 80080a4:	08008117 	.word	0x08008117
 80080a8:	08008109 	.word	0x08008109
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d02e      	beq.n	800810e <UART_SetConfig+0x8aa>
 80080b0:	e031      	b.n	8008116 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b2:	f7fd f82d 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 80080b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080b8:	e033      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ba:	f7fd f83f 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 80080be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080c0:	e02f      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd ffec 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d0:	e027      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d2:	f107 0318 	add.w	r3, r7, #24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe f938 	bl	800634c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e0:	e01f      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <UART_SetConfig+0x934>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080ee:	4b2a      	ldr	r3, [pc, #168]	; (8008198 <UART_SetConfig+0x934>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <UART_SetConfig+0x928>)
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008100:	e00f      	b.n	8008122 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008102:	4b22      	ldr	r3, [pc, #136]	; (800818c <UART_SetConfig+0x928>)
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008106:	e00c      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <UART_SetConfig+0x92c>)
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e009      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800810e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008114:	e005      	b.n	8008122 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80e7 	beq.w	80082f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	4a19      	ldr	r2, [pc, #100]	; (8008194 <UART_SetConfig+0x930>)
 8008130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008134:	461a      	mov	r2, r3
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	fbb3 f3f2 	udiv	r3, r3, r2
 800813c:	005a      	lsls	r2, r3, #1
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	441a      	add	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	fbb2 f3f3 	udiv	r3, r2, r3
 800814e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	2b0f      	cmp	r3, #15
 8008154:	d916      	bls.n	8008184 <UART_SetConfig+0x920>
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815c:	d212      	bcs.n	8008184 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	b29b      	uxth	r3, r3
 8008162:	f023 030f 	bic.w	r3, r3, #15
 8008166:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	085b      	lsrs	r3, r3, #1
 800816c:	b29b      	uxth	r3, r3
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	b29a      	uxth	r2, r3
 8008174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008176:	4313      	orrs	r3, r2
 8008178:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e0b9      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800818a:	e0b5      	b.n	80082f8 <UART_SetConfig+0xa94>
 800818c:	03d09000 	.word	0x03d09000
 8008190:	003d0900 	.word	0x003d0900
 8008194:	0800ccec 	.word	0x0800ccec
 8008198:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800819c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	dc49      	bgt.n	8008238 <UART_SetConfig+0x9d4>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db7c      	blt.n	80082a2 <UART_SetConfig+0xa3e>
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d87a      	bhi.n	80082a2 <UART_SetConfig+0xa3e>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <UART_SetConfig+0x950>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	0800823f 	.word	0x0800823f
 80081b8:	08008247 	.word	0x08008247
 80081bc:	080082a3 	.word	0x080082a3
 80081c0:	080082a3 	.word	0x080082a3
 80081c4:	0800824f 	.word	0x0800824f
 80081c8:	080082a3 	.word	0x080082a3
 80081cc:	080082a3 	.word	0x080082a3
 80081d0:	080082a3 	.word	0x080082a3
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	080082a3 	.word	0x080082a3
 80081dc:	080082a3 	.word	0x080082a3
 80081e0:	080082a3 	.word	0x080082a3
 80081e4:	080082a3 	.word	0x080082a3
 80081e8:	080082a3 	.word	0x080082a3
 80081ec:	080082a3 	.word	0x080082a3
 80081f0:	080082a3 	.word	0x080082a3
 80081f4:	0800826f 	.word	0x0800826f
 80081f8:	080082a3 	.word	0x080082a3
 80081fc:	080082a3 	.word	0x080082a3
 8008200:	080082a3 	.word	0x080082a3
 8008204:	080082a3 	.word	0x080082a3
 8008208:	080082a3 	.word	0x080082a3
 800820c:	080082a3 	.word	0x080082a3
 8008210:	080082a3 	.word	0x080082a3
 8008214:	080082a3 	.word	0x080082a3
 8008218:	080082a3 	.word	0x080082a3
 800821c:	080082a3 	.word	0x080082a3
 8008220:	080082a3 	.word	0x080082a3
 8008224:	080082a3 	.word	0x080082a3
 8008228:	080082a3 	.word	0x080082a3
 800822c:	080082a3 	.word	0x080082a3
 8008230:	080082a3 	.word	0x080082a3
 8008234:	08008295 	.word	0x08008295
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	d02e      	beq.n	800829a <UART_SetConfig+0xa36>
 800823c:	e031      	b.n	80082a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800823e:	f7fc ff67 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8008242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008244:	e033      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008246:	f7fc ff79 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 800824a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800824c:	e02f      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd ff26 	bl	80060a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800825c:	e027      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800825e:	f107 0318 	add.w	r3, r7, #24
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f872 	bl	800634c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826c:	e01f      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826e:	4b2d      	ldr	r3, [pc, #180]	; (8008324 <UART_SetConfig+0xac0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800827a:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <UART_SetConfig+0xac0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	08db      	lsrs	r3, r3, #3
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	4a28      	ldr	r2, [pc, #160]	; (8008328 <UART_SetConfig+0xac4>)
 8008286:	fa22 f303 	lsr.w	r3, r2, r3
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800828c:	e00f      	b.n	80082ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800828e:	4b26      	ldr	r3, [pc, #152]	; (8008328 <UART_SetConfig+0xac4>)
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008292:	e00c      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <UART_SetConfig+0xac8>)
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	e009      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a0:	e005      	b.n	80082ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082ac:	bf00      	nop
    }

    if (pclk != 0U)
 80082ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d021      	beq.n	80082f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <UART_SetConfig+0xacc>)
 80082ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082be:	461a      	mov	r2, r3
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	441a      	add	r2, r3
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d909      	bls.n	80082f2 <UART_SetConfig+0xa8e>
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e4:	d205      	bcs.n	80082f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60da      	str	r2, [r3, #12]
 80082f0:	e002      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2201      	movs	r2, #1
 8008304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2200      	movs	r2, #0
 800830c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2200      	movs	r2, #0
 8008312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008314:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008318:	4618      	mov	r0, r3
 800831a:	3748      	adds	r7, #72	; 0x48
 800831c:	46bd      	mov	sp, r7
 800831e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008322:	bf00      	nop
 8008324:	58024400 	.word	0x58024400
 8008328:	03d09000 	.word	0x03d09000
 800832c:	003d0900 	.word	0x003d0900
 8008330:	0800ccec 	.word	0x0800ccec

08008334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01a      	beq.n	800844a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008432:	d10a      	bne.n	800844a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008488:	f7f9 f9ac 	bl	80017e4 <HAL_GetTick>
 800848c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0308 	and.w	r3, r3, #8
 8008498:	2b08      	cmp	r3, #8
 800849a:	d10e      	bne.n	80084ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f82f 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e025      	b.n	8008506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d10e      	bne.n	80084e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f819 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e00f      	b.n	8008506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b09c      	sub	sp, #112	; 0x70
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	603b      	str	r3, [r7, #0]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800851e:	e0a9      	b.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	f000 80a5 	beq.w	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852a:	f7f9 f95b 	bl	80017e4 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008536:	429a      	cmp	r2, r3
 8008538:	d302      	bcc.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
 800853a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800853c:	2b00      	cmp	r3, #0
 800853e:	d140      	bne.n	80085c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008554:	667b      	str	r3, [r7, #100]	; 0x64
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	663b      	str	r3, [r7, #96]	; 0x60
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008592:	64ba      	str	r2, [r7, #72]	; 0x48
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e069      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d051      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085de:	d149      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
 800860a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800860e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	66bb      	str	r3, [r7, #104]	; 0x68
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800863c:	623a      	str	r2, [r7, #32]
 800863e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	61bb      	str	r3, [r7, #24]
   return(result);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e010      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69da      	ldr	r2, [r3, #28]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4013      	ands	r3, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	429a      	cmp	r2, r3
 8008690:	f43f af46 	beq.w	8008520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3770      	adds	r7, #112	; 0x70
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b0a3      	sub	sp, #140	; 0x8c
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	88fa      	ldrh	r2, [r7, #6]
 80086b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	88fa      	ldrh	r2, [r7, #6]
 80086c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d2:	d10e      	bne.n	80086f2 <UART_Start_Receive_IT+0x52>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d105      	bne.n	80086e8 <UART_Start_Receive_IT+0x48>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086e6:	e02d      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	22ff      	movs	r2, #255	; 0xff
 80086ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086f0:	e028      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10d      	bne.n	8008716 <UART_Start_Receive_IT+0x76>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <UART_Start_Receive_IT+0x6c>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800870a:	e01b      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	227f      	movs	r2, #127	; 0x7f
 8008710:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008714:	e016      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800871e:	d10d      	bne.n	800873c <UART_Start_Receive_IT+0x9c>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <UART_Start_Receive_IT+0x92>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	227f      	movs	r2, #127	; 0x7f
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008730:	e008      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	223f      	movs	r2, #63	; 0x3f
 8008736:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800873a:	e003      	b.n	8008744 <UART_Start_Receive_IT+0xa4>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2222      	movs	r2, #34	; 0x22
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008778:	673a      	str	r2, [r7, #112]	; 0x70
 800877a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800877e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e3      	bne.n	8008754 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008794:	d153      	bne.n	800883e <UART_Start_Receive_IT+0x19e>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d34d      	bcc.n	800883e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087aa:	d107      	bne.n	80087bc <UART_Start_Receive_IT+0x11c>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d103      	bne.n	80087bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a4b      	ldr	r2, [pc, #300]	; (80088e4 <UART_Start_Receive_IT+0x244>)
 80087b8:	671a      	str	r2, [r3, #112]	; 0x70
 80087ba:	e002      	b.n	80087c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a4a      	ldr	r2, [pc, #296]	; (80088e8 <UART_Start_Receive_IT+0x248>)
 80087c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01a      	beq.n	8008808 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e4      	bne.n	80087d2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008828:	64ba      	str	r2, [r7, #72]	; 0x48
 800882a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800882e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e5      	bne.n	8008808 <UART_Start_Receive_IT+0x168>
 800883c:	e04a      	b.n	80088d4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	d107      	bne.n	8008858 <UART_Start_Receive_IT+0x1b8>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a26      	ldr	r2, [pc, #152]	; (80088ec <UART_Start_Receive_IT+0x24c>)
 8008854:	671a      	str	r2, [r3, #112]	; 0x70
 8008856:	e002      	b.n	800885e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4a25      	ldr	r2, [pc, #148]	; (80088f0 <UART_Start_Receive_IT+0x250>)
 800885c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d019      	beq.n	80088a2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008882:	677b      	str	r3, [r7, #116]	; 0x74
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	461a      	mov	r2, r3
 800888a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
 800888e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e6      	bne.n	800886e <UART_Start_Receive_IT+0x1ce>
 80088a0:	e018      	b.n	80088d4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	613b      	str	r3, [r7, #16]
   return(result);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f043 0320 	orr.w	r3, r3, #32
 80088b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c0:	623b      	str	r3, [r7, #32]
 80088c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	378c      	adds	r7, #140	; 0x8c
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	08008ffd 	.word	0x08008ffd
 80088e8:	08008d05 	.word	0x08008d05
 80088ec:	08008ba3 	.word	0x08008ba3
 80088f0:	08008a43 	.word	0x08008a43

080088f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b095      	sub	sp, #84	; 0x54
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	643b      	str	r3, [r7, #64]	; 0x40
 800891c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	61fb      	str	r3, [r7, #28]
   return(result);
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <UART_EndRxTransfer+0xc8>)
 8008942:	4013      	ands	r3, r2
 8008944:	64bb      	str	r3, [r7, #72]	; 0x48
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e5      	bne.n	800892e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d118      	bne.n	800899c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	60bb      	str	r3, [r7, #8]
   return(result);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	647b      	str	r3, [r7, #68]	; 0x44
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	613b      	str	r3, [r7, #16]
   return(result);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e6      	bne.n	800896a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80089b0:	bf00      	nop
 80089b2:	3754      	adds	r7, #84	; 0x54
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	effffffe 	.word	0xeffffffe

080089c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7fe ff2a 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6979      	ldr	r1, [r7, #20]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e6      	bne.n	80089f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7fe fef5 	bl	8007824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a3a:	bf00      	nop
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b096      	sub	sp, #88	; 0x58
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5a:	2b22      	cmp	r3, #34	; 0x22
 8008a5c:	f040 8095 	bne.w	8008b8a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a6e:	b2d9      	uxtb	r1, r3
 8008a70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7a:	400a      	ands	r2, r1
 8008a7c:	b2d2      	uxtb	r2, r2
 8008a7e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d178      	bne.n	8008b9a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abc:	653b      	str	r3, [r7, #80]	; 0x50
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e6      	bne.n	8008aa8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	f023 0301 	bic.w	r3, r3, #1
 8008af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008afa:	633a      	str	r2, [r7, #48]	; 0x30
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e5      	bne.n	8008ada <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d12e      	bne.n	8008b82 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	61fb      	str	r3, [r7, #28]
 8008b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	617b      	str	r3, [r7, #20]
   return(result);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f003 0310 	and.w	r3, r3, #16
 8008b66:	2b10      	cmp	r3, #16
 8008b68:	d103      	bne.n	8008b72 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fe fe66 	bl	800784c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b80:	e00b      	b.n	8008b9a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7f8 fcce 	bl	8001524 <HAL_UART_RxCpltCallback>
}
 8008b88:	e007      	b.n	8008b9a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0208 	orr.w	r2, r2, #8
 8008b98:	619a      	str	r2, [r3, #24]
}
 8008b9a:	bf00      	nop
 8008b9c:	3758      	adds	r7, #88	; 0x58
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b096      	sub	sp, #88	; 0x58
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bba:	2b22      	cmp	r3, #34	; 0x22
 8008bbc:	f040 8095 	bne.w	8008cea <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bd0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bd8:	4013      	ands	r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bde:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be4:	1c9a      	adds	r2, r3, #2
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d178      	bne.n	8008cfa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c26:	643b      	str	r3, [r7, #64]	; 0x40
 8008c28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e6      	bne.n	8008c08 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d12e      	bne.n	8008ce2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d103      	bne.n	8008cd2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2210      	movs	r2, #16
 8008cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fe fdb6 	bl	800784c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ce0:	e00b      	b.n	8008cfa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7f8 fc1e 	bl	8001524 <HAL_UART_RxCpltCallback>
}
 8008ce8:	e007      	b.n	8008cfa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0208 	orr.w	r2, r2, #8
 8008cf8:	619a      	str	r2, [r3, #24]
}
 8008cfa:	bf00      	nop
 8008cfc:	3758      	adds	r7, #88	; 0x58
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b0a6      	sub	sp, #152	; 0x98
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d12:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3a:	2b22      	cmp	r3, #34	; 0x22
 8008d3c:	f040 814d 	bne.w	8008fda <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d4a:	e0f4      	b.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d56:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008d5a:	b2d9      	uxtb	r1, r3
 8008d5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d66:	400a      	ands	r2, r1
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d053      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d011      	beq.n	8008dce <UART_RxISR_8BIT_FIFOEN+0xca>
 8008daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc4:	f043 0201 	orr.w	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d011      	beq.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2202      	movs	r2, #2
 8008dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df4:	f043 0204 	orr.w	r2, r3, #4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d011      	beq.n	8008e2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e24:	f043 0202 	orr.w	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7fe fcfd 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d171      	bne.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e76:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e4      	bne.n	8008e52 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9a:	4b56      	ldr	r3, [pc, #344]	; (8008ff4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ea8:	657a      	str	r2, [r7, #84]	; 0x54
 8008eaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e5      	bne.n	8008e88 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d12e      	bne.n	8008f30 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	f023 0310 	bic.w	r3, r3, #16
 8008eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d103      	bne.n	8008f20 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2210      	movs	r2, #16
 8008f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fe fc8f 	bl	800784c <HAL_UARTEx_RxEventCallback>
 8008f2e:	e002      	b.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7f8 faf7 	bl	8001524 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d006      	beq.n	8008f4c <UART_RxISR_8BIT_FIFOEN+0x248>
 8008f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f47f af00 	bne.w	8008d4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d045      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d23e      	bcs.n	8008fea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f82:	673b      	str	r3, [r7, #112]	; 0x70
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3308      	adds	r3, #8
 8008f8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e5      	bne.n	8008f6c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008fa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f043 0320 	orr.w	r3, r3, #32
 8008fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	6979      	ldr	r1, [r7, #20]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e6      	bne.n	8008fa6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fd8:	e007      	b.n	8008fea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699a      	ldr	r2, [r3, #24]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0208 	orr.w	r2, r2, #8
 8008fe8:	619a      	str	r2, [r3, #24]
}
 8008fea:	bf00      	nop
 8008fec:	3798      	adds	r7, #152	; 0x98
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	effffffe 	.word	0xeffffffe
 8008ff8:	08008a43 	.word	0x08008a43

08008ffc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b0a8      	sub	sp, #160	; 0xa0
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800900a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009032:	2b22      	cmp	r3, #34	; 0x22
 8009034:	f040 8151 	bne.w	80092da <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800903e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009042:	e0f8      	b.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009056:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800905a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800905e:	4013      	ands	r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906c:	1c9a      	adds	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800908e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b00      	cmp	r3, #0
 8009098:	d053      	beq.n	8009142 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800909a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d011      	beq.n	80090ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80090a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2201      	movs	r2, #1
 80090b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c0:	f043 0201 	orr.w	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80090d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2202      	movs	r2, #2
 80090e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f0:	f043 0204 	orr.w	r2, r3, #4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	d011      	beq.n	800912a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2204      	movs	r2, #4
 8009118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009120:	f043 0202 	orr.w	r2, r3, #2
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe fb7f 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d173      	bne.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800915c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800915e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009172:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009176:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800917e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e4      	bne.n	800914e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3308      	adds	r3, #8
 800918a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009196:	4b57      	ldr	r3, [pc, #348]	; (80092f4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009198:	4013      	ands	r3, r2
 800919a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80091aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e3      	bne.n	8009184 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d12e      	bne.n	8009230 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	f023 0310 	bic.w	r3, r3, #16
 80091ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091f6:	647b      	str	r3, [r7, #68]	; 0x44
 80091f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e6      	bne.n	80091d8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b10      	cmp	r3, #16
 8009216:	d103      	bne.n	8009220 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2210      	movs	r2, #16
 800921e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe fb0f 	bl	800784c <HAL_UARTEx_RxEventCallback>
 800922e:	e002      	b.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7f8 f977 	bl	8001524 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009236:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <UART_RxISR_16BIT_FIFOEN+0x250>
 800923e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	f47f aefc 	bne.w	8009044 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009252:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009256:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800925a:	2b00      	cmp	r3, #0
 800925c:	d045      	beq.n	80092ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009264:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009268:	429a      	cmp	r2, r3
 800926a:	d23e      	bcs.n	80092ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3308      	adds	r3, #8
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	623b      	str	r3, [r7, #32]
   return(result);
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009282:	677b      	str	r3, [r7, #116]	; 0x74
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800928c:	633a      	str	r2, [r7, #48]	; 0x30
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e5      	bne.n	800926c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80092a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f043 0320 	orr.w	r3, r3, #32
 80092ba:	673b      	str	r3, [r7, #112]	; 0x70
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	69b9      	ldr	r1, [r7, #24]
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	617b      	str	r3, [r7, #20]
   return(result);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092d8:	e007      	b.n	80092ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	699a      	ldr	r2, [r3, #24]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0208 	orr.w	r2, r2, #8
 80092e8:	619a      	str	r2, [r3, #24]
}
 80092ea:	bf00      	nop
 80092ec:	37a0      	adds	r7, #160	; 0xa0
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	effffffe 	.word	0xeffffffe
 80092f8:	08008ba3 	.word	0x08008ba3

080092fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UARTEx_DisableFifoMode+0x16>
 800934a:	2302      	movs	r3, #2
 800934c:	e027      	b.n	800939e <HAL_UARTEx_DisableFifoMode+0x66>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	; 0x24
 800935a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800937c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093be:	2302      	movs	r3, #2
 80093c0:	e02d      	b.n	800941e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2224      	movs	r2, #36	; 0x24
 80093ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f850 	bl	80094a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800943a:	2302      	movs	r3, #2
 800943c:	e02d      	b.n	800949a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2224      	movs	r2, #36	; 0x24
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f812 	bl	80094a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d108      	bne.n	80094c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094c4:	e031      	b.n	800952a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094c6:	2310      	movs	r3, #16
 80094c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094ca:	2310      	movs	r3, #16
 80094cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	0e5b      	lsrs	r3, r3, #25
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	0f5b      	lsrs	r3, r3, #29
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	7b3a      	ldrb	r2, [r7, #12]
 80094f2:	4911      	ldr	r1, [pc, #68]	; (8009538 <UARTEx_SetNbDataToProcess+0x94>)
 80094f4:	5c8a      	ldrb	r2, [r1, r2]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094fa:	7b3a      	ldrb	r2, [r7, #12]
 80094fc:	490f      	ldr	r1, [pc, #60]	; (800953c <UARTEx_SetNbDataToProcess+0x98>)
 80094fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009500:	fb93 f3f2 	sdiv	r3, r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	7b7a      	ldrb	r2, [r7, #13]
 8009510:	4909      	ldr	r1, [pc, #36]	; (8009538 <UARTEx_SetNbDataToProcess+0x94>)
 8009512:	5c8a      	ldrb	r2, [r1, r2]
 8009514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009518:	7b7a      	ldrb	r2, [r7, #13]
 800951a:	4908      	ldr	r1, [pc, #32]	; (800953c <UARTEx_SetNbDataToProcess+0x98>)
 800951c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800951e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	0800cd04 	.word	0x0800cd04
 800953c:	0800cd0c 	.word	0x0800cd0c

08009540 <__NVIC_SetPriority>:
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800954c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009550:	2b00      	cmp	r3, #0
 8009552:	db0a      	blt.n	800956a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	490c      	ldr	r1, [pc, #48]	; (800958c <__NVIC_SetPriority+0x4c>)
 800955a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800955e:	0112      	lsls	r2, r2, #4
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	440b      	add	r3, r1
 8009564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009568:	e00a      	b.n	8009580 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	b2da      	uxtb	r2, r3
 800956e:	4908      	ldr	r1, [pc, #32]	; (8009590 <__NVIC_SetPriority+0x50>)
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	3b04      	subs	r3, #4
 8009578:	0112      	lsls	r2, r2, #4
 800957a:	b2d2      	uxtb	r2, r2
 800957c:	440b      	add	r3, r1
 800957e:	761a      	strb	r2, [r3, #24]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	e000e100 	.word	0xe000e100
 8009590:	e000ed00 	.word	0xe000ed00

08009594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <SysTick_Handler+0x1c>)
 800959a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800959c:	f001 fd86 	bl	800b0ac <xTaskGetSchedulerState>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d001      	beq.n	80095aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095a6:	f002 fb6f 	bl	800bc88 <xPortSysTickHandler>
  }
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	e000e010 	.word	0xe000e010

080095b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095b8:	2100      	movs	r1, #0
 80095ba:	f06f 0004 	mvn.w	r0, #4
 80095be:	f7ff ffbf 	bl	8009540 <__NVIC_SetPriority>
#endif
}
 80095c2:	bf00      	nop
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ce:	f3ef 8305 	mrs	r3, IPSR
 80095d2:	603b      	str	r3, [r7, #0]
  return(result);
 80095d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095da:	f06f 0305 	mvn.w	r3, #5
 80095de:	607b      	str	r3, [r7, #4]
 80095e0:	e00c      	b.n	80095fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <osKernelInitialize+0x44>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <osKernelInitialize+0x44>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	e002      	b.n	80095fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095fc:	687b      	ldr	r3, [r7, #4]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	2400270c 	.word	0x2400270c

08009610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009616:	f3ef 8305 	mrs	r3, IPSR
 800961a:	603b      	str	r3, [r7, #0]
  return(result);
 800961c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009622:	f06f 0305 	mvn.w	r3, #5
 8009626:	607b      	str	r3, [r7, #4]
 8009628:	e010      	b.n	800964c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <osKernelStart+0x48>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d109      	bne.n	8009646 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009632:	f7ff ffbf 	bl	80095b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009636:	4b08      	ldr	r3, [pc, #32]	; (8009658 <osKernelStart+0x48>)
 8009638:	2202      	movs	r2, #2
 800963a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800963c:	f001 f8da 	bl	800a7f4 <vTaskStartScheduler>
      stat = osOK;
 8009640:	2300      	movs	r3, #0
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e002      	b.n	800964c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800964c:	687b      	ldr	r3, [r7, #4]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	2400270c 	.word	0x2400270c

0800965c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b08e      	sub	sp, #56	; 0x38
 8009660:	af04      	add	r7, sp, #16
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800966c:	f3ef 8305 	mrs	r3, IPSR
 8009670:	617b      	str	r3, [r7, #20]
  return(result);
 8009672:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009674:	2b00      	cmp	r3, #0
 8009676:	d17e      	bne.n	8009776 <osThreadNew+0x11a>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d07b      	beq.n	8009776 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800967e:	2380      	movs	r3, #128	; 0x80
 8009680:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009682:	2318      	movs	r3, #24
 8009684:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800968a:	f04f 33ff 	mov.w	r3, #4294967295
 800968e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d045      	beq.n	8009722 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <osThreadNew+0x48>
        name = attr->name;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d008      	beq.n	80096ca <osThreadNew+0x6e>
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b38      	cmp	r3, #56	; 0x38
 80096bc:	d805      	bhi.n	80096ca <osThreadNew+0x6e>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <osThreadNew+0x72>
        return (NULL);
 80096ca:	2300      	movs	r3, #0
 80096cc:	e054      	b.n	8009778 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	089b      	lsrs	r3, r3, #2
 80096dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <osThreadNew+0xa8>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	2bbb      	cmp	r3, #187	; 0xbb
 80096ec:	d90a      	bls.n	8009704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <osThreadNew+0xa8>
        mem = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	61bb      	str	r3, [r7, #24]
 8009702:	e010      	b.n	8009726 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10c      	bne.n	8009726 <osThreadNew+0xca>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d108      	bne.n	8009726 <osThreadNew+0xca>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <osThreadNew+0xca>
          mem = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	e001      	b.n	8009726 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d110      	bne.n	800974e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009734:	9202      	str	r2, [sp, #8]
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fe9e 	bl	800a484 <xTaskCreateStatic>
 8009748:	4603      	mov	r3, r0
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	e013      	b.n	8009776 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d110      	bne.n	8009776 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	b29a      	uxth	r2, r3
 8009758:	f107 0310 	add.w	r3, r7, #16
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fee9 	bl	800a53e <xTaskCreate>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d001      	beq.n	8009776 <osThreadNew+0x11a>
            hTask = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009776:	693b      	ldr	r3, [r7, #16]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3728      	adds	r7, #40	; 0x28
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800978c:	2300      	movs	r3, #0
 800978e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009790:	f3ef 8305 	mrs	r3, IPSR
 8009794:	613b      	str	r3, [r7, #16]
  return(result);
 8009796:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009798:	2b00      	cmp	r3, #0
 800979a:	d15f      	bne.n	800985c <osMessageQueueNew+0xdc>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d05c      	beq.n	800985c <osMessageQueueNew+0xdc>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d059      	beq.n	800985c <osMessageQueueNew+0xdc>
    mem = -1;
 80097a8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d029      	beq.n	8009808 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d012      	beq.n	80097e2 <osMessageQueueNew+0x62>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	2b4f      	cmp	r3, #79	; 0x4f
 80097c2:	d90e      	bls.n	80097e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	fb01 f303 	mul.w	r3, r1, r3
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <osMessageQueueNew+0x62>
        mem = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	61bb      	str	r3, [r7, #24]
 80097e0:	e014      	b.n	800980c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d110      	bne.n	800980c <osMessageQueueNew+0x8c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d108      	bne.n	800980c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <osMessageQueueNew+0x8c>
          mem = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
 8009806:	e001      	b.n	800980c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d10b      	bne.n	800982a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	2100      	movs	r1, #0
 800981c:	9100      	str	r1, [sp, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f971 	bl	8009b08 <xQueueGenericCreateStatic>
 8009826:	61f8      	str	r0, [r7, #28]
 8009828:	e008      	b.n	800983c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009830:	2200      	movs	r2, #0
 8009832:	68b9      	ldr	r1, [r7, #8]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f9df 	bl	8009bf8 <xQueueGenericCreate>
 800983a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00c      	beq.n	800985c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	e001      	b.n	8009854 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	69f8      	ldr	r0, [r7, #28]
 8009858:	f000 fdb6 	bl	800a3c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800985c:	69fb      	ldr	r3, [r7, #28]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3720      	adds	r7, #32
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <vApplicationGetIdleTaskMemory+0x2c>)
 8009878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4a06      	ldr	r2, [pc, #24]	; (8009898 <vApplicationGetIdleTaskMemory+0x30>)
 800987e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2280      	movs	r2, #128	; 0x80
 8009884:	601a      	str	r2, [r3, #0]
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	24002710 	.word	0x24002710
 8009898:	240027cc 	.word	0x240027cc

0800989c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80098ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4a06      	ldr	r2, [pc, #24]	; (80098cc <vApplicationGetTimerTaskMemory+0x30>)
 80098b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ba:	601a      	str	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	240029cc 	.word	0x240029cc
 80098cc:	24002a88 	.word	0x24002a88

080098d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f103 0208 	add.w	r2, r3, #8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f04f 32ff 	mov.w	r2, #4294967295
 80098e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f103 0208 	add.w	r2, r3, #8
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 0208 	add.w	r2, r3, #8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800992a:	b480      	push	{r7}
 800992c:	b085      	sub	sp, #20
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009988:	d103      	bne.n	8009992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	e00c      	b.n	80099ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3308      	adds	r3, #8
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	e002      	b.n	80099a0 <vListInsert+0x2e>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d2f6      	bcs.n	800999a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6892      	ldr	r2, [r2, #8]
 80099fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6852      	ldr	r2, [r2, #4]
 8009a04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d103      	bne.n	8009a18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	1e5a      	subs	r2, r3, #1
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a62:	f002 f87f 	bl	800bb64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6e:	68f9      	ldr	r1, [r7, #12]
 8009a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a72:	fb01 f303 	mul.w	r3, r1, r3
 8009a76:	441a      	add	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a92:	3b01      	subs	r3, #1
 8009a94:	68f9      	ldr	r1, [r7, #12]
 8009a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a98:	fb01 f303 	mul.w	r3, r1, r3
 8009a9c:	441a      	add	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	22ff      	movs	r2, #255	; 0xff
 8009aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	22ff      	movs	r2, #255	; 0xff
 8009aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d114      	bne.n	8009ae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01a      	beq.n	8009af6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 f92f 	bl	800ad28 <xTaskRemoveFromEventList>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d012      	beq.n	8009af6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <xQueueGenericReset+0xcc>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	e009      	b.n	8009af6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3310      	adds	r3, #16
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fef2 	bl	80098d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3324      	adds	r3, #36	; 0x24
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff feed 	bl	80098d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009af6:	f002 f865 	bl	800bbc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009afa:	2301      	movs	r3, #1
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	; 0x38
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <xQueueGenericCreateStatic+0x52>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <xQueueGenericCreateStatic+0x56>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e000      	b.n	8009b60 <xQueueGenericCreateStatic+0x58>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	623b      	str	r3, [r7, #32]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <xQueueGenericCreateStatic+0x7e>
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <xQueueGenericCreateStatic+0x82>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <xQueueGenericCreateStatic+0x84>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	61fb      	str	r3, [r7, #28]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ba6:	2350      	movs	r3, #80	; 0x50
 8009ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b50      	cmp	r3, #80	; 0x50
 8009bae:	d00a      	beq.n	8009bc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	61bb      	str	r3, [r7, #24]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00d      	beq.n	8009bee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	4613      	mov	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f83f 	bl	8009c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3730      	adds	r7, #48	; 0x30
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08a      	sub	sp, #40	; 0x28
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	613b      	str	r3, [r7, #16]
}
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	fb02 f303 	mul.w	r3, r2, r3
 8009c2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	3350      	adds	r3, #80	; 0x50
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 f8b9 	bl	800bda8 <pvPortMalloc>
 8009c36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d011      	beq.n	8009c62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	3350      	adds	r3, #80	; 0x50
 8009c46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c50:	79fa      	ldrb	r2, [r7, #7]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4613      	mov	r3, r2
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f805 	bl	8009c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c62:	69bb      	ldr	r3, [r7, #24]
	}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e002      	b.n	8009c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	69b8      	ldr	r0, [r7, #24]
 8009c9e:	f7ff fecb 	bl	8009a38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	; 0x38
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xQueueGenericSend+0x32>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <xQueueGenericSend+0x40>
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <xQueueGenericSend+0x44>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <xQueueGenericSend+0x46>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <xQueueGenericSend+0x60>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d103      	bne.n	8009d22 <xQueueGenericSend+0x6e>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <xQueueGenericSend+0x72>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericSend+0x74>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d42:	f001 f9b3 	bl	800b0ac <xTaskGetSchedulerState>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <xQueueGenericSend+0x9e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <xQueueGenericSend+0xa2>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <xQueueGenericSend+0xa4>
 8009d56:	2300      	movs	r3, #0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	61fb      	str	r3, [r7, #28]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d72:	f001 fef7 	bl	800bb64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d302      	bcc.n	8009d88 <xQueueGenericSend+0xd4>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d129      	bne.n	8009ddc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d8e:	f000 fa0b 	bl	800a1a8 <prvCopyDataToQueue>
 8009d92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d010      	beq.n	8009dbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	3324      	adds	r3, #36	; 0x24
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 ffc1 	bl	800ad28 <xTaskRemoveFromEventList>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d013      	beq.n	8009dd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009dac:	4b3f      	ldr	r3, [pc, #252]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	e00a      	b.n	8009dd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d007      	beq.n	8009dd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dc4:	4b39      	ldr	r3, [pc, #228]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009dd4:	f001 fef6 	bl	800bbc4 <vPortExitCritical>
				return pdPASS;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e063      	b.n	8009ea4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009de2:	f001 feef 	bl	800bbc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e05c      	b.n	8009ea4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fffb 	bl	800adf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dfe:	f001 fee1 	bl	800bbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e02:	f000 fd67 	bl	800a8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e06:	f001 fead 	bl	800bb64 <vPortEnterCritical>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e10:	b25b      	sxtb	r3, r3
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d103      	bne.n	8009e20 <xQueueGenericSend+0x16c>
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d103      	bne.n	8009e36 <xQueueGenericSend+0x182>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e36:	f001 fec5 	bl	800bbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e3a:	1d3a      	adds	r2, r7, #4
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 ffea 	bl	800ae1c <xTaskCheckForTimeOut>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d124      	bne.n	8009e98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e50:	f000 faa2 	bl	800a398 <prvIsQueueFull>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d018      	beq.n	8009e8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ff10 	bl	800ac88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e6a:	f000 fa2d 	bl	800a2c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e6e:	f000 fd3f 	bl	800a8f0 <xTaskResumeAll>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f47f af7c 	bne.w	8009d72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <xQueueGenericSend+0x1f8>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	e772      	b.n	8009d72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e8e:	f000 fa1b 	bl	800a2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e92:	f000 fd2d 	bl	800a8f0 <xTaskResumeAll>
 8009e96:	e76c      	b.n	8009d72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e9a:	f000 fa15 	bl	800a2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e9e:	f000 fd27 	bl	800a8f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3738      	adds	r7, #56	; 0x38
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b090      	sub	sp, #64	; 0x40
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <xQueueGenericSendFromISR+0x3c>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <xQueueGenericSendFromISR+0x40>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <xQueueGenericSendFromISR+0x42>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d103      	bne.n	8009f1a <xQueueGenericSendFromISR+0x6a>
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <xQueueGenericSendFromISR+0x6e>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueGenericSendFromISR+0x70>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f3a:	f001 fef5 	bl	800bd28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	61fa      	str	r2, [r7, #28]
 8009f54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d302      	bcc.n	8009f6c <xQueueGenericSendFromISR+0xbc>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d12f      	bne.n	8009fcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f82:	f000 f911 	bl	800a1a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8e:	d112      	bne.n	8009fb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d016      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fec3 	bl	800ad28 <xTaskRemoveFromEventList>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00e      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e007      	b.n	8009fc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	b25a      	sxtb	r2, r3
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009fca:	e001      	b.n	8009fd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3740      	adds	r7, #64	; 0x40
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08c      	sub	sp, #48	; 0x30
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <xQueueReceive+0x30>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	623b      	str	r3, [r7, #32]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <xQueueReceive+0x3e>
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <xQueueReceive+0x42>
 800a026:	2301      	movs	r3, #1
 800a028:	e000      	b.n	800a02c <xQueueReceive+0x44>
 800a02a:	2300      	movs	r3, #0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueReceive+0x5e>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fb      	str	r3, [r7, #28]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a046:	f001 f831 	bl	800b0ac <xTaskGetSchedulerState>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <xQueueReceive+0x6e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <xQueueReceive+0x72>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <xQueueReceive+0x74>
 800a05a:	2300      	movs	r3, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xQueueReceive+0x8e>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	61bb      	str	r3, [r7, #24]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a076:	f001 fd75 	bl	800bb64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01f      	beq.n	800a0c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a08a:	f000 f8f7 	bl	800a27c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00f      	beq.n	800a0be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	3310      	adds	r3, #16
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fe40 	bl	800ad28 <xTaskRemoveFromEventList>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0ae:	4b3d      	ldr	r3, [pc, #244]	; (800a1a4 <xQueueReceive+0x1bc>)
 800a0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0be:	f001 fd81 	bl	800bbc4 <vPortExitCritical>
				return pdPASS;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e069      	b.n	800a19a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0cc:	f001 fd7a 	bl	800bbc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e062      	b.n	800a19a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fe86 	bl	800adf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0e8:	f001 fd6c 	bl	800bbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ec:	f000 fbf2 	bl	800a8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0f0:	f001 fd38 	bl	800bb64 <vPortEnterCritical>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d103      	bne.n	800a10a <xQueueReceive+0x122>
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d103      	bne.n	800a120 <xQueueReceive+0x138>
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a120:	f001 fd50 	bl	800bbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a124:	1d3a      	adds	r2, r7, #4
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fe75 	bl	800ae1c <xTaskCheckForTimeOut>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d123      	bne.n	800a180 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13a:	f000 f917 	bl	800a36c <prvIsQueueEmpty>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d017      	beq.n	800a174 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	3324      	adds	r3, #36	; 0x24
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fd9b 	bl	800ac88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a154:	f000 f8b8 	bl	800a2c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a158:	f000 fbca 	bl	800a8f0 <xTaskResumeAll>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d189      	bne.n	800a076 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <xQueueReceive+0x1bc>)
 800a164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	e780      	b.n	800a076 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a176:	f000 f8a7 	bl	800a2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a17a:	f000 fbb9 	bl	800a8f0 <xTaskResumeAll>
 800a17e:	e77a      	b.n	800a076 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a182:	f000 f8a1 	bl	800a2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a186:	f000 fbb3 	bl	800a8f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a18a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18c:	f000 f8ee 	bl	800a36c <prvIsQueueEmpty>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	f43f af6f 	beq.w	800a076 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a198:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3730      	adds	r7, #48	; 0x30
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10d      	bne.n	800a1e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d14d      	bne.n	800a26a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ff88 	bl	800b0e8 <xTaskPriorityDisinherit>
 800a1d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	609a      	str	r2, [r3, #8]
 800a1e0:	e043      	b.n	800a26a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d119      	bne.n	800a21c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6858      	ldr	r0, [r3, #4]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	f001 ffee 	bl	800c1d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d32b      	bcc.n	800a26a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]
 800a21a:	e026      	b.n	800a26a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68d8      	ldr	r0, [r3, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	461a      	mov	r2, r3
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	f001 ffd4 	bl	800c1d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	425b      	negs	r3, r3
 800a236:	441a      	add	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d207      	bcs.n	800a258 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	425b      	negs	r3, r3
 800a252:	441a      	add	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d105      	bne.n	800a26a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3b01      	subs	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d018      	beq.n	800a2c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	441a      	add	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d303      	bcc.n	800a2b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68d9      	ldr	r1, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6838      	ldr	r0, [r7, #0]
 800a2bc:	f001 ff8a 	bl	800c1d4 <memcpy>
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2d0:	f001 fc48 	bl	800bb64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2dc:	e011      	b.n	800a302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d012      	beq.n	800a30c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3324      	adds	r3, #36	; 0x24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fd1c 	bl	800ad28 <xTaskRemoveFromEventList>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2f6:	f000 fdf3 	bl	800aee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	dce9      	bgt.n	800a2de <prvUnlockQueue+0x16>
 800a30a:	e000      	b.n	800a30e <prvUnlockQueue+0x46>
					break;
 800a30c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	22ff      	movs	r2, #255	; 0xff
 800a312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a316:	f001 fc55 	bl	800bbc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a31a:	f001 fc23 	bl	800bb64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a326:	e011      	b.n	800a34c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3310      	adds	r3, #16
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fcf7 	bl	800ad28 <xTaskRemoveFromEventList>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a340:	f000 fdce 	bl	800aee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	3b01      	subs	r3, #1
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a350:	2b00      	cmp	r3, #0
 800a352:	dce9      	bgt.n	800a328 <prvUnlockQueue+0x60>
 800a354:	e000      	b.n	800a358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	22ff      	movs	r2, #255	; 0xff
 800a35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a360:	f001 fc30 	bl	800bbc4 <vPortExitCritical>
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a374:	f001 fbf6 	bl	800bb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	e001      	b.n	800a38a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a38a:	f001 fc1b 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3a0:	f001 fbe0 	bl	800bb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d102      	bne.n	800a3b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e001      	b.n	800a3ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 fc03 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e014      	b.n	800a402 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3d8:	4a0f      	ldr	r2, [pc, #60]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10b      	bne.n	800a3fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3e4:	490c      	ldr	r1, [pc, #48]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <vQueueAddToRegistry+0x50>)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3fa:	e006      	b.n	800a40a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b07      	cmp	r3, #7
 800a406:	d9e7      	bls.n	800a3d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	24002e88 	.word	0x24002e88

0800a41c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a42c:	f001 fb9a 	bl	800bb64 <vPortEnterCritical>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d103      	bne.n	800a446 <vQueueWaitForMessageRestricted+0x2a>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a452:	d103      	bne.n	800a45c <vQueueWaitForMessageRestricted+0x40>
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45c:	f001 fbb2 	bl	800bbc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fc2d 	bl	800acd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f7ff ff26 	bl	800a2c8 <prvUnlockQueue>
	}
 800a47c:	bf00      	nop
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08e      	sub	sp, #56	; 0x38
 800a488:	af04      	add	r7, sp, #16
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	623b      	str	r3, [r7, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	e7fe      	b.n	800a4ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xTaskCreateStatic+0x46>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61fb      	str	r3, [r7, #28]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4ca:	23bc      	movs	r3, #188	; 0xbc
 800a4cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2bbc      	cmp	r3, #188	; 0xbc
 800a4d2:	d00a      	beq.n	800a4ea <xTaskCreateStatic+0x66>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61bb      	str	r3, [r7, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01e      	beq.n	800a530 <xTaskCreateStatic+0xac>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01b      	beq.n	800a530 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	2202      	movs	r2, #2
 800a506:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a50a:	2300      	movs	r3, #0
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	f107 0314 	add.w	r3, r7, #20
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f850 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a52a:	f000 f8f3 	bl	800a714 <prvAddNewTaskToReadyList>
 800a52e:	e001      	b.n	800a534 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
	}
 800a536:	4618      	mov	r0, r3
 800a538:	3728      	adds	r7, #40	; 0x28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b08c      	sub	sp, #48	; 0x30
 800a542:	af04      	add	r7, sp, #16
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fc28 	bl	800bda8 <pvPortMalloc>
 800a558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00e      	beq.n	800a57e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a560:	20bc      	movs	r0, #188	; 0xbc
 800a562:	f001 fc21 	bl	800bda8 <pvPortMalloc>
 800a566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
 800a574:	e005      	b.n	800a582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f001 fce2 	bl	800bf40 <vPortFree>
 800a57c:	e001      	b.n	800a582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d017      	beq.n	800a5b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a590:	88fa      	ldrh	r2, [r7, #6]
 800a592:	2300      	movs	r3, #0
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f80e 	bl	800a5c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5ac:	69f8      	ldr	r0, [r7, #28]
 800a5ae:	f000 f8b1 	bl	800a714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e002      	b.n	800a5be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5be:	69bb      	ldr	r3, [r7, #24]
	}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	461a      	mov	r2, r3
 800a5e0:	21a5      	movs	r1, #165	; 0xa5
 800a5e2:	f001 fe05 	bl	800c1f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a5f0:	440b      	add	r3, r1
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	f023 0307 	bic.w	r3, r3, #7
 800a5fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	617b      	str	r3, [r7, #20]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01f      	beq.n	800a666 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e012      	b.n	800a652 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	3334      	adds	r3, #52	; 0x34
 800a63c:	460a      	mov	r2, r1
 800a63e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	4413      	add	r3, r2
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	3301      	adds	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b0f      	cmp	r3, #15
 800a656:	d9e9      	bls.n	800a62c <prvInitialiseNewTask+0x64>
 800a658:	e000      	b.n	800a65c <prvInitialiseNewTask+0x94>
			{
				break;
 800a65a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a664:	e003      	b.n	800a66e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	2b37      	cmp	r3, #55	; 0x37
 800a672:	d901      	bls.n	800a678 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a674:	2337      	movs	r3, #55	; 0x37
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2200      	movs	r2, #0
 800a688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	3304      	adds	r3, #4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff f93e 	bl	8009910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3318      	adds	r3, #24
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff f939 	bl	8009910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	3354      	adds	r3, #84	; 0x54
 800a6c8:	2260      	movs	r2, #96	; 0x60
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fd8f 	bl	800c1f0 <memset>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <prvInitialiseNewTask+0x140>)
 800a6d6:	659a      	str	r2, [r3, #88]	; 0x58
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <prvInitialiseNewTask+0x144>)
 800a6dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <prvInitialiseNewTask+0x148>)
 800a6e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	69b8      	ldr	r0, [r7, #24]
 800a6ea:	f001 f90d 	bl	800b908 <pxPortInitialiseStack>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a700:	bf00      	nop
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0800cd34 	.word	0x0800cd34
 800a70c:	0800cd54 	.word	0x0800cd54
 800a710:	0800cd14 	.word	0x0800cd14

0800a714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a71c:	f001 fa22 	bl	800bb64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a720:	4b2d      	ldr	r3, [pc, #180]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	4a2c      	ldr	r2, [pc, #176]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a72a:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a732:	4a2a      	ldr	r2, [pc, #168]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a738:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <prvAddNewTaskToReadyList+0xc4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d110      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a740:	f000 fbf2 	bl	800af28 <prvInitialiseTaskLists>
 800a744:	e00d      	b.n	800a762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a746:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d109      	bne.n	800a762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a74e:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	429a      	cmp	r2, r3
 800a75a:	d802      	bhi.n	800a762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a75c:	4a1f      	ldr	r2, [pc, #124]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a762:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <prvAddNewTaskToReadyList+0xd0>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <prvAddNewTaskToReadyList+0x74>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <prvAddNewTaskToReadyList+0xd4>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <prvAddNewTaskToReadyList+0xd8>)
 800a796:	441a      	add	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7ff f8c3 	bl	800992a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7a4:	f001 fa0e 	bl	800bbc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <prvAddNewTaskToReadyList+0xcc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00e      	beq.n	800a7ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddNewTaskToReadyList+0xc8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d207      	bcs.n	800a7ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <prvAddNewTaskToReadyList+0xdc>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	2400339c 	.word	0x2400339c
 800a7dc:	24002ec8 	.word	0x24002ec8
 800a7e0:	240033a8 	.word	0x240033a8
 800a7e4:	240033b8 	.word	0x240033b8
 800a7e8:	240033a4 	.word	0x240033a4
 800a7ec:	24002ecc 	.word	0x24002ecc
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08a      	sub	sp, #40	; 0x28
 800a7f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a802:	463a      	mov	r2, r7
 800a804:	1d39      	adds	r1, r7, #4
 800a806:	f107 0308 	add.w	r3, r7, #8
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7ff f82c 	bl	8009868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	9202      	str	r2, [sp, #8]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	2300      	movs	r3, #0
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	2300      	movs	r3, #0
 800a820:	460a      	mov	r2, r1
 800a822:	4924      	ldr	r1, [pc, #144]	; (800a8b4 <vTaskStartScheduler+0xc0>)
 800a824:	4824      	ldr	r0, [pc, #144]	; (800a8b8 <vTaskStartScheduler+0xc4>)
 800a826:	f7ff fe2d 	bl	800a484 <xTaskCreateStatic>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <vTaskStartScheduler+0xc8>)
 800a82e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a830:	4b22      	ldr	r3, [pc, #136]	; (800a8bc <vTaskStartScheduler+0xc8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	e001      	b.n	800a842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d102      	bne.n	800a84e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a848:	f000 fd10 	bl	800b26c <xTimerCreateTimerTask>
 800a84c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d11b      	bne.n	800a88c <vTaskStartScheduler+0x98>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	613b      	str	r3, [r7, #16]
}
 800a866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a868:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <vTaskStartScheduler+0xcc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3354      	adds	r3, #84	; 0x54
 800a86e:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <vTaskStartScheduler+0xd0>)
 800a870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <vTaskStartScheduler+0xd4>)
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <vTaskStartScheduler+0xd8>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a880:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <vTaskStartScheduler+0xdc>)
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a886:	f001 f8cb 	bl	800ba20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a88a:	e00e      	b.n	800a8aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d10a      	bne.n	800a8aa <vTaskStartScheduler+0xb6>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	60fb      	str	r3, [r7, #12]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <vTaskStartScheduler+0xb4>
}
 800a8aa:	bf00      	nop
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800cc38 	.word	0x0800cc38
 800a8b8:	0800aef9 	.word	0x0800aef9
 800a8bc:	240033c0 	.word	0x240033c0
 800a8c0:	24002ec8 	.word	0x24002ec8
 800a8c4:	24000014 	.word	0x24000014
 800a8c8:	240033bc 	.word	0x240033bc
 800a8cc:	240033a8 	.word	0x240033a8
 800a8d0:	240033a0 	.word	0x240033a0

0800a8d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8d8:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <vTaskSuspendAll+0x18>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	4a03      	ldr	r2, [pc, #12]	; (800a8ec <vTaskSuspendAll+0x18>)
 800a8e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	240033c4 	.word	0x240033c4

0800a8f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8fe:	4b42      	ldr	r3, [pc, #264]	; (800aa08 <xTaskResumeAll+0x118>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xTaskResumeAll+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	603b      	str	r3, [r7, #0]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a91c:	f001 f922 	bl	800bb64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a920:	4b39      	ldr	r3, [pc, #228]	; (800aa08 <xTaskResumeAll+0x118>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3b01      	subs	r3, #1
 800a926:	4a38      	ldr	r2, [pc, #224]	; (800aa08 <xTaskResumeAll+0x118>)
 800a928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a92a:	4b37      	ldr	r3, [pc, #220]	; (800aa08 <xTaskResumeAll+0x118>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d162      	bne.n	800a9f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a932:	4b36      	ldr	r3, [pc, #216]	; (800aa0c <xTaskResumeAll+0x11c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d05e      	beq.n	800a9f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a93a:	e02f      	b.n	800a99c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93c:	4b34      	ldr	r3, [pc, #208]	; (800aa10 <xTaskResumeAll+0x120>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3318      	adds	r3, #24
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff f84b 	bl	80099e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff f846 	bl	80099e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	4b2d      	ldr	r3, [pc, #180]	; (800aa14 <xTaskResumeAll+0x124>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <xTaskResumeAll+0x7c>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a2a      	ldr	r2, [pc, #168]	; (800aa14 <xTaskResumeAll+0x124>)
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4a27      	ldr	r2, [pc, #156]	; (800aa18 <xTaskResumeAll+0x128>)
 800a97a:	441a      	add	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fe ffd1 	bl	800992a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98c:	4b23      	ldr	r3, [pc, #140]	; (800aa1c <xTaskResumeAll+0x12c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	429a      	cmp	r2, r3
 800a994:	d302      	bcc.n	800a99c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a996:	4b22      	ldr	r3, [pc, #136]	; (800aa20 <xTaskResumeAll+0x130>)
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a99c:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <xTaskResumeAll+0x120>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1cb      	bne.n	800a93c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9aa:	f000 fb5f 	bl	800b06c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <xTaskResumeAll+0x134>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d010      	beq.n	800a9dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9ba:	f000 f847 	bl	800aa4c <xTaskIncrementTick>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <xTaskResumeAll+0x130>)
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f1      	bne.n	800a9ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <xTaskResumeAll+0x134>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9dc:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <xTaskResumeAll+0x130>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9e8:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <xTaskResumeAll+0x138>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f8:	f001 f8e4 	bl	800bbc4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	240033c4 	.word	0x240033c4
 800aa0c:	2400339c 	.word	0x2400339c
 800aa10:	2400335c 	.word	0x2400335c
 800aa14:	240033a4 	.word	0x240033a4
 800aa18:	24002ecc 	.word	0x24002ecc
 800aa1c:	24002ec8 	.word	0x24002ec8
 800aa20:	240033b0 	.word	0x240033b0
 800aa24:	240033ac 	.word	0x240033ac
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <xTaskGetTickCount+0x1c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa38:	687b      	ldr	r3, [r7, #4]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	240033a0 	.word	0x240033a0

0800aa4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa56:	4b4f      	ldr	r3, [pc, #316]	; (800ab94 <xTaskIncrementTick+0x148>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 808f 	bne.w	800ab7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa60:	4b4d      	ldr	r3, [pc, #308]	; (800ab98 <xTaskIncrementTick+0x14c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa68:	4a4b      	ldr	r2, [pc, #300]	; (800ab98 <xTaskIncrementTick+0x14c>)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d120      	bne.n	800aab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa74:	4b49      	ldr	r3, [pc, #292]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	603b      	str	r3, [r7, #0]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xTaskIncrementTick+0x46>
 800aa94:	4b41      	ldr	r3, [pc, #260]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	4b41      	ldr	r3, [pc, #260]	; (800aba0 <xTaskIncrementTick+0x154>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a3f      	ldr	r2, [pc, #252]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	4a3f      	ldr	r2, [pc, #252]	; (800aba0 <xTaskIncrementTick+0x154>)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	4b3e      	ldr	r3, [pc, #248]	; (800aba4 <xTaskIncrementTick+0x158>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	4a3d      	ldr	r2, [pc, #244]	; (800aba4 <xTaskIncrementTick+0x158>)
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	f000 fadb 	bl	800b06c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aab6:	4b3c      	ldr	r3, [pc, #240]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d349      	bcc.n	800ab54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac0:	4b36      	ldr	r3, [pc, #216]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaca:	4b37      	ldr	r3, [pc, #220]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	601a      	str	r2, [r3, #0]
					break;
 800aad2:	e03f      	b.n	800ab54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad4:	4b31      	ldr	r3, [pc, #196]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d203      	bcs.n	800aaf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aaec:	4a2e      	ldr	r2, [pc, #184]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaf2:	e02f      	b.n	800ab54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe ff73 	bl	80099e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3318      	adds	r3, #24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe ff6a 	bl	80099e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	4b25      	ldr	r3, [pc, #148]	; (800abac <xTaskIncrementTick+0x160>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d903      	bls.n	800ab24 <xTaskIncrementTick+0xd8>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	4a22      	ldr	r2, [pc, #136]	; (800abac <xTaskIncrementTick+0x160>)
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <xTaskIncrementTick+0x164>)
 800ab32:	441a      	add	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fe fef5 	bl	800992a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <xTaskIncrementTick+0x168>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d3b8      	bcc.n	800aac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab52:	e7b5      	b.n	800aac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab54:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <xTaskIncrementTick+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	4915      	ldr	r1, [pc, #84]	; (800abb0 <xTaskIncrementTick+0x164>)
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d901      	bls.n	800ab70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <xTaskIncrementTick+0x16c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	e004      	b.n	800ab88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <xTaskIncrementTick+0x170>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	4a0d      	ldr	r2, [pc, #52]	; (800abbc <xTaskIncrementTick+0x170>)
 800ab86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab88:	697b      	ldr	r3, [r7, #20]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	240033c4 	.word	0x240033c4
 800ab98:	240033a0 	.word	0x240033a0
 800ab9c:	24003354 	.word	0x24003354
 800aba0:	24003358 	.word	0x24003358
 800aba4:	240033b4 	.word	0x240033b4
 800aba8:	240033bc 	.word	0x240033bc
 800abac:	240033a4 	.word	0x240033a4
 800abb0:	24002ecc 	.word	0x24002ecc
 800abb4:	24002ec8 	.word	0x24002ec8
 800abb8:	240033b0 	.word	0x240033b0
 800abbc:	240033ac 	.word	0x240033ac

0800abc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abc6:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <vTaskSwitchContext+0xb0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abce:	4b29      	ldr	r3, [pc, #164]	; (800ac74 <vTaskSwitchContext+0xb4>)
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abd4:	e046      	b.n	800ac64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abd6:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <vTaskSwitchContext+0xb4>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abdc:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <vTaskSwitchContext+0xb8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e010      	b.n	800ac06 <vTaskSwitchContext+0x46>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <vTaskSwitchContext+0x40>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vTaskSwitchContext+0x3e>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	491d      	ldr	r1, [pc, #116]	; (800ac7c <vTaskSwitchContext+0xbc>)
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0e4      	beq.n	800abe4 <vTaskSwitchContext+0x24>
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <vTaskSwitchContext+0xbc>)
 800ac26:	4413      	add	r3, r2
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d104      	bne.n	800ac4a <vTaskSwitchContext+0x8a>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	4a0b      	ldr	r2, [pc, #44]	; (800ac80 <vTaskSwitchContext+0xc0>)
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <vTaskSwitchContext+0xb8>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <vTaskSwitchContext+0xc0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3354      	adds	r3, #84	; 0x54
 800ac60:	4a08      	ldr	r2, [pc, #32]	; (800ac84 <vTaskSwitchContext+0xc4>)
 800ac62:	6013      	str	r3, [r2, #0]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	240033c4 	.word	0x240033c4
 800ac74:	240033b0 	.word	0x240033b0
 800ac78:	240033a4 	.word	0x240033a4
 800ac7c:	24002ecc 	.word	0x24002ecc
 800ac80:	24002ec8 	.word	0x24002ec8
 800ac84:	24000014 	.word	0x24000014

0800ac88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acae:	4b07      	ldr	r3, [pc, #28]	; (800accc <vTaskPlaceOnEventList+0x44>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3318      	adds	r3, #24
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7fe fe5b 	bl	8009972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acbc:	2101      	movs	r1, #1
 800acbe:	6838      	ldr	r0, [r7, #0]
 800acc0:	f000 fa80 	bl	800b1c4 <prvAddCurrentTaskToDelayedList>
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	24002ec8 	.word	0x24002ec8

0800acd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	617b      	str	r3, [r7, #20]
}
 800acf4:	bf00      	nop
 800acf6:	e7fe      	b.n	800acf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <vTaskPlaceOnEventListRestricted+0x54>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3318      	adds	r3, #24
 800acfe:	4619      	mov	r1, r3
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7fe fe12 	bl	800992a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	68b8      	ldr	r0, [r7, #8]
 800ad16:	f000 fa55 	bl	800b1c4 <prvAddCurrentTaskToDelayedList>
	}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	24002ec8 	.word	0x24002ec8

0800ad28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	3318      	adds	r3, #24
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fe43 	bl	80099e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5e:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <xTaskRemoveFromEventList+0xb0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d11d      	bne.n	800ada2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe fe3a 	bl	80099e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	4b19      	ldr	r3, [pc, #100]	; (800addc <xTaskRemoveFromEventList+0xb4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <xTaskRemoveFromEventList+0x5c>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4a16      	ldr	r2, [pc, #88]	; (800addc <xTaskRemoveFromEventList+0xb4>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <xTaskRemoveFromEventList+0xb8>)
 800ad92:	441a      	add	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe fdc5 	bl	800992a <vListInsertEnd>
 800ada0:	e005      	b.n	800adae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3318      	adds	r3, #24
 800ada6:	4619      	mov	r1, r3
 800ada8:	480e      	ldr	r0, [pc, #56]	; (800ade4 <xTaskRemoveFromEventList+0xbc>)
 800adaa:	f7fe fdbe 	bl	800992a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <xTaskRemoveFromEventList+0xc0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	429a      	cmp	r2, r3
 800adba:	d905      	bls.n	800adc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <xTaskRemoveFromEventList+0xc4>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e001      	b.n	800adcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adcc:	697b      	ldr	r3, [r7, #20]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	240033c4 	.word	0x240033c4
 800addc:	240033a4 	.word	0x240033a4
 800ade0:	24002ecc 	.word	0x24002ecc
 800ade4:	2400335c 	.word	0x2400335c
 800ade8:	24002ec8 	.word	0x24002ec8
 800adec:	240033b0 	.word	0x240033b0

0800adf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <vTaskInternalSetTimeOutState+0x24>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <vTaskInternalSetTimeOutState+0x28>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	605a      	str	r2, [r3, #4]
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	240033b4 	.word	0x240033b4
 800ae18:	240033a0 	.word	0x240033a0

0800ae1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	613b      	str	r3, [r7, #16]
}
 800ae3e:	bf00      	nop
 800ae40:	e7fe      	b.n	800ae40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	60fb      	str	r3, [r7, #12]
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae5e:	f000 fe81 	bl	800bb64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <xTaskCheckForTimeOut+0xbc>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	69ba      	ldr	r2, [r7, #24]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d102      	bne.n	800ae82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	e023      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	4b15      	ldr	r3, [pc, #84]	; (800aedc <xTaskCheckForTimeOut+0xc0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d007      	beq.n	800ae9e <xTaskCheckForTimeOut+0x82>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
 800ae9c:	e015      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d20b      	bcs.n	800aec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ff9b 	bl	800adf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e004      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeca:	f000 fe7b 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800aece:	69fb      	ldr	r3, [r7, #28]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	240033a0 	.word	0x240033a0
 800aedc:	240033b4 	.word	0x240033b4

0800aee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aee0:	b480      	push	{r7}
 800aee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aee4:	4b03      	ldr	r3, [pc, #12]	; (800aef4 <vTaskMissedYield+0x14>)
 800aee6:	2201      	movs	r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
}
 800aeea:	bf00      	nop
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	240033b0 	.word	0x240033b0

0800aef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af00:	f000 f852 	bl	800afa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af04:	4b06      	ldr	r3, [pc, #24]	; (800af20 <prvIdleTask+0x28>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d9f9      	bls.n	800af00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <prvIdleTask+0x2c>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af1c:	e7f0      	b.n	800af00 <prvIdleTask+0x8>
 800af1e:	bf00      	nop
 800af20:	24002ecc 	.word	0x24002ecc
 800af24:	e000ed04 	.word	0xe000ed04

0800af28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
 800af32:	e00c      	b.n	800af4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4a12      	ldr	r2, [pc, #72]	; (800af88 <prvInitialiseTaskLists+0x60>)
 800af40:	4413      	add	r3, r2
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fcc4 	bl	80098d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3301      	adds	r3, #1
 800af4c:	607b      	str	r3, [r7, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b37      	cmp	r3, #55	; 0x37
 800af52:	d9ef      	bls.n	800af34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af54:	480d      	ldr	r0, [pc, #52]	; (800af8c <prvInitialiseTaskLists+0x64>)
 800af56:	f7fe fcbb 	bl	80098d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af5a:	480d      	ldr	r0, [pc, #52]	; (800af90 <prvInitialiseTaskLists+0x68>)
 800af5c:	f7fe fcb8 	bl	80098d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af60:	480c      	ldr	r0, [pc, #48]	; (800af94 <prvInitialiseTaskLists+0x6c>)
 800af62:	f7fe fcb5 	bl	80098d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af66:	480c      	ldr	r0, [pc, #48]	; (800af98 <prvInitialiseTaskLists+0x70>)
 800af68:	f7fe fcb2 	bl	80098d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af6c:	480b      	ldr	r0, [pc, #44]	; (800af9c <prvInitialiseTaskLists+0x74>)
 800af6e:	f7fe fcaf 	bl	80098d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af72:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <prvInitialiseTaskLists+0x78>)
 800af74:	4a05      	ldr	r2, [pc, #20]	; (800af8c <prvInitialiseTaskLists+0x64>)
 800af76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <prvInitialiseTaskLists+0x7c>)
 800af7a:	4a05      	ldr	r2, [pc, #20]	; (800af90 <prvInitialiseTaskLists+0x68>)
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	24002ecc 	.word	0x24002ecc
 800af8c:	2400332c 	.word	0x2400332c
 800af90:	24003340 	.word	0x24003340
 800af94:	2400335c 	.word	0x2400335c
 800af98:	24003370 	.word	0x24003370
 800af9c:	24003388 	.word	0x24003388
 800afa0:	24003354 	.word	0x24003354
 800afa4:	24003358 	.word	0x24003358

0800afa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afae:	e019      	b.n	800afe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afb0:	f000 fdd8 	bl	800bb64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb4:	4b10      	ldr	r3, [pc, #64]	; (800aff8 <prvCheckTasksWaitingTermination+0x50>)
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fd0f 	bl	80099e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <prvCheckTasksWaitingTermination+0x54>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a0b      	ldr	r2, [pc, #44]	; (800affc <prvCheckTasksWaitingTermination+0x54>)
 800afce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	4a0a      	ldr	r2, [pc, #40]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afda:	f000 fdf3 	bl	800bbc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f810 	bl	800b004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afe4:	4b06      	ldr	r3, [pc, #24]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e1      	bne.n	800afb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	24003370 	.word	0x24003370
 800affc:	2400339c 	.word	0x2400339c
 800b000:	24003384 	.word	0x24003384

0800b004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3354      	adds	r3, #84	; 0x54
 800b010:	4618      	mov	r0, r3
 800b012:	f001 f997 	bl	800c344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d108      	bne.n	800b032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	4618      	mov	r0, r3
 800b026:	f000 ff8b 	bl	800bf40 <vPortFree>
				vPortFree( pxTCB );
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 ff88 	bl	800bf40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b030:	e018      	b.n	800b064 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d103      	bne.n	800b044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 ff7f 	bl	800bf40 <vPortFree>
	}
 800b042:	e00f      	b.n	800b064 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d00a      	beq.n	800b064 <prvDeleteTCB+0x60>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60fb      	str	r3, [r7, #12]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <prvDeleteTCB+0x5e>
	}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b072:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <prvResetNextTaskUnblockTime+0x38>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b084:	e008      	b.n	800b098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b086:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <prvResetNextTaskUnblockTime+0x38>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	4a04      	ldr	r2, [pc, #16]	; (800b0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b096:	6013      	str	r3, [r2, #0]
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	24003354 	.word	0x24003354
 800b0a8:	240033bc 	.word	0x240033bc

0800b0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <xTaskGetSchedulerState+0x34>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	e008      	b.n	800b0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0c0:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <xTaskGetSchedulerState+0x38>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	607b      	str	r3, [r7, #4]
 800b0cc:	e001      	b.n	800b0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0d2:	687b      	ldr	r3, [r7, #4]
	}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	240033a8 	.word	0x240033a8
 800b0e4:	240033c4 	.word	0x240033c4

0800b0e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d056      	beq.n	800b1ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0fe:	4b2e      	ldr	r3, [pc, #184]	; (800b1b8 <xTaskPriorityDisinherit+0xd0>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	429a      	cmp	r2, r3
 800b106:	d00a      	beq.n	800b11e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	60fb      	str	r3, [r7, #12]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14e:	429a      	cmp	r2, r3
 800b150:	d02c      	beq.n	800b1ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b156:	2b00      	cmp	r3, #0
 800b158:	d128      	bne.n	800b1ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fc40 	bl	80099e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <xTaskPriorityDisinherit+0xd4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d903      	bls.n	800b18c <xTaskPriorityDisinherit+0xa4>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <xTaskPriorityDisinherit+0xd4>)
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <xTaskPriorityDisinherit+0xd8>)
 800b19a:	441a      	add	r2, r3
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f7fe fbc1 	bl	800992a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1ac:	697b      	ldr	r3, [r7, #20]
	}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	24002ec8 	.word	0x24002ec8
 800b1bc:	240033a4 	.word	0x240033a4
 800b1c0:	24002ecc 	.word	0x24002ecc

0800b1c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1ce:	4b21      	ldr	r3, [pc, #132]	; (800b254 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1d4:	4b20      	ldr	r3, [pc, #128]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fc02 	bl	80099e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d10a      	bne.n	800b1fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d007      	beq.n	800b1fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ee:	4b1a      	ldr	r3, [pc, #104]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4819      	ldr	r0, [pc, #100]	; (800b25c <prvAddCurrentTaskToDelayedList+0x98>)
 800b1f8:	f7fe fb97 	bl	800992a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1fc:	e026      	b.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b206:	4b14      	ldr	r3, [pc, #80]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	429a      	cmp	r2, r3
 800b214:	d209      	bcs.n	800b22a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b216:	4b12      	ldr	r3, [pc, #72]	; (800b260 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b0f      	ldr	r3, [pc, #60]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3304      	adds	r3, #4
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fe fba5 	bl	8009972 <vListInsert>
}
 800b228:	e010      	b.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b22a:	4b0e      	ldr	r3, [pc, #56]	; (800b264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fb9b 	bl	8009972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	429a      	cmp	r2, r3
 800b244:	d202      	bcs.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b246:	4a08      	ldr	r2, [pc, #32]	; (800b268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	6013      	str	r3, [r2, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	240033a0 	.word	0x240033a0
 800b258:	24002ec8 	.word	0x24002ec8
 800b25c:	24003388 	.word	0x24003388
 800b260:	24003358 	.word	0x24003358
 800b264:	24003354 	.word	0x24003354
 800b268:	240033bc 	.word	0x240033bc

0800b26c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08a      	sub	sp, #40	; 0x28
 800b270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b272:	2300      	movs	r3, #0
 800b274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b276:	f000 fb07 	bl	800b888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b27a:	4b1c      	ldr	r3, [pc, #112]	; (800b2ec <xTimerCreateTimerTask+0x80>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d021      	beq.n	800b2c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b28a:	1d3a      	adds	r2, r7, #4
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	f107 030c 	add.w	r3, r7, #12
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe fb01 	bl	800989c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	9202      	str	r2, [sp, #8]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	460a      	mov	r2, r1
 800b2ac:	4910      	ldr	r1, [pc, #64]	; (800b2f0 <xTimerCreateTimerTask+0x84>)
 800b2ae:	4811      	ldr	r0, [pc, #68]	; (800b2f4 <xTimerCreateTimerTask+0x88>)
 800b2b0:	f7ff f8e8 	bl	800a484 <xTaskCreateStatic>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	4a10      	ldr	r2, [pc, #64]	; (800b2f8 <xTimerCreateTimerTask+0x8c>)
 800b2b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <xTimerCreateTimerTask+0x8c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	613b      	str	r3, [r7, #16]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2e2:	697b      	ldr	r3, [r7, #20]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	240033f8 	.word	0x240033f8
 800b2f0:	0800cc40 	.word	0x0800cc40
 800b2f4:	0800b431 	.word	0x0800b431
 800b2f8:	240033fc 	.word	0x240033fc

0800b2fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b32a:	4b1a      	ldr	r3, [pc, #104]	; (800b394 <xTimerGenericCommand+0x98>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d02a      	beq.n	800b388 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b05      	cmp	r3, #5
 800b342:	dc18      	bgt.n	800b376 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b344:	f7ff feb2 	bl	800b0ac <xTaskGetSchedulerState>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d109      	bne.n	800b362 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <xTimerGenericCommand+0x98>)
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f107 0110 	add.w	r1, r7, #16
 800b356:	2300      	movs	r3, #0
 800b358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35a:	f7fe fcab 	bl	8009cb4 <xQueueGenericSend>
 800b35e:	6278      	str	r0, [r7, #36]	; 0x24
 800b360:	e012      	b.n	800b388 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b362:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <xTimerGenericCommand+0x98>)
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f107 0110 	add.w	r1, r7, #16
 800b36a:	2300      	movs	r3, #0
 800b36c:	2200      	movs	r2, #0
 800b36e:	f7fe fca1 	bl	8009cb4 <xQueueGenericSend>
 800b372:	6278      	str	r0, [r7, #36]	; 0x24
 800b374:	e008      	b.n	800b388 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b376:	4b07      	ldr	r3, [pc, #28]	; (800b394 <xTimerGenericCommand+0x98>)
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f107 0110 	add.w	r1, r7, #16
 800b37e:	2300      	movs	r3, #0
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	f7fe fd95 	bl	8009eb0 <xQueueGenericSendFromISR>
 800b386:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3728      	adds	r7, #40	; 0x28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	240033f8 	.word	0x240033f8

0800b398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a2:	4b22      	ldr	r3, [pc, #136]	; (800b42c <prvProcessExpiredTimer+0x94>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fb17 	bl	80099e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d022      	beq.n	800b40a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	699a      	ldr	r2, [r3, #24]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	18d1      	adds	r1, r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	6978      	ldr	r0, [r7, #20]
 800b3d2:	f000 f8d1 	bl	800b578 <prvInsertTimerInActiveList>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01f      	beq.n	800b41c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6978      	ldr	r0, [r7, #20]
 800b3e8:	f7ff ff88 	bl	800b2fc <xTimerGenericCommand>
 800b3ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d113      	bne.n	800b41c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	60fb      	str	r3, [r7, #12]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b410:	f023 0301 	bic.w	r3, r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	6978      	ldr	r0, [r7, #20]
 800b422:	4798      	blx	r3
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	240033f0 	.word	0x240033f0

0800b430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f857 	bl	800b4f0 <prvGetNextExpireTime>
 800b442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f803 	bl	800b454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b44e:	f000 f8d5 	bl	800b5fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b452:	e7f1      	b.n	800b438 <prvTimerTask+0x8>

0800b454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b45e:	f7ff fa39 	bl	800a8d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f866 	bl	800b538 <prvSampleTimeNow>
 800b46c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d130      	bne.n	800b4d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d806      	bhi.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b482:	f7ff fa35 	bl	800a8f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ff85 	bl	800b398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b48e:	e024      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b496:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <prvProcessTimerOrBlockTask+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <prvProcessTimerOrBlockTask+0x50>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <prvProcessTimerOrBlockTask+0x52>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <prvProcessTimerOrBlockTask+0x94>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f7fe ffb1 	bl	800a41c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4ba:	f7ff fa19 	bl	800a8f0 <xTaskResumeAll>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <prvProcessTimerOrBlockTask+0x98>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
}
 800b4d4:	e001      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4d6:	f7ff fa0b 	bl	800a8f0 <xTaskResumeAll>
}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	240033f4 	.word	0x240033f4
 800b4e8:	240033f8 	.word	0x240033f8
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4f8:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <prvGetNextExpireTime+0x44>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <prvGetNextExpireTime+0x16>
 800b502:	2201      	movs	r2, #1
 800b504:	e000      	b.n	800b508 <prvGetNextExpireTime+0x18>
 800b506:	2200      	movs	r2, #0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b514:	4b07      	ldr	r3, [pc, #28]	; (800b534 <prvGetNextExpireTime+0x44>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e001      	b.n	800b524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	240033f0 	.word	0x240033f0

0800b538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b540:	f7ff fa74 	bl	800aa2c <xTaskGetTickCount>
 800b544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <prvSampleTimeNow+0x3c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d205      	bcs.n	800b55c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b550:	f000 f936 	bl	800b7c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b562:	4a04      	ldr	r2, [pc, #16]	; (800b574 <prvSampleTimeNow+0x3c>)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b568:	68fb      	ldr	r3, [r7, #12]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	24003400 	.word	0x24003400

0800b578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d812      	bhi.n	800b5c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d302      	bcc.n	800b5b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e01b      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5b2:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <prvInsertTimerInActiveList+0x7c>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f7fe f9d8 	bl	8009972 <vListInsert>
 800b5c2:	e012      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d206      	bcs.n	800b5da <prvInsertTimerInActiveList+0x62>
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d302      	bcc.n	800b5da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e007      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5da:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <prvInsertTimerInActiveList+0x80>)
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f7fe f9c4 	bl	8009972 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	240033f4 	.word	0x240033f4
 800b5f8:	240033f0 	.word	0x240033f0

0800b5fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	; 0x38
 800b600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b602:	e0ca      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	da18      	bge.n	800b63c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b60a:	1d3b      	adds	r3, r7, #4
 800b60c:	3304      	adds	r3, #4
 800b60e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	61fb      	str	r3, [r7, #28]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b632:	6850      	ldr	r0, [r2, #4]
 800b634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b636:	6892      	ldr	r2, [r2, #8]
 800b638:	4611      	mov	r1, r2
 800b63a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f2c0 80aa 	blt.w	800b798 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe f9c5 	bl	80099e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b65a:	463b      	mov	r3, r7
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff ff6b 	bl	800b538 <prvSampleTimeNow>
 800b662:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b09      	cmp	r3, #9
 800b668:	f200 8097 	bhi.w	800b79a <prvProcessReceivedCommands+0x19e>
 800b66c:	a201      	add	r2, pc, #4	; (adr r2, 800b674 <prvProcessReceivedCommands+0x78>)
 800b66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b672:	bf00      	nop
 800b674:	0800b69d 	.word	0x0800b69d
 800b678:	0800b69d 	.word	0x0800b69d
 800b67c:	0800b69d 	.word	0x0800b69d
 800b680:	0800b711 	.word	0x0800b711
 800b684:	0800b725 	.word	0x0800b725
 800b688:	0800b76f 	.word	0x0800b76f
 800b68c:	0800b69d 	.word	0x0800b69d
 800b690:	0800b69d 	.word	0x0800b69d
 800b694:	0800b711 	.word	0x0800b711
 800b698:	0800b725 	.word	0x0800b725
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a2:	f043 0301 	orr.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	18d1      	adds	r1, r2, r3
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6bc:	f7ff ff5c 	bl	800b578 <prvInsertTimerInActiveList>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d069      	beq.n	800b79a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d05e      	beq.n	800b79a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ee:	f7ff fe05 	bl	800b2fc <xTimerGenericCommand>
 800b6f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d14f      	bne.n	800b79a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	61bb      	str	r3, [r7, #24]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b716:	f023 0301 	bic.w	r3, r3, #1
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b722:	e03a      	b.n	800b79a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72a:	f043 0301 	orr.w	r3, r3, #1
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10a      	bne.n	800b75a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	617b      	str	r3, [r7, #20]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	18d1      	adds	r1, r2, r3
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b768:	f7ff ff06 	bl	800b578 <prvInsertTimerInActiveList>
					break;
 800b76c:	e015      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77e:	f000 fbdf 	bl	800bf40 <vPortFree>
 800b782:	e00a      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b78a:	f023 0301 	bic.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b796:	e000      	b.n	800b79a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b79a:	4b08      	ldr	r3, [pc, #32]	; (800b7bc <prvProcessReceivedCommands+0x1c0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	1d39      	adds	r1, r7, #4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fc20 	bl	8009fe8 <xQueueReceive>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f af2a 	bne.w	800b604 <prvProcessReceivedCommands+0x8>
	}
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	3730      	adds	r7, #48	; 0x30
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	240033f8 	.word	0x240033f8

0800b7c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7c6:	e048      	b.n	800b85a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d2:	4b2b      	ldr	r3, [pc, #172]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe f8ff 	bl	80099e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d02e      	beq.n	800b85a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4413      	add	r3, r2
 800b804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d90e      	bls.n	800b82c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3304      	adds	r3, #4
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f7fe f8a4 	bl	8009972 <vListInsert>
 800b82a:	e016      	b.n	800b85a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b82c:	2300      	movs	r3, #0
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	2300      	movs	r3, #0
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	2100      	movs	r1, #0
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7ff fd60 	bl	800b2fc <xTimerGenericCommand>
 800b83c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	603b      	str	r3, [r7, #0]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b85a:	4b09      	ldr	r3, [pc, #36]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1b1      	bne.n	800b7c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b864:	4b06      	ldr	r3, [pc, #24]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b86a:	4b06      	ldr	r3, [pc, #24]	; (800b884 <prvSwitchTimerLists+0xc4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a04      	ldr	r2, [pc, #16]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b870:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b872:	4a04      	ldr	r2, [pc, #16]	; (800b884 <prvSwitchTimerLists+0xc4>)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	6013      	str	r3, [r2, #0]
}
 800b878:	bf00      	nop
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	240033f0 	.word	0x240033f0
 800b884:	240033f4 	.word	0x240033f4

0800b888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b88e:	f000 f969 	bl	800bb64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d120      	bne.n	800b8dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b89a:	4814      	ldr	r0, [pc, #80]	; (800b8ec <prvCheckForValidListAndQueue+0x64>)
 800b89c:	f7fe f818 	bl	80098d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8a0:	4813      	ldr	r0, [pc, #76]	; (800b8f0 <prvCheckForValidListAndQueue+0x68>)
 800b8a2:	f7fe f815 	bl	80098d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8a6:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <prvCheckForValidListAndQueue+0x6c>)
 800b8a8:	4a10      	ldr	r2, [pc, #64]	; (800b8ec <prvCheckForValidListAndQueue+0x64>)
 800b8aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8ac:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <prvCheckForValidListAndQueue+0x70>)
 800b8ae:	4a10      	ldr	r2, [pc, #64]	; (800b8f0 <prvCheckForValidListAndQueue+0x68>)
 800b8b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <prvCheckForValidListAndQueue+0x74>)
 800b8b8:	4a11      	ldr	r2, [pc, #68]	; (800b900 <prvCheckForValidListAndQueue+0x78>)
 800b8ba:	2110      	movs	r1, #16
 800b8bc:	200a      	movs	r0, #10
 800b8be:	f7fe f923 	bl	8009b08 <xQueueGenericCreateStatic>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8c8:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	490b      	ldr	r1, [pc, #44]	; (800b904 <prvCheckForValidListAndQueue+0x7c>)
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe fd76 	bl	800a3c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8dc:	f000 f972 	bl	800bbc4 <vPortExitCritical>
}
 800b8e0:	bf00      	nop
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	240033f8 	.word	0x240033f8
 800b8ec:	240033c8 	.word	0x240033c8
 800b8f0:	240033dc 	.word	0x240033dc
 800b8f4:	240033f0 	.word	0x240033f0
 800b8f8:	240033f4 	.word	0x240033f4
 800b8fc:	240034a4 	.word	0x240034a4
 800b900:	24003404 	.word	0x24003404
 800b904:	0800cc48 	.word	0x0800cc48

0800b908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3b04      	subs	r3, #4
 800b918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3b04      	subs	r3, #4
 800b926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f023 0201 	bic.w	r2, r3, #1
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3b04      	subs	r3, #4
 800b936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b938:	4a0c      	ldr	r2, [pc, #48]	; (800b96c <pxPortInitialiseStack+0x64>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b14      	subs	r3, #20
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3b04      	subs	r3, #4
 800b94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f06f 0202 	mvn.w	r2, #2
 800b956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3b20      	subs	r3, #32
 800b95c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b95e:	68fb      	ldr	r3, [r7, #12]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	0800b971 	.word	0x0800b971

0800b970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b97a:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <prvTaskExitError+0x54>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b982:	d00a      	beq.n	800b99a <prvTaskExitError+0x2a>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	60fb      	str	r3, [r7, #12]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <prvTaskExitError+0x28>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	60bb      	str	r3, [r7, #8]
}
 800b9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9ae:	bf00      	nop
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0fc      	beq.n	800b9b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	24000010 	.word	0x24000010
	...

0800b9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <pxCurrentTCBConst2>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	6808      	ldr	r0, [r1, #0]
 800b9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	f380 8809 	msr	PSP, r0
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f04f 0000 	mov.w	r0, #0
 800b9e6:	f380 8811 	msr	BASEPRI, r0
 800b9ea:	4770      	bx	lr
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst2>:
 800b9f0:	24002ec8 	.word	0x24002ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop

0800b9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9f8:	4808      	ldr	r0, [pc, #32]	; (800ba1c <prvPortStartFirstTask+0x24>)
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	f380 8808 	msr	MSP, r0
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8814 	msr	CONTROL, r0
 800ba0a:	b662      	cpsie	i
 800ba0c:	b661      	cpsie	f
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	df00      	svc	0
 800ba18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba1a:	bf00      	nop
 800ba1c:	e000ed08 	.word	0xe000ed08

0800ba20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba26:	4b46      	ldr	r3, [pc, #280]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a46      	ldr	r2, [pc, #280]	; (800bb44 <xPortStartScheduler+0x124>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10a      	bne.n	800ba46 <xPortStartScheduler+0x26>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	613b      	str	r3, [r7, #16]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba46:	4b3e      	ldr	r3, [pc, #248]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a3f      	ldr	r2, [pc, #252]	; (800bb48 <xPortStartScheduler+0x128>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10a      	bne.n	800ba66 <xPortStartScheduler+0x46>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	60fb      	str	r3, [r7, #12]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba66:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <xPortStartScheduler+0x12c>)
 800ba68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	22ff      	movs	r2, #255	; 0xff
 800ba76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b31      	ldr	r3, [pc, #196]	; (800bb50 <xPortStartScheduler+0x130>)
 800ba8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba8e:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba94:	e009      	b.n	800baaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba96:	4b2f      	ldr	r3, [pc, #188]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baaa:	78fb      	ldrb	r3, [r7, #3]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab2:	2b80      	cmp	r3, #128	; 0x80
 800bab4:	d0ef      	beq.n	800ba96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <xPortStartScheduler+0x134>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f1c3 0307 	rsb	r3, r3, #7
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d00a      	beq.n	800bad8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	60bb      	str	r3, [r7, #8]
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bad8:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <xPortStartScheduler+0x134>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	4a1d      	ldr	r2, [pc, #116]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bae2:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baea:	4a1a      	ldr	r2, [pc, #104]	; (800bb54 <xPortStartScheduler+0x134>)
 800baec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baf6:	4b18      	ldr	r3, [pc, #96]	; (800bb58 <xPortStartScheduler+0x138>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <xPortStartScheduler+0x138>)
 800bafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb02:	4b15      	ldr	r3, [pc, #84]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a14      	ldr	r2, [pc, #80]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb0e:	f000 f8dd 	bl	800bccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb12:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <xPortStartScheduler+0x13c>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb18:	f000 f8fc 	bl	800bd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a0f      	ldr	r2, [pc, #60]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb28:	f7ff ff66 	bl	800b9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb2c:	f7ff f848 	bl	800abc0 <vTaskSwitchContext>
	prvTaskExitError();
 800bb30:	f7ff ff1e 	bl	800b970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	e000ed00 	.word	0xe000ed00
 800bb44:	410fc271 	.word	0x410fc271
 800bb48:	410fc270 	.word	0x410fc270
 800bb4c:	e000e400 	.word	0xe000e400
 800bb50:	240034f4 	.word	0x240034f4
 800bb54:	240034f8 	.word	0x240034f8
 800bb58:	e000ed20 	.word	0xe000ed20
 800bb5c:	24000010 	.word	0x24000010
 800bb60:	e000ef34 	.word	0xe000ef34

0800bb64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	607b      	str	r3, [r7, #4]
}
 800bb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb7e:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb88:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d10f      	bne.n	800bbb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <vPortEnterCritical+0x5c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	603b      	str	r3, [r7, #0]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <vPortEnterCritical+0x4a>
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	24000010 	.word	0x24000010
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbca:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <vPortExitCritical+0x50>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <vPortExitCritical+0x24>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	607b      	str	r3, [r7, #4]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <vPortExitCritical+0x50>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4a09      	ldr	r2, [pc, #36]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbf2:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <vPortExitCritical+0x42>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f383 8811 	msr	BASEPRI, r3
}
 800bc04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	24000010 	.word	0x24000010
	...

0800bc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc20:	f3ef 8009 	mrs	r0, PSP
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <pxCurrentTCBConst>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	f01e 0f10 	tst.w	lr, #16
 800bc30:	bf08      	it	eq
 800bc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	6010      	str	r0, [r2, #0]
 800bc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc44:	f380 8811 	msr	BASEPRI, r0
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f7fe ffb6 	bl	800abc0 <vTaskSwitchContext>
 800bc54:	f04f 0000 	mov.w	r0, #0
 800bc58:	f380 8811 	msr	BASEPRI, r0
 800bc5c:	bc09      	pop	{r0, r3}
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	6808      	ldr	r0, [r1, #0]
 800bc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc66:	f01e 0f10 	tst.w	lr, #16
 800bc6a:	bf08      	it	eq
 800bc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc70:	f380 8809 	msr	PSP, r0
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w

0800bc80 <pxCurrentTCBConst>:
 800bc80:	24002ec8 	.word	0x24002ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop

0800bc88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bca2:	f7fe fed3 	bl	800aa4c <xTaskIncrementTick>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <xPortSysTickHandler+0x40>)
 800bcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f383 8811 	msr	BASEPRI, r3
}
 800bcbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <vPortSetupTimerInterrupt+0x38>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <vPortSetupTimerInterrupt+0x3c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	; (800bd0c <vPortSetupTimerInterrupt+0x40>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	099b      	lsrs	r3, r3, #6
 800bce8:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <vPortSetupTimerInterrupt+0x44>)
 800bcea:	3b01      	subs	r3, #1
 800bcec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	e000e010 	.word	0xe000e010
 800bd04:	e000e018 	.word	0xe000e018
 800bd08:	24000000 	.word	0x24000000
 800bd0c:	10624dd3 	.word	0x10624dd3
 800bd10:	e000e014 	.word	0xe000e014

0800bd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd24 <vPortEnableVFP+0x10>
 800bd18:	6801      	ldr	r1, [r0, #0]
 800bd1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd1e:	6001      	str	r1, [r0, #0]
 800bd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd22:	bf00      	nop
 800bd24:	e000ed88 	.word	0xe000ed88

0800bd28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd2e:	f3ef 8305 	mrs	r3, IPSR
 800bd32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b0f      	cmp	r3, #15
 800bd38:	d914      	bls.n	800bd64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <vPortValidateInterruptPriority+0x70>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <vPortValidateInterruptPriority+0x74>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	7afa      	ldrb	r2, [r7, #11]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d20a      	bcs.n	800bd64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd64:	4b0e      	ldr	r3, [pc, #56]	; (800bda0 <vPortValidateInterruptPriority+0x78>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <vPortValidateInterruptPriority+0x7c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d90a      	bls.n	800bd8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	603b      	str	r3, [r7, #0]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <vPortValidateInterruptPriority+0x60>
	}
 800bd8a:	bf00      	nop
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	e000e3f0 	.word	0xe000e3f0
 800bd9c:	240034f4 	.word	0x240034f4
 800bda0:	e000ed0c 	.word	0xe000ed0c
 800bda4:	240034f8 	.word	0x240034f8

0800bda8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08a      	sub	sp, #40	; 0x28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdb4:	f7fe fd8e 	bl	800a8d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdb8:	4b5b      	ldr	r3, [pc, #364]	; (800bf28 <pvPortMalloc+0x180>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdc0:	f000 f920 	bl	800c004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdc4:	4b59      	ldr	r3, [pc, #356]	; (800bf2c <pvPortMalloc+0x184>)
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f040 8093 	bne.w	800bef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01d      	beq.n	800be14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bdd8:	2208      	movs	r2, #8
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4413      	add	r3, r2
 800bdde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f003 0307 	and.w	r3, r3, #7
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d014      	beq.n	800be14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f023 0307 	bic.w	r3, r3, #7
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <pvPortMalloc+0x6c>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	617b      	str	r3, [r7, #20]
}
 800be10:	bf00      	nop
 800be12:	e7fe      	b.n	800be12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d06e      	beq.n	800bef8 <pvPortMalloc+0x150>
 800be1a:	4b45      	ldr	r3, [pc, #276]	; (800bf30 <pvPortMalloc+0x188>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	429a      	cmp	r2, r3
 800be22:	d869      	bhi.n	800bef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be24:	4b43      	ldr	r3, [pc, #268]	; (800bf34 <pvPortMalloc+0x18c>)
 800be26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be28:	4b42      	ldr	r3, [pc, #264]	; (800bf34 <pvPortMalloc+0x18c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be2e:	e004      	b.n	800be3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <pvPortMalloc+0xa4>
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f1      	bne.n	800be30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be4c:	4b36      	ldr	r3, [pc, #216]	; (800bf28 <pvPortMalloc+0x180>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be52:	429a      	cmp	r2, r3
 800be54:	d050      	beq.n	800bef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2208      	movs	r2, #8
 800be5c:	4413      	add	r3, r2
 800be5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	1ad2      	subs	r2, r2, r3
 800be70:	2308      	movs	r3, #8
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	429a      	cmp	r2, r3
 800be76:	d91f      	bls.n	800beb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <pvPortMalloc+0xf8>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	613b      	str	r3, [r7, #16]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beb2:	69b8      	ldr	r0, [r7, #24]
 800beb4:	f000 f908 	bl	800c0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800beb8:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <pvPortMalloc+0x188>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	4a1b      	ldr	r2, [pc, #108]	; (800bf30 <pvPortMalloc+0x188>)
 800bec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <pvPortMalloc+0x188>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <pvPortMalloc+0x190>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d203      	bcs.n	800beda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bed2:	4b17      	ldr	r3, [pc, #92]	; (800bf30 <pvPortMalloc+0x188>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a18      	ldr	r2, [pc, #96]	; (800bf38 <pvPortMalloc+0x190>)
 800bed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <pvPortMalloc+0x184>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	431a      	orrs	r2, r3
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800beee:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <pvPortMalloc+0x194>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a11      	ldr	r2, [pc, #68]	; (800bf3c <pvPortMalloc+0x194>)
 800bef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bef8:	f7fe fcfa 	bl	800a8f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <pvPortMalloc+0x174>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	60fb      	str	r3, [r7, #12]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <pvPortMalloc+0x172>
	return pvReturn;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3728      	adds	r7, #40	; 0x28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	24007104 	.word	0x24007104
 800bf2c:	24007118 	.word	0x24007118
 800bf30:	24007108 	.word	0x24007108
 800bf34:	240070fc 	.word	0x240070fc
 800bf38:	2400710c 	.word	0x2400710c
 800bf3c:	24007110 	.word	0x24007110

0800bf40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d04d      	beq.n	800bfee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf52:	2308      	movs	r3, #8
 800bf54:	425b      	negs	r3, r3
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	4413      	add	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <vPortFree+0xb8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10a      	bne.n	800bf84 <vPortFree+0x44>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	60fb      	str	r3, [r7, #12]
}
 800bf80:	bf00      	nop
 800bf82:	e7fe      	b.n	800bf82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <vPortFree+0x62>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60bb      	str	r3, [r7, #8]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <vPortFree+0xb8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01e      	beq.n	800bfee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11a      	bne.n	800bfee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b0e      	ldr	r3, [pc, #56]	; (800bff8 <vPortFree+0xb8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	43db      	mvns	r3, r3
 800bfc2:	401a      	ands	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfc8:	f7fe fc84 	bl	800a8d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <vPortFree+0xbc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4a09      	ldr	r2, [pc, #36]	; (800bffc <vPortFree+0xbc>)
 800bfd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f000 f874 	bl	800c0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfe0:	4b07      	ldr	r3, [pc, #28]	; (800c000 <vPortFree+0xc0>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	4a06      	ldr	r2, [pc, #24]	; (800c000 <vPortFree+0xc0>)
 800bfe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfea:	f7fe fc81 	bl	800a8f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfee:	bf00      	nop
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	24007118 	.word	0x24007118
 800bffc:	24007108 	.word	0x24007108
 800c000:	24007114 	.word	0x24007114

0800c004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c00a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c010:	4b27      	ldr	r3, [pc, #156]	; (800c0b0 <prvHeapInit+0xac>)
 800c012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00c      	beq.n	800c038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3307      	adds	r3, #7
 800c022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f023 0307 	bic.w	r3, r3, #7
 800c02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <prvHeapInit+0xac>)
 800c034:	4413      	add	r3, r2
 800c036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c03c:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <prvHeapInit+0xb0>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c042:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <prvHeapInit+0xb0>)
 800c044:	2200      	movs	r2, #0
 800c046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	4413      	add	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c050:	2208      	movs	r2, #8
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f023 0307 	bic.w	r3, r3, #7
 800c05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4a15      	ldr	r2, [pc, #84]	; (800c0b8 <prvHeapInit+0xb4>)
 800c064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <prvHeapInit+0xb4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2200      	movs	r2, #0
 800c06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c06e:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <prvHeapInit+0xb4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c084:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <prvHeapInit+0xb4>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <prvHeapInit+0xb8>)
 800c092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	4a09      	ldr	r2, [pc, #36]	; (800c0c0 <prvHeapInit+0xbc>)
 800c09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <prvHeapInit+0xc0>)
 800c09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0a2:	601a      	str	r2, [r3, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	240034fc 	.word	0x240034fc
 800c0b4:	240070fc 	.word	0x240070fc
 800c0b8:	24007104 	.word	0x24007104
 800c0bc:	2400710c 	.word	0x2400710c
 800c0c0:	24007108 	.word	0x24007108
 800c0c4:	24007118 	.word	0x24007118

0800c0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0d0:	4b28      	ldr	r3, [pc, #160]	; (800c174 <prvInsertBlockIntoFreeList+0xac>)
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e002      	b.n	800c0dc <prvInsertBlockIntoFreeList+0x14>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d8f7      	bhi.n	800c0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d108      	bne.n	800c10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	441a      	add	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	441a      	add	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d118      	bne.n	800c150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b15      	ldr	r3, [pc, #84]	; (800c178 <prvInsertBlockIntoFreeList+0xb0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d00d      	beq.n	800c146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	441a      	add	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	e008      	b.n	800c158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c146:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <prvInsertBlockIntoFreeList+0xb0>)
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e003      	b.n	800c158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d002      	beq.n	800c166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	240070fc 	.word	0x240070fc
 800c178:	24007104 	.word	0x24007104

0800c17c <__errno>:
 800c17c:	4b01      	ldr	r3, [pc, #4]	; (800c184 <__errno+0x8>)
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	24000014 	.word	0x24000014

0800c188 <__libc_init_array>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4d0d      	ldr	r5, [pc, #52]	; (800c1c0 <__libc_init_array+0x38>)
 800c18c:	4c0d      	ldr	r4, [pc, #52]	; (800c1c4 <__libc_init_array+0x3c>)
 800c18e:	1b64      	subs	r4, r4, r5
 800c190:	10a4      	asrs	r4, r4, #2
 800c192:	2600      	movs	r6, #0
 800c194:	42a6      	cmp	r6, r4
 800c196:	d109      	bne.n	800c1ac <__libc_init_array+0x24>
 800c198:	4d0b      	ldr	r5, [pc, #44]	; (800c1c8 <__libc_init_array+0x40>)
 800c19a:	4c0c      	ldr	r4, [pc, #48]	; (800c1cc <__libc_init_array+0x44>)
 800c19c:	f000 fd12 	bl	800cbc4 <_init>
 800c1a0:	1b64      	subs	r4, r4, r5
 800c1a2:	10a4      	asrs	r4, r4, #2
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	42a6      	cmp	r6, r4
 800c1a8:	d105      	bne.n	800c1b6 <__libc_init_array+0x2e>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b0:	4798      	blx	r3
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	e7ee      	b.n	800c194 <__libc_init_array+0xc>
 800c1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ba:	4798      	blx	r3
 800c1bc:	3601      	adds	r6, #1
 800c1be:	e7f2      	b.n	800c1a6 <__libc_init_array+0x1e>
 800c1c0:	0800cdb0 	.word	0x0800cdb0
 800c1c4:	0800cdb0 	.word	0x0800cdb0
 800c1c8:	0800cdb0 	.word	0x0800cdb0
 800c1cc:	0800cdb4 	.word	0x0800cdb4

0800c1d0 <__retarget_lock_acquire_recursive>:
 800c1d0:	4770      	bx	lr

0800c1d2 <__retarget_lock_release_recursive>:
 800c1d2:	4770      	bx	lr

0800c1d4 <memcpy>:
 800c1d4:	440a      	add	r2, r1
 800c1d6:	4291      	cmp	r1, r2
 800c1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1dc:	d100      	bne.n	800c1e0 <memcpy+0xc>
 800c1de:	4770      	bx	lr
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ea:	4291      	cmp	r1, r2
 800c1ec:	d1f9      	bne.n	800c1e2 <memcpy+0xe>
 800c1ee:	bd10      	pop	{r4, pc}

0800c1f0 <memset>:
 800c1f0:	4402      	add	r2, r0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d100      	bne.n	800c1fa <memset+0xa>
 800c1f8:	4770      	bx	lr
 800c1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c1fe:	e7f9      	b.n	800c1f4 <memset+0x4>

0800c200 <sbrk_aligned>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	4e0e      	ldr	r6, [pc, #56]	; (800c23c <sbrk_aligned+0x3c>)
 800c204:	460c      	mov	r4, r1
 800c206:	6831      	ldr	r1, [r6, #0]
 800c208:	4605      	mov	r5, r0
 800c20a:	b911      	cbnz	r1, 800c212 <sbrk_aligned+0x12>
 800c20c:	f000 f8f6 	bl	800c3fc <_sbrk_r>
 800c210:	6030      	str	r0, [r6, #0]
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f000 f8f1 	bl	800c3fc <_sbrk_r>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	d00a      	beq.n	800c234 <sbrk_aligned+0x34>
 800c21e:	1cc4      	adds	r4, r0, #3
 800c220:	f024 0403 	bic.w	r4, r4, #3
 800c224:	42a0      	cmp	r0, r4
 800c226:	d007      	beq.n	800c238 <sbrk_aligned+0x38>
 800c228:	1a21      	subs	r1, r4, r0
 800c22a:	4628      	mov	r0, r5
 800c22c:	f000 f8e6 	bl	800c3fc <_sbrk_r>
 800c230:	3001      	adds	r0, #1
 800c232:	d101      	bne.n	800c238 <sbrk_aligned+0x38>
 800c234:	f04f 34ff 	mov.w	r4, #4294967295
 800c238:	4620      	mov	r0, r4
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	24007124 	.word	0x24007124

0800c240 <_malloc_r>:
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	1ccd      	adds	r5, r1, #3
 800c246:	f025 0503 	bic.w	r5, r5, #3
 800c24a:	3508      	adds	r5, #8
 800c24c:	2d0c      	cmp	r5, #12
 800c24e:	bf38      	it	cc
 800c250:	250c      	movcc	r5, #12
 800c252:	2d00      	cmp	r5, #0
 800c254:	4607      	mov	r7, r0
 800c256:	db01      	blt.n	800c25c <_malloc_r+0x1c>
 800c258:	42a9      	cmp	r1, r5
 800c25a:	d905      	bls.n	800c268 <_malloc_r+0x28>
 800c25c:	230c      	movs	r3, #12
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	2600      	movs	r6, #0
 800c262:	4630      	mov	r0, r6
 800c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c268:	4e2e      	ldr	r6, [pc, #184]	; (800c324 <_malloc_r+0xe4>)
 800c26a:	f000 f911 	bl	800c490 <__malloc_lock>
 800c26e:	6833      	ldr	r3, [r6, #0]
 800c270:	461c      	mov	r4, r3
 800c272:	bb34      	cbnz	r4, 800c2c2 <_malloc_r+0x82>
 800c274:	4629      	mov	r1, r5
 800c276:	4638      	mov	r0, r7
 800c278:	f7ff ffc2 	bl	800c200 <sbrk_aligned>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	4604      	mov	r4, r0
 800c280:	d14d      	bne.n	800c31e <_malloc_r+0xde>
 800c282:	6834      	ldr	r4, [r6, #0]
 800c284:	4626      	mov	r6, r4
 800c286:	2e00      	cmp	r6, #0
 800c288:	d140      	bne.n	800c30c <_malloc_r+0xcc>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	4631      	mov	r1, r6
 800c28e:	4638      	mov	r0, r7
 800c290:	eb04 0803 	add.w	r8, r4, r3
 800c294:	f000 f8b2 	bl	800c3fc <_sbrk_r>
 800c298:	4580      	cmp	r8, r0
 800c29a:	d13a      	bne.n	800c312 <_malloc_r+0xd2>
 800c29c:	6821      	ldr	r1, [r4, #0]
 800c29e:	3503      	adds	r5, #3
 800c2a0:	1a6d      	subs	r5, r5, r1
 800c2a2:	f025 0503 	bic.w	r5, r5, #3
 800c2a6:	3508      	adds	r5, #8
 800c2a8:	2d0c      	cmp	r5, #12
 800c2aa:	bf38      	it	cc
 800c2ac:	250c      	movcc	r5, #12
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ffa5 	bl	800c200 <sbrk_aligned>
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d02b      	beq.n	800c312 <_malloc_r+0xd2>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	442b      	add	r3, r5
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	e00e      	b.n	800c2e0 <_malloc_r+0xa0>
 800c2c2:	6822      	ldr	r2, [r4, #0]
 800c2c4:	1b52      	subs	r2, r2, r5
 800c2c6:	d41e      	bmi.n	800c306 <_malloc_r+0xc6>
 800c2c8:	2a0b      	cmp	r2, #11
 800c2ca:	d916      	bls.n	800c2fa <_malloc_r+0xba>
 800c2cc:	1961      	adds	r1, r4, r5
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	6025      	str	r5, [r4, #0]
 800c2d2:	bf18      	it	ne
 800c2d4:	6059      	strne	r1, [r3, #4]
 800c2d6:	6863      	ldr	r3, [r4, #4]
 800c2d8:	bf08      	it	eq
 800c2da:	6031      	streq	r1, [r6, #0]
 800c2dc:	5162      	str	r2, [r4, r5]
 800c2de:	604b      	str	r3, [r1, #4]
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f104 060b 	add.w	r6, r4, #11
 800c2e6:	f000 f8d9 	bl	800c49c <__malloc_unlock>
 800c2ea:	f026 0607 	bic.w	r6, r6, #7
 800c2ee:	1d23      	adds	r3, r4, #4
 800c2f0:	1af2      	subs	r2, r6, r3
 800c2f2:	d0b6      	beq.n	800c262 <_malloc_r+0x22>
 800c2f4:	1b9b      	subs	r3, r3, r6
 800c2f6:	50a3      	str	r3, [r4, r2]
 800c2f8:	e7b3      	b.n	800c262 <_malloc_r+0x22>
 800c2fa:	6862      	ldr	r2, [r4, #4]
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	bf0c      	ite	eq
 800c300:	6032      	streq	r2, [r6, #0]
 800c302:	605a      	strne	r2, [r3, #4]
 800c304:	e7ec      	b.n	800c2e0 <_malloc_r+0xa0>
 800c306:	4623      	mov	r3, r4
 800c308:	6864      	ldr	r4, [r4, #4]
 800c30a:	e7b2      	b.n	800c272 <_malloc_r+0x32>
 800c30c:	4634      	mov	r4, r6
 800c30e:	6876      	ldr	r6, [r6, #4]
 800c310:	e7b9      	b.n	800c286 <_malloc_r+0x46>
 800c312:	230c      	movs	r3, #12
 800c314:	603b      	str	r3, [r7, #0]
 800c316:	4638      	mov	r0, r7
 800c318:	f000 f8c0 	bl	800c49c <__malloc_unlock>
 800c31c:	e7a1      	b.n	800c262 <_malloc_r+0x22>
 800c31e:	6025      	str	r5, [r4, #0]
 800c320:	e7de      	b.n	800c2e0 <_malloc_r+0xa0>
 800c322:	bf00      	nop
 800c324:	24007120 	.word	0x24007120

0800c328 <cleanup_glue>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	460c      	mov	r4, r1
 800c32c:	6809      	ldr	r1, [r1, #0]
 800c32e:	4605      	mov	r5, r0
 800c330:	b109      	cbz	r1, 800c336 <cleanup_glue+0xe>
 800c332:	f7ff fff9 	bl	800c328 <cleanup_glue>
 800c336:	4621      	mov	r1, r4
 800c338:	4628      	mov	r0, r5
 800c33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33e:	f000 b8b3 	b.w	800c4a8 <_free_r>
	...

0800c344 <_reclaim_reent>:
 800c344:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <_reclaim_reent+0xb4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4283      	cmp	r3, r0
 800c34a:	b570      	push	{r4, r5, r6, lr}
 800c34c:	4604      	mov	r4, r0
 800c34e:	d051      	beq.n	800c3f4 <_reclaim_reent+0xb0>
 800c350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c352:	b143      	cbz	r3, 800c366 <_reclaim_reent+0x22>
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d14a      	bne.n	800c3f0 <_reclaim_reent+0xac>
 800c35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c35c:	6819      	ldr	r1, [r3, #0]
 800c35e:	b111      	cbz	r1, 800c366 <_reclaim_reent+0x22>
 800c360:	4620      	mov	r0, r4
 800c362:	f000 f8a1 	bl	800c4a8 <_free_r>
 800c366:	6961      	ldr	r1, [r4, #20]
 800c368:	b111      	cbz	r1, 800c370 <_reclaim_reent+0x2c>
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 f89c 	bl	800c4a8 <_free_r>
 800c370:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c372:	b111      	cbz	r1, 800c37a <_reclaim_reent+0x36>
 800c374:	4620      	mov	r0, r4
 800c376:	f000 f897 	bl	800c4a8 <_free_r>
 800c37a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c37c:	b111      	cbz	r1, 800c384 <_reclaim_reent+0x40>
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f892 	bl	800c4a8 <_free_r>
 800c384:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c386:	b111      	cbz	r1, 800c38e <_reclaim_reent+0x4a>
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 f88d 	bl	800c4a8 <_free_r>
 800c38e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c390:	b111      	cbz	r1, 800c398 <_reclaim_reent+0x54>
 800c392:	4620      	mov	r0, r4
 800c394:	f000 f888 	bl	800c4a8 <_free_r>
 800c398:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c39a:	b111      	cbz	r1, 800c3a2 <_reclaim_reent+0x5e>
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f883 	bl	800c4a8 <_free_r>
 800c3a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c3a4:	b111      	cbz	r1, 800c3ac <_reclaim_reent+0x68>
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f000 f87e 	bl	800c4a8 <_free_r>
 800c3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ae:	b111      	cbz	r1, 800c3b6 <_reclaim_reent+0x72>
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 f879 	bl	800c4a8 <_free_r>
 800c3b6:	69a3      	ldr	r3, [r4, #24]
 800c3b8:	b1e3      	cbz	r3, 800c3f4 <_reclaim_reent+0xb0>
 800c3ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4798      	blx	r3
 800c3c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c3c2:	b1b9      	cbz	r1, 800c3f4 <_reclaim_reent+0xb0>
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3ca:	f7ff bfad 	b.w	800c328 <cleanup_glue>
 800c3ce:	5949      	ldr	r1, [r1, r5]
 800c3d0:	b941      	cbnz	r1, 800c3e4 <_reclaim_reent+0xa0>
 800c3d2:	3504      	adds	r5, #4
 800c3d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d6:	2d80      	cmp	r5, #128	; 0x80
 800c3d8:	68d9      	ldr	r1, [r3, #12]
 800c3da:	d1f8      	bne.n	800c3ce <_reclaim_reent+0x8a>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f000 f863 	bl	800c4a8 <_free_r>
 800c3e2:	e7ba      	b.n	800c35a <_reclaim_reent+0x16>
 800c3e4:	680e      	ldr	r6, [r1, #0]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 f85e 	bl	800c4a8 <_free_r>
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	e7ef      	b.n	800c3d0 <_reclaim_reent+0x8c>
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	e7ef      	b.n	800c3d4 <_reclaim_reent+0x90>
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
 800c3f6:	bf00      	nop
 800c3f8:	24000014 	.word	0x24000014

0800c3fc <_sbrk_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d06      	ldr	r5, [pc, #24]	; (800c418 <_sbrk_r+0x1c>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	602b      	str	r3, [r5, #0]
 800c408:	f7f4 fe82 	bl	8001110 <_sbrk>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_sbrk_r+0x1a>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_sbrk_r+0x1a>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	24007128 	.word	0x24007128

0800c41c <_vsniprintf_r>:
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	4614      	mov	r4, r2
 800c420:	2c00      	cmp	r4, #0
 800c422:	b09b      	sub	sp, #108	; 0x6c
 800c424:	4605      	mov	r5, r0
 800c426:	461a      	mov	r2, r3
 800c428:	da05      	bge.n	800c436 <_vsniprintf_r+0x1a>
 800c42a:	238b      	movs	r3, #139	; 0x8b
 800c42c:	6003      	str	r3, [r0, #0]
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	b01b      	add	sp, #108	; 0x6c
 800c434:	bd30      	pop	{r4, r5, pc}
 800c436:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c43a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c43e:	bf14      	ite	ne
 800c440:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c444:	4623      	moveq	r3, r4
 800c446:	9302      	str	r3, [sp, #8]
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c44e:	9100      	str	r1, [sp, #0]
 800c450:	9104      	str	r1, [sp, #16]
 800c452:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c456:	4669      	mov	r1, sp
 800c458:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c45a:	f000 f8cd 	bl	800c5f8 <_svfiprintf_r>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	bfbc      	itt	lt
 800c462:	238b      	movlt	r3, #139	; 0x8b
 800c464:	602b      	strlt	r3, [r5, #0]
 800c466:	2c00      	cmp	r4, #0
 800c468:	d0e3      	beq.n	800c432 <_vsniprintf_r+0x16>
 800c46a:	9b00      	ldr	r3, [sp, #0]
 800c46c:	2200      	movs	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]
 800c470:	e7df      	b.n	800c432 <_vsniprintf_r+0x16>
	...

0800c474 <vsniprintf>:
 800c474:	b507      	push	{r0, r1, r2, lr}
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	4613      	mov	r3, r2
 800c47a:	460a      	mov	r2, r1
 800c47c:	4601      	mov	r1, r0
 800c47e:	4803      	ldr	r0, [pc, #12]	; (800c48c <vsniprintf+0x18>)
 800c480:	6800      	ldr	r0, [r0, #0]
 800c482:	f7ff ffcb 	bl	800c41c <_vsniprintf_r>
 800c486:	b003      	add	sp, #12
 800c488:	f85d fb04 	ldr.w	pc, [sp], #4
 800c48c:	24000014 	.word	0x24000014

0800c490 <__malloc_lock>:
 800c490:	4801      	ldr	r0, [pc, #4]	; (800c498 <__malloc_lock+0x8>)
 800c492:	f7ff be9d 	b.w	800c1d0 <__retarget_lock_acquire_recursive>
 800c496:	bf00      	nop
 800c498:	2400711c 	.word	0x2400711c

0800c49c <__malloc_unlock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_unlock+0x8>)
 800c49e:	f7ff be98 	b.w	800c1d2 <__retarget_lock_release_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	2400711c 	.word	0x2400711c

0800c4a8 <_free_r>:
 800c4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d044      	beq.n	800c538 <_free_r+0x90>
 800c4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b2:	9001      	str	r0, [sp, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c4ba:	bfb8      	it	lt
 800c4bc:	18e4      	addlt	r4, r4, r3
 800c4be:	f7ff ffe7 	bl	800c490 <__malloc_lock>
 800c4c2:	4a1e      	ldr	r2, [pc, #120]	; (800c53c <_free_r+0x94>)
 800c4c4:	9801      	ldr	r0, [sp, #4]
 800c4c6:	6813      	ldr	r3, [r2, #0]
 800c4c8:	b933      	cbnz	r3, 800c4d8 <_free_r+0x30>
 800c4ca:	6063      	str	r3, [r4, #4]
 800c4cc:	6014      	str	r4, [r2, #0]
 800c4ce:	b003      	add	sp, #12
 800c4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4d4:	f7ff bfe2 	b.w	800c49c <__malloc_unlock>
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	d908      	bls.n	800c4ee <_free_r+0x46>
 800c4dc:	6825      	ldr	r5, [r4, #0]
 800c4de:	1961      	adds	r1, r4, r5
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	bf01      	itttt	eq
 800c4e4:	6819      	ldreq	r1, [r3, #0]
 800c4e6:	685b      	ldreq	r3, [r3, #4]
 800c4e8:	1949      	addeq	r1, r1, r5
 800c4ea:	6021      	streq	r1, [r4, #0]
 800c4ec:	e7ed      	b.n	800c4ca <_free_r+0x22>
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	b10b      	cbz	r3, 800c4f8 <_free_r+0x50>
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	d9fa      	bls.n	800c4ee <_free_r+0x46>
 800c4f8:	6811      	ldr	r1, [r2, #0]
 800c4fa:	1855      	adds	r5, r2, r1
 800c4fc:	42a5      	cmp	r5, r4
 800c4fe:	d10b      	bne.n	800c518 <_free_r+0x70>
 800c500:	6824      	ldr	r4, [r4, #0]
 800c502:	4421      	add	r1, r4
 800c504:	1854      	adds	r4, r2, r1
 800c506:	42a3      	cmp	r3, r4
 800c508:	6011      	str	r1, [r2, #0]
 800c50a:	d1e0      	bne.n	800c4ce <_free_r+0x26>
 800c50c:	681c      	ldr	r4, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	6053      	str	r3, [r2, #4]
 800c512:	4421      	add	r1, r4
 800c514:	6011      	str	r1, [r2, #0]
 800c516:	e7da      	b.n	800c4ce <_free_r+0x26>
 800c518:	d902      	bls.n	800c520 <_free_r+0x78>
 800c51a:	230c      	movs	r3, #12
 800c51c:	6003      	str	r3, [r0, #0]
 800c51e:	e7d6      	b.n	800c4ce <_free_r+0x26>
 800c520:	6825      	ldr	r5, [r4, #0]
 800c522:	1961      	adds	r1, r4, r5
 800c524:	428b      	cmp	r3, r1
 800c526:	bf04      	itt	eq
 800c528:	6819      	ldreq	r1, [r3, #0]
 800c52a:	685b      	ldreq	r3, [r3, #4]
 800c52c:	6063      	str	r3, [r4, #4]
 800c52e:	bf04      	itt	eq
 800c530:	1949      	addeq	r1, r1, r5
 800c532:	6021      	streq	r1, [r4, #0]
 800c534:	6054      	str	r4, [r2, #4]
 800c536:	e7ca      	b.n	800c4ce <_free_r+0x26>
 800c538:	b003      	add	sp, #12
 800c53a:	bd30      	pop	{r4, r5, pc}
 800c53c:	24007120 	.word	0x24007120

0800c540 <__ssputs_r>:
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	688e      	ldr	r6, [r1, #8]
 800c546:	429e      	cmp	r6, r3
 800c548:	4682      	mov	sl, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	4690      	mov	r8, r2
 800c54e:	461f      	mov	r7, r3
 800c550:	d838      	bhi.n	800c5c4 <__ssputs_r+0x84>
 800c552:	898a      	ldrh	r2, [r1, #12]
 800c554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c558:	d032      	beq.n	800c5c0 <__ssputs_r+0x80>
 800c55a:	6825      	ldr	r5, [r4, #0]
 800c55c:	6909      	ldr	r1, [r1, #16]
 800c55e:	eba5 0901 	sub.w	r9, r5, r1
 800c562:	6965      	ldr	r5, [r4, #20]
 800c564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c56c:	3301      	adds	r3, #1
 800c56e:	444b      	add	r3, r9
 800c570:	106d      	asrs	r5, r5, #1
 800c572:	429d      	cmp	r5, r3
 800c574:	bf38      	it	cc
 800c576:	461d      	movcc	r5, r3
 800c578:	0553      	lsls	r3, r2, #21
 800c57a:	d531      	bpl.n	800c5e0 <__ssputs_r+0xa0>
 800c57c:	4629      	mov	r1, r5
 800c57e:	f7ff fe5f 	bl	800c240 <_malloc_r>
 800c582:	4606      	mov	r6, r0
 800c584:	b950      	cbnz	r0, 800c59c <__ssputs_r+0x5c>
 800c586:	230c      	movs	r3, #12
 800c588:	f8ca 3000 	str.w	r3, [sl]
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59c:	6921      	ldr	r1, [r4, #16]
 800c59e:	464a      	mov	r2, r9
 800c5a0:	f7ff fe18 	bl	800c1d4 <memcpy>
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ae:	81a3      	strh	r3, [r4, #12]
 800c5b0:	6126      	str	r6, [r4, #16]
 800c5b2:	6165      	str	r5, [r4, #20]
 800c5b4:	444e      	add	r6, r9
 800c5b6:	eba5 0509 	sub.w	r5, r5, r9
 800c5ba:	6026      	str	r6, [r4, #0]
 800c5bc:	60a5      	str	r5, [r4, #8]
 800c5be:	463e      	mov	r6, r7
 800c5c0:	42be      	cmp	r6, r7
 800c5c2:	d900      	bls.n	800c5c6 <__ssputs_r+0x86>
 800c5c4:	463e      	mov	r6, r7
 800c5c6:	6820      	ldr	r0, [r4, #0]
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	f000 faa8 	bl	800cb20 <memmove>
 800c5d0:	68a3      	ldr	r3, [r4, #8]
 800c5d2:	1b9b      	subs	r3, r3, r6
 800c5d4:	60a3      	str	r3, [r4, #8]
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	4433      	add	r3, r6
 800c5da:	6023      	str	r3, [r4, #0]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e7db      	b.n	800c598 <__ssputs_r+0x58>
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	f000 fab7 	bl	800cb54 <_realloc_r>
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1e1      	bne.n	800c5b0 <__ssputs_r+0x70>
 800c5ec:	6921      	ldr	r1, [r4, #16]
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	f7ff ff5a 	bl	800c4a8 <_free_r>
 800c5f4:	e7c7      	b.n	800c586 <__ssputs_r+0x46>
	...

0800c5f8 <_svfiprintf_r>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	4698      	mov	r8, r3
 800c5fe:	898b      	ldrh	r3, [r1, #12]
 800c600:	061b      	lsls	r3, r3, #24
 800c602:	b09d      	sub	sp, #116	; 0x74
 800c604:	4607      	mov	r7, r0
 800c606:	460d      	mov	r5, r1
 800c608:	4614      	mov	r4, r2
 800c60a:	d50e      	bpl.n	800c62a <_svfiprintf_r+0x32>
 800c60c:	690b      	ldr	r3, [r1, #16]
 800c60e:	b963      	cbnz	r3, 800c62a <_svfiprintf_r+0x32>
 800c610:	2140      	movs	r1, #64	; 0x40
 800c612:	f7ff fe15 	bl	800c240 <_malloc_r>
 800c616:	6028      	str	r0, [r5, #0]
 800c618:	6128      	str	r0, [r5, #16]
 800c61a:	b920      	cbnz	r0, 800c626 <_svfiprintf_r+0x2e>
 800c61c:	230c      	movs	r3, #12
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	f04f 30ff 	mov.w	r0, #4294967295
 800c624:	e0d1      	b.n	800c7ca <_svfiprintf_r+0x1d2>
 800c626:	2340      	movs	r3, #64	; 0x40
 800c628:	616b      	str	r3, [r5, #20]
 800c62a:	2300      	movs	r3, #0
 800c62c:	9309      	str	r3, [sp, #36]	; 0x24
 800c62e:	2320      	movs	r3, #32
 800c630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c634:	f8cd 800c 	str.w	r8, [sp, #12]
 800c638:	2330      	movs	r3, #48	; 0x30
 800c63a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7e4 <_svfiprintf_r+0x1ec>
 800c63e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c642:	f04f 0901 	mov.w	r9, #1
 800c646:	4623      	mov	r3, r4
 800c648:	469a      	mov	sl, r3
 800c64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c64e:	b10a      	cbz	r2, 800c654 <_svfiprintf_r+0x5c>
 800c650:	2a25      	cmp	r2, #37	; 0x25
 800c652:	d1f9      	bne.n	800c648 <_svfiprintf_r+0x50>
 800c654:	ebba 0b04 	subs.w	fp, sl, r4
 800c658:	d00b      	beq.n	800c672 <_svfiprintf_r+0x7a>
 800c65a:	465b      	mov	r3, fp
 800c65c:	4622      	mov	r2, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	4638      	mov	r0, r7
 800c662:	f7ff ff6d 	bl	800c540 <__ssputs_r>
 800c666:	3001      	adds	r0, #1
 800c668:	f000 80aa 	beq.w	800c7c0 <_svfiprintf_r+0x1c8>
 800c66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c66e:	445a      	add	r2, fp
 800c670:	9209      	str	r2, [sp, #36]	; 0x24
 800c672:	f89a 3000 	ldrb.w	r3, [sl]
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 80a2 	beq.w	800c7c0 <_svfiprintf_r+0x1c8>
 800c67c:	2300      	movs	r3, #0
 800c67e:	f04f 32ff 	mov.w	r2, #4294967295
 800c682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c686:	f10a 0a01 	add.w	sl, sl, #1
 800c68a:	9304      	str	r3, [sp, #16]
 800c68c:	9307      	str	r3, [sp, #28]
 800c68e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c692:	931a      	str	r3, [sp, #104]	; 0x68
 800c694:	4654      	mov	r4, sl
 800c696:	2205      	movs	r2, #5
 800c698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69c:	4851      	ldr	r0, [pc, #324]	; (800c7e4 <_svfiprintf_r+0x1ec>)
 800c69e:	f7f3 fe1f 	bl	80002e0 <memchr>
 800c6a2:	9a04      	ldr	r2, [sp, #16]
 800c6a4:	b9d8      	cbnz	r0, 800c6de <_svfiprintf_r+0xe6>
 800c6a6:	06d0      	lsls	r0, r2, #27
 800c6a8:	bf44      	itt	mi
 800c6aa:	2320      	movmi	r3, #32
 800c6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6b0:	0711      	lsls	r1, r2, #28
 800c6b2:	bf44      	itt	mi
 800c6b4:	232b      	movmi	r3, #43	; 0x2b
 800c6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c6be:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c0:	d015      	beq.n	800c6ee <_svfiprintf_r+0xf6>
 800c6c2:	9a07      	ldr	r2, [sp, #28]
 800c6c4:	4654      	mov	r4, sl
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f04f 0c0a 	mov.w	ip, #10
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d2:	3b30      	subs	r3, #48	; 0x30
 800c6d4:	2b09      	cmp	r3, #9
 800c6d6:	d94e      	bls.n	800c776 <_svfiprintf_r+0x17e>
 800c6d8:	b1b0      	cbz	r0, 800c708 <_svfiprintf_r+0x110>
 800c6da:	9207      	str	r2, [sp, #28]
 800c6dc:	e014      	b.n	800c708 <_svfiprintf_r+0x110>
 800c6de:	eba0 0308 	sub.w	r3, r0, r8
 800c6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	46a2      	mov	sl, r4
 800c6ec:	e7d2      	b.n	800c694 <_svfiprintf_r+0x9c>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	1d19      	adds	r1, r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	9103      	str	r1, [sp, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	bfbb      	ittet	lt
 800c6fa:	425b      	neglt	r3, r3
 800c6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800c700:	9307      	strge	r3, [sp, #28]
 800c702:	9307      	strlt	r3, [sp, #28]
 800c704:	bfb8      	it	lt
 800c706:	9204      	strlt	r2, [sp, #16]
 800c708:	7823      	ldrb	r3, [r4, #0]
 800c70a:	2b2e      	cmp	r3, #46	; 0x2e
 800c70c:	d10c      	bne.n	800c728 <_svfiprintf_r+0x130>
 800c70e:	7863      	ldrb	r3, [r4, #1]
 800c710:	2b2a      	cmp	r3, #42	; 0x2a
 800c712:	d135      	bne.n	800c780 <_svfiprintf_r+0x188>
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	1d1a      	adds	r2, r3, #4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	9203      	str	r2, [sp, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	bfb8      	it	lt
 800c720:	f04f 33ff 	movlt.w	r3, #4294967295
 800c724:	3402      	adds	r4, #2
 800c726:	9305      	str	r3, [sp, #20]
 800c728:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7f4 <_svfiprintf_r+0x1fc>
 800c72c:	7821      	ldrb	r1, [r4, #0]
 800c72e:	2203      	movs	r2, #3
 800c730:	4650      	mov	r0, sl
 800c732:	f7f3 fdd5 	bl	80002e0 <memchr>
 800c736:	b140      	cbz	r0, 800c74a <_svfiprintf_r+0x152>
 800c738:	2340      	movs	r3, #64	; 0x40
 800c73a:	eba0 000a 	sub.w	r0, r0, sl
 800c73e:	fa03 f000 	lsl.w	r0, r3, r0
 800c742:	9b04      	ldr	r3, [sp, #16]
 800c744:	4303      	orrs	r3, r0
 800c746:	3401      	adds	r4, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4826      	ldr	r0, [pc, #152]	; (800c7e8 <_svfiprintf_r+0x1f0>)
 800c750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c754:	2206      	movs	r2, #6
 800c756:	f7f3 fdc3 	bl	80002e0 <memchr>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d038      	beq.n	800c7d0 <_svfiprintf_r+0x1d8>
 800c75e:	4b23      	ldr	r3, [pc, #140]	; (800c7ec <_svfiprintf_r+0x1f4>)
 800c760:	bb1b      	cbnz	r3, 800c7aa <_svfiprintf_r+0x1b2>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	3307      	adds	r3, #7
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	3308      	adds	r3, #8
 800c76c:	9303      	str	r3, [sp, #12]
 800c76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c770:	4433      	add	r3, r6
 800c772:	9309      	str	r3, [sp, #36]	; 0x24
 800c774:	e767      	b.n	800c646 <_svfiprintf_r+0x4e>
 800c776:	fb0c 3202 	mla	r2, ip, r2, r3
 800c77a:	460c      	mov	r4, r1
 800c77c:	2001      	movs	r0, #1
 800c77e:	e7a5      	b.n	800c6cc <_svfiprintf_r+0xd4>
 800c780:	2300      	movs	r3, #0
 800c782:	3401      	adds	r4, #1
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	4619      	mov	r1, r3
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4620      	mov	r0, r4
 800c78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c792:	3a30      	subs	r2, #48	; 0x30
 800c794:	2a09      	cmp	r2, #9
 800c796:	d903      	bls.n	800c7a0 <_svfiprintf_r+0x1a8>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0c5      	beq.n	800c728 <_svfiprintf_r+0x130>
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	e7c3      	b.n	800c728 <_svfiprintf_r+0x130>
 800c7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e7f0      	b.n	800c78c <_svfiprintf_r+0x194>
 800c7aa:	ab03      	add	r3, sp, #12
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4b0f      	ldr	r3, [pc, #60]	; (800c7f0 <_svfiprintf_r+0x1f8>)
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f3af 8000 	nop.w
 800c7ba:	1c42      	adds	r2, r0, #1
 800c7bc:	4606      	mov	r6, r0
 800c7be:	d1d6      	bne.n	800c76e <_svfiprintf_r+0x176>
 800c7c0:	89ab      	ldrh	r3, [r5, #12]
 800c7c2:	065b      	lsls	r3, r3, #25
 800c7c4:	f53f af2c 	bmi.w	800c620 <_svfiprintf_r+0x28>
 800c7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ca:	b01d      	add	sp, #116	; 0x74
 800c7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d0:	ab03      	add	r3, sp, #12
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	4b06      	ldr	r3, [pc, #24]	; (800c7f0 <_svfiprintf_r+0x1f8>)
 800c7d8:	a904      	add	r1, sp, #16
 800c7da:	4638      	mov	r0, r7
 800c7dc:	f000 f87a 	bl	800c8d4 <_printf_i>
 800c7e0:	e7eb      	b.n	800c7ba <_svfiprintf_r+0x1c2>
 800c7e2:	bf00      	nop
 800c7e4:	0800cd74 	.word	0x0800cd74
 800c7e8:	0800cd7e 	.word	0x0800cd7e
 800c7ec:	00000000 	.word	0x00000000
 800c7f0:	0800c541 	.word	0x0800c541
 800c7f4:	0800cd7a 	.word	0x0800cd7a

0800c7f8 <_printf_common>:
 800c7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	4699      	mov	r9, r3
 800c800:	688a      	ldr	r2, [r1, #8]
 800c802:	690b      	ldr	r3, [r1, #16]
 800c804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c808:	4293      	cmp	r3, r2
 800c80a:	bfb8      	it	lt
 800c80c:	4613      	movlt	r3, r2
 800c80e:	6033      	str	r3, [r6, #0]
 800c810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c814:	4607      	mov	r7, r0
 800c816:	460c      	mov	r4, r1
 800c818:	b10a      	cbz	r2, 800c81e <_printf_common+0x26>
 800c81a:	3301      	adds	r3, #1
 800c81c:	6033      	str	r3, [r6, #0]
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	0699      	lsls	r1, r3, #26
 800c822:	bf42      	ittt	mi
 800c824:	6833      	ldrmi	r3, [r6, #0]
 800c826:	3302      	addmi	r3, #2
 800c828:	6033      	strmi	r3, [r6, #0]
 800c82a:	6825      	ldr	r5, [r4, #0]
 800c82c:	f015 0506 	ands.w	r5, r5, #6
 800c830:	d106      	bne.n	800c840 <_printf_common+0x48>
 800c832:	f104 0a19 	add.w	sl, r4, #25
 800c836:	68e3      	ldr	r3, [r4, #12]
 800c838:	6832      	ldr	r2, [r6, #0]
 800c83a:	1a9b      	subs	r3, r3, r2
 800c83c:	42ab      	cmp	r3, r5
 800c83e:	dc26      	bgt.n	800c88e <_printf_common+0x96>
 800c840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c844:	1e13      	subs	r3, r2, #0
 800c846:	6822      	ldr	r2, [r4, #0]
 800c848:	bf18      	it	ne
 800c84a:	2301      	movne	r3, #1
 800c84c:	0692      	lsls	r2, r2, #26
 800c84e:	d42b      	bmi.n	800c8a8 <_printf_common+0xb0>
 800c850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c854:	4649      	mov	r1, r9
 800c856:	4638      	mov	r0, r7
 800c858:	47c0      	blx	r8
 800c85a:	3001      	adds	r0, #1
 800c85c:	d01e      	beq.n	800c89c <_printf_common+0xa4>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	68e5      	ldr	r5, [r4, #12]
 800c862:	6832      	ldr	r2, [r6, #0]
 800c864:	f003 0306 	and.w	r3, r3, #6
 800c868:	2b04      	cmp	r3, #4
 800c86a:	bf08      	it	eq
 800c86c:	1aad      	subeq	r5, r5, r2
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	6922      	ldr	r2, [r4, #16]
 800c872:	bf0c      	ite	eq
 800c874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c878:	2500      	movne	r5, #0
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bfc4      	itt	gt
 800c87e:	1a9b      	subgt	r3, r3, r2
 800c880:	18ed      	addgt	r5, r5, r3
 800c882:	2600      	movs	r6, #0
 800c884:	341a      	adds	r4, #26
 800c886:	42b5      	cmp	r5, r6
 800c888:	d11a      	bne.n	800c8c0 <_printf_common+0xc8>
 800c88a:	2000      	movs	r0, #0
 800c88c:	e008      	b.n	800c8a0 <_printf_common+0xa8>
 800c88e:	2301      	movs	r3, #1
 800c890:	4652      	mov	r2, sl
 800c892:	4649      	mov	r1, r9
 800c894:	4638      	mov	r0, r7
 800c896:	47c0      	blx	r8
 800c898:	3001      	adds	r0, #1
 800c89a:	d103      	bne.n	800c8a4 <_printf_common+0xac>
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a4:	3501      	adds	r5, #1
 800c8a6:	e7c6      	b.n	800c836 <_printf_common+0x3e>
 800c8a8:	18e1      	adds	r1, r4, r3
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	2030      	movs	r0, #48	; 0x30
 800c8ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8b2:	4422      	add	r2, r4
 800c8b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8bc:	3302      	adds	r3, #2
 800c8be:	e7c7      	b.n	800c850 <_printf_common+0x58>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4622      	mov	r2, r4
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	47c0      	blx	r8
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d0e6      	beq.n	800c89c <_printf_common+0xa4>
 800c8ce:	3601      	adds	r6, #1
 800c8d0:	e7d9      	b.n	800c886 <_printf_common+0x8e>
	...

0800c8d4 <_printf_i>:
 800c8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	7e0f      	ldrb	r7, [r1, #24]
 800c8da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8dc:	2f78      	cmp	r7, #120	; 0x78
 800c8de:	4691      	mov	r9, r2
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	469a      	mov	sl, r3
 800c8e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8ea:	d807      	bhi.n	800c8fc <_printf_i+0x28>
 800c8ec:	2f62      	cmp	r7, #98	; 0x62
 800c8ee:	d80a      	bhi.n	800c906 <_printf_i+0x32>
 800c8f0:	2f00      	cmp	r7, #0
 800c8f2:	f000 80d8 	beq.w	800caa6 <_printf_i+0x1d2>
 800c8f6:	2f58      	cmp	r7, #88	; 0x58
 800c8f8:	f000 80a3 	beq.w	800ca42 <_printf_i+0x16e>
 800c8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c904:	e03a      	b.n	800c97c <_printf_i+0xa8>
 800c906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c90a:	2b15      	cmp	r3, #21
 800c90c:	d8f6      	bhi.n	800c8fc <_printf_i+0x28>
 800c90e:	a101      	add	r1, pc, #4	; (adr r1, 800c914 <_printf_i+0x40>)
 800c910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c914:	0800c96d 	.word	0x0800c96d
 800c918:	0800c981 	.word	0x0800c981
 800c91c:	0800c8fd 	.word	0x0800c8fd
 800c920:	0800c8fd 	.word	0x0800c8fd
 800c924:	0800c8fd 	.word	0x0800c8fd
 800c928:	0800c8fd 	.word	0x0800c8fd
 800c92c:	0800c981 	.word	0x0800c981
 800c930:	0800c8fd 	.word	0x0800c8fd
 800c934:	0800c8fd 	.word	0x0800c8fd
 800c938:	0800c8fd 	.word	0x0800c8fd
 800c93c:	0800c8fd 	.word	0x0800c8fd
 800c940:	0800ca8d 	.word	0x0800ca8d
 800c944:	0800c9b1 	.word	0x0800c9b1
 800c948:	0800ca6f 	.word	0x0800ca6f
 800c94c:	0800c8fd 	.word	0x0800c8fd
 800c950:	0800c8fd 	.word	0x0800c8fd
 800c954:	0800caaf 	.word	0x0800caaf
 800c958:	0800c8fd 	.word	0x0800c8fd
 800c95c:	0800c9b1 	.word	0x0800c9b1
 800c960:	0800c8fd 	.word	0x0800c8fd
 800c964:	0800c8fd 	.word	0x0800c8fd
 800c968:	0800ca77 	.word	0x0800ca77
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	1d1a      	adds	r2, r3, #4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	602a      	str	r2, [r5, #0]
 800c974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c97c:	2301      	movs	r3, #1
 800c97e:	e0a3      	b.n	800cac8 <_printf_i+0x1f4>
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	6829      	ldr	r1, [r5, #0]
 800c984:	0606      	lsls	r6, r0, #24
 800c986:	f101 0304 	add.w	r3, r1, #4
 800c98a:	d50a      	bpl.n	800c9a2 <_printf_i+0xce>
 800c98c:	680e      	ldr	r6, [r1, #0]
 800c98e:	602b      	str	r3, [r5, #0]
 800c990:	2e00      	cmp	r6, #0
 800c992:	da03      	bge.n	800c99c <_printf_i+0xc8>
 800c994:	232d      	movs	r3, #45	; 0x2d
 800c996:	4276      	negs	r6, r6
 800c998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c99c:	485e      	ldr	r0, [pc, #376]	; (800cb18 <_printf_i+0x244>)
 800c99e:	230a      	movs	r3, #10
 800c9a0:	e019      	b.n	800c9d6 <_printf_i+0x102>
 800c9a2:	680e      	ldr	r6, [r1, #0]
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9aa:	bf18      	it	ne
 800c9ac:	b236      	sxthne	r6, r6
 800c9ae:	e7ef      	b.n	800c990 <_printf_i+0xbc>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	6820      	ldr	r0, [r4, #0]
 800c9b4:	1d19      	adds	r1, r3, #4
 800c9b6:	6029      	str	r1, [r5, #0]
 800c9b8:	0601      	lsls	r1, r0, #24
 800c9ba:	d501      	bpl.n	800c9c0 <_printf_i+0xec>
 800c9bc:	681e      	ldr	r6, [r3, #0]
 800c9be:	e002      	b.n	800c9c6 <_printf_i+0xf2>
 800c9c0:	0646      	lsls	r6, r0, #25
 800c9c2:	d5fb      	bpl.n	800c9bc <_printf_i+0xe8>
 800c9c4:	881e      	ldrh	r6, [r3, #0]
 800c9c6:	4854      	ldr	r0, [pc, #336]	; (800cb18 <_printf_i+0x244>)
 800c9c8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ca:	bf0c      	ite	eq
 800c9cc:	2308      	moveq	r3, #8
 800c9ce:	230a      	movne	r3, #10
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9d6:	6865      	ldr	r5, [r4, #4]
 800c9d8:	60a5      	str	r5, [r4, #8]
 800c9da:	2d00      	cmp	r5, #0
 800c9dc:	bfa2      	ittt	ge
 800c9de:	6821      	ldrge	r1, [r4, #0]
 800c9e0:	f021 0104 	bicge.w	r1, r1, #4
 800c9e4:	6021      	strge	r1, [r4, #0]
 800c9e6:	b90e      	cbnz	r6, 800c9ec <_printf_i+0x118>
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	d04d      	beq.n	800ca88 <_printf_i+0x1b4>
 800c9ec:	4615      	mov	r5, r2
 800c9ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9f2:	fb03 6711 	mls	r7, r3, r1, r6
 800c9f6:	5dc7      	ldrb	r7, [r0, r7]
 800c9f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9fc:	4637      	mov	r7, r6
 800c9fe:	42bb      	cmp	r3, r7
 800ca00:	460e      	mov	r6, r1
 800ca02:	d9f4      	bls.n	800c9ee <_printf_i+0x11a>
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d10b      	bne.n	800ca20 <_printf_i+0x14c>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	07de      	lsls	r6, r3, #31
 800ca0c:	d508      	bpl.n	800ca20 <_printf_i+0x14c>
 800ca0e:	6923      	ldr	r3, [r4, #16]
 800ca10:	6861      	ldr	r1, [r4, #4]
 800ca12:	4299      	cmp	r1, r3
 800ca14:	bfde      	ittt	le
 800ca16:	2330      	movle	r3, #48	; 0x30
 800ca18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca20:	1b52      	subs	r2, r2, r5
 800ca22:	6122      	str	r2, [r4, #16]
 800ca24:	f8cd a000 	str.w	sl, [sp]
 800ca28:	464b      	mov	r3, r9
 800ca2a:	aa03      	add	r2, sp, #12
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4640      	mov	r0, r8
 800ca30:	f7ff fee2 	bl	800c7f8 <_printf_common>
 800ca34:	3001      	adds	r0, #1
 800ca36:	d14c      	bne.n	800cad2 <_printf_i+0x1fe>
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	b004      	add	sp, #16
 800ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca42:	4835      	ldr	r0, [pc, #212]	; (800cb18 <_printf_i+0x244>)
 800ca44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca48:	6829      	ldr	r1, [r5, #0]
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca50:	6029      	str	r1, [r5, #0]
 800ca52:	061d      	lsls	r5, r3, #24
 800ca54:	d514      	bpl.n	800ca80 <_printf_i+0x1ac>
 800ca56:	07df      	lsls	r7, r3, #31
 800ca58:	bf44      	itt	mi
 800ca5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca5e:	6023      	strmi	r3, [r4, #0]
 800ca60:	b91e      	cbnz	r6, 800ca6a <_printf_i+0x196>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	f023 0320 	bic.w	r3, r3, #32
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	2310      	movs	r3, #16
 800ca6c:	e7b0      	b.n	800c9d0 <_printf_i+0xfc>
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	f043 0320 	orr.w	r3, r3, #32
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	2378      	movs	r3, #120	; 0x78
 800ca78:	4828      	ldr	r0, [pc, #160]	; (800cb1c <_printf_i+0x248>)
 800ca7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca7e:	e7e3      	b.n	800ca48 <_printf_i+0x174>
 800ca80:	0659      	lsls	r1, r3, #25
 800ca82:	bf48      	it	mi
 800ca84:	b2b6      	uxthmi	r6, r6
 800ca86:	e7e6      	b.n	800ca56 <_printf_i+0x182>
 800ca88:	4615      	mov	r5, r2
 800ca8a:	e7bb      	b.n	800ca04 <_printf_i+0x130>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	6826      	ldr	r6, [r4, #0]
 800ca90:	6961      	ldr	r1, [r4, #20]
 800ca92:	1d18      	adds	r0, r3, #4
 800ca94:	6028      	str	r0, [r5, #0]
 800ca96:	0635      	lsls	r5, r6, #24
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	d501      	bpl.n	800caa0 <_printf_i+0x1cc>
 800ca9c:	6019      	str	r1, [r3, #0]
 800ca9e:	e002      	b.n	800caa6 <_printf_i+0x1d2>
 800caa0:	0670      	lsls	r0, r6, #25
 800caa2:	d5fb      	bpl.n	800ca9c <_printf_i+0x1c8>
 800caa4:	8019      	strh	r1, [r3, #0]
 800caa6:	2300      	movs	r3, #0
 800caa8:	6123      	str	r3, [r4, #16]
 800caaa:	4615      	mov	r5, r2
 800caac:	e7ba      	b.n	800ca24 <_printf_i+0x150>
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	1d1a      	adds	r2, r3, #4
 800cab2:	602a      	str	r2, [r5, #0]
 800cab4:	681d      	ldr	r5, [r3, #0]
 800cab6:	6862      	ldr	r2, [r4, #4]
 800cab8:	2100      	movs	r1, #0
 800caba:	4628      	mov	r0, r5
 800cabc:	f7f3 fc10 	bl	80002e0 <memchr>
 800cac0:	b108      	cbz	r0, 800cac6 <_printf_i+0x1f2>
 800cac2:	1b40      	subs	r0, r0, r5
 800cac4:	6060      	str	r0, [r4, #4]
 800cac6:	6863      	ldr	r3, [r4, #4]
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	2300      	movs	r3, #0
 800cacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad0:	e7a8      	b.n	800ca24 <_printf_i+0x150>
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	462a      	mov	r2, r5
 800cad6:	4649      	mov	r1, r9
 800cad8:	4640      	mov	r0, r8
 800cada:	47d0      	blx	sl
 800cadc:	3001      	adds	r0, #1
 800cade:	d0ab      	beq.n	800ca38 <_printf_i+0x164>
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	079b      	lsls	r3, r3, #30
 800cae4:	d413      	bmi.n	800cb0e <_printf_i+0x23a>
 800cae6:	68e0      	ldr	r0, [r4, #12]
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	4298      	cmp	r0, r3
 800caec:	bfb8      	it	lt
 800caee:	4618      	movlt	r0, r3
 800caf0:	e7a4      	b.n	800ca3c <_printf_i+0x168>
 800caf2:	2301      	movs	r3, #1
 800caf4:	4632      	mov	r2, r6
 800caf6:	4649      	mov	r1, r9
 800caf8:	4640      	mov	r0, r8
 800cafa:	47d0      	blx	sl
 800cafc:	3001      	adds	r0, #1
 800cafe:	d09b      	beq.n	800ca38 <_printf_i+0x164>
 800cb00:	3501      	adds	r5, #1
 800cb02:	68e3      	ldr	r3, [r4, #12]
 800cb04:	9903      	ldr	r1, [sp, #12]
 800cb06:	1a5b      	subs	r3, r3, r1
 800cb08:	42ab      	cmp	r3, r5
 800cb0a:	dcf2      	bgt.n	800caf2 <_printf_i+0x21e>
 800cb0c:	e7eb      	b.n	800cae6 <_printf_i+0x212>
 800cb0e:	2500      	movs	r5, #0
 800cb10:	f104 0619 	add.w	r6, r4, #25
 800cb14:	e7f5      	b.n	800cb02 <_printf_i+0x22e>
 800cb16:	bf00      	nop
 800cb18:	0800cd85 	.word	0x0800cd85
 800cb1c:	0800cd96 	.word	0x0800cd96

0800cb20 <memmove>:
 800cb20:	4288      	cmp	r0, r1
 800cb22:	b510      	push	{r4, lr}
 800cb24:	eb01 0402 	add.w	r4, r1, r2
 800cb28:	d902      	bls.n	800cb30 <memmove+0x10>
 800cb2a:	4284      	cmp	r4, r0
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	d807      	bhi.n	800cb40 <memmove+0x20>
 800cb30:	1e43      	subs	r3, r0, #1
 800cb32:	42a1      	cmp	r1, r4
 800cb34:	d008      	beq.n	800cb48 <memmove+0x28>
 800cb36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb3e:	e7f8      	b.n	800cb32 <memmove+0x12>
 800cb40:	4402      	add	r2, r0
 800cb42:	4601      	mov	r1, r0
 800cb44:	428a      	cmp	r2, r1
 800cb46:	d100      	bne.n	800cb4a <memmove+0x2a>
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb52:	e7f7      	b.n	800cb44 <memmove+0x24>

0800cb54 <_realloc_r>:
 800cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb58:	4680      	mov	r8, r0
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	b921      	cbnz	r1, 800cb6a <_realloc_r+0x16>
 800cb60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	4611      	mov	r1, r2
 800cb66:	f7ff bb6b 	b.w	800c240 <_malloc_r>
 800cb6a:	b92a      	cbnz	r2, 800cb78 <_realloc_r+0x24>
 800cb6c:	f7ff fc9c 	bl	800c4a8 <_free_r>
 800cb70:	4625      	mov	r5, r4
 800cb72:	4628      	mov	r0, r5
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	f000 f81b 	bl	800cbb2 <_malloc_usable_size_r>
 800cb7c:	4284      	cmp	r4, r0
 800cb7e:	4607      	mov	r7, r0
 800cb80:	d802      	bhi.n	800cb88 <_realloc_r+0x34>
 800cb82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb86:	d812      	bhi.n	800cbae <_realloc_r+0x5a>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	f7ff fb58 	bl	800c240 <_malloc_r>
 800cb90:	4605      	mov	r5, r0
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0ed      	beq.n	800cb72 <_realloc_r+0x1e>
 800cb96:	42bc      	cmp	r4, r7
 800cb98:	4622      	mov	r2, r4
 800cb9a:	4631      	mov	r1, r6
 800cb9c:	bf28      	it	cs
 800cb9e:	463a      	movcs	r2, r7
 800cba0:	f7ff fb18 	bl	800c1d4 <memcpy>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fc7e 	bl	800c4a8 <_free_r>
 800cbac:	e7e1      	b.n	800cb72 <_realloc_r+0x1e>
 800cbae:	4635      	mov	r5, r6
 800cbb0:	e7df      	b.n	800cb72 <_realloc_r+0x1e>

0800cbb2 <_malloc_usable_size_r>:
 800cbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb6:	1f18      	subs	r0, r3, #4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	bfbc      	itt	lt
 800cbbc:	580b      	ldrlt	r3, [r1, r0]
 800cbbe:	18c0      	addlt	r0, r0, r3
 800cbc0:	4770      	bx	lr
	...

0800cbc4 <_init>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr

0800cbd0 <_fini>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr
