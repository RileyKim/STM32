
STM32H743ZG_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800cc6c  0800cc6c  0001cc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce2c  0800ce2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce34  0800ce34  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800ce3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070b0  24000078  0800ceb4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24007128  0800ceb4  00027128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d497  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a5  00000000  00000000  0004d53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00051ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  000536e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b0ca  00000000  00000000  00054f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243aa  00000000  00000000  0008fffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00170d93  00000000  00000000  000b43a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00225137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000714c  00000000  00000000  00225188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cc54 	.word	0x0800cc54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800cc54 	.word	0x0800cc54

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_Z7bspInitv>:





void bspInit(void){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_Z6millisv>:

void delay(uint32_t ms){
	HAL_Delay(ms);
}

uint32_t millis(void){
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 8000696:	f001 f87b 	bl	8001790 <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f001 f824 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f848 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fa14 	bl	8000ad8 <MX_GPIO_Init>
  MX_UART8_Init();
 80006b0:	f000 f90e 	bl	80008d0 <MX_UART8_Init>
  MX_USART6_UART_Init();
 80006b4:	f000 f9a4 	bl	8000a00 <MX_USART6_UART_Init>
  MX_UART5_Init();
 80006b8:	f000 f8be 	bl	8000838 <MX_UART5_Init>
  MX_DMA_Init();
 80006bc:	f000 f9ec 	bl	8000a98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f952 	bl	8000968 <MX_USART1_UART_Init>
//  HAL_UART_Receive_DMA(&huart5, rxBuffer, 100);
//  HAL_UART_Transmit_DMA(&huart8, rxBuffer, 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f008 ffc6 	bl	8009654 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gyroQueue */
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <main+0x70>)
 80006ca:	2104      	movs	r1, #4
 80006cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006d0:	f009 f89c 	bl	800980c <osMessageQueueNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <main+0x74>)
 80006d8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDebug */
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <main+0x78>)
 80006dc:	2100      	movs	r1, #0
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x7c>)
 80006e0:	f009 f802 	bl	80096e8 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <main+0x80>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensing */
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <main+0x84>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <main+0x88>)
 80006f0:	f008 fffa 	bl	80096e8 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <main+0x8c>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* creation of TaskMain */
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 80006fa:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <main+0x90>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <main+0x94>)
 8000700:	f008 fff2 	bl	80096e8 <osThreadNew>
 8000704:	4603      	mov	r3, r0
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <main+0x98>)
 8000708:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070a:	f008 ffc7 	bl	800969c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x6e>
 8000710:	0800cd40 	.word	0x0800cd40
 8000714:	2400258c 	.word	0x2400258c
 8000718:	0800ccd4 	.word	0x0800ccd4
 800071c:	080015db 	.word	0x080015db
 8000720:	2400034c 	.word	0x2400034c
 8000724:	0800ccf8 	.word	0x0800ccf8
 8000728:	080015fd 	.word	0x080015fd
 800072c:	24000c0c 	.word	0x24000c0c
 8000730:	0800cd1c 	.word	0x0800cd1c
 8000734:	080015ef 	.word	0x080015ef
 8000738:	240014cc 	.word	0x240014cc

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	; 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	224c      	movs	r2, #76	; 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00b fd98 	bl	800c280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00b fd92 	bl	800c280 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075c:	2002      	movs	r0, #2
 800075e:	f004 f8fb 	bl	8004958 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <SystemClock_Config+0xf4>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	4a31      	ldr	r2, [pc, #196]	; (8000830 <SystemClock_Config+0xf4>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <SystemClock_Config+0xf4>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <SystemClock_Config+0xf8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <SystemClock_Config+0xf8>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xf8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000798:	bf00      	nop
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xf8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a6:	d1f8      	bne.n	800079a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007c0:	231e      	movs	r3, #30
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d0:	230c      	movs	r3, #12
 80007d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 f8f3 	bl	80049cc <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007ec:	f000 f9dc 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	233f      	movs	r3, #63	; 0x3f
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fc:	2308      	movs	r3, #8
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fd06 	bl	8005228 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000822:	f000 f9c1 	bl	8000ba8 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	; 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58000400 	.word	0x58000400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_UART5_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_UART5_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_UART5_Init+0x90>)
 8000844:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_UART5_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_UART5_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_UART5_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_UART5_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_UART5_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_UART5_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_UART5_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_UART5_Init+0x90>)
 8000882:	f006 fee1 	bl	8007648 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f98c 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_UART5_Init+0x90>)
 8000894:	f008 fdcf 	bl	8009436 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f983 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_UART5_Init+0x90>)
 80008a6:	f008 fe04 	bl	80094b2 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f97a 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_UART5_Init+0x90>)
 80008b6:	f008 fd85 	bl	80093c4 <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f972 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000094 	.word	0x24000094
 80008cc:	40005000 	.word	0x40005000

080008d0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_UART8_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_UART8_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_UART8_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_UART8_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_UART8_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_UART8_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_UART8_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_UART8_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_UART8_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_UART8_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_UART8_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_UART8_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_UART8_Init+0x90>)
 800091a:	f006 fe95 	bl	8007648 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f940 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_UART8_Init+0x90>)
 800092c:	f008 fd83 	bl	8009436 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f937 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_UART8_Init+0x90>)
 800093e:	f008 fdb8 	bl	80094b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f92e 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_UART8_Init+0x90>)
 800094e:	f008 fd39 	bl	80093c4 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f926 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000124 	.word	0x24000124
 8000964:	40007c00 	.word	0x40007c00

08000968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_USART1_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009b2:	f006 fe49 	bl	8007648 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f8f4 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009c4:	f008 fd37 	bl	8009436 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f8eb 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009d6:	f008 fd6c 	bl	80094b2 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f8e2 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009e6:	f008 fced 	bl	80093c4 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f8da 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	240001b4 	.word	0x240001b4
 80009fc:	40011000 	.word	0x40011000

08000a00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART6_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a4a:	f006 fdfd 	bl	8007648 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f8a8 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a5c:	f008 fceb 	bl	8009436 <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f89f 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a6e:	f008 fd20 	bl	80094b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f896 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_USART6_UART_Init+0x90>)
 8000a7e:	f008 fca1 	bl	80093c4 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f88e 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	24000244 	.word	0x24000244
 8000a94:	40011400 	.word	0x40011400

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_DMA_Init+0x3c>)
 8000ab0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f000 ff35 	bl	8001930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ac6:	200b      	movs	r0, #11
 8000ac8:	f000 ff4c 	bl	8001964 <HAL_NVIC_EnableIRQ>

}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0xa8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

}
 8000b74:	bf00      	nop
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b96:	f000 fde7 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x38>)
 8000bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_MspInit+0x38>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x38>)
 8000bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f06f 0001 	mvn.w	r0, #1
 8000be0:	f000 fea6 	bl	8001930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0c0      	sub	sp, #256	; 0x100
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0c:	22bc      	movs	r2, #188	; 0xbc
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00b fb35 	bl	800c280 <memset>
  if(huart->Instance==UART5)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a9a      	ldr	r2, [pc, #616]	; (8000e84 <HAL_UART_MspInit+0x294>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d14b      	bne.n	8000cb8 <HAL_UART_MspInit+0xc8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fec8 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff ffb5 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c3e:	4b92      	ldr	r3, [pc, #584]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c44:	4a90      	ldr	r2, [pc, #576]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c4e:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a89      	ldr	r2, [pc, #548]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PB5     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000c7a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000c94:	230e      	movs	r3, #14
 8000c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	487a      	ldr	r0, [pc, #488]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000ca2:	f003 fca9 	bl	80045f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2035      	movs	r0, #53	; 0x35
 8000cac:	f000 fe40 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000cb0:	2035      	movs	r0, #53	; 0x35
 8000cb2:	f000 fe57 	bl	8001964 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cb6:	e169      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART8)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a74      	ldr	r2, [pc, #464]	; (8000e90 <HAL_UART_MspInit+0x2a0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d14a      	bne.n	8000d58 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fe77 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000cdc:	f7ff ff64 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ce0:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce6:	4a68      	ldr	r2, [pc, #416]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf0:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a60      	ldr	r2, [pc, #384]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000d34:	2308      	movs	r3, #8
 8000d36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4854      	ldr	r0, [pc, #336]	; (8000e94 <HAL_UART_MspInit+0x2a4>)
 8000d42:	f003 fc59 	bl	80045f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2053      	movs	r0, #83	; 0x53
 8000d4c:	f000 fdf0 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000d50:	2053      	movs	r0, #83	; 0x53
 8000d52:	f000 fe07 	bl	8001964 <HAL_NVIC_EnableIRQ>
}
 8000d56:	e119      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_UART_MspInit+0x2a8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 80a0 	bne.w	8000ea4 <HAL_UART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fe26 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_MspInit+0x192>
      Error_Handler();
 8000d7e:	f7ff ff13 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d88:	4a3f      	ldr	r2, [pc, #252]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a38      	ldr	r2, [pc, #224]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <HAL_UART_MspInit+0x298>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000de2:	4619      	mov	r1, r3
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000de6:	f003 fc07 	bl	80045f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e02:	2307      	movs	r3, #7
 8000e04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481f      	ldr	r0, [pc, #124]	; (8000e8c <HAL_UART_MspInit+0x29c>)
 8000e10:	f003 fbf2 	bl	80045f8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0x2b0>)
 8000e18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e1c:	2229      	movs	r2, #41	; 0x29
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e56:	f000 fd93 	bl	8001980 <HAL_DMA_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8000e60:	f7ff fea2 	bl	8000ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e68:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_UART_MspInit+0x2ac>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2105      	movs	r1, #5
 8000e74:	2025      	movs	r0, #37	; 0x25
 8000e76:	f000 fd5b 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e7a:	2025      	movs	r0, #37	; 0x25
 8000e7c:	f000 fd72 	bl	8001964 <HAL_NVIC_EnableIRQ>
}
 8000e80:	e084      	b.n	8000f8c <HAL_UART_MspInit+0x39c>
 8000e82:	bf00      	nop
 8000e84:	40005000 	.word	0x40005000
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	40007c00 	.word	0x40007c00
 8000e94:	58021000 	.word	0x58021000
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	240002d4 	.word	0x240002d4
 8000ea0:	40020010 	.word	0x40020010
  else if(huart->Instance==USART6)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <HAL_UART_MspInit+0x3a8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d16e      	bne.n	8000f8c <HAL_UART_MspInit+0x39c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fd81 	bl	80059c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8000ec8:	f7ff fe6e 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0x3ac>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x3b0>)
 8000f4c:	f003 fb54 	bl	80045f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_UART_MspInit+0x3b4>)
 8000f78:	f003 fb3e 	bl	80045f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2105      	movs	r1, #5
 8000f80:	2047      	movs	r0, #71	; 0x47
 8000f82:	f000 fcd5 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f86:	2047      	movs	r0, #71	; 0x47
 8000f88:	f000 fcec 	bl	8001964 <HAL_NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58021800 	.word	0x58021800

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d844      	bhi.n	8001040 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f000 fcb8 	bl	8001930 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 fccf 	bl	8001964 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fc6:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_InitTick+0xb0>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_InitTick+0xb4>)
 8000fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <HAL_InitTick+0xb4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_InitTick+0xb4>)
 8000fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fca3 	bl	8005940 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ffa:	f004 fc8b 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_InitTick+0xb8>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3b01      	subs	r3, #1
 8001010:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_InitTick+0xbc>)
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_InitTick+0xc0>)
 8001016:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0xbc>)
 800101a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_InitTick+0xbc>)
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_InitTick+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_InitTick+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_InitTick+0xbc>)
 8001034:	f006 f82e 	bl	8007094 <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <HAL_InitTick+0xa6>
 800103e:	e001      	b.n	8001044 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e005      	b.n	8001050 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_InitTick+0xbc>)
 8001046:	f006 f887 	bl	8007158 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	24000008 	.word	0x24000008
 800105c:	58024400 	.word	0x58024400
 8001060:	431bde83 	.word	0x431bde83
 8001064:	24002590 	.word	0x24002590
 8001068:	40010000 	.word	0x40010000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Stream0_IRQHandler+0x10>)
 800109e:	f001 ff99 	bl	8002fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	240002d4 	.word	0x240002d4

080010ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM1_UP_IRQHandler+0x10>)
 80010b2:	f006 f8c9 	bl	8007248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24002590 	.word	0x24002590

080010c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART1_IRQHandler+0x10>)
 80010c6:	f006 fbfb 	bl	80078c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240001b4 	.word	0x240001b4

080010d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <UART5_IRQHandler+0x10>)
 80010da:	f006 fbf1 	bl	80078c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000094 	.word	0x24000094

080010e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART6_IRQHandler+0x10>)
 80010ee:	f006 fbe7 	bl	80078c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000244 	.word	0x24000244

080010fc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <UART8_IRQHandler+0x10>)
 8001102:	f006 fbdd 	bl	80078c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24000124 	.word	0x24000124

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f00b f864 	bl	800c20c <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	24080000 	.word	0x24080000
 8001170:	00000400 	.word	0x00000400
 8001174:	240025dc 	.word	0x240025dc
 8001178:	24007128 	.word	0x24007128

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <SystemInit+0xec>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <SystemInit+0xec>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <SystemInit+0xf0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	2b06      	cmp	r3, #6
 800119a:	d807      	bhi.n	80011ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <SystemInit+0xf0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	4a31      	ldr	r2, [pc, #196]	; (800126c <SystemInit+0xf0>)
 80011a6:	f043 0307 	orr.w	r3, r3, #7
 80011aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <SystemInit+0xf4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <SystemInit+0xf4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <SystemInit+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <SystemInit+0xf4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	492b      	ldr	r1, [pc, #172]	; (8001270 <SystemInit+0xf4>)
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <SystemInit+0xf8>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemInit+0xf0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <SystemInit+0xf0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 030f 	bic.w	r3, r3, #15
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <SystemInit+0xf0>)
 80011e0:	f043 0307 	orr.w	r3, r3, #7
 80011e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SystemInit+0xf4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <SystemInit+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <SystemInit+0xf4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <SystemInit+0xf4>)
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <SystemInit+0xfc>)
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <SystemInit+0xf4>)
 8001200:	4a1e      	ldr	r2, [pc, #120]	; (800127c <SystemInit+0x100>)
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <SystemInit+0xf4>)
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <SystemInit+0x104>)
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <SystemInit+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <SystemInit+0xf4>)
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <SystemInit+0x104>)
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SystemInit+0xf4>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <SystemInit+0xf4>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <SystemInit+0x104>)
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <SystemInit+0xf4>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <SystemInit+0xf4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a10      	ldr	r2, [pc, #64]	; (8001270 <SystemInit+0xf4>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SystemInit+0xf4>)
 8001236:	2200      	movs	r2, #0
 8001238:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <SystemInit+0x108>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <SystemInit+0x10c>)
 8001240:	4013      	ands	r3, r2
 8001242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001246:	d202      	bcs.n	800124e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <SystemInit+0x110>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <SystemInit+0x114>)
 8001250:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001254:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0xec>)
 8001258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	52002000 	.word	0x52002000
 8001270:	58024400 	.word	0x58024400
 8001274:	eaf6ed7f 	.word	0xeaf6ed7f
 8001278:	02020200 	.word	0x02020200
 800127c:	01ff0000 	.word	0x01ff0000
 8001280:	01010280 	.word	0x01010280
 8001284:	5c001000 	.word	0x5c001000
 8001288:	ffff0000 	.word	0xffff0000
 800128c:	51008108 	.word	0x51008108
 8001290:	52004000 	.word	0x52004000

08001294 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]

	bool ret = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
	p_node->in = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	60da      	str	r2, [r3, #12]

	return ret;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]

}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <qbufferRead>:

}


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b087      	sub	sp, #28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i<length; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d927      	bls.n	8001336 <qbufferRead+0x6c>
	{
		if(p_node->p_buf != NULL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <qbufferRead+0x38>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	441a      	add	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	440b      	add	r3, r1
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	701a      	strb	r2, [r3, #0]

		}

		if(p_node->out != p_node->in)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d00c      	beq.n	8001328 <qbufferRead+0x5e>
		{
			p_node->out = (p_node->out +1) % p_node->len;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	fbb3 f1f2 	udiv	r1, r3, r2
 800131c:	fb01 f202 	mul.w	r2, r1, r2
 8001320:	1a9a      	subs	r2, r3, r2
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	e002      	b.n	800132e <qbufferRead+0x64>
		}
		else
		{
			ret = false;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
			break;
 800132c:	e003      	b.n	8001336 <qbufferRead+0x6c>
	for(int i = 0; i<length; i++)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	e7d3      	b.n	80012de <qbufferRead+0x14>
		}
	}

	return ret;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <qbufferAvailable>:


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6892      	ldr	r2, [r2, #8]
 8001360:	fbb3 f1f2 	udiv	r1, r3, r2
 8001364:	fb01 f202 	mul.w	r2, r1, r2
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

	return ret;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <uartInit>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...);


bool uartInit(void){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	for(int i =0; i<UART_MAX_CH; i++){
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	dc08      	bgt.n	800139e <uartInit+0x22>
		is_open[i] = false;
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <uartInit+0x30>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	for(int i =0; i<UART_MAX_CH; i++){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	e7f3      	b.n	8001386 <uartInit+0xa>
	}
	return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	240025e0 	.word	0x240025e0

080013b0 <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <uartOpen+0x1c>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d007      	beq.n	80013da <uartOpen+0x2a>
 80013ca:	e04a      	b.n	8001462 <uartOpen+0xb2>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a27      	ldr	r2, [pc, #156]	; (800146c <uartOpen+0xbc>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	54d1      	strb	r1, [r2, r3]
			ret = true;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
			break;
 80013d8:	e043      	b.n	8001462 <uartOpen+0xb2>

		case _DEF_UART2:

			qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	4924      	ldr	r1, [pc, #144]	; (8001470 <uartOpen+0xc0>)
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <uartOpen+0xc4>)
 80013e2:	f7ff ff57 	bl	8001294 <qbufferCreate>

			if(HAL_UART_Init(&huart1) != HAL_OK){
 80013e6:	4824      	ldr	r0, [pc, #144]	; (8001478 <uartOpen+0xc8>)
 80013e8:	f006 f92e 	bl	8007648 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <uartOpen+0x52>
				ret = false;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
					ret = false;
				}
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8001400:	e02e      	b.n	8001460 <uartOpen+0xb0>
				ret = true;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <uartOpen+0xbc>)
 800140a:	2101      	movs	r1, #1
 800140c:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	4917      	ldr	r1, [pc, #92]	; (8001470 <uartOpen+0xc0>)
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <uartOpen+0xc8>)
 8001416:	f006 f9fd 	bl	8007814 <HAL_UART_Receive_DMA>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <uartOpen+0x7e>
					ret = false;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <uartOpen+0xcc>)
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	3308      	adds	r3, #8
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <uartOpen+0xd0>)
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	1a8a      	subs	r2, r1, r2
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <uartOpen+0xcc>)
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	440b      	add	r3, r1
 8001448:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <uartOpen+0xcc>)
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	440a      	add	r2, r1
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	4909      	ldr	r1, [pc, #36]	; (800147c <uartOpen+0xcc>)
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	3304      	adds	r3, #4
 800145e:	601a      	str	r2, [r3, #0]
			break;
 8001460:	bf00      	nop
	}

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	240025e0 	.word	0x240025e0
 8001470:	24002604 	.word	0x24002604
 8001474:	240025f4 	.word	0x240025f4
 8001478:	240001b4 	.word	0x240001b4
 800147c:	240025e4 	.word	0x240025e4
 8001480:	40020010 	.word	0x40020010

08001484 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]

	switch(ch){
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d116      	bne.n	80014c6 <uartAvailable+0x42>
	case _DEF_UART2:
		qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <uartAvailable+0x4c>)
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	3308      	adds	r3, #8
 80014a2:	6819      	ldr	r1, [r3, #0]
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <uartAvailable+0x50>)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	1a8a      	subs	r2, r1, r2
 80014ac:	4908      	ldr	r1, [pc, #32]	; (80014d0 <uartAvailable+0x4c>)
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	440b      	add	r3, r1
 80014b2:	601a      	str	r2, [r3, #0]
		ret = qbufferAvailable(&qbuffer[ch]);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <uartAvailable+0x4c>)
 80014ba:	4413      	add	r3, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff41 	bl	8001344 <qbufferAvailable>
 80014c2:	60f8      	str	r0, [r7, #12]
		break;
 80014c4:	bf00      	nop
	}
	return ret;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	240025e4 	.word	0x240025e4
 80014d4:	40020010 	.word	0x40020010

080014d8 <uartRead>:
uint8_t uartRead(uint8_t ch){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch){
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <uartRead+0x20>
		case _DEF_UART2:
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80014e8:	f107 030f 	add.w	r3, r7, #15
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <uartRead+0x2c>)
 80014f2:	f7ff feea 	bl	80012ca <qbufferRead>
			break;
 80014f6:	bf00      	nop
	}
	return ret;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	240025f4 	.word	0x240025f4

08001508 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
	}
#endif
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef status;
	switch(ch){
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10e      	bne.n	8001552 <uartWrite+0x36>
		case _DEF_UART2:
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	b29a      	uxth	r2, r3
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <uartWrite+0x40>)
 800153e:	f006 f8d3 	bl	80076e8 <HAL_UART_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <uartWrite+0x34>
				ret = length;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	617b      	str	r3, [r7, #20]
			}
			break;
 8001550:	bf00      	nop
	}
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	240001b4 	.word	0x240001b4

08001560 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...){
 8001560:	b40e      	push	{r1, r2, r3}
 8001562:	b580      	push	{r7, lr}
 8001564:	b0c5      	sub	sp, #276	; 0x114
 8001566:	af00      	add	r7, sp, #0
 8001568:	4602      	mov	r2, r0
 800156a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800156e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001572:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;

	va_start(args, fmt);
 8001574:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800157c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001580:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf , 256, fmt, args);
 8001582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800158a:	f107 000c 	add.w	r0, r7, #12
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	f00a ffb4 	bl	800c504 <vsniprintf>
 800159c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	uartWrite(ch, (uint8_t *)buf, len);
 80015a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015a4:	f107 010c 	add.w	r1, r7, #12
 80015a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ac:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ffb2 	bl	800151c <uartWrite>

	va_end(args);

	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015c0:	46bd      	mov	sp, r7
 80015c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015c6:	b003      	add	sp, #12
 80015c8:	4770      	bx	lr

080015ca <_Z6hwInitv>:



#include "hw.h"

void hwInit(void){
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
	bspInit();
 80015ce:	f7ff f859 	bl	8000684 <_Z7bspInitv>
	uartInit();
 80015d2:	f7ff fed3 	bl	800137c <uartInit>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <DebugTask>:


extern UART_HandleTypeDef huart8;


extern "C" void DebugTask(void){
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
	hwInit();
 80015de:	f7ff fff4 	bl	80015ca <_Z6hwInitv>
	apInit();
 80015e2:	f000 f812 	bl	800160a <_Z6apInitv>
	apMain();
 80015e6:	f000 f81f 	bl	8001628 <_Z6apMainv>

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <MainTask>:


extern "C" void MainTask(void){
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SensingTask>:

extern "C" void SensingTask(void){
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_Z6apInitv>:

#include "ap.h"



void apInit(void){
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 115200);
 800160e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fecc 	bl	80013b0 <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 8001618:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fec7 	bl	80013b0 <uartOpen>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <_Z6apMainv>:


void apMain(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	pre_time = HAL_GetTick();
 800162e:	f000 f8af 	bl	8001790 <HAL_GetTick>
 8001632:	6078      	str	r0, [r7, #4]

	while(1){
		if(HAL_GetTick()-pre_time >= 500){
 8001634:	f000 f8ac 	bl	8001790 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001642:	4293      	cmp	r3, r2
 8001644:	bf8c      	ite	hi
 8001646:	2301      	movhi	r3, #1
 8001648:	2300      	movls	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00a      	beq.n	8001666 <_Z6apMainv+0x3e>
			pre_time = HAL_GetTick();
 8001650:	f000 f89e 	bl	8001790 <HAL_GetTick>
 8001654:	6078      	str	r0, [r7, #4]
			uartPrintf(_DEF_UART2, "HELLO %d\r\n", millis());
 8001656:	f7ff f81c 	bl	8000692 <_Z6millisv>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <_Z6apMainv+0x6c>)
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff ff7d 	bl	8001560 <uartPrintf>
		}

		if(uartAvailable(_DEF_UART2)>0){
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff ff0c 	bl	8001484 <uartAvailable>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0db      	beq.n	8001634 <_Z6apMainv+0xc>
			uint8_t rx_data;
			rx_data = uartRead(_DEF_UART2);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff ff2b 	bl	80014d8 <uartRead>
 8001682:	4603      	mov	r3, r0
 8001684:	70fb      	strb	r3, [r7, #3]
			uartPrintf(_DEF_UART2, "UART8 :  %c %X\r\n", rx_data, rx_data);
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	4903      	ldr	r1, [pc, #12]	; (8001698 <_Z6apMainv+0x70>)
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ff67 	bl	8001560 <uartPrintf>

		}
	}
 8001692:	e7cf      	b.n	8001634 <_Z6apMainv+0xc>
 8001694:	0800cc9c 	.word	0x0800cc9c
 8001698:	0800cca8 	.word	0x0800cca8

0800169c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016a0:	f7ff fd6c 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80016c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f00a fda5 	bl	800c218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7fe ffe7 	bl	80006a0 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80016d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016d8:	0800ce3c 	.word	0x0800ce3c
  ldr  r0, =_sdata
 80016dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80016e0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80016e4:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80016e8:	24007128 	.word	0x24007128

080016ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC3_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f90f 	bl	800191a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016fc:	f003 ff4a 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_Init+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4913      	ldr	r1, [pc, #76]	; (800175c <HAL_Init+0x6c>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_Init+0x6c>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_Init+0x70>)
 8001732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <HAL_Init+0x74>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	200f      	movs	r0, #15
 800173c:	f7ff fc34 	bl	8000fa8 <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e002      	b.n	8001750 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800174a:	f7ff fa33 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400
 800175c:	0800cd58 	.word	0x0800cd58
 8001760:	24000004 	.word	0x24000004
 8001764:	24000000 	.word	0x24000000

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2400000c 	.word	0x2400000c
 800178c:	24002704 	.word	0x24002704

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	24002704 	.word	0x24002704

080017a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetREVID+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0c1b      	lsrs	r3, r3, #16
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	5c001000 	.word	0x5c001000

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <__NVIC_SetPriorityGrouping+0x40>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x40>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	05fa0000 	.word	0x05fa0000

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff4c 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193e:	f7ff ff63 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001942:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7ff ffb3 	bl	80018b4 <NVIC_EncodePriority>
 800194e:	4602      	mov	r2, r0
 8001950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff82 	bl	8001860 <__NVIC_SetPriority>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff56 	bl	8001824 <__NVIC_EnableIRQ>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ff02 	bl	8001790 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e316      	b.n	8001fc6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_DMA_Init+0x1b8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d04a      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_DMA_Init+0x1bc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d045      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a63      	ldr	r2, [pc, #396]	; (8001b40 <HAL_DMA_Init+0x1c0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d040      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a62      	ldr	r2, [pc, #392]	; (8001b44 <HAL_DMA_Init+0x1c4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d03b      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <HAL_DMA_Init+0x1c8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d036      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5f      	ldr	r2, [pc, #380]	; (8001b4c <HAL_DMA_Init+0x1cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d031      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <HAL_DMA_Init+0x1d0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02c      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5c      	ldr	r2, [pc, #368]	; (8001b54 <HAL_DMA_Init+0x1d4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d027      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <HAL_DMA_Init+0x1d8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d022      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a59      	ldr	r2, [pc, #356]	; (8001b5c <HAL_DMA_Init+0x1dc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d01d      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <HAL_DMA_Init+0x1e0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d018      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <HAL_DMA_Init+0x1e4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a54      	ldr	r2, [pc, #336]	; (8001b68 <HAL_DMA_Init+0x1e8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00e      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <HAL_DMA_Init+0x1ec>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_DMA_Init+0x1f0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_DMA_Init+0x1f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_DMA_Init+0xbc>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_DMA_Init+0xbe>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 813b 	beq.w	8001cba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <HAL_DMA_Init+0x1b8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d04a      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <HAL_DMA_Init+0x1bc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d045      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <HAL_DMA_Init+0x1c0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d040      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <HAL_DMA_Init+0x1c4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d03b      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_DMA_Init+0x1c8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d036      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <HAL_DMA_Init+0x1cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d031      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <HAL_DMA_Init+0x1d0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d02c      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_DMA_Init+0x1d4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d027      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <HAL_DMA_Init+0x1d8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d022      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <HAL_DMA_Init+0x1dc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d01d      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <HAL_DMA_Init+0x1e0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d018      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_DMA_Init+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_DMA_Init+0x1e8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00e      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_DMA_Init+0x1ec>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_DMA_Init+0x1f0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_DMA_Init+0x1f4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d108      	bne.n	8001b06 <HAL_DMA_Init+0x186>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_DMA_Init+0x196>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b16:	e02f      	b.n	8001b78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b18:	f7ff fe3a 	bl	8001790 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d928      	bls.n	8001b78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e246      	b.n	8001fc6 <HAL_DMA_Init+0x646>
 8001b38:	40020010 	.word	0x40020010
 8001b3c:	40020028 	.word	0x40020028
 8001b40:	40020040 	.word	0x40020040
 8001b44:	40020058 	.word	0x40020058
 8001b48:	40020070 	.word	0x40020070
 8001b4c:	40020088 	.word	0x40020088
 8001b50:	400200a0 	.word	0x400200a0
 8001b54:	400200b8 	.word	0x400200b8
 8001b58:	40020410 	.word	0x40020410
 8001b5c:	40020428 	.word	0x40020428
 8001b60:	40020440 	.word	0x40020440
 8001b64:	40020458 	.word	0x40020458
 8001b68:	40020470 	.word	0x40020470
 8001b6c:	40020488 	.word	0x40020488
 8001b70:	400204a0 	.word	0x400204a0
 8001b74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1c8      	bne.n	8001b18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4b83      	ldr	r3, [pc, #524]	; (8001da0 <HAL_DMA_Init+0x420>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001baa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d107      	bne.n	8001bdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001bdc:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_DMA_Init+0x424>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_DMA_Init+0x428>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be8:	d328      	bcc.n	8001c3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b28      	cmp	r3, #40	; 0x28
 8001bf0:	d903      	bls.n	8001bfa <HAL_DMA_Init+0x27a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf8:	d917      	bls.n	8001c2a <HAL_DMA_Init+0x2aa>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8001c00:	d903      	bls.n	8001c0a <HAL_DMA_Init+0x28a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b42      	cmp	r3, #66	; 0x42
 8001c08:	d90f      	bls.n	8001c2a <HAL_DMA_Init+0x2aa>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b46      	cmp	r3, #70	; 0x46
 8001c10:	d903      	bls.n	8001c1a <HAL_DMA_Init+0x29a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b48      	cmp	r3, #72	; 0x48
 8001c18:	d907      	bls.n	8001c2a <HAL_DMA_Init+0x2aa>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b4e      	cmp	r3, #78	; 0x4e
 8001c20:	d905      	bls.n	8001c2e <HAL_DMA_Init+0x2ae>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b52      	cmp	r3, #82	; 0x52
 8001c28:	d801      	bhi.n	8001c2e <HAL_DMA_Init+0x2ae>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_DMA_Init+0x2b0>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f023 0307 	bic.w	r3, r3, #7
 8001c52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d117      	bne.n	8001c96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f002 fb33 	bl	80042e4 <DMA_CheckFifoParam>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e197      	b.n	8001fc6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f002 fa6e 	bl	8004180 <DMA_CalcBaseAndBitshift>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e0cd      	b.n	8001e56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <HAL_DMA_Init+0x42c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d022      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <HAL_DMA_Init+0x430>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01d      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <HAL_DMA_Init+0x434>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d018      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a36      	ldr	r2, [pc, #216]	; (8001db8 <HAL_DMA_Init+0x438>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <HAL_DMA_Init+0x43c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00e      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <HAL_DMA_Init+0x440>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <HAL_DMA_Init+0x444>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_DMA_Init+0x38a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_DMA_Init+0x448>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Init+0x38e>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_DMA_Init+0x390>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8097 	beq.w	8001e44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_DMA_Init+0x42c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d021      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_DMA_Init+0x430>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01c      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_DMA_Init+0x434>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d017      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_DMA_Init+0x438>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d012      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_DMA_Init+0x43c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00d      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_DMA_Init+0x440>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d008      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_DMA_Init+0x444>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_Init+0x3e4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_DMA_Init+0x448>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_DMA_Init+0x44c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
 8001d8c:	d020      	beq.n	8001dd0 <HAL_DMA_Init+0x450>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d102      	bne.n	8001d9c <HAL_DMA_Init+0x41c>
 8001d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d9a:	e01a      	b.n	8001dd2 <HAL_DMA_Init+0x452>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e018      	b.n	8001dd2 <HAL_DMA_Init+0x452>
 8001da0:	fe10803f 	.word	0xfe10803f
 8001da4:	5c001000 	.word	0x5c001000
 8001da8:	ffff0000 	.word	0xffff0000
 8001dac:	58025408 	.word	0x58025408
 8001db0:	5802541c 	.word	0x5802541c
 8001db4:	58025430 	.word	0x58025430
 8001db8:	58025444 	.word	0x58025444
 8001dbc:	58025458 	.word	0x58025458
 8001dc0:	5802546c 	.word	0x5802546c
 8001dc4:	58025480 	.word	0x58025480
 8001dc8:	58025494 	.word	0x58025494
 8001dcc:	fffe000f 	.word	0xfffe000f
 8001dd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68d2      	ldr	r2, [r2, #12]
 8001dd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001de0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <HAL_DMA_Init+0x650>)
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <HAL_DMA_Init+0x654>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	009a      	lsls	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f002 f9a9 	bl	8004180 <DMA_CalcBaseAndBitshift>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e008      	b.n	8001e56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2240      	movs	r2, #64	; 0x40
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0b7      	b.n	8001fc6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_DMA_Init+0x658>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d072      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_DMA_Init+0x65c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d06d      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_DMA_Init+0x660>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d068      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_DMA_Init+0x664>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d063      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <HAL_DMA_Init+0x668>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d05e      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a57      	ldr	r2, [pc, #348]	; (8001fec <HAL_DMA_Init+0x66c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d059      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a56      	ldr	r2, [pc, #344]	; (8001ff0 <HAL_DMA_Init+0x670>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d054      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_DMA_Init+0x674>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04f      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a53      	ldr	r2, [pc, #332]	; (8001ff8 <HAL_DMA_Init+0x678>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d04a      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_DMA_Init+0x67c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d045      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a50      	ldr	r2, [pc, #320]	; (8002000 <HAL_DMA_Init+0x680>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d040      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a4e      	ldr	r2, [pc, #312]	; (8002004 <HAL_DMA_Init+0x684>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d03b      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_DMA_Init+0x688>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d036      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a4b      	ldr	r2, [pc, #300]	; (800200c <HAL_DMA_Init+0x68c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_DMA_Init+0x690>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d02c      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_DMA_Init+0x694>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d027      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_DMA_Init+0x698>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d022      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_DMA_Init+0x69c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01d      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_DMA_Init+0x6a0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d018      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_DMA_Init+0x6a4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_DMA_Init+0x6a8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00e      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_DMA_Init+0x6ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_DMA_Init+0x6b0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <HAL_DMA_Init+0x6b4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_DMA_Init+0x5ca>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_DMA_Init+0x5cc>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d032      	beq.n	8001fb6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f002 fa43 	bl	80043dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d102      	bne.n	8001f64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_DMA_Init+0x624>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d80c      	bhi.n	8001fa4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f002 fac0 	bl	8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	e008      	b.n	8001fb6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	a7fdabf8 	.word	0xa7fdabf8
 8001fd4:	cccccccd 	.word	0xcccccccd
 8001fd8:	40020010 	.word	0x40020010
 8001fdc:	40020028 	.word	0x40020028
 8001fe0:	40020040 	.word	0x40020040
 8001fe4:	40020058 	.word	0x40020058
 8001fe8:	40020070 	.word	0x40020070
 8001fec:	40020088 	.word	0x40020088
 8001ff0:	400200a0 	.word	0x400200a0
 8001ff4:	400200b8 	.word	0x400200b8
 8001ff8:	40020410 	.word	0x40020410
 8001ffc:	40020428 	.word	0x40020428
 8002000:	40020440 	.word	0x40020440
 8002004:	40020458 	.word	0x40020458
 8002008:	40020470 	.word	0x40020470
 800200c:	40020488 	.word	0x40020488
 8002010:	400204a0 	.word	0x400204a0
 8002014:	400204b8 	.word	0x400204b8
 8002018:	58025408 	.word	0x58025408
 800201c:	5802541c 	.word	0x5802541c
 8002020:	58025430 	.word	0x58025430
 8002024:	58025444 	.word	0x58025444
 8002028:	58025458 	.word	0x58025458
 800202c:	5802546c 	.word	0x5802546c
 8002030:	58025480 	.word	0x58025480
 8002034:	58025494 	.word	0x58025494

08002038 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e226      	b.n	80024a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Start_IT+0x2a>
 800205e:	2302      	movs	r3, #2
 8002060:	e21f      	b.n	80024a2 <HAL_DMA_Start_IT+0x46a>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	f040 820a 	bne.w	800248c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a68      	ldr	r2, [pc, #416]	; (800222c <HAL_DMA_Start_IT+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04a      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a66      	ldr	r2, [pc, #408]	; (8002230 <HAL_DMA_Start_IT+0x1f8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d045      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a65      	ldr	r2, [pc, #404]	; (8002234 <HAL_DMA_Start_IT+0x1fc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d040      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a63      	ldr	r2, [pc, #396]	; (8002238 <HAL_DMA_Start_IT+0x200>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d03b      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a62      	ldr	r2, [pc, #392]	; (800223c <HAL_DMA_Start_IT+0x204>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a60      	ldr	r2, [pc, #384]	; (8002240 <HAL_DMA_Start_IT+0x208>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d031      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5f      	ldr	r2, [pc, #380]	; (8002244 <HAL_DMA_Start_IT+0x20c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d02c      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_DMA_Start_IT+0x210>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d027      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_DMA_Start_IT+0x214>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_DMA_Start_IT+0x218>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01d      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a59      	ldr	r2, [pc, #356]	; (8002254 <HAL_DMA_Start_IT+0x21c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_DMA_Start_IT+0x220>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a56      	ldr	r2, [pc, #344]	; (800225c <HAL_DMA_Start_IT+0x224>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_DMA_Start_IT+0x228>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a53      	ldr	r2, [pc, #332]	; (8002264 <HAL_DMA_Start_IT+0x22c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_DMA_Start_IT+0xee>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <HAL_DMA_Start_IT+0x230>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d108      	bne.n	8002138 <HAL_DMA_Start_IT+0x100>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e007      	b.n	8002148 <HAL_DMA_Start_IT+0x110>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f001 fe6a 	bl	8003e28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a34      	ldr	r2, [pc, #208]	; (800222c <HAL_DMA_Start_IT+0x1f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d04a      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a33      	ldr	r2, [pc, #204]	; (8002230 <HAL_DMA_Start_IT+0x1f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d045      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_DMA_Start_IT+0x1fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d040      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a30      	ldr	r2, [pc, #192]	; (8002238 <HAL_DMA_Start_IT+0x200>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d03b      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2e      	ldr	r2, [pc, #184]	; (800223c <HAL_DMA_Start_IT+0x204>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d036      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_DMA_Start_IT+0x208>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d031      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_DMA_Start_IT+0x20c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02c      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_DMA_Start_IT+0x210>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d027      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_DMA_Start_IT+0x214>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d022      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_DMA_Start_IT+0x218>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d01d      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_DMA_Start_IT+0x21c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d018      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <HAL_DMA_Start_IT+0x220>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_DMA_Start_IT+0x224>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00e      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <HAL_DMA_Start_IT+0x228>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <HAL_DMA_Start_IT+0x22c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_DMA_Start_IT+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_DMA_Start_IT+0x230>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_DMA_Start_IT+0x1c0>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_DMA_Start_IT+0x1c2>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 021e 	bic.w	r2, r3, #30
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0216 	orr.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03e      	beq.n	8002298 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0208 	orr.w	r2, r2, #8
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e035      	b.n	8002298 <HAL_DMA_Start_IT+0x260>
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020e 	bic.w	r2, r3, #14
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 020a 	orr.w	r2, r2, #10
 800227e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0204 	orr.w	r2, r2, #4
 8002296:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a83      	ldr	r2, [pc, #524]	; (80024ac <HAL_DMA_Start_IT+0x474>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d072      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a82      	ldr	r2, [pc, #520]	; (80024b0 <HAL_DMA_Start_IT+0x478>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d06d      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a80      	ldr	r2, [pc, #512]	; (80024b4 <HAL_DMA_Start_IT+0x47c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d068      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_DMA_Start_IT+0x480>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d063      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_DMA_Start_IT+0x484>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d05e      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_DMA_Start_IT+0x488>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d059      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_DMA_Start_IT+0x48c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d054      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_DMA_Start_IT+0x490>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04f      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a77      	ldr	r2, [pc, #476]	; (80024cc <HAL_DMA_Start_IT+0x494>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d04a      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a76      	ldr	r2, [pc, #472]	; (80024d0 <HAL_DMA_Start_IT+0x498>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d045      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	; (80024d4 <HAL_DMA_Start_IT+0x49c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d040      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	; (80024d8 <HAL_DMA_Start_IT+0x4a0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d03b      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_DMA_Start_IT+0x4a4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d036      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a70      	ldr	r2, [pc, #448]	; (80024e0 <HAL_DMA_Start_IT+0x4a8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d031      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_DMA_Start_IT+0x4ac>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02c      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	; (80024e8 <HAL_DMA_Start_IT+0x4b0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d027      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_DMA_Start_IT+0x4b4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_DMA_Start_IT+0x4b8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01d      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <HAL_DMA_Start_IT+0x4bc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_DMA_Start_IT+0x4c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_DMA_Start_IT+0x4c4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_DMA_Start_IT+0x4c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a62      	ldr	r2, [pc, #392]	; (8002504 <HAL_DMA_Start_IT+0x4cc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_DMA_Start_IT+0x4d0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_DMA_Start_IT+0x354>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_DMA_Start_IT+0x356>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01a      	beq.n	80023c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_DMA_Start_IT+0x474>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04a      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_DMA_Start_IT+0x478>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d045      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_DMA_Start_IT+0x47c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d040      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_DMA_Start_IT+0x480>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d03b      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_DMA_Start_IT+0x484>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d036      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <HAL_DMA_Start_IT+0x488>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d031      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_DMA_Start_IT+0x48c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02c      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_DMA_Start_IT+0x490>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d027      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_DMA_Start_IT+0x494>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d022      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <HAL_DMA_Start_IT+0x498>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d01d      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_DMA_Start_IT+0x49c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d018      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_DMA_Start_IT+0x4a0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a25      	ldr	r2, [pc, #148]	; (80024dc <HAL_DMA_Start_IT+0x4a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00e      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <HAL_DMA_Start_IT+0x4a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_DMA_Start_IT+0x4ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_Start_IT+0x430>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <HAL_DMA_Start_IT+0x4b0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d108      	bne.n	800247a <HAL_DMA_Start_IT+0x442>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e012      	b.n	80024a0 <HAL_DMA_Start_IT+0x468>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e009      	b.n	80024a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002492:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40020010 	.word	0x40020010
 80024b0:	40020028 	.word	0x40020028
 80024b4:	40020040 	.word	0x40020040
 80024b8:	40020058 	.word	0x40020058
 80024bc:	40020070 	.word	0x40020070
 80024c0:	40020088 	.word	0x40020088
 80024c4:	400200a0 	.word	0x400200a0
 80024c8:	400200b8 	.word	0x400200b8
 80024cc:	40020410 	.word	0x40020410
 80024d0:	40020428 	.word	0x40020428
 80024d4:	40020440 	.word	0x40020440
 80024d8:	40020458 	.word	0x40020458
 80024dc:	40020470 	.word	0x40020470
 80024e0:	40020488 	.word	0x40020488
 80024e4:	400204a0 	.word	0x400204a0
 80024e8:	400204b8 	.word	0x400204b8
 80024ec:	58025408 	.word	0x58025408
 80024f0:	5802541c 	.word	0x5802541c
 80024f4:	58025430 	.word	0x58025430
 80024f8:	58025444 	.word	0x58025444
 80024fc:	58025458 	.word	0x58025458
 8002500:	5802546c 	.word	0x5802546c
 8002504:	58025480 	.word	0x58025480
 8002508:	58025494 	.word	0x58025494

0800250c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff f93c 	bl	8001790 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e2dc      	b.n	8002ade <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d008      	beq.n	8002542 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e2cd      	b.n	8002ade <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a76      	ldr	r2, [pc, #472]	; (8002720 <HAL_DMA_Abort+0x214>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04a      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a74      	ldr	r2, [pc, #464]	; (8002724 <HAL_DMA_Abort+0x218>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d045      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a73      	ldr	r2, [pc, #460]	; (8002728 <HAL_DMA_Abort+0x21c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d040      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a71      	ldr	r2, [pc, #452]	; (800272c <HAL_DMA_Abort+0x220>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d03b      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a70      	ldr	r2, [pc, #448]	; (8002730 <HAL_DMA_Abort+0x224>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d036      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_DMA_Abort+0x228>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6d      	ldr	r2, [pc, #436]	; (8002738 <HAL_DMA_Abort+0x22c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d02c      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6b      	ldr	r2, [pc, #428]	; (800273c <HAL_DMA_Abort+0x230>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d027      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_DMA_Abort+0x234>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a68      	ldr	r2, [pc, #416]	; (8002744 <HAL_DMA_Abort+0x238>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01d      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_DMA_Abort+0x23c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_DMA_Abort+0x240>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a64      	ldr	r2, [pc, #400]	; (8002750 <HAL_DMA_Abort+0x244>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a62      	ldr	r2, [pc, #392]	; (8002754 <HAL_DMA_Abort+0x248>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a61      	ldr	r2, [pc, #388]	; (8002758 <HAL_DMA_Abort+0x24c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5f      	ldr	r2, [pc, #380]	; (800275c <HAL_DMA_Abort+0x250>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Abort+0xda>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_DMA_Abort+0xdc>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 021e 	bic.w	r2, r2, #30
 80025fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800260a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e00a      	b.n	800262a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020e 	bic.w	r2, r2, #14
 8002622:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_DMA_Abort+0x214>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d072      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_DMA_Abort+0x218>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d06d      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a39      	ldr	r2, [pc, #228]	; (8002728 <HAL_DMA_Abort+0x21c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d068      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_DMA_Abort+0x220>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d063      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <HAL_DMA_Abort+0x224>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05e      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_DMA_Abort+0x228>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d059      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a33      	ldr	r2, [pc, #204]	; (8002738 <HAL_DMA_Abort+0x22c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d054      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_DMA_Abort+0x230>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04f      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a30      	ldr	r2, [pc, #192]	; (8002740 <HAL_DMA_Abort+0x234>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04a      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2e      	ldr	r2, [pc, #184]	; (8002744 <HAL_DMA_Abort+0x238>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d045      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_DMA_Abort+0x23c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d040      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_DMA_Abort+0x240>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d03b      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <HAL_DMA_Abort+0x244>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d036      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_DMA_Abort+0x248>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d031      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_DMA_Abort+0x24c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d02c      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_DMA_Abort+0x250>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d027      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a24      	ldr	r2, [pc, #144]	; (8002760 <HAL_DMA_Abort+0x254>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_DMA_Abort+0x258>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01d      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <HAL_DMA_Abort+0x25c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d018      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_DMA_Abort+0x260>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_DMA_Abort+0x264>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_DMA_Abort+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_DMA_Abort+0x26c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort+0x20e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_DMA_Abort+0x270>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d132      	bne.n	8002780 <HAL_DMA_Abort+0x274>
 800271a:	2301      	movs	r3, #1
 800271c:	e031      	b.n	8002782 <HAL_DMA_Abort+0x276>
 800271e:	bf00      	nop
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
 8002760:	58025408 	.word	0x58025408
 8002764:	5802541c 	.word	0x5802541c
 8002768:	58025430 	.word	0x58025430
 800276c:	58025444 	.word	0x58025444
 8002770:	58025458 	.word	0x58025458
 8002774:	5802546c 	.word	0x5802546c
 8002778:	58025480 	.word	0x58025480
 800277c:	58025494 	.word	0x58025494
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6d      	ldr	r2, [pc, #436]	; (8002950 <HAL_DMA_Abort+0x444>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04a      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <HAL_DMA_Abort+0x448>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d045      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6a      	ldr	r2, [pc, #424]	; (8002958 <HAL_DMA_Abort+0x44c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d040      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a68      	ldr	r2, [pc, #416]	; (800295c <HAL_DMA_Abort+0x450>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_DMA_Abort+0x454>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d036      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_DMA_Abort+0x458>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a64      	ldr	r2, [pc, #400]	; (8002968 <HAL_DMA_Abort+0x45c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02c      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a62      	ldr	r2, [pc, #392]	; (800296c <HAL_DMA_Abort+0x460>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a61      	ldr	r2, [pc, #388]	; (8002970 <HAL_DMA_Abort+0x464>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <HAL_DMA_Abort+0x468>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5e      	ldr	r2, [pc, #376]	; (8002978 <HAL_DMA_Abort+0x46c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5c      	ldr	r2, [pc, #368]	; (800297c <HAL_DMA_Abort+0x470>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5b      	ldr	r2, [pc, #364]	; (8002980 <HAL_DMA_Abort+0x474>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a59      	ldr	r2, [pc, #356]	; (8002984 <HAL_DMA_Abort+0x478>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_DMA_Abort+0x47c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort+0x32a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a56      	ldr	r2, [pc, #344]	; (800298c <HAL_DMA_Abort+0x480>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <HAL_DMA_Abort+0x33c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e007      	b.n	8002858 <HAL_DMA_Abort+0x34c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002858:	e013      	b.n	8002882 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285a:	f7fe ff99 	bl	8001790 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b05      	cmp	r3, #5
 8002866:	d90c      	bls.n	8002882 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e12d      	b.n	8002ade <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e5      	bne.n	800285a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_DMA_Abort+0x444>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort+0x422>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_DMA_Abort+0x448>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <HAL_DMA_Abort+0x44c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_DMA_Abort+0x450>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_DMA_Abort+0x454>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_DMA_Abort+0x458>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a26      	ldr	r2, [pc, #152]	; (8002968 <HAL_DMA_Abort+0x45c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <HAL_DMA_Abort+0x460>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a23      	ldr	r2, [pc, #140]	; (8002970 <HAL_DMA_Abort+0x464>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_DMA_Abort+0x468>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a20      	ldr	r2, [pc, #128]	; (8002978 <HAL_DMA_Abort+0x46c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort+0x422>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_DMA_Abort+0x470>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort+0x422>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_DMA_Abort+0x474>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort+0x422>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_DMA_Abort+0x478>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort+0x422>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_DMA_Abort+0x47c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort+0x422>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_DMA_Abort+0x480>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Abort+0x426>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_DMA_Abort+0x428>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02b      	beq.n	8002990 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	223f      	movs	r2, #63	; 0x3f
 8002948:	409a      	lsls	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	e02a      	b.n	80029a6 <HAL_DMA_Abort+0x49a>
 8002950:	40020010 	.word	0x40020010
 8002954:	40020028 	.word	0x40020028
 8002958:	40020040 	.word	0x40020040
 800295c:	40020058 	.word	0x40020058
 8002960:	40020070 	.word	0x40020070
 8002964:	40020088 	.word	0x40020088
 8002968:	400200a0 	.word	0x400200a0
 800296c:	400200b8 	.word	0x400200b8
 8002970:	40020410 	.word	0x40020410
 8002974:	40020428 	.word	0x40020428
 8002978:	40020440 	.word	0x40020440
 800297c:	40020458 	.word	0x40020458
 8002980:	40020470 	.word	0x40020470
 8002984:	40020488 	.word	0x40020488
 8002988:	400204a0 	.word	0x400204a0
 800298c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_DMA_Abort+0x5dc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d072      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a4d      	ldr	r2, [pc, #308]	; (8002aec <HAL_DMA_Abort+0x5e0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d06d      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_DMA_Abort+0x5e4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d068      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_DMA_Abort+0x5e8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d063      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a49      	ldr	r2, [pc, #292]	; (8002af8 <HAL_DMA_Abort+0x5ec>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d05e      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a47      	ldr	r2, [pc, #284]	; (8002afc <HAL_DMA_Abort+0x5f0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d059      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <HAL_DMA_Abort+0x5f4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d054      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a44      	ldr	r2, [pc, #272]	; (8002b04 <HAL_DMA_Abort+0x5f8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d04f      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a43      	ldr	r2, [pc, #268]	; (8002b08 <HAL_DMA_Abort+0x5fc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d04a      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <HAL_DMA_Abort+0x600>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d045      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <HAL_DMA_Abort+0x604>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d040      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <HAL_DMA_Abort+0x608>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d03b      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	; (8002b18 <HAL_DMA_Abort+0x60c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d036      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <HAL_DMA_Abort+0x610>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_DMA_Abort+0x614>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d02c      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_DMA_Abort+0x618>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d027      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a37      	ldr	r2, [pc, #220]	; (8002b28 <HAL_DMA_Abort+0x61c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_DMA_Abort+0x620>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <HAL_DMA_Abort+0x624>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_DMA_Abort+0x628>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <HAL_DMA_Abort+0x62c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <HAL_DMA_Abort+0x630>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2e      	ldr	r2, [pc, #184]	; (8002b40 <HAL_DMA_Abort+0x634>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_Abort+0x58a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <HAL_DMA_Abort+0x638>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Abort+0x58e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_Abort+0x590>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aa8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002aca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	5802541c 	.word	0x5802541c
 8002b30:	58025430 	.word	0x58025430
 8002b34:	58025444 	.word	0x58025444
 8002b38:	58025458 	.word	0x58025458
 8002b3c:	5802546c 	.word	0x5802546c
 8002b40:	58025480 	.word	0x58025480
 8002b44:	58025494 	.word	0x58025494

08002b48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e237      	b.n	8002fca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e22c      	b.n	8002fca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_DMA_Abort_IT+0x1a0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d04a      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <HAL_DMA_Abort_IT+0x1a4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d045      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_DMA_Abort_IT+0x1a8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d040      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_DMA_Abort_IT+0x1ac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d03b      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_DMA_Abort_IT+0x1b0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d036      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <HAL_DMA_Abort_IT+0x1b4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d031      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_DMA_Abort_IT+0x1b8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02c      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_DMA_Abort_IT+0x1bc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d027      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_DMA_Abort_IT+0x1c0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d022      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4f      	ldr	r2, [pc, #316]	; (8002d0c <HAL_DMA_Abort_IT+0x1c4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d01d      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_DMA_Abort_IT+0x1c8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d018      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_DMA_Abort_IT+0x1cc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_DMA_Abort_IT+0x1d0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a49      	ldr	r2, [pc, #292]	; (8002d1c <HAL_DMA_Abort_IT+0x1d4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_DMA_Abort_IT+0x1d8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xc8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <HAL_DMA_Abort_IT+0x1dc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_DMA_Abort_IT+0xcc>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_DMA_Abort_IT+0xce>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8086 	beq.w	8002d28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04a      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <HAL_DMA_Abort_IT+0x1a4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d045      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d040      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d03b      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d036      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <HAL_DMA_Abort_IT+0x1b4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d031      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <HAL_DMA_Abort_IT+0x1b8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02c      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <HAL_DMA_Abort_IT+0x1bc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d027      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_DMA_Abort_IT+0x1c0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d022      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_DMA_Abort_IT+0x1c4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d01d      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <HAL_DMA_Abort_IT+0x1c8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d018      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_DMA_Abort_IT+0x1cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_DMA_Abort_IT+0x1d0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_DMA_Abort_IT+0x1d4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d009      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_DMA_Abort_IT+0x1d8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x17c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_DMA_Abort_IT+0x1dc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d108      	bne.n	8002cd6 <HAL_DMA_Abort_IT+0x18e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e178      	b.n	8002fc8 <HAL_DMA_Abort_IT+0x480>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e16f      	b.n	8002fc8 <HAL_DMA_Abort_IT+0x480>
 8002ce8:	40020010 	.word	0x40020010
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	40020040 	.word	0x40020040
 8002cf4:	40020058 	.word	0x40020058
 8002cf8:	40020070 	.word	0x40020070
 8002cfc:	40020088 	.word	0x40020088
 8002d00:	400200a0 	.word	0x400200a0
 8002d04:	400200b8 	.word	0x400200b8
 8002d08:	40020410 	.word	0x40020410
 8002d0c:	40020428 	.word	0x40020428
 8002d10:	40020440 	.word	0x40020440
 8002d14:	40020458 	.word	0x40020458
 8002d18:	40020470 	.word	0x40020470
 8002d1c:	40020488 	.word	0x40020488
 8002d20:	400204a0 	.word	0x400204a0
 8002d24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 020e 	bic.w	r2, r2, #14
 8002d36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6c      	ldr	r2, [pc, #432]	; (8002ef0 <HAL_DMA_Abort_IT+0x3a8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6b      	ldr	r2, [pc, #428]	; (8002ef4 <HAL_DMA_Abort_IT+0x3ac>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d045      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <HAL_DMA_Abort_IT+0x3b0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d040      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a68      	ldr	r2, [pc, #416]	; (8002efc <HAL_DMA_Abort_IT+0x3b4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03b      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_DMA_Abort_IT+0x3b8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d036      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_DMA_Abort_IT+0x3bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_DMA_Abort_IT+0x3c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a62      	ldr	r2, [pc, #392]	; (8002f0c <HAL_DMA_Abort_IT+0x3c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <HAL_DMA_Abort_IT+0x3c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_DMA_Abort_IT+0x3cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_DMA_Abort_IT+0x3d0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <HAL_DMA_Abort_IT+0x3d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <HAL_DMA_Abort_IT+0x3d8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a59      	ldr	r2, [pc, #356]	; (8002f24 <HAL_DMA_Abort_IT+0x3dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_DMA_Abort_IT+0x3e0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x290>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <HAL_DMA_Abort_IT+0x3e4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <HAL_DMA_Abort_IT+0x2a2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e007      	b.n	8002dfa <HAL_DMA_Abort_IT+0x2b2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <HAL_DMA_Abort_IT+0x3a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d072      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <HAL_DMA_Abort_IT+0x3ac>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d06d      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a39      	ldr	r2, [pc, #228]	; (8002ef8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d068      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a37      	ldr	r2, [pc, #220]	; (8002efc <HAL_DMA_Abort_IT+0x3b4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d063      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a36      	ldr	r2, [pc, #216]	; (8002f00 <HAL_DMA_Abort_IT+0x3b8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d05e      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <HAL_DMA_Abort_IT+0x3bc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d059      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <HAL_DMA_Abort_IT+0x3c0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d054      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <HAL_DMA_Abort_IT+0x3c4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d04f      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <HAL_DMA_Abort_IT+0x3c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_DMA_Abort_IT+0x3cc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_DMA_Abort_IT+0x3d0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	; (8002f1c <HAL_DMA_Abort_IT+0x3d4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <HAL_DMA_Abort_IT+0x3d8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a28      	ldr	r2, [pc, #160]	; (8002f24 <HAL_DMA_Abort_IT+0x3dc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_DMA_Abort_IT+0x3e0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <HAL_DMA_Abort_IT+0x3e4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_DMA_Abort_IT+0x3e8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_DMA_Abort_IT+0x3ec>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_DMA_Abort_IT+0x3f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_DMA_Abort_IT+0x3f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_DMA_Abort_IT+0x3f8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <HAL_DMA_Abort_IT+0x3fc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_DMA_Abort_IT+0x400>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_Abort_IT+0x3a2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_DMA_Abort_IT+0x404>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d132      	bne.n	8002f50 <HAL_DMA_Abort_IT+0x408>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e031      	b.n	8002f52 <HAL_DMA_Abort_IT+0x40a>
 8002eee:	bf00      	nop
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
 8002f30:	58025408 	.word	0x58025408
 8002f34:	5802541c 	.word	0x5802541c
 8002f38:	58025430 	.word	0x58025430
 8002f3c:	58025444 	.word	0x58025444
 8002f40:	58025458 	.word	0x58025458
 8002f44:	5802546c 	.word	0x5802546c
 8002f48:	58025480 	.word	0x58025480
 8002f4c:	58025494 	.word	0x58025494
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2201      	movs	r2, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fe0:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_DMA_IRQHandler+0x1ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a67      	ldr	r2, [pc, #412]	; (8003184 <HAL_DMA_IRQHandler+0x1b0>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0a9b      	lsrs	r3, r3, #10
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a5f      	ldr	r2, [pc, #380]	; (8003188 <HAL_DMA_IRQHandler+0x1b4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_DMA_IRQHandler+0x1b8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <HAL_DMA_IRQHandler+0x1bc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5a      	ldr	r2, [pc, #360]	; (8003194 <HAL_DMA_IRQHandler+0x1c0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a59      	ldr	r2, [pc, #356]	; (8003198 <HAL_DMA_IRQHandler+0x1c4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_DMA_IRQHandler+0x1c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_DMA_IRQHandler+0x1cc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_DMA_IRQHandler+0x1d4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a51      	ldr	r2, [pc, #324]	; (80031ac <HAL_DMA_IRQHandler+0x1d8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <HAL_DMA_IRQHandler+0x1e0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a4b      	ldr	r2, [pc, #300]	; (80031bc <HAL_DMA_IRQHandler+0x1e8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a4a      	ldr	r2, [pc, #296]	; (80031c0 <HAL_DMA_IRQHandler+0x1ec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xd2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_DMA_IRQHandler+0x1f0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_IRQHandler+0xd6>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_DMA_IRQHandler+0xd8>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 842b 	beq.w	8003908 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2208      	movs	r2, #8
 80030bc:	409a      	lsls	r2, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80a2 	beq.w	800320c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_DMA_IRQHandler+0x1b4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d04a      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_DMA_IRQHandler+0x1b8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d045      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_DMA_IRQHandler+0x1bc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d040      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_DMA_IRQHandler+0x1c0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d03b      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_DMA_IRQHandler+0x1c4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d036      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_DMA_IRQHandler+0x1c8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d031      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_DMA_IRQHandler+0x1cc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02c      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d027      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMA_IRQHandler+0x1d4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_DMA_IRQHandler+0x1d8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01d      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_DMA_IRQHandler+0x1e0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_DMA_IRQHandler+0x1e8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_DMA_IRQHandler+0x1ec>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_DMA_IRQHandler+0x194>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_DMA_IRQHandler+0x1f0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d12f      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x1f4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e02e      	b.n	80031dc <HAL_DMA_IRQHandler+0x208>
 800317e:	bf00      	nop
 8003180:	24000000 	.word	0x24000000
 8003184:	1b4e81b5 	.word	0x1b4e81b5
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d06e      	beq.n	8003300 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <HAL_DMA_IRQHandler+0x3f8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04a      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a67      	ldr	r2, [pc, #412]	; (80033d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d045      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a66      	ldr	r2, [pc, #408]	; (80033d4 <HAL_DMA_IRQHandler+0x400>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_DMA_IRQHandler+0x404>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_DMA_IRQHandler+0x408>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d036      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_DMA_IRQHandler+0x40c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <HAL_DMA_IRQHandler+0x410>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d02c      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5e      	ldr	r2, [pc, #376]	; (80033e8 <HAL_DMA_IRQHandler+0x414>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <HAL_DMA_IRQHandler+0x418>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5b      	ldr	r2, [pc, #364]	; (80033f0 <HAL_DMA_IRQHandler+0x41c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_DMA_IRQHandler+0x420>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_DMA_IRQHandler+0x424>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_DMA_IRQHandler+0x428>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_DMA_IRQHandler+0x42c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a54      	ldr	r2, [pc, #336]	; (8003404 <HAL_DMA_IRQHandler+0x430>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x2ee>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_DMA_IRQHandler+0x434>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10a      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x304>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e003      	b.n	80032e0 <HAL_DMA_IRQHandler+0x30c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0202 	orr.w	r2, r3, #2
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 808f 	beq.w	8003434 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <HAL_DMA_IRQHandler+0x3f8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <HAL_DMA_IRQHandler+0x400>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_DMA_IRQHandler+0x404>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_DMA_IRQHandler+0x408>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <HAL_DMA_IRQHandler+0x40c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_DMA_IRQHandler+0x410>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <HAL_DMA_IRQHandler+0x414>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a20      	ldr	r2, [pc, #128]	; (80033ec <HAL_DMA_IRQHandler+0x418>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <HAL_DMA_IRQHandler+0x41c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_DMA_IRQHandler+0x420>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_DMA_IRQHandler+0x424>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_DMA_IRQHandler+0x428>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_DMA_IRQHandler+0x42c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_DMA_IRQHandler+0x430>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3e2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_DMA_IRQHandler+0x434>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d12a      	bne.n	800340c <HAL_DMA_IRQHandler+0x438>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e023      	b.n	8003414 <HAL_DMA_IRQHandler+0x440>
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2204      	movs	r2, #4
 8003422:	409a      	lsls	r2, r3
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	f043 0204 	orr.w	r2, r3, #4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2210      	movs	r2, #16
 800343e:	409a      	lsls	r2, r3
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a6 	beq.w	8003596 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a85      	ldr	r2, [pc, #532]	; (8003664 <HAL_DMA_IRQHandler+0x690>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04a      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a83      	ldr	r2, [pc, #524]	; (8003668 <HAL_DMA_IRQHandler+0x694>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d045      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a82      	ldr	r2, [pc, #520]	; (800366c <HAL_DMA_IRQHandler+0x698>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d040      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a80      	ldr	r2, [pc, #512]	; (8003670 <HAL_DMA_IRQHandler+0x69c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d03b      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <HAL_DMA_IRQHandler+0x6a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d036      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a7d      	ldr	r2, [pc, #500]	; (8003678 <HAL_DMA_IRQHandler+0x6a4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d031      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7c      	ldr	r2, [pc, #496]	; (800367c <HAL_DMA_IRQHandler+0x6a8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d02c      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7a      	ldr	r2, [pc, #488]	; (8003680 <HAL_DMA_IRQHandler+0x6ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d027      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	; (8003684 <HAL_DMA_IRQHandler+0x6b0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a77      	ldr	r2, [pc, #476]	; (8003688 <HAL_DMA_IRQHandler+0x6b4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a76      	ldr	r2, [pc, #472]	; (800368c <HAL_DMA_IRQHandler+0x6b8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a74      	ldr	r2, [pc, #464]	; (8003690 <HAL_DMA_IRQHandler+0x6bc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a73      	ldr	r2, [pc, #460]	; (8003694 <HAL_DMA_IRQHandler+0x6c0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_DMA_IRQHandler+0x6c4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_DMA_IRQHandler+0x6c8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_DMA_IRQHandler+0x516>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	; (80036a0 <HAL_DMA_IRQHandler+0x6cc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10a      	bne.n	8003500 <HAL_DMA_IRQHandler+0x52c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e009      	b.n	8003514 <HAL_DMA_IRQHandler+0x540>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d03e      	beq.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2210      	movs	r2, #16
 8003522:	409a      	lsls	r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d024      	beq.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e01f      	b.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01b      	beq.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e016      	b.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0208 	bic.w	r2, r2, #8
 8003584:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2220      	movs	r2, #32
 80035a0:	409a      	lsls	r2, r3
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8110 	beq.w	80037cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <HAL_DMA_IRQHandler+0x690>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04a      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <HAL_DMA_IRQHandler+0x694>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d045      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a29      	ldr	r2, [pc, #164]	; (800366c <HAL_DMA_IRQHandler+0x698>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d040      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a28      	ldr	r2, [pc, #160]	; (8003670 <HAL_DMA_IRQHandler+0x69c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03b      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <HAL_DMA_IRQHandler+0x6a0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d036      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a25      	ldr	r2, [pc, #148]	; (8003678 <HAL_DMA_IRQHandler+0x6a4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d031      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <HAL_DMA_IRQHandler+0x6a8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02c      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_DMA_IRQHandler+0x6ac>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d027      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_DMA_IRQHandler+0x6b0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_DMA_IRQHandler+0x6b4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_DMA_IRQHandler+0x6b8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <HAL_DMA_IRQHandler+0x6bc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <HAL_DMA_IRQHandler+0x6c0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a19      	ldr	r2, [pc, #100]	; (8003698 <HAL_DMA_IRQHandler+0x6c4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	; (800369c <HAL_DMA_IRQHandler+0x6c8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_DMA_IRQHandler+0x678>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_DMA_IRQHandler+0x6cc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d12b      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x6d0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e02a      	b.n	80036b8 <HAL_DMA_IRQHandler+0x6e4>
 8003662:	bf00      	nop
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8087 	beq.w	80037cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2220      	movs	r2, #32
 80036c8:	409a      	lsls	r2, r3
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d139      	bne.n	800374e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0216 	bic.w	r2, r2, #22
 80036e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_DMA_IRQHandler+0x736>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0208 	bic.w	r2, r2, #8
 8003718:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	223f      	movs	r2, #63	; 0x3f
 8003724:	409a      	lsls	r2, r3
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 834a 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
          }
          return;
 800374c:	e344      	b.n	8003dd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
 800377a:	e027      	b.n	80037cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d023      	beq.n	80037cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
 800378c:	e01e      	b.n	80037cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10f      	bne.n	80037bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0210 	bic.w	r2, r2, #16
 80037aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8306 	beq.w	8003de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8088 	beq.w	80038f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2204      	movs	r2, #4
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_DMA_IRQHandler+0xa08>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d04a      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a79      	ldr	r2, [pc, #484]	; (80039e0 <HAL_DMA_IRQHandler+0xa0c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d045      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_DMA_IRQHandler+0xa10>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d040      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a76      	ldr	r2, [pc, #472]	; (80039e8 <HAL_DMA_IRQHandler+0xa14>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d03b      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a74      	ldr	r2, [pc, #464]	; (80039ec <HAL_DMA_IRQHandler+0xa18>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d036      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	; (80039f0 <HAL_DMA_IRQHandler+0xa1c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d031      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a71      	ldr	r2, [pc, #452]	; (80039f4 <HAL_DMA_IRQHandler+0xa20>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02c      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a70      	ldr	r2, [pc, #448]	; (80039f8 <HAL_DMA_IRQHandler+0xa24>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d027      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_DMA_IRQHandler+0xa28>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d022      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6d      	ldr	r2, [pc, #436]	; (8003a00 <HAL_DMA_IRQHandler+0xa2c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d01d      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6b      	ldr	r2, [pc, #428]	; (8003a04 <HAL_DMA_IRQHandler+0xa30>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_DMA_IRQHandler+0xa34>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <HAL_DMA_IRQHandler+0xa38>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_DMA_IRQHandler+0xa3c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_DMA_IRQHandler+0xa40>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_DMA_IRQHandler+0x8b8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a64      	ldr	r2, [pc, #400]	; (8003a18 <HAL_DMA_IRQHandler+0xa44>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <HAL_DMA_IRQHandler+0x8ca>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e007      	b.n	80038ae <HAL_DMA_IRQHandler+0x8da>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d307      	bcc.n	80038ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f2      	bne.n	80038ae <HAL_DMA_IRQHandler+0x8da>
 80038c8:	e000      	b.n	80038cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038e2:	e003      	b.n	80038ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8272 	beq.w	8003de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	e26c      	b.n	8003de2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <HAL_DMA_IRQHandler+0xa48>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <HAL_DMA_IRQHandler+0xa4c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01d      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_DMA_IRQHandler+0xa50>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_DMA_IRQHandler+0xa54>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <HAL_DMA_IRQHandler+0xa58>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <HAL_DMA_IRQHandler+0xa5c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <HAL_DMA_IRQHandler+0xa60>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_DMA_IRQHandler+0x984>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_DMA_IRQHandler+0xa64>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_DMA_IRQHandler+0x988>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_DMA_IRQHandler+0x98a>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 823f 	beq.w	8003de2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2204      	movs	r2, #4
 8003976:	409a      	lsls	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80cd 	beq.w	8003b1c <HAL_DMA_IRQHandler+0xb48>
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80c7 	beq.w	8003b1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2204      	movs	r2, #4
 8003998:	409a      	lsls	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d049      	beq.n	8003a3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8210 	beq.w	8003ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c4:	e20a      	b.n	8003ddc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8206 	beq.w	8003ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d8:	e200      	b.n	8003ddc <HAL_DMA_IRQHandler+0xe08>
 80039da:	bf00      	nop
 80039dc:	40020010 	.word	0x40020010
 80039e0:	40020028 	.word	0x40020028
 80039e4:	40020040 	.word	0x40020040
 80039e8:	40020058 	.word	0x40020058
 80039ec:	40020070 	.word	0x40020070
 80039f0:	40020088 	.word	0x40020088
 80039f4:	400200a0 	.word	0x400200a0
 80039f8:	400200b8 	.word	0x400200b8
 80039fc:	40020410 	.word	0x40020410
 8003a00:	40020428 	.word	0x40020428
 8003a04:	40020440 	.word	0x40020440
 8003a08:	40020458 	.word	0x40020458
 8003a0c:	40020470 	.word	0x40020470
 8003a10:	40020488 	.word	0x40020488
 8003a14:	400204a0 	.word	0x400204a0
 8003a18:	400204b8 	.word	0x400204b8
 8003a1c:	58025408 	.word	0x58025408
 8003a20:	5802541c 	.word	0x5802541c
 8003a24:	58025430 	.word	0x58025430
 8003a28:	58025444 	.word	0x58025444
 8003a2c:	58025458 	.word	0x58025458
 8003a30:	5802546c 	.word	0x5802546c
 8003a34:	58025480 	.word	0x58025480
 8003a38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d160      	bne.n	8003b08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7f      	ldr	r2, [pc, #508]	; (8003c48 <HAL_DMA_IRQHandler+0xc74>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7d      	ldr	r2, [pc, #500]	; (8003c4c <HAL_DMA_IRQHandler+0xc78>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <HAL_DMA_IRQHandler+0xc7c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_DMA_IRQHandler+0xc80>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a79      	ldr	r2, [pc, #484]	; (8003c58 <HAL_DMA_IRQHandler+0xc84>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a77      	ldr	r2, [pc, #476]	; (8003c5c <HAL_DMA_IRQHandler+0xc88>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a76      	ldr	r2, [pc, #472]	; (8003c60 <HAL_DMA_IRQHandler+0xc8c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a74      	ldr	r2, [pc, #464]	; (8003c64 <HAL_DMA_IRQHandler+0xc90>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a73      	ldr	r2, [pc, #460]	; (8003c68 <HAL_DMA_IRQHandler+0xc94>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a71      	ldr	r2, [pc, #452]	; (8003c6c <HAL_DMA_IRQHandler+0xc98>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a70      	ldr	r2, [pc, #448]	; (8003c70 <HAL_DMA_IRQHandler+0xc9c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_DMA_IRQHandler+0xca0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6d      	ldr	r2, [pc, #436]	; (8003c78 <HAL_DMA_IRQHandler+0xca4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_DMA_IRQHandler+0xca8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_DMA_IRQHandler+0xcac>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xb12>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_DMA_IRQHandler+0xcb0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_IRQHandler+0xb24>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0208 	bic.w	r2, r2, #8
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e007      	b.n	8003b08 <HAL_DMA_IRQHandler+0xb34>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0204 	bic.w	r2, r2, #4
 8003b06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8165 	beq.w	8003ddc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1a:	e15f      	b.n	8003ddc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2202      	movs	r2, #2
 8003b26:	409a      	lsls	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80c5 	beq.w	8003cbc <HAL_DMA_IRQHandler+0xce8>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80bf 	beq.w	8003cbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2202      	movs	r2, #2
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 813a 	beq.w	8003de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b74:	e134      	b.n	8003de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8130 	beq.w	8003de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b88:	e12a      	b.n	8003de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 8089 	bne.w	8003ca8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <HAL_DMA_IRQHandler+0xc74>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04a      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <HAL_DMA_IRQHandler+0xc78>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d045      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <HAL_DMA_IRQHandler+0xc7c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d040      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_DMA_IRQHandler+0xc80>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d03b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <HAL_DMA_IRQHandler+0xc84>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d036      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <HAL_DMA_IRQHandler+0xc88>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d031      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <HAL_DMA_IRQHandler+0xc8c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d02c      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <HAL_DMA_IRQHandler+0xc90>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d027      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_DMA_IRQHandler+0xc94>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_DMA_IRQHandler+0xc98>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01d      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_DMA_IRQHandler+0xc9c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_DMA_IRQHandler+0xca0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_DMA_IRQHandler+0xca4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_DMA_IRQHandler+0xca8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_DMA_IRQHandler+0xcac>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xc62>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <HAL_DMA_IRQHandler+0xcb0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d128      	bne.n	8003c88 <HAL_DMA_IRQHandler+0xcb4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0214 	bic.w	r2, r2, #20
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e027      	b.n	8003c98 <HAL_DMA_IRQHandler+0xcc4>
 8003c48:	40020010 	.word	0x40020010
 8003c4c:	40020028 	.word	0x40020028
 8003c50:	40020040 	.word	0x40020040
 8003c54:	40020058 	.word	0x40020058
 8003c58:	40020070 	.word	0x40020070
 8003c5c:	40020088 	.word	0x40020088
 8003c60:	400200a0 	.word	0x400200a0
 8003c64:	400200b8 	.word	0x400200b8
 8003c68:	40020410 	.word	0x40020410
 8003c6c:	40020428 	.word	0x40020428
 8003c70:	40020440 	.word	0x40020440
 8003c74:	40020458 	.word	0x40020458
 8003c78:	40020470 	.word	0x40020470
 8003c7c:	40020488 	.word	0x40020488
 8003c80:	400204a0 	.word	0x400204a0
 8003c84:	400204b8 	.word	0x400204b8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 020a 	bic.w	r2, r2, #10
 8003c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8097 	beq.w	8003de0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cba:	e091      	b.n	8003de0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8088 	beq.w	8003de2 <HAL_DMA_IRQHandler+0xe0e>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8082 	beq.w	8003de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a41      	ldr	r2, [pc, #260]	; (8003de8 <HAL_DMA_IRQHandler+0xe14>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <HAL_DMA_IRQHandler+0xe18>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3e      	ldr	r2, [pc, #248]	; (8003df0 <HAL_DMA_IRQHandler+0xe1c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <HAL_DMA_IRQHandler+0xe20>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3b      	ldr	r2, [pc, #236]	; (8003df8 <HAL_DMA_IRQHandler+0xe24>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_DMA_IRQHandler+0xe28>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_DMA_IRQHandler+0xe2c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_DMA_IRQHandler+0xe30>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a35      	ldr	r2, [pc, #212]	; (8003e08 <HAL_DMA_IRQHandler+0xe34>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <HAL_DMA_IRQHandler+0xe38>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a32      	ldr	r2, [pc, #200]	; (8003e10 <HAL_DMA_IRQHandler+0xe3c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_DMA_IRQHandler+0xe40>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2f      	ldr	r2, [pc, #188]	; (8003e18 <HAL_DMA_IRQHandler+0xe44>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_IRQHandler+0xe48>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <HAL_DMA_IRQHandler+0xe4c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xdaa>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_IRQHandler+0xe50>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d108      	bne.n	8003d90 <HAL_DMA_IRQHandler+0xdbc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 021c 	bic.w	r2, r2, #28
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e007      	b.n	8003da0 <HAL_DMA_IRQHandler+0xdcc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020e 	bic.w	r2, r2, #14
 8003d9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
 8003dd6:	e004      	b.n	8003de2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003dd8:	bf00      	nop
 8003dda:	e002      	b.n	8003de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8

08003e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7f      	ldr	r2, [pc, #508]	; (8004044 <DMA_SetConfig+0x21c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d072      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a7d      	ldr	r2, [pc, #500]	; (8004048 <DMA_SetConfig+0x220>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d06d      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	; (800404c <DMA_SetConfig+0x224>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d068      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7a      	ldr	r2, [pc, #488]	; (8004050 <DMA_SetConfig+0x228>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d063      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a79      	ldr	r2, [pc, #484]	; (8004054 <DMA_SetConfig+0x22c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d05e      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a77      	ldr	r2, [pc, #476]	; (8004058 <DMA_SetConfig+0x230>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d059      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a76      	ldr	r2, [pc, #472]	; (800405c <DMA_SetConfig+0x234>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d054      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a74      	ldr	r2, [pc, #464]	; (8004060 <DMA_SetConfig+0x238>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d04f      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a73      	ldr	r2, [pc, #460]	; (8004064 <DMA_SetConfig+0x23c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d04a      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a71      	ldr	r2, [pc, #452]	; (8004068 <DMA_SetConfig+0x240>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d045      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a70      	ldr	r2, [pc, #448]	; (800406c <DMA_SetConfig+0x244>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d040      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6e      	ldr	r2, [pc, #440]	; (8004070 <DMA_SetConfig+0x248>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6d      	ldr	r2, [pc, #436]	; (8004074 <DMA_SetConfig+0x24c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d036      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6b      	ldr	r2, [pc, #428]	; (8004078 <DMA_SetConfig+0x250>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6a      	ldr	r2, [pc, #424]	; (800407c <DMA_SetConfig+0x254>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02c      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a68      	ldr	r2, [pc, #416]	; (8004080 <DMA_SetConfig+0x258>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d027      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a67      	ldr	r2, [pc, #412]	; (8004084 <DMA_SetConfig+0x25c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a65      	ldr	r2, [pc, #404]	; (8004088 <DMA_SetConfig+0x260>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a64      	ldr	r2, [pc, #400]	; (800408c <DMA_SetConfig+0x264>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a62      	ldr	r2, [pc, #392]	; (8004090 <DMA_SetConfig+0x268>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a61      	ldr	r2, [pc, #388]	; (8004094 <DMA_SetConfig+0x26c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5f      	ldr	r2, [pc, #380]	; (8004098 <DMA_SetConfig+0x270>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5e      	ldr	r2, [pc, #376]	; (800409c <DMA_SetConfig+0x274>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <DMA_SetConfig+0x10a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5c      	ldr	r2, [pc, #368]	; (80040a0 <DMA_SetConfig+0x278>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <DMA_SetConfig+0x10e>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <DMA_SetConfig+0x110>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a39      	ldr	r2, [pc, #228]	; (8004044 <DMA_SetConfig+0x21c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a38      	ldr	r2, [pc, #224]	; (8004048 <DMA_SetConfig+0x220>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a36      	ldr	r2, [pc, #216]	; (800404c <DMA_SetConfig+0x224>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a35      	ldr	r2, [pc, #212]	; (8004050 <DMA_SetConfig+0x228>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a33      	ldr	r2, [pc, #204]	; (8004054 <DMA_SetConfig+0x22c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a32      	ldr	r2, [pc, #200]	; (8004058 <DMA_SetConfig+0x230>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a30      	ldr	r2, [pc, #192]	; (800405c <DMA_SetConfig+0x234>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <DMA_SetConfig+0x238>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <DMA_SetConfig+0x23c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <DMA_SetConfig+0x240>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <DMA_SetConfig+0x244>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a29      	ldr	r2, [pc, #164]	; (8004070 <DMA_SetConfig+0x248>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a27      	ldr	r2, [pc, #156]	; (8004074 <DMA_SetConfig+0x24c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <DMA_SetConfig+0x250>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a24      	ldr	r2, [pc, #144]	; (800407c <DMA_SetConfig+0x254>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <DMA_SetConfig+0x1d0>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a23      	ldr	r2, [pc, #140]	; (8004080 <DMA_SetConfig+0x258>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <DMA_SetConfig+0x1d4>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <DMA_SetConfig+0x1d6>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d059      	beq.n	80040b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	223f      	movs	r2, #63	; 0x3f
 800400c:	409a      	lsls	r2, r3
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004020:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d138      	bne.n	80040a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004042:	e086      	b.n	8004152 <DMA_SetConfig+0x32a>
 8004044:	40020010 	.word	0x40020010
 8004048:	40020028 	.word	0x40020028
 800404c:	40020040 	.word	0x40020040
 8004050:	40020058 	.word	0x40020058
 8004054:	40020070 	.word	0x40020070
 8004058:	40020088 	.word	0x40020088
 800405c:	400200a0 	.word	0x400200a0
 8004060:	400200b8 	.word	0x400200b8
 8004064:	40020410 	.word	0x40020410
 8004068:	40020428 	.word	0x40020428
 800406c:	40020440 	.word	0x40020440
 8004070:	40020458 	.word	0x40020458
 8004074:	40020470 	.word	0x40020470
 8004078:	40020488 	.word	0x40020488
 800407c:	400204a0 	.word	0x400204a0
 8004080:	400204b8 	.word	0x400204b8
 8004084:	58025408 	.word	0x58025408
 8004088:	5802541c 	.word	0x5802541c
 800408c:	58025430 	.word	0x58025430
 8004090:	58025444 	.word	0x58025444
 8004094:	58025458 	.word	0x58025458
 8004098:	5802546c 	.word	0x5802546c
 800409c:	58025480 	.word	0x58025480
 80040a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
}
 80040b4:	e04d      	b.n	8004152 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a29      	ldr	r2, [pc, #164]	; (8004160 <DMA_SetConfig+0x338>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a27      	ldr	r2, [pc, #156]	; (8004164 <DMA_SetConfig+0x33c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a26      	ldr	r2, [pc, #152]	; (8004168 <DMA_SetConfig+0x340>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a24      	ldr	r2, [pc, #144]	; (800416c <DMA_SetConfig+0x344>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a23      	ldr	r2, [pc, #140]	; (8004170 <DMA_SetConfig+0x348>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a21      	ldr	r2, [pc, #132]	; (8004174 <DMA_SetConfig+0x34c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a20      	ldr	r2, [pc, #128]	; (8004178 <DMA_SetConfig+0x350>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <DMA_SetConfig+0x2de>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <DMA_SetConfig+0x354>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <DMA_SetConfig+0x2e2>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <DMA_SetConfig+0x2e4>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d108      	bne.n	8004142 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	60da      	str	r2, [r3, #12]
}
 8004140:	e007      	b.n	8004152 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	60da      	str	r2, [r3, #12]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494

08004180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a42      	ldr	r2, [pc, #264]	; (8004298 <DMA_CalcBaseAndBitshift+0x118>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d04a      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a41      	ldr	r2, [pc, #260]	; (800429c <DMA_CalcBaseAndBitshift+0x11c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d045      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3f      	ldr	r2, [pc, #252]	; (80042a0 <DMA_CalcBaseAndBitshift+0x120>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d040      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3e      	ldr	r2, [pc, #248]	; (80042a4 <DMA_CalcBaseAndBitshift+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d03b      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <DMA_CalcBaseAndBitshift+0x128>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d036      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a3b      	ldr	r2, [pc, #236]	; (80042ac <DMA_CalcBaseAndBitshift+0x12c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d031      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <DMA_CalcBaseAndBitshift+0x130>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02c      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a38      	ldr	r2, [pc, #224]	; (80042b4 <DMA_CalcBaseAndBitshift+0x134>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d027      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a36      	ldr	r2, [pc, #216]	; (80042b8 <DMA_CalcBaseAndBitshift+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a35      	ldr	r2, [pc, #212]	; (80042bc <DMA_CalcBaseAndBitshift+0x13c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d01d      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a33      	ldr	r2, [pc, #204]	; (80042c0 <DMA_CalcBaseAndBitshift+0x140>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <DMA_CalcBaseAndBitshift+0x144>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <DMA_CalcBaseAndBitshift+0x148>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <DMA_CalcBaseAndBitshift+0x14c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <DMA_CalcBaseAndBitshift+0x150>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <DMA_CalcBaseAndBitshift+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <DMA_CalcBaseAndBitshift+0x154>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <DMA_CalcBaseAndBitshift+0xac>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <DMA_CalcBaseAndBitshift+0xae>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3b10      	subs	r3, #16
 800423a:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <DMA_CalcBaseAndBitshift+0x158>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <DMA_CalcBaseAndBitshift+0x15c>)
 800424c:	5cd3      	ldrb	r3, [r2, r3]
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d908      	bls.n	800426c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004262:	4013      	ands	r3, r2
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	659a      	str	r2, [r3, #88]	; 0x58
 800426a:	e00d      	b.n	8004288 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6593      	str	r3, [r2, #88]	; 0x58
 800427a:	e005      	b.n	8004288 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40020010 	.word	0x40020010
 800429c:	40020028 	.word	0x40020028
 80042a0:	40020040 	.word	0x40020040
 80042a4:	40020058 	.word	0x40020058
 80042a8:	40020070 	.word	0x40020070
 80042ac:	40020088 	.word	0x40020088
 80042b0:	400200a0 	.word	0x400200a0
 80042b4:	400200b8 	.word	0x400200b8
 80042b8:	40020410 	.word	0x40020410
 80042bc:	40020428 	.word	0x40020428
 80042c0:	40020440 	.word	0x40020440
 80042c4:	40020458 	.word	0x40020458
 80042c8:	40020470 	.word	0x40020470
 80042cc:	40020488 	.word	0x40020488
 80042d0:	400204a0 	.word	0x400204a0
 80042d4:	400204b8 	.word	0x400204b8
 80042d8:	aaaaaaab 	.word	0xaaaaaaab
 80042dc:	0800cd68 	.word	0x0800cd68
 80042e0:	fffffc00 	.word	0xfffffc00

080042e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d120      	bne.n	800433a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d858      	bhi.n	80043b2 <DMA_CheckFifoParam+0xce>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <DMA_CheckFifoParam+0x24>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	08004319 	.word	0x08004319
 800430c:	0800432b 	.word	0x0800432b
 8004310:	08004319 	.word	0x08004319
 8004314:	080043b3 	.word	0x080043b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d048      	beq.n	80043b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004328:	e045      	b.n	80043b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004332:	d142      	bne.n	80043ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004338:	e03f      	b.n	80043ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004342:	d123      	bne.n	800438c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	2b03      	cmp	r3, #3
 800434a:	d838      	bhi.n	80043be <DMA_CheckFifoParam+0xda>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <DMA_CheckFifoParam+0x70>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	0800436b 	.word	0x0800436b
 800435c:	08004365 	.word	0x08004365
 8004360:	0800437d 	.word	0x0800437d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
        break;
 8004368:	e030      	b.n	80043cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d025      	beq.n	80043c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437a:	e022      	b.n	80043c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004384:	d11f      	bne.n	80043c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800438a:	e01c      	b.n	80043c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	2b02      	cmp	r3, #2
 8004392:	d902      	bls.n	800439a <DMA_CheckFifoParam+0xb6>
 8004394:	2b03      	cmp	r3, #3
 8004396:	d003      	beq.n	80043a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004398:	e018      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
        break;
 800439e:	e015      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
    break;
 80043b0:	e00b      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
        break;
 80043b2:	bf00      	nop
 80043b4:	e00a      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        break;
 80043b6:	bf00      	nop
 80043b8:	e008      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e006      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        break;
 80043be:	bf00      	nop
 80043c0:	e004      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <DMA_CheckFifoParam+0xe8>
    break;
 80043ca:	bf00      	nop
    }
  }

  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop

080043dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a38      	ldr	r2, [pc, #224]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d022      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a36      	ldr	r2, [pc, #216]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01d      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a35      	ldr	r2, [pc, #212]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d018      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a33      	ldr	r2, [pc, #204]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a32      	ldr	r2, [pc, #200]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2d      	ldr	r2, [pc, #180]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01a      	beq.n	800447a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	3b08      	subs	r3, #8
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2201      	movs	r2, #1
 8004472:	409a      	lsls	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004478:	e024      	b.n	80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3b10      	subs	r3, #16
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d806      	bhi.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d902      	bls.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3308      	adds	r3, #8
 80044a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58025408 	.word	0x58025408
 80044d4:	5802541c 	.word	0x5802541c
 80044d8:	58025430 	.word	0x58025430
 80044dc:	58025444 	.word	0x58025444
 80044e0:	58025458 	.word	0x58025458
 80044e4:	5802546c 	.word	0x5802546c
 80044e8:	58025480 	.word	0x58025480
 80044ec:	58025494 	.word	0x58025494
 80044f0:	cccccccd 	.word	0xcccccccd
 80044f4:	16009600 	.word	0x16009600
 80044f8:	58025880 	.word	0x58025880
 80044fc:	aaaaaaab 	.word	0xaaaaaaab
 8004500:	400204b8 	.word	0x400204b8
 8004504:	4002040f 	.word	0x4002040f
 8004508:	10008200 	.word	0x10008200
 800450c:	40020880 	.word	0x40020880

08004510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04a      	beq.n	80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d847      	bhi.n	80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a24      	ldr	r2, [pc, #144]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d01d      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d101      	bne.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004580:	2300      	movs	r3, #0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004598:	671a      	str	r2, [r3, #112]	; 0x70
 800459a:	e009      	b.n	80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	58025408 	.word	0x58025408
 80045cc:	5802541c 	.word	0x5802541c
 80045d0:	58025430 	.word	0x58025430
 80045d4:	58025444 	.word	0x58025444
 80045d8:	58025458 	.word	0x58025458
 80045dc:	5802546c 	.word	0x5802546c
 80045e0:	58025480 	.word	0x58025480
 80045e4:	58025494 	.word	0x58025494
 80045e8:	1600963f 	.word	0x1600963f
 80045ec:	58025940 	.word	0x58025940
 80045f0:	1000823f 	.word	0x1000823f
 80045f4:	40020940 	.word	0x40020940

080045f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004606:	4b89      	ldr	r3, [pc, #548]	; (800482c <HAL_GPIO_Init+0x234>)
 8004608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800460a:	e194      	b.n	8004936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2101      	movs	r1, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8186 	beq.w	8004930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d005      	beq.n	800463c <HAL_GPIO_Init+0x44>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d130      	bne.n	800469e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004672:	2201      	movs	r2, #1
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0201 	and.w	r2, r3, #1
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d017      	beq.n	80046da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d123      	bne.n	800472e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	08da      	lsrs	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3208      	adds	r2, #8
 80046ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	220f      	movs	r2, #15
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	2203      	movs	r2, #3
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0203 	and.w	r2, r3, #3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80e0 	beq.w	8004930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004770:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_GPIO_Init+0x238>)
 8004772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004776:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <HAL_GPIO_Init+0x238>)
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_GPIO_Init+0x238>)
 8004782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478e:	4a29      	ldr	r2, [pc, #164]	; (8004834 <HAL_GPIO_Init+0x23c>)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_GPIO_Init+0x240>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d052      	beq.n	8004860 <HAL_GPIO_Init+0x268>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_GPIO_Init+0x244>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d031      	beq.n	8004826 <HAL_GPIO_Init+0x22e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <HAL_GPIO_Init+0x248>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02b      	beq.n	8004822 <HAL_GPIO_Init+0x22a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_GPIO_Init+0x24c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d025      	beq.n	800481e <HAL_GPIO_Init+0x226>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_GPIO_Init+0x250>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01f      	beq.n	800481a <HAL_GPIO_Init+0x222>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_GPIO_Init+0x254>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d019      	beq.n	8004816 <HAL_GPIO_Init+0x21e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_GPIO_Init+0x258>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_GPIO_Init+0x21a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a19      	ldr	r2, [pc, #100]	; (8004854 <HAL_GPIO_Init+0x25c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00d      	beq.n	800480e <HAL_GPIO_Init+0x216>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_GPIO_Init+0x260>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <HAL_GPIO_Init+0x212>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_GPIO_Init+0x264>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <HAL_GPIO_Init+0x20e>
 8004802:	2309      	movs	r3, #9
 8004804:	e02d      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 8004806:	230a      	movs	r3, #10
 8004808:	e02b      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 800480a:	2308      	movs	r3, #8
 800480c:	e029      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 800480e:	2307      	movs	r3, #7
 8004810:	e027      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 8004812:	2306      	movs	r3, #6
 8004814:	e025      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 8004816:	2305      	movs	r3, #5
 8004818:	e023      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 800481a:	2304      	movs	r3, #4
 800481c:	e021      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 800481e:	2303      	movs	r3, #3
 8004820:	e01f      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 8004822:	2302      	movs	r3, #2
 8004824:	e01d      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 8004826:	2301      	movs	r3, #1
 8004828:	e01b      	b.n	8004862 <HAL_GPIO_Init+0x26a>
 800482a:	bf00      	nop
 800482c:	58000080 	.word	0x58000080
 8004830:	58024400 	.word	0x58024400
 8004834:	58000400 	.word	0x58000400
 8004838:	58020000 	.word	0x58020000
 800483c:	58020400 	.word	0x58020400
 8004840:	58020800 	.word	0x58020800
 8004844:	58020c00 	.word	0x58020c00
 8004848:	58021000 	.word	0x58021000
 800484c:	58021400 	.word	0x58021400
 8004850:	58021800 	.word	0x58021800
 8004854:	58021c00 	.word	0x58021c00
 8004858:	58022000 	.word	0x58022000
 800485c:	58022400 	.word	0x58022400
 8004860:	2300      	movs	r3, #0
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	f002 0203 	and.w	r2, r2, #3
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	4093      	lsls	r3, r2
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004872:	4938      	ldr	r1, [pc, #224]	; (8004954 <HAL_GPIO_Init+0x35c>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f ae63 	bne.w	800460c <HAL_GPIO_Init+0x14>
  }
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	3724      	adds	r7, #36	; 0x24
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	58000400 	.word	0x58000400

08004958 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d00a      	beq.n	8004982 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e01f      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e01d      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	490f      	ldr	r1, [pc, #60]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004992:	f7fc fefd 	bl	8001790 <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004998:	e009      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800499a:	f7fc fef9 	bl	8001790 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a8:	d901      	bls.n	80049ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e007      	b.n	80049be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_PWREx_ConfigSupply+0x70>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	d1ee      	bne.n	800499a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	58024800 	.word	0x58024800

080049cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	; 0x30
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f000 bc1d 	b.w	800521a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8087 	beq.w	8004afc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ee:	4b99      	ldr	r3, [pc, #612]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f8:	4b96      	ldr	r3, [pc, #600]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x48>
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	d110      	bne.n	8004a2c <HAL_RCC_OscConfig+0x60>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	4b8f      	ldr	r3, [pc, #572]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d06c      	beq.n	8004afa <HAL_RCC_OscConfig+0x12e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d168      	bne.n	8004afa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e3f6      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x78>
 8004a36:	4b87      	ldr	r3, [pc, #540]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a86      	ldr	r2, [pc, #536]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e02e      	b.n	8004aa2 <HAL_RCC_OscConfig+0xd6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCC_OscConfig+0x9a>
 8004a4c:	4b81      	ldr	r3, [pc, #516]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a80      	ldr	r2, [pc, #512]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a7d      	ldr	r2, [pc, #500]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e01d      	b.n	8004aa2 <HAL_RCC_OscConfig+0xd6>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a6e:	d10c      	bne.n	8004a8a <HAL_RCC_OscConfig+0xbe>
 8004a70:	4b78      	ldr	r3, [pc, #480]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a77      	ldr	r2, [pc, #476]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b75      	ldr	r3, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a74      	ldr	r2, [pc, #464]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e00b      	b.n	8004aa2 <HAL_RCC_OscConfig+0xd6>
 8004a8a:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a71      	ldr	r2, [pc, #452]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6e      	ldr	r2, [pc, #440]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fc fe71 	bl	8001790 <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab2:	f7fc fe6d 	bl	8001790 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	; 0x64
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e3aa      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac4:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0xe6>
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fc fe5d 	bl	8001790 <HAL_GetTick>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ada:	f7fc fe59 	bl	8001790 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e396      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aec:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x10e>
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80cb 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0a:	4b52      	ldr	r3, [pc, #328]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b12:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <HAL_RCC_OscConfig+0x164>
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b18      	cmp	r3, #24
 8004b24:	d156      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x208>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d151      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_OscConfig+0x17c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e368      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 0219 	bic.w	r2, r3, #25
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	493f      	ldr	r1, [pc, #252]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b5a:	f7fc fe19 	bl	8001790 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fc fe15 	bl	8001790 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e352      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	f7fc fe12 	bl	80017a8 <HAL_GetREVID>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d817      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x1f2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d108      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1dc>
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba6:	e07b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	031b      	lsls	r3, r3, #12
 8004bb6:	4927      	ldr	r1, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	e070      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	4921      	ldr	r1, [pc, #132]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd2:	e065      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d048      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 0219 	bic.w	r2, r3, #25
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	491a      	ldr	r1, [pc, #104]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fc fdcf 	bl	8001790 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7fc fdcb 	bl	8001790 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e308      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	f7fc fdc8 	bl	80017a8 <HAL_GetREVID>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d81a      	bhi.n	8004c58 <HAL_RCC_OscConfig+0x28c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d108      	bne.n	8004c3c <HAL_RCC_OscConfig+0x270>
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c38:	6053      	str	r3, [r2, #4]
 8004c3a:	e031      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	4902      	ldr	r1, [pc, #8]	; (8004c54 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
 8004c50:	e026      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
 8004c58:	4b9a      	ldr	r3, [pc, #616]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4997      	ldr	r1, [pc, #604]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
 8004c6c:	e018      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b95      	ldr	r3, [pc, #596]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a94      	ldr	r2, [pc, #592]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fc fd89 	bl	8001790 <HAL_GetTick>
 8004c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c82:	f7fc fd85 	bl	8001790 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e2c2      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c94:	4b8b      	ldr	r3, [pc, #556]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a9 	beq.w	8004e00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cae:	4b85      	ldr	r3, [pc, #532]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cb8:	4b82      	ldr	r3, [pc, #520]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x308>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b18      	cmp	r3, #24
 8004cc8:	d13a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x374>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d135      	bne.n	8004d40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cd4:	4b7b      	ldr	r3, [pc, #492]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_OscConfig+0x320>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	2b80      	cmp	r3, #128	; 0x80
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e296      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cec:	f7fc fd5c 	bl	80017a8 <HAL_GetREVID>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d817      	bhi.n	8004d2a <HAL_RCC_OscConfig+0x35e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d108      	bne.n	8004d14 <HAL_RCC_OscConfig+0x348>
 8004d02:	4b70      	ldr	r3, [pc, #448]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d0a:	4a6e      	ldr	r2, [pc, #440]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d12:	e075      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d14:	4b6b      	ldr	r3, [pc, #428]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	069b      	lsls	r3, r3, #26
 8004d22:	4968      	ldr	r1, [pc, #416]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d28:	e06a      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2a:	4b66      	ldr	r3, [pc, #408]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4962      	ldr	r1, [pc, #392]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d3e:	e05f      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d042      	beq.n	8004dce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d48:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a5d      	ldr	r2, [pc, #372]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc fd1c 	bl	8001790 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d5c:	f7fc fd18 	bl	8001790 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e255      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6e:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d7a:	f7fc fd15 	bl	80017a8 <HAL_GetREVID>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d817      	bhi.n	8004db8 <HAL_RCC_OscConfig+0x3ec>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d108      	bne.n	8004da2 <HAL_RCC_OscConfig+0x3d6>
 8004d90:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d9e:	6053      	str	r3, [r2, #4]
 8004da0:	e02e      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
 8004da2:	4b48      	ldr	r3, [pc, #288]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	069b      	lsls	r3, r3, #26
 8004db0:	4944      	ldr	r1, [pc, #272]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
 8004db6:	e023      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
 8004db8:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	493f      	ldr	r1, [pc, #252]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60cb      	str	r3, [r1, #12]
 8004dcc:	e018      	b.n	8004e00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dce:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc fcd9 	bl	8001790 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004de2:	f7fc fcd5 	bl	8001790 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e212      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d036      	beq.n	8004e7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc fcb6 	bl	8001790 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fc fcb2 	bl	8001790 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1ef      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x45c>
 8004e46:	e018      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc fc9c 	bl	8001790 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fc fc98 	bl	8001790 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1d5      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d039      	beq.n	8004efa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e9a:	f7fc fc79 	bl	8001790 <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ea2:	f7fc fc75 	bl	8001790 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e1b2      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4d6>
 8004ec0:	e01b      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
 8004ec2:	bf00      	nop
 8004ec4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ec8:	4b9b      	ldr	r3, [pc, #620]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a9a      	ldr	r2, [pc, #616]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ed4:	f7fc fc5c 	bl	8001790 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004edc:	f7fc fc58 	bl	8001790 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e195      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eee:	4b92      	ldr	r3, [pc, #584]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8081 	beq.w	800500a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f08:	4b8c      	ldr	r3, [pc, #560]	; (800513c <HAL_RCC_OscConfig+0x770>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a8b      	ldr	r2, [pc, #556]	; (800513c <HAL_RCC_OscConfig+0x770>)
 8004f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f14:	f7fc fc3c 	bl	8001790 <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f1c:	f7fc fc38 	bl	8001790 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e175      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2e:	4b83      	ldr	r3, [pc, #524]	; (800513c <HAL_RCC_OscConfig+0x770>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d106      	bne.n	8004f50 <HAL_RCC_OscConfig+0x584>
 8004f42:	4b7d      	ldr	r3, [pc, #500]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a7c      	ldr	r2, [pc, #496]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	e02d      	b.n	8004fac <HAL_RCC_OscConfig+0x5e0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10c      	bne.n	8004f72 <HAL_RCC_OscConfig+0x5a6>
 8004f58:	4b77      	ldr	r3, [pc, #476]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a76      	ldr	r2, [pc, #472]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
 8004f64:	4b74      	ldr	r3, [pc, #464]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a73      	ldr	r2, [pc, #460]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	f023 0304 	bic.w	r3, r3, #4
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f70:	e01c      	b.n	8004fac <HAL_RCC_OscConfig+0x5e0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c8>
 8004f7a:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a6e      	ldr	r2, [pc, #440]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
 8004f86:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a6b      	ldr	r2, [pc, #428]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0x5e0>
 8004f94:	4b68      	ldr	r3, [pc, #416]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a67      	ldr	r2, [pc, #412]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	4b65      	ldr	r3, [pc, #404]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a64      	ldr	r2, [pc, #400]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	f023 0304 	bic.w	r3, r3, #4
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d015      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fc fbec 	bl	8001790 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fc fbe8 	bl	8001790 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e123      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fd2:	4b59      	ldr	r3, [pc, #356]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0ee      	beq.n	8004fbc <HAL_RCC_OscConfig+0x5f0>
 8004fde:	e014      	b.n	800500a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fc fbd6 	bl	8001790 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fc fbd2 	bl	8001790 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e10d      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ffe:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ee      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8102 	beq.w	8005218 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005014:	4b48      	ldr	r3, [pc, #288]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501c:	2b18      	cmp	r3, #24
 800501e:	f000 80bd 	beq.w	800519c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b02      	cmp	r3, #2
 8005028:	f040 809e 	bne.w	8005168 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	4b42      	ldr	r3, [pc, #264]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a41      	ldr	r2, [pc, #260]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fc fbaa 	bl	8001790 <HAL_GetTick>
 800503c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fc fba6 	bl	8001790 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0e3      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005052:	4b39      	ldr	r3, [pc, #228]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <HAL_RCC_OscConfig+0x774>)
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	430a      	orrs	r2, r1
 8005072:	4931      	ldr	r1, [pc, #196]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	628b      	str	r3, [r1, #40]	; 0x28
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	3b01      	subs	r3, #1
 800507e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	3b01      	subs	r3, #1
 8005088:	025b      	lsls	r3, r3, #9
 800508a:	b29b      	uxth	r3, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	3b01      	subs	r3, #1
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050a8:	4923      	ldr	r1, [pc, #140]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050ae:	4b22      	ldr	r3, [pc, #136]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ba:	4b1f      	ldr	r3, [pc, #124]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_RCC_OscConfig+0x778>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050c6:	00d2      	lsls	r2, r2, #3
 80050c8:	491b      	ldr	r1, [pc, #108]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	f023 020c 	bic.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4917      	ldr	r1, [pc, #92]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f023 0202 	bic.w	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	4912      	ldr	r1, [pc, #72]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005108:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a07      	ldr	r2, [pc, #28]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005122:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <HAL_RCC_OscConfig+0x76c>)
 8005128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fc fb2f 	bl	8001790 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005134:	e011      	b.n	800515a <HAL_RCC_OscConfig+0x78e>
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	58024800 	.word	0x58024800
 8005140:	fffffc0c 	.word	0xfffffc0c
 8005144:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005148:	f7fc fb22 	bl	8001790 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e05f      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800515a:	4b32      	ldr	r3, [pc, #200]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x77c>
 8005166:	e057      	b.n	8005218 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005168:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2d      	ldr	r2, [pc, #180]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 800516e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc fb0c 	bl	8001790 <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517c:	f7fc fb08 	bl	8001790 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e045      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x7b0>
 800519a:	e03d      	b.n	8005218 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCC_OscConfig+0x858>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d031      	beq.n	8005214 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0203 	and.w	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d12a      	bne.n	8005214 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d122      	bne.n	8005214 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d11a      	bne.n	8005214 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d111      	bne.n	8005214 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d108      	bne.n	8005214 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3730      	adds	r7, #48	; 0x30
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400

08005228 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e19c      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b87      	ldr	r3, [pc, #540]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 020f 	bic.w	r2, r3, #15
 8005252:	4985      	ldr	r1, [pc, #532]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b83      	ldr	r3, [pc, #524]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e184      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d010      	beq.n	800529a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005284:	429a      	cmp	r2, r3
 8005286:	d908      	bls.n	800529a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005288:	4b78      	ldr	r3, [pc, #480]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4975      	ldr	r1, [pc, #468]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	4b70      	ldr	r3, [pc, #448]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d908      	bls.n	80052c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052b6:	4b6d      	ldr	r3, [pc, #436]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	496a      	ldr	r1, [pc, #424]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	4b64      	ldr	r3, [pc, #400]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d908      	bls.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	495e      	ldr	r1, [pc, #376]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800530e:	429a      	cmp	r2, r3
 8005310:	d908      	bls.n	8005324 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4953      	ldr	r1, [pc, #332]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b4d      	ldr	r3, [pc, #308]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b4a      	ldr	r3, [pc, #296]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f023 020f 	bic.w	r2, r3, #15
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4947      	ldr	r1, [pc, #284]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800534e:	4313      	orrs	r3, r2
 8005350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d055      	beq.n	800540a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800535e:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4940      	ldr	r1, [pc, #256]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800536c:	4313      	orrs	r3, r2
 800536e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005378:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d121      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0f6      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005390:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0ea      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053a8:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0de      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b8:	4b2c      	ldr	r3, [pc, #176]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d6      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053c8:	4b28      	ldr	r3, [pc, #160]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f023 0207 	bic.w	r2, r3, #7
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4925      	ldr	r1, [pc, #148]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053da:	f7fc f9d9 	bl	8001790 <HAL_GetTick>
 80053de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e2:	f7fc f9d5 	bl	8001790 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0be      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f8:	4b1c      	ldr	r3, [pc, #112]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	429a      	cmp	r2, r3
 8005408:	d1eb      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	429a      	cmp	r2, r3
 8005424:	d208      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005426:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f023 020f 	bic.w	r2, r3, #15
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	490e      	ldr	r1, [pc, #56]	; (800546c <HAL_RCC_ClockConfig+0x244>)
 8005434:	4313      	orrs	r3, r2
 8005436:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d214      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 020f 	bic.w	r2, r3, #15
 800544e:	4906      	ldr	r1, [pc, #24]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b04      	ldr	r3, [pc, #16]	; (8005468 <HAL_RCC_ClockConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e086      	b.n	8005576 <HAL_RCC_ClockConfig+0x34e>
 8005468:	52002000 	.word	0x52002000
 800546c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	4b3f      	ldr	r3, [pc, #252]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005488:	429a      	cmp	r2, r3
 800548a:	d208      	bcs.n	800549e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800548c:	4b3c      	ldr	r3, [pc, #240]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4939      	ldr	r1, [pc, #228]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 800549a:	4313      	orrs	r3, r2
 800549c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d208      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	492e      	ldr	r1, [pc, #184]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d208      	bcs.n	80054fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4922      	ldr	r1, [pc, #136]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d208      	bcs.n	8005528 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4917      	ldr	r1, [pc, #92]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005524:	4313      	orrs	r3, r2
 8005526:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005528:	f000 f834 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	4912      	ldr	r1, [pc, #72]	; (8005584 <HAL_RCC_ClockConfig+0x35c>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005546:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_RCC_ClockConfig+0x358>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <HAL_RCC_ClockConfig+0x35c>)
 8005550:	5cd3      	ldrb	r3, [r2, r3]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <HAL_RCC_ClockConfig+0x360>)
 800555e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <HAL_RCC_ClockConfig+0x364>)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_RCC_ClockConfig+0x368>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fb fd1c 	bl	8000fa8 <HAL_InitTick>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
 8005584:	0800cd58 	.word	0x0800cd58
 8005588:	24000004 	.word	0x24000004
 800558c:	24000000 	.word	0x24000000
 8005590:	24000008 	.word	0x24000008

08005594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800559a:	4bb3      	ldr	r3, [pc, #716]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a2:	2b18      	cmp	r3, #24
 80055a4:	f200 8155 	bhi.w	8005852 <HAL_RCC_GetSysClockFreq+0x2be>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005853 	.word	0x08005853
 80055b8:	08005853 	.word	0x08005853
 80055bc:	08005853 	.word	0x08005853
 80055c0:	08005853 	.word	0x08005853
 80055c4:	08005853 	.word	0x08005853
 80055c8:	08005853 	.word	0x08005853
 80055cc:	08005853 	.word	0x08005853
 80055d0:	0800563b 	.word	0x0800563b
 80055d4:	08005853 	.word	0x08005853
 80055d8:	08005853 	.word	0x08005853
 80055dc:	08005853 	.word	0x08005853
 80055e0:	08005853 	.word	0x08005853
 80055e4:	08005853 	.word	0x08005853
 80055e8:	08005853 	.word	0x08005853
 80055ec:	08005853 	.word	0x08005853
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005853 	.word	0x08005853
 80055f8:	08005853 	.word	0x08005853
 80055fc:	08005853 	.word	0x08005853
 8005600:	08005853 	.word	0x08005853
 8005604:	08005853 	.word	0x08005853
 8005608:	08005853 	.word	0x08005853
 800560c:	08005853 	.word	0x08005853
 8005610:	08005647 	.word	0x08005647
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005614:	4b94      	ldr	r3, [pc, #592]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005620:	4b91      	ldr	r3, [pc, #580]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	08db      	lsrs	r3, r3, #3
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	4a90      	ldr	r2, [pc, #576]	; (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005632:	e111      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005634:	4b8d      	ldr	r3, [pc, #564]	; (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005636:	61bb      	str	r3, [r7, #24]
    break;
 8005638:	e10e      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800563a:	4b8d      	ldr	r3, [pc, #564]	; (8005870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800563c:	61bb      	str	r3, [r7, #24]
    break;
 800563e:	e10b      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005640:	4b8c      	ldr	r3, [pc, #560]	; (8005874 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005642:	61bb      	str	r3, [r7, #24]
    break;
 8005644:	e108      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005646:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005650:	4b85      	ldr	r3, [pc, #532]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800565a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800565c:	4b82      	ldr	r3, [pc, #520]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005666:	4b80      	ldr	r3, [pc, #512]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80e1 	beq.w	800584c <HAL_RCC_GetSysClockFreq+0x2b8>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b02      	cmp	r3, #2
 800568e:	f000 8083 	beq.w	8005798 <HAL_RCC_GetSysClockFreq+0x204>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b02      	cmp	r3, #2
 8005696:	f200 80a1 	bhi.w	80057dc <HAL_RCC_GetSysClockFreq+0x248>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x114>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d056      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056a6:	e099      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a8:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02d      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056b4:	4b6c      	ldr	r3, [pc, #432]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	08db      	lsrs	r3, r3, #3
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	4a6b      	ldr	r2, [pc, #428]	; (800586c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800570e:	e087      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800587c <HAL_RCC_GetSysClockFreq+0x2e8>
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b51      	ldr	r3, [pc, #324]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a02 	vldr	s12, [r7, #8]
 8005736:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005752:	e065      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005880 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a02 	vldr	s12, [r7, #8]
 800577a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005796:	e043      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005884 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80057be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057da:	e021      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005880 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005802:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005878 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582a:	3301      	adds	r3, #1
 800582c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005838:	edd7 6a07 	vldr	s13, [r7, #28]
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005844:	ee17 3a90 	vmov	r3, s15
 8005848:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800584a:	e005      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
    break;
 8005850:	e002      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005854:	61bb      	str	r3, [r7, #24]
    break;
 8005856:	bf00      	nop
  }

  return sysclockfreq;
 8005858:	69bb      	ldr	r3, [r7, #24]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	; 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
 800586c:	03d09000 	.word	0x03d09000
 8005870:	003d0900 	.word	0x003d0900
 8005874:	017d7840 	.word	0x017d7840
 8005878:	46000000 	.word	0x46000000
 800587c:	4c742400 	.word	0x4c742400
 8005880:	4a742400 	.word	0x4a742400
 8005884:	4bbebc20 	.word	0x4bbebc20

08005888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800588e:	f7ff fe81 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490f      	ldr	r1, [pc, #60]	; (80058dc <HAL_RCC_GetHCLKFreq+0x54>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	4a09      	ldr	r2, [pc, #36]	; (80058dc <HAL_RCC_GetHCLKFreq+0x54>)
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	fa22 f303 	lsr.w	r3, r2, r3
 80058c2:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058c6:	4a07      	ldr	r2, [pc, #28]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	58024400 	.word	0x58024400
 80058dc:	0800cd58 	.word	0x0800cd58
 80058e0:	24000004 	.word	0x24000004
 80058e4:	24000000 	.word	0x24000000

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058ec:	f7ff ffcc 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4904      	ldr	r1, [pc, #16]	; (8005910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	58024400 	.word	0x58024400
 8005910:	0800cd58 	.word	0x0800cd58

08005914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005918:	f7ff ffb6 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4904      	ldr	r1, [pc, #16]	; (800593c <HAL_RCC_GetPCLK2Freq+0x28>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400
 800593c:	0800cd58 	.word	0x0800cd58

08005940 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	223f      	movs	r2, #63	; 0x3f
 800594e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0207 	and.w	r2, r3, #7
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_RCC_GetClockConfig+0x7c>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_GetClockConfig+0x80>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	58024400 	.word	0x58024400
 80059c0:	52002000 	.word	0x52002000

080059c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059d0:	2300      	movs	r3, #0
 80059d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d03f      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059e8:	d02a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ee:	d824      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059f4:	d018      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059fa:	d81e      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a04:	d007      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a06:	e018      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a08:	4ba3      	ldr	r3, [pc, #652]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4aa2      	ldr	r2, [pc, #648]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a14:	e015      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f9d5 	bl	8006dcc <RCCEx_PLL2_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a26:	e00c      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fa7e 	bl	8006f30 <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a48:	4b93      	ldr	r3, [pc, #588]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a54:	4990      	ldr	r1, [pc, #576]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	650b      	str	r3, [r1, #80]	; 0x50
 8005a5a:	e001      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d03d      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d826      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005a9f 	.word	0x08005a9f
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	08005ac9 	.word	0x08005ac9
 8005a8c:	08005ac9 	.word	0x08005ac9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a90:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a80      	ldr	r2, [pc, #512]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a9c:	e015      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f991 	bl	8006dcc <RCCEx_PLL2_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aae:	e00c      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fa3a 	bl	8006f30 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac6:	e000      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ad0:	4b71      	ldr	r3, [pc, #452]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	f023 0207 	bic.w	r2, r3, #7
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	496e      	ldr	r1, [pc, #440]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ae2:	e001      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d042      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afc:	d02b      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d825      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b04:	2bc0      	cmp	r3, #192	; 0xc0
 8005b06:	d028      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b08:	2bc0      	cmp	r3, #192	; 0xc0
 8005b0a:	d821      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b0c:	2b80      	cmp	r3, #128	; 0x80
 8005b0e:	d016      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d81d      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d007      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005b1c:	e018      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1e:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a5d      	ldr	r2, [pc, #372]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b2a:	e017      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f94a 	bl	8006dcc <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b3c:	e00e      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3324      	adds	r3, #36	; 0x24
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f9f3 	bl	8006f30 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b4e:	e005      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
      break;
 8005b54:	e002      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b62:	4b4d      	ldr	r3, [pc, #308]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	494a      	ldr	r1, [pc, #296]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	650b      	str	r3, [r1, #80]	; 0x50
 8005b74:	e001      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d049      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b90:	d030      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b96:	d82a      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b9c:	d02c      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ba2:	d824      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ba8:	d018      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bae:	d81e      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb8:	d007      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005bba:	e018      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a35      	ldr	r2, [pc, #212]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bc8:	e017      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f8fb 	bl	8006dcc <RCCEx_PLL2_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bda:	e00e      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f9a4 	bl	8006f30 <RCCEx_PLL3_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c0e:	4922      	ldr	r1, [pc, #136]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	658b      	str	r3, [r1, #88]	; 0x58
 8005c14:	e001      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d04b      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c30:	d030      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c36:	d82a      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c3c:	d02e      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005c3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c42:	d824      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c48:	d018      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c4e:	d81e      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c58:	d007      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c5a:	e018      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c68:	e019      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f8ab 	bl	8006dcc <RCCEx_PLL2_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c7a:	e010      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3324      	adds	r3, #36	; 0x24
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f954 	bl	8006f30 <RCCEx_PLL3_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c8c:	e007      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
      break;
 8005c92:	e004      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005c94:	bf00      	nop
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c98:	58024400 	.word	0x58024400
      break;
 8005c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ca4:	4b99      	ldr	r3, [pc, #612]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cb2:	4996      	ldr	r1, [pc, #600]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8005cb8:	e001      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d032      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cce:	2b30      	cmp	r3, #48	; 0x30
 8005cd0:	d01c      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005cd2:	2b30      	cmp	r3, #48	; 0x30
 8005cd4:	d817      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d813      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d016      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d10f      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce6:	4b89      	ldr	r3, [pc, #548]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	4a88      	ldr	r2, [pc, #544]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cf2:	e00e      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 f866 	bl	8006dcc <RCCEx_PLL2_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d04:	e005      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d18:	4b7c      	ldr	r3, [pc, #496]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d24:	4979      	ldr	r1, [pc, #484]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d2a:	e001      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d047      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d44:	d030      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d4a:	d82a      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d50:	d02c      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005d52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d56:	d824      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5c:	d018      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d62:	d81e      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6c:	d007      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005d6e:	e018      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d7c:	e017      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 f821 	bl	8006dcc <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d8e:	e00e      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 f8ca 	bl	8006f30 <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005da0:	e005      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	e002      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005db4:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	4952      	ldr	r1, [pc, #328]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8005dc6:	e001      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d049      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de0:	d02e      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de6:	d828      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dec:	d02a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005df2:	d822      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005df8:	d026      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005dfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dfe:	d81c      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e04:	d010      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0a:	d816      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01d      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d111      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 ffd5 	bl	8006dcc <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e26:	e012      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f87e 	bl	8006f30 <RCCEx_PLL3_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e38:	e009      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3e:	e006      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005e40:	bf00      	nop
 8005e42:	e004      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e60:	492a      	ldr	r1, [pc, #168]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	650b      	str	r3, [r1, #80]	; 0x50
 8005e66:	e001      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d04d      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e82:	d02e      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e88:	d828      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d02a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d822      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e9a:	d026      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ea0:	d81c      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea6:	d010      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d816      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01d      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb6:	d111      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff84 	bl	8006dcc <RCCEx_PLL2_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ec8:	e012      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3324      	adds	r3, #36	; 0x24
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 f82d 	bl	8006f30 <RCCEx_PLL3_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005eda:	e009      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f04:	4901      	ldr	r1, [pc, #4]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	658b      	str	r3, [r1, #88]	; 0x58
 8005f0a:	e003      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02f      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f28:	d00e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2e:	d814      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f38:	d10f      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3a:	4baf      	ldr	r3, [pc, #700]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	4aae      	ldr	r2, [pc, #696]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f46:	e00c      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ff3c 	bl	8006dcc <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f58:	e003      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f68:	4ba3      	ldr	r3, [pc, #652]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f74:	49a0      	ldr	r1, [pc, #640]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	650b      	str	r3, [r1, #80]	; 0x50
 8005f7a:	e001      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d032      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d81b      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08005fad 	.word	0x08005fad
 8005fa4:	08005fbb 	.word	0x08005fbb
 8005fa8:	08005fd3 	.word	0x08005fd3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fac:	4b92      	ldr	r3, [pc, #584]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	4a91      	ldr	r2, [pc, #580]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 ff03 	bl	8006dcc <RCCEx_PLL2_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fda:	4b87      	ldr	r3, [pc, #540]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	f023 0203 	bic.w	r2, r3, #3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	4984      	ldr	r1, [pc, #528]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fec:	e001      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8086 	beq.w	800610c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006000:	4b7e      	ldr	r3, [pc, #504]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a7d      	ldr	r2, [pc, #500]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800600c:	f7fb fbc0 	bl	8001790 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006012:	e009      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006014:	f7fb fbbc 	bl	8001790 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d902      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	75fb      	strb	r3, [r7, #23]
        break;
 8006026:	e005      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006028:	4b74      	ldr	r3, [pc, #464]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ef      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d166      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800603a:	4b6f      	ldr	r3, [pc, #444]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800603c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006044:	4053      	eors	r3, r2
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d013      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800604e:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006058:	4b67      	ldr	r3, [pc, #412]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	4a66      	ldr	r2, [pc, #408]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800605e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006062:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006064:	4b64      	ldr	r3, [pc, #400]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	4a63      	ldr	r2, [pc, #396]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006070:	4a61      	ldr	r2, [pc, #388]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800607c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006080:	d115      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fb fb85 	bl	8001790 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006088:	e00b      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fb fb81 	bl	8001790 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f241 3288 	movw	r2, #5000	; 0x1388
 8006098:	4293      	cmp	r3, r2
 800609a:	d902      	bls.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	75fb      	strb	r3, [r7, #23]
            break;
 80060a0:	e005      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a2:	4b55      	ldr	r3, [pc, #340]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0ed      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d126      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c2:	d10d      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80060c4:	4b4c      	ldr	r3, [pc, #304]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060d2:	0919      	lsrs	r1, r3, #4
 80060d4:	4b4a      	ldr	r3, [pc, #296]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80060d6:	400b      	ands	r3, r1
 80060d8:	4947      	ldr	r1, [pc, #284]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	610b      	str	r3, [r1, #16]
 80060de:	e005      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80060e0:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	4a44      	ldr	r2, [pc, #272]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060ea:	6113      	str	r3, [r2, #16]
 80060ec:	4b42      	ldr	r3, [pc, #264]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fa:	493f      	ldr	r1, [pc, #252]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	670b      	str	r3, [r1, #112]	; 0x70
 8006100:	e004      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	75bb      	strb	r3, [r7, #22]
 8006106:	e001      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8085 	beq.w	8006224 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800611e:	2b28      	cmp	r3, #40	; 0x28
 8006120:	d866      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006205 	.word	0x08006205
 800612c:	080061f1 	.word	0x080061f1
 8006130:	080061f1 	.word	0x080061f1
 8006134:	080061f1 	.word	0x080061f1
 8006138:	080061f1 	.word	0x080061f1
 800613c:	080061f1 	.word	0x080061f1
 8006140:	080061f1 	.word	0x080061f1
 8006144:	080061f1 	.word	0x080061f1
 8006148:	080061cd 	.word	0x080061cd
 800614c:	080061f1 	.word	0x080061f1
 8006150:	080061f1 	.word	0x080061f1
 8006154:	080061f1 	.word	0x080061f1
 8006158:	080061f1 	.word	0x080061f1
 800615c:	080061f1 	.word	0x080061f1
 8006160:	080061f1 	.word	0x080061f1
 8006164:	080061f1 	.word	0x080061f1
 8006168:	080061df 	.word	0x080061df
 800616c:	080061f1 	.word	0x080061f1
 8006170:	080061f1 	.word	0x080061f1
 8006174:	080061f1 	.word	0x080061f1
 8006178:	080061f1 	.word	0x080061f1
 800617c:	080061f1 	.word	0x080061f1
 8006180:	080061f1 	.word	0x080061f1
 8006184:	080061f1 	.word	0x080061f1
 8006188:	08006205 	.word	0x08006205
 800618c:	080061f1 	.word	0x080061f1
 8006190:	080061f1 	.word	0x080061f1
 8006194:	080061f1 	.word	0x080061f1
 8006198:	080061f1 	.word	0x080061f1
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	080061f1 	.word	0x080061f1
 80061a8:	08006205 	.word	0x08006205
 80061ac:	080061f1 	.word	0x080061f1
 80061b0:	080061f1 	.word	0x080061f1
 80061b4:	080061f1 	.word	0x080061f1
 80061b8:	080061f1 	.word	0x080061f1
 80061bc:	080061f1 	.word	0x080061f1
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006205 	.word	0x08006205
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	2101      	movs	r1, #1
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fdfa 	bl	8006dcc <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061dc:	e013      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fea3 	bl	8006f30 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061ee:	e00a      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e007      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	58024800 	.word	0x58024800
 8006200:	00ffffcf 	.word	0x00ffffcf
      break;
 8006204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800620c:	4b96      	ldr	r3, [pc, #600]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006218:	4993      	ldr	r1, [pc, #588]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800621a:	4313      	orrs	r3, r2
 800621c:	654b      	str	r3, [r1, #84]	; 0x54
 800621e:	e001      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d038      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	2b05      	cmp	r3, #5
 8006236:	d821      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006283 	.word	0x08006283
 8006244:	08006259 	.word	0x08006259
 8006248:	0800626b 	.word	0x0800626b
 800624c:	08006283 	.word	0x08006283
 8006250:	08006283 	.word	0x08006283
 8006254:	08006283 	.word	0x08006283
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fdb4 	bl	8006dcc <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006268:	e00c      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3324      	adds	r3, #36	; 0x24
 800626e:	2101      	movs	r1, #1
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fe5d 	bl	8006f30 <RCCEx_PLL3_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
      break;
 8006280:	e000      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800628a:	4b77      	ldr	r3, [pc, #476]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f023 0207 	bic.w	r2, r3, #7
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	4974      	ldr	r1, [pc, #464]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006298:	4313      	orrs	r3, r2
 800629a:	654b      	str	r3, [r1, #84]	; 0x54
 800629c:	e001      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d03a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d821      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x938>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	08006303 	.word	0x08006303
 80062c4:	080062d9 	.word	0x080062d9
 80062c8:	080062eb 	.word	0x080062eb
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006303 	.word	0x08006303
 80062d4:	08006303 	.word	0x08006303
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2101      	movs	r1, #1
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fd74 	bl	8006dcc <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062e8:	e00c      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2101      	movs	r1, #1
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fe1d 	bl	8006f30 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800630a:	4b57      	ldr	r3, [pc, #348]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	f023 0207 	bic.w	r2, r3, #7
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	4953      	ldr	r1, [pc, #332]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	658b      	str	r3, [r1, #88]	; 0x58
 800631e:	e001      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d04b      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800633a:	d02e      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800633c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006340:	d828      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d02a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d822      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800634e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006352:	d026      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006354:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006358:	d81c      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800635a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635e:	d010      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006364:	d816      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01d      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800636a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636e:	d111      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	2100      	movs	r1, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fd28 	bl	8006dcc <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006380:	e012      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3324      	adds	r3, #36	; 0x24
 8006386:	2102      	movs	r1, #2
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fdd1 	bl	8006f30 <RCCEx_PLL3_Config>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006392:	e009      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
      break;
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80063a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ae:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063bc:	492a      	ldr	r1, [pc, #168]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	654b      	str	r3, [r1, #84]	; 0x54
 80063c2:	e001      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d04d      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063de:	d02e      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80063e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063e4:	d828      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	d02a      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f0:	d822      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f6:	d026      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80063f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063fc:	d81c      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006402:	d010      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006408:	d816      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01d      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800640e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006412:	d111      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fcd6 	bl	8006dcc <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006424:	e012      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3324      	adds	r3, #36	; 0x24
 800642a:	2102      	movs	r1, #2
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd7f 	bl	8006f30 <RCCEx_PLL3_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006436:	e009      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
      break;
 800643c:	e006      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800643e:	bf00      	nop
 8006440:	e004      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006442:	bf00      	nop
 8006444:	e002      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800644a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10c      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006460:	4901      	ldr	r1, [pc, #4]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006462:	4313      	orrs	r3, r2
 8006464:	658b      	str	r3, [r1, #88]	; 0x58
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d04b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006482:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006486:	d02e      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006488:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800648c:	d828      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006492:	d02a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	d822      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800649a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800649e:	d026      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80064a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064a4:	d81c      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80064a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064aa:	d010      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80064ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b0:	d816      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01d      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	d111      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc82 	bl	8006dcc <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064cc:	e012      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	; 0x24
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd2b 	bl	8006f30 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064de:	e009      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80064e6:	bf00      	nop
 80064e8:	e004      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80064ea:	bf00      	nop
 80064ec:	e002      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80064f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064fa:	4b9d      	ldr	r3, [pc, #628]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006508:	4999      	ldr	r1, [pc, #612]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800650a:	4313      	orrs	r3, r2
 800650c:	658b      	str	r3, [r1, #88]	; 0x58
 800650e:	e001      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d10a      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	2102      	movs	r1, #2
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fcfc 	bl	8006f30 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006542:	4b8b      	ldr	r3, [pc, #556]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006550:	4987      	ldr	r1, [pc, #540]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006552:	4313      	orrs	r3, r2
 8006554:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01a      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656c:	d10a      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3324      	adds	r3, #36	; 0x24
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fcdb 	bl	8006f30 <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006584:	4b7a      	ldr	r3, [pc, #488]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006592:	4977      	ldr	r1, [pc, #476]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006594:	4313      	orrs	r3, r2
 8006596:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d034      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ae:	d01d      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80065b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b4:	d817      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d009      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80065c0:	e011      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fbff 	bl	8006dcc <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065d2:	e00c      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	2102      	movs	r1, #2
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fca8 	bl	8006f30 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ea:	e000      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80065ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065f4:	4b5e      	ldr	r3, [pc, #376]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006602:	495b      	ldr	r1, [pc, #364]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006604:	4313      	orrs	r3, r2
 8006606:	658b      	str	r3, [r1, #88]	; 0x58
 8006608:	e001      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d033      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006624:	d01c      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800662a:	d816      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800662c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006630:	d003      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006636:	d007      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006638:	e00f      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663a:	4b4d      	ldr	r3, [pc, #308]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4a4c      	ldr	r2, [pc, #304]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006646:	e00c      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3324      	adds	r3, #36	; 0x24
 800664c:	2101      	movs	r1, #1
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fc6e 	bl	8006f30 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006658:	e003      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
      break;
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006668:	4b41      	ldr	r3, [pc, #260]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800666a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006676:	493e      	ldr	r1, [pc, #248]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006678:	4313      	orrs	r3, r2
 800667a:	654b      	str	r3, [r1, #84]	; 0x54
 800667c:	e001      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d029      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669a:	d007      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800669c:	e00f      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	4a33      	ldr	r2, [pc, #204]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3304      	adds	r3, #4
 80066b0:	2102      	movs	r1, #2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fb8a 	bl	8006dcc <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066bc:	e002      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
      break;
 80066c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d6:	4926      	ldr	r1, [pc, #152]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066dc:	e001      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3324      	adds	r3, #36	; 0x24
 80066f2:	2102      	movs	r1, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fc1b 	bl	8006f30 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d033      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006718:	d017      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800671a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800671e:	d811      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006724:	d013      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	d80b      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006734:	d106      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	4a0d      	ldr	r2, [pc, #52]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800673c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006742:	e007      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10c      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006766:	4902      	ldr	r1, [pc, #8]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006768:	4313      	orrs	r3, r2
 800676a:	654b      	str	r3, [r1, #84]	; 0x54
 800676c:	e004      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006784:	4b31      	ldr	r3, [pc, #196]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	492e      	ldr	r1, [pc, #184]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006792:	4313      	orrs	r3, r2
 8006794:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067a2:	4b2a      	ldr	r3, [pc, #168]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067b0:	4926      	ldr	r1, [pc, #152]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067c2:	4b22      	ldr	r3, [pc, #136]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ce:	491f      	ldr	r1, [pc, #124]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ea:	6113      	str	r3, [r2, #16]
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067f6:	4915      	ldr	r1, [pc, #84]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	da08      	bge.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006812:	4313      	orrs	r3, r2
 8006814:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006830:	4906      	ldr	r1, [pc, #24]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006832:	4313      	orrs	r3, r2
 8006834:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400

08006850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006854:	f7ff f818 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 8006858:	4602      	mov	r2, r0
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006866:	5ccb      	ldrb	r3, [r1, r3]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	58024400 	.word	0x58024400
 8006878:	0800cd58 	.word	0x0800cd58

0800687c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006884:	4ba1      	ldr	r3, [pc, #644]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800688e:	4b9f      	ldr	r3, [pc, #636]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	0b1b      	lsrs	r3, r3, #12
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800689a:	4b9c      	ldr	r3, [pc, #624]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80068a6:	4b99      	ldr	r3, [pc, #612]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068aa:	08db      	lsrs	r3, r3, #3
 80068ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8111 	beq.w	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f000 8083 	beq.w	80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f200 80a1 	bhi.w	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d056      	beq.n	8006994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068e6:	e099      	b.n	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02d      	beq.n	8006950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f4:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a84      	ldr	r2, [pc, #528]	; (8006b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b7b      	ldr	r3, [pc, #492]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800694e:	e087      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a03 	vldr	s12, [r7, #12]
 8006976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006992:	e065      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069d6:	e043      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b48      	ldr	r3, [pc, #288]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1a:	e021      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a60:	4b2a      	ldr	r3, [pc, #168]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	0a5b      	lsrs	r3, r3, #9
 8006a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a86:	ee17 2a90 	vmov	r2, s15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a8e:	4b1f      	ldr	r3, [pc, #124]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab4:	ee17 2a90 	vmov	r2, s15
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae2:	ee17 2a90 	vmov	r2, s15
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aea:	e008      	b.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
}
 8006afe:	bf00      	nop
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	03d09000 	.word	0x03d09000
 8006b14:	46000000 	.word	0x46000000
 8006b18:	4c742400 	.word	0x4c742400
 8006b1c:	4a742400 	.word	0x4a742400
 8006b20:	4bbebc20 	.word	0x4bbebc20

08006b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b089      	sub	sp, #36	; 0x24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b2c:	4ba1      	ldr	r3, [pc, #644]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b36:	4b9f      	ldr	r3, [pc, #636]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	0d1b      	lsrs	r3, r3, #20
 8006b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b42:	4b9c      	ldr	r3, [pc, #624]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b4e:	4b99      	ldr	r3, [pc, #612]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8111 	beq.w	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	f200 80a1 	bhi.w	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d056      	beq.n	8006c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b8e:	e099      	b.n	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b90:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02d      	beq.n	8006bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b9c:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	4a84      	ldr	r2, [pc, #528]	; (8006db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b7b      	ldr	r3, [pc, #492]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bf6:	e087      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b6a      	ldr	r3, [pc, #424]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c3a:	e065      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b59      	ldr	r3, [pc, #356]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c7e:	e043      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b48      	ldr	r3, [pc, #288]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc2:	e021      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006d08:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	0a5b      	lsrs	r3, r3, #9
 8006d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2e:	ee17 2a90 	vmov	r2, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006d36:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5c:	ee17 2a90 	vmov	r2, s15
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d64:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8a:	ee17 2a90 	vmov	r2, s15
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d92:	e008      	b.n	8006da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
}
 8006da6:	bf00      	nop
 8006da8:	3724      	adds	r7, #36	; 0x24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	58024400 	.word	0x58024400
 8006db8:	03d09000 	.word	0x03d09000
 8006dbc:	46000000 	.word	0x46000000
 8006dc0:	4c742400 	.word	0x4c742400
 8006dc4:	4a742400 	.word	0x4a742400
 8006dc8:	4bbebc20 	.word	0x4bbebc20

08006dcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dda:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d101      	bne.n	8006dea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e099      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dea:	4b4f      	ldr	r3, [pc, #316]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a4e      	ldr	r2, [pc, #312]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df6:	f7fa fccb 	bl	8001790 <HAL_GetTick>
 8006dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dfc:	e008      	b.n	8006e10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dfe:	f7fa fcc7 	bl	8001790 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e086      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e10:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f0      	bne.n	8006dfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	493f      	ldr	r1, [pc, #252]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	025b      	lsls	r3, r3, #9
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e60:	4931      	ldr	r1, [pc, #196]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	492d      	ldr	r1, [pc, #180]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e78:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f023 0220 	bic.w	r2, r3, #32
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	4928      	ldr	r1, [pc, #160]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <RCCEx_PLL2_Config+0x160>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	69d2      	ldr	r2, [r2, #28]
 8006ea2:	00d2      	lsls	r2, r2, #3
 8006ea4:	4920      	ldr	r1, [pc, #128]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eaa:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f043 0310 	orr.w	r3, r3, #16
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ec8:	e00f      	b.n	8006eea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006edc:	e005      	b.n	8006eea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0e      	ldr	r2, [pc, #56]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef6:	f7fa fc4b 	bl	8001790 <HAL_GetTick>
 8006efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006efc:	e008      	b.n	8006f10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006efe:	f7fa fc47 	bl	8001790 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e006      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	ffff0007 	.word	0xffff0007

08006f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f3e:	4b53      	ldr	r3, [pc, #332]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d101      	bne.n	8006f4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e099      	b.n	8007082 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4e      	ldr	r2, [pc, #312]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5a:	f7fa fc19 	bl	8001790 <HAL_GetTick>
 8006f5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f60:	e008      	b.n	8006f74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f62:	f7fa fc15 	bl	8001790 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e086      	b.n	8007082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f74:	4b45      	ldr	r3, [pc, #276]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f80:	4b42      	ldr	r3, [pc, #264]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	051b      	lsls	r3, r3, #20
 8006f8e:	493f      	ldr	r1, [pc, #252]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	628b      	str	r3, [r1, #40]	; 0x28
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	025b      	lsls	r3, r3, #9
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	061b      	lsls	r3, r3, #24
 8006fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fc4:	4931      	ldr	r1, [pc, #196]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fca:	4b30      	ldr	r3, [pc, #192]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	492d      	ldr	r1, [pc, #180]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	4928      	ldr	r1, [pc, #160]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fee:	4b27      	ldr	r3, [pc, #156]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	4a26      	ldr	r2, [pc, #152]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <RCCEx_PLL3_Config+0x160>)
 8007000:	4013      	ands	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	69d2      	ldr	r2, [r2, #28]
 8007006:	00d2      	lsls	r2, r2, #3
 8007008:	4920      	ldr	r1, [pc, #128]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800700e:	4b1f      	ldr	r3, [pc, #124]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	4a1e      	ldr	r2, [pc, #120]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007020:	4b1a      	ldr	r3, [pc, #104]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800702a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800702c:	e00f      	b.n	800704e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d106      	bne.n	8007042 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007034:	4b15      	ldr	r3, [pc, #84]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 800703a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007040:	e005      	b.n	800704e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a11      	ldr	r2, [pc, #68]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0e      	ldr	r2, [pc, #56]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705a:	f7fa fb99 	bl	8001790 <HAL_GetTick>
 800705e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007060:	e008      	b.n	8007074 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007062:	f7fa fb95 	bl	8001790 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0f0      	beq.n	8007062 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	58024400 	.word	0x58024400
 8007090:	ffff0007 	.word	0xffff0007

08007094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e049      	b.n	800713a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f841 	bl	8007142 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f000 fa00 	bl	80074d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d001      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e054      	b.n	800721a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a26      	ldr	r2, [pc, #152]	; (8007228 <HAL_TIM_Base_Start_IT+0xd0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d01d      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a22      	ldr	r2, [pc, #136]	; (800722c <HAL_TIM_Base_Start_IT+0xd4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a21      	ldr	r2, [pc, #132]	; (8007230 <HAL_TIM_Base_Start_IT+0xd8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <HAL_TIM_Base_Start_IT+0xdc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <HAL_TIM_Base_Start_IT+0xe0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1c      	ldr	r2, [pc, #112]	; (800723c <HAL_TIM_Base_Start_IT+0xe4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x80>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <HAL_TIM_Base_Start_IT+0xe8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d115      	bne.n	8007204 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_TIM_Base_Start_IT+0xec>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d015      	beq.n	8007216 <HAL_TIM_Base_Start_IT+0xbe>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d011      	beq.n	8007216 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007202:	e008      	b.n	8007216 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e000      	b.n	8007218 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40000c00 	.word	0x40000c00
 8007238:	40010400 	.word	0x40010400
 800723c:	40001800 	.word	0x40001800
 8007240:	40014000 	.word	0x40014000
 8007244:	00010007 	.word	0x00010007

08007248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d122      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11b      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0202 	mvn.w	r2, #2
 8007274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f905 	bl	800749a <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8f7 	bl	8007486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f908 	bl	80074ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0204 	mvn.w	r2, #4
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8db 	bl	800749a <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8cd 	bl	8007486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f8de 	bl	80074ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0208 	mvn.w	r2, #8
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8b1 	bl	800749a <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8a3 	bl	8007486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8b4 	bl	80074ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0210 	mvn.w	r2, #16
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2208      	movs	r2, #8
 8007376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f887 	bl	800749a <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f879 	bl	8007486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f88a 	bl	80074ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0201 	mvn.w	r2, #1
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7f9 fbdc 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d10e      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f914 	bl	8007620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	d10e      	bne.n	8007426 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d107      	bne.n	8007426 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800741e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f907 	bl	8007634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	d10e      	bne.n	8007452 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d107      	bne.n	8007452 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800744a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f838 	bl	80074c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b20      	cmp	r3, #32
 800745e:	d10e      	bne.n	800747e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b20      	cmp	r3, #32
 800746c:	d107      	bne.n	800747e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0220 	mvn.w	r2, #32
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8c7 	bl	800760c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a40      	ldr	r2, [pc, #256]	; (80075ec <TIM_Base_SetConfig+0x114>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d00f      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3d      	ldr	r2, [pc, #244]	; (80075f0 <TIM_Base_SetConfig+0x118>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <TIM_Base_SetConfig+0x11c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3b      	ldr	r2, [pc, #236]	; (80075f8 <TIM_Base_SetConfig+0x120>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3a      	ldr	r2, [pc, #232]	; (80075fc <TIM_Base_SetConfig+0x124>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d108      	bne.n	800752a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <TIM_Base_SetConfig+0x114>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01f      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007538:	d01b      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <TIM_Base_SetConfig+0x118>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d017      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2b      	ldr	r2, [pc, #172]	; (80075f4 <TIM_Base_SetConfig+0x11c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2a      	ldr	r2, [pc, #168]	; (80075f8 <TIM_Base_SetConfig+0x120>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00f      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a29      	ldr	r2, [pc, #164]	; (80075fc <TIM_Base_SetConfig+0x124>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00b      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a28      	ldr	r2, [pc, #160]	; (8007600 <TIM_Base_SetConfig+0x128>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <TIM_Base_SetConfig+0x12c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a26      	ldr	r2, [pc, #152]	; (8007608 <TIM_Base_SetConfig+0x130>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a10      	ldr	r2, [pc, #64]	; (80075ec <TIM_Base_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a12      	ldr	r2, [pc, #72]	; (80075fc <TIM_Base_SetConfig+0x124>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a11      	ldr	r2, [pc, #68]	; (8007600 <TIM_Base_SetConfig+0x128>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a10      	ldr	r2, [pc, #64]	; (8007604 <TIM_Base_SetConfig+0x12c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a0f      	ldr	r2, [pc, #60]	; (8007608 <TIM_Base_SetConfig+0x130>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d103      	bne.n	80075d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	615a      	str	r2, [r3, #20]
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40010400 	.word	0x40010400
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800

0800760c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e042      	b.n	80076e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7f9 fabf 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	; 0x24
 8007676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fce0 	bl	8008050 <UART_SetConfig>
 8007690:	4603      	mov	r3, r0
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e022      	b.n	80076e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fa3c 	bl	8008b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 fac3 	bl	8008c64 <UART_CheckIdleState>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	4613      	mov	r3, r2
 80076f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fe:	2b20      	cmp	r3, #32
 8007700:	f040 8083 	bne.w	800780a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_UART_Transmit+0x28>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e07b      	b.n	800780c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_UART_Transmit+0x3a>
 800771e:	2302      	movs	r3, #2
 8007720:	e074      	b.n	800780c <HAL_UART_Transmit+0x124>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2221      	movs	r2, #33	; 0x21
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800773a:	f7fa f829 	bl	8001790 <HAL_GetTick>
 800773e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	88fa      	ldrh	r2, [r7, #6]
 8007744:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007758:	d108      	bne.n	800776c <HAL_UART_Transmit+0x84>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	e003      	b.n	8007774 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800777c:	e02c      	b.n	80077d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2200      	movs	r2, #0
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f001 fab6 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e039      	b.n	800780c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10b      	bne.n	80077b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	3302      	adds	r3, #2
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	e007      	b.n	80077c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1cc      	bne.n	800777e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	2140      	movs	r1, #64	; 0x40
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 fa83 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e006      	b.n	800780c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	2b20      	cmp	r3, #32
 800782a:	d142      	bne.n	80078b2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_UART_Receive_DMA+0x24>
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e03b      	b.n	80078b4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_UART_Receive_DMA+0x36>
 8007846:	2302      	movs	r3, #2
 8007848:	e034      	b.n	80078b4 <HAL_UART_Receive_DMA+0xa0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a17      	ldr	r2, [pc, #92]	; (80078bc <HAL_UART_Receive_DMA+0xa8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01f      	beq.n	80078a2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d018      	beq.n	80078a2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	613b      	str	r3, [r7, #16]
   return(result);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	623b      	str	r3, [r7, #32]
 8007890:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	6a3a      	ldr	r2, [r7, #32]
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	61bb      	str	r3, [r7, #24]
   return(result);
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e6      	bne.n	8007870 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f001 faef 	bl	8008e8c <UART_Start_Receive_DMA>
 80078ae:	4603      	mov	r3, r0
 80078b0:	e000      	b.n	80078b4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
  }
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3728      	adds	r7, #40	; 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	58000c00 	.word	0x58000c00

080078c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b0ba      	sub	sp, #232	; 0xe8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80078ee:	4013      	ands	r3, r2
 80078f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11b      	bne.n	8007934 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d015      	beq.n	8007934 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 835a 	beq.w	8007fde <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
      }
      return;
 8007932:	e354      	b.n	8007fde <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 811f 	beq.w	8007b7c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800793e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007942:	4b8b      	ldr	r3, [pc, #556]	; (8007b70 <HAL_UART_IRQHandler+0x2b0>)
 8007944:	4013      	ands	r3, r2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800794a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800794e:	4b89      	ldr	r3, [pc, #548]	; (8007b74 <HAL_UART_IRQHandler+0x2b4>)
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8112 	beq.w	8007b7c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d011      	beq.n	8007988 <HAL_UART_IRQHandler+0xc8>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2201      	movs	r2, #1
 8007976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <HAL_UART_IRQHandler+0xf8>
 8007994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2202      	movs	r2, #2
 80079a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ae:	f043 0204 	orr.w	r2, r3, #4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0x128>
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2204      	movs	r2, #4
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079de:	f043 0202 	orr.w	r2, r3, #2
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d017      	beq.n	8007a24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a04:	4b5a      	ldr	r3, [pc, #360]	; (8007b70 <HAL_UART_IRQHandler+0x2b0>)
 8007a06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2208      	movs	r2, #8
 8007a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1a:	f043 0208 	orr.w	r2, r3, #8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d012      	beq.n	8007a56 <HAL_UART_IRQHandler+0x196>
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 82c0 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d013      	beq.n	8007a96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d007      	beq.n	8007a96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d04f      	beq.n	8007b5a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fad0 	bl	8009060 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d141      	bne.n	8007b52 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1d9      	bne.n	8007ace <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d013      	beq.n	8007b4a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b26:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <HAL_UART_IRQHandler+0x2b8>)
 8007b28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fb f80a 	bl	8002b48 <HAL_DMA_Abort_IT>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d017      	beq.n	8007b6a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	e00f      	b.n	8007b6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa6a 	bl	8008024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e00b      	b.n	8007b6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa66 	bl	8008024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e007      	b.n	8007b6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa62 	bl	8008024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007b68:	e23b      	b.n	8007fe2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6a:	bf00      	nop
    return;
 8007b6c:	e239      	b.n	8007fe2 <HAL_UART_IRQHandler+0x722>
 8007b6e:	bf00      	nop
 8007b70:	10000001 	.word	0x10000001
 8007b74:	04000120 	.word	0x04000120
 8007b78:	08009307 	.word	0x08009307

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 81ce 	bne.w	8007f22 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 81c7 	beq.w	8007f22 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 81c0 	beq.w	8007f22 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	f040 813b 	bne.w	8007e30 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a8b      	ldr	r2, [pc, #556]	; (8007df0 <HAL_UART_IRQHandler+0x530>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d059      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a89      	ldr	r2, [pc, #548]	; (8007df4 <HAL_UART_IRQHandler+0x534>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d053      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a87      	ldr	r2, [pc, #540]	; (8007df8 <HAL_UART_IRQHandler+0x538>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d04d      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a85      	ldr	r2, [pc, #532]	; (8007dfc <HAL_UART_IRQHandler+0x53c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d047      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a83      	ldr	r2, [pc, #524]	; (8007e00 <HAL_UART_IRQHandler+0x540>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d041      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a81      	ldr	r2, [pc, #516]	; (8007e04 <HAL_UART_IRQHandler+0x544>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d03b      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a7f      	ldr	r2, [pc, #508]	; (8007e08 <HAL_UART_IRQHandler+0x548>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d035      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a7d      	ldr	r2, [pc, #500]	; (8007e0c <HAL_UART_IRQHandler+0x54c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d02f      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a7b      	ldr	r2, [pc, #492]	; (8007e10 <HAL_UART_IRQHandler+0x550>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d029      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a79      	ldr	r2, [pc, #484]	; (8007e14 <HAL_UART_IRQHandler+0x554>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d023      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a77      	ldr	r2, [pc, #476]	; (8007e18 <HAL_UART_IRQHandler+0x558>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01d      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a75      	ldr	r2, [pc, #468]	; (8007e1c <HAL_UART_IRQHandler+0x55c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d017      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a73      	ldr	r2, [pc, #460]	; (8007e20 <HAL_UART_IRQHandler+0x560>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d011      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a71      	ldr	r2, [pc, #452]	; (8007e24 <HAL_UART_IRQHandler+0x564>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00b      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a6f      	ldr	r2, [pc, #444]	; (8007e28 <HAL_UART_IRQHandler+0x568>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d005      	beq.n	8007c7a <HAL_UART_IRQHandler+0x3ba>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a6d      	ldr	r2, [pc, #436]	; (8007e2c <HAL_UART_IRQHandler+0x56c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d105      	bne.n	8007c86 <HAL_UART_IRQHandler+0x3c6>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	e004      	b.n	8007c90 <HAL_UART_IRQHandler+0x3d0>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 81a4 	beq.w	8007fe6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	f080 819c 	bcs.w	8007fe6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc2:	f000 8086 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1da      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e1      	bne.n	8007d10 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e3      	bne.n	8007d4c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da2:	f023 0310 	bic.w	r3, r3, #16
 8007da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007db6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e4      	bne.n	8007d92 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fa fb9d 	bl	800250c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f926 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dec:	e0fb      	b.n	8007fe6 <HAL_UART_IRQHandler+0x726>
 8007dee:	bf00      	nop
 8007df0:	40020010 	.word	0x40020010
 8007df4:	40020028 	.word	0x40020028
 8007df8:	40020040 	.word	0x40020040
 8007dfc:	40020058 	.word	0x40020058
 8007e00:	40020070 	.word	0x40020070
 8007e04:	40020088 	.word	0x40020088
 8007e08:	400200a0 	.word	0x400200a0
 8007e0c:	400200b8 	.word	0x400200b8
 8007e10:	40020410 	.word	0x40020410
 8007e14:	40020428 	.word	0x40020428
 8007e18:	40020440 	.word	0x40020440
 8007e1c:	40020458 	.word	0x40020458
 8007e20:	40020470 	.word	0x40020470
 8007e24:	40020488 	.word	0x40020488
 8007e28:	400204a0 	.word	0x400204a0
 8007e2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80cc 	beq.w	8007fea <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80c7 	beq.w	8007fea <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e4      	bne.n	8007e5c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	4b54      	ldr	r3, [pc, #336]	; (8007ff8 <HAL_UART_IRQHandler+0x738>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e3      	bne.n	8007e92 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69b9      	ldr	r1, [r7, #24]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f88c 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f20:	e063      	b.n	8007fea <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00e      	beq.n	8007f4c <HAL_UART_IRQHandler+0x68c>
 8007f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fa1f 	bl	8009388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f4a:	e051      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d014      	beq.n	8007f82 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d03a      	beq.n	8007fee <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
    }
    return;
 8007f80:	e035      	b.n	8007fee <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x6e2>
 8007f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9c9 	bl	8009332 <UART_EndTransmit_IT>
    return;
 8007fa0:	e026      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x702>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 f9f8 	bl	80093b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fc0:	e016      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d010      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x730>
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0c      	bge.n	8007ff0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 f9e0 	bl	800939c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fdc:	e008      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
      return;
 8007fde:	bf00      	nop
 8007fe0:	e006      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
    return;
 8007fe2:	bf00      	nop
 8007fe4:	e004      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
      return;
 8007fe6:	bf00      	nop
 8007fe8:	e002      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
      return;
 8007fea:	bf00      	nop
 8007fec:	e000      	b.n	8007ff0 <HAL_UART_IRQHandler+0x730>
    return;
 8007fee:	bf00      	nop
  }
}
 8007ff0:	37e8      	adds	r7, #232	; 0xe8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	effffffe 	.word	0xeffffffe

08007ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008054:	b092      	sub	sp, #72	; 0x48
 8008056:	af00      	add	r7, sp, #0
 8008058:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	431a      	orrs	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	431a      	orrs	r2, r3
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	4313      	orrs	r3, r2
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4bbe      	ldr	r3, [pc, #760]	; (8008378 <UART_SetConfig+0x328>)
 8008080:	4013      	ands	r3, r2
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008088:	430b      	orrs	r3, r1
 800808a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4ab3      	ldr	r2, [pc, #716]	; (800837c <UART_SetConfig+0x32c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b8:	4313      	orrs	r3, r2
 80080ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	4baf      	ldr	r3, [pc, #700]	; (8008380 <UART_SetConfig+0x330>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	f023 010f 	bic.w	r1, r3, #15
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4aa6      	ldr	r2, [pc, #664]	; (8008384 <UART_SetConfig+0x334>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d177      	bne.n	80081e0 <UART_SetConfig+0x190>
 80080f0:	4ba5      	ldr	r3, [pc, #660]	; (8008388 <UART_SetConfig+0x338>)
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080f8:	2b28      	cmp	r3, #40	; 0x28
 80080fa:	d86d      	bhi.n	80081d8 <UART_SetConfig+0x188>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0xb4>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	080081a9 	.word	0x080081a9
 8008108:	080081d9 	.word	0x080081d9
 800810c:	080081d9 	.word	0x080081d9
 8008110:	080081d9 	.word	0x080081d9
 8008114:	080081d9 	.word	0x080081d9
 8008118:	080081d9 	.word	0x080081d9
 800811c:	080081d9 	.word	0x080081d9
 8008120:	080081d9 	.word	0x080081d9
 8008124:	080081b1 	.word	0x080081b1
 8008128:	080081d9 	.word	0x080081d9
 800812c:	080081d9 	.word	0x080081d9
 8008130:	080081d9 	.word	0x080081d9
 8008134:	080081d9 	.word	0x080081d9
 8008138:	080081d9 	.word	0x080081d9
 800813c:	080081d9 	.word	0x080081d9
 8008140:	080081d9 	.word	0x080081d9
 8008144:	080081b9 	.word	0x080081b9
 8008148:	080081d9 	.word	0x080081d9
 800814c:	080081d9 	.word	0x080081d9
 8008150:	080081d9 	.word	0x080081d9
 8008154:	080081d9 	.word	0x080081d9
 8008158:	080081d9 	.word	0x080081d9
 800815c:	080081d9 	.word	0x080081d9
 8008160:	080081d9 	.word	0x080081d9
 8008164:	080081c1 	.word	0x080081c1
 8008168:	080081d9 	.word	0x080081d9
 800816c:	080081d9 	.word	0x080081d9
 8008170:	080081d9 	.word	0x080081d9
 8008174:	080081d9 	.word	0x080081d9
 8008178:	080081d9 	.word	0x080081d9
 800817c:	080081d9 	.word	0x080081d9
 8008180:	080081d9 	.word	0x080081d9
 8008184:	080081c9 	.word	0x080081c9
 8008188:	080081d9 	.word	0x080081d9
 800818c:	080081d9 	.word	0x080081d9
 8008190:	080081d9 	.word	0x080081d9
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081d9 	.word	0x080081d9
 800819c:	080081d9 	.word	0x080081d9
 80081a0:	080081d9 	.word	0x080081d9
 80081a4:	080081d1 	.word	0x080081d1
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e222      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081b0:	2304      	movs	r3, #4
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e21e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081b8:	2308      	movs	r3, #8
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e21a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e216      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081c8:	2320      	movs	r3, #32
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e212      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081d0:	2340      	movs	r3, #64	; 0x40
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e20e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081d8:	2380      	movs	r3, #128	; 0x80
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e20a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a69      	ldr	r2, [pc, #420]	; (800838c <UART_SetConfig+0x33c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d130      	bne.n	800824c <UART_SetConfig+0x1fc>
 80081ea:	4b67      	ldr	r3, [pc, #412]	; (8008388 <UART_SetConfig+0x338>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	d826      	bhi.n	8008244 <UART_SetConfig+0x1f4>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <UART_SetConfig+0x1ac>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008215 	.word	0x08008215
 8008200:	0800821d 	.word	0x0800821d
 8008204:	08008225 	.word	0x08008225
 8008208:	0800822d 	.word	0x0800822d
 800820c:	08008235 	.word	0x08008235
 8008210:	0800823d 	.word	0x0800823d
 8008214:	2300      	movs	r3, #0
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e1ec      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800821c:	2304      	movs	r3, #4
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e1e8      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008224:	2308      	movs	r3, #8
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e1e4      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800822c:	2310      	movs	r3, #16
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e1e0      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008234:	2320      	movs	r3, #32
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823a:	e1dc      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e1d8      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008244:	2380      	movs	r3, #128	; 0x80
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e1d4      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a4f      	ldr	r2, [pc, #316]	; (8008390 <UART_SetConfig+0x340>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d130      	bne.n	80082b8 <UART_SetConfig+0x268>
 8008256:	4b4c      	ldr	r3, [pc, #304]	; (8008388 <UART_SetConfig+0x338>)
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	2b05      	cmp	r3, #5
 8008260:	d826      	bhi.n	80082b0 <UART_SetConfig+0x260>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <UART_SetConfig+0x218>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008281 	.word	0x08008281
 800826c:	08008289 	.word	0x08008289
 8008270:	08008291 	.word	0x08008291
 8008274:	08008299 	.word	0x08008299
 8008278:	080082a1 	.word	0x080082a1
 800827c:	080082a9 	.word	0x080082a9
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e1b6      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008288:	2304      	movs	r3, #4
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e1b2      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008290:	2308      	movs	r3, #8
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e1ae      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008298:	2310      	movs	r3, #16
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e1aa      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082a0:	2320      	movs	r3, #32
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a6:	e1a6      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082a8:	2340      	movs	r3, #64	; 0x40
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e1a2      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082b0:	2380      	movs	r3, #128	; 0x80
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e19e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a35      	ldr	r2, [pc, #212]	; (8008394 <UART_SetConfig+0x344>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d130      	bne.n	8008324 <UART_SetConfig+0x2d4>
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <UART_SetConfig+0x338>)
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d826      	bhi.n	800831c <UART_SetConfig+0x2cc>
 80082ce:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <UART_SetConfig+0x284>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	080082ed 	.word	0x080082ed
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	080082fd 	.word	0x080082fd
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	08008315 	.word	0x08008315
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e180      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082f4:	2304      	movs	r3, #4
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e17c      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80082fc:	2308      	movs	r3, #8
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e178      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008304:	2310      	movs	r3, #16
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e174      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800830c:	2320      	movs	r3, #32
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008312:	e170      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008314:	2340      	movs	r3, #64	; 0x40
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e16c      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e168      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1b      	ldr	r2, [pc, #108]	; (8008398 <UART_SetConfig+0x348>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d142      	bne.n	80083b4 <UART_SetConfig+0x364>
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <UART_SetConfig+0x338>)
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	2b05      	cmp	r3, #5
 8008338:	d838      	bhi.n	80083ac <UART_SetConfig+0x35c>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x2f0>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008359 	.word	0x08008359
 8008344:	08008361 	.word	0x08008361
 8008348:	08008369 	.word	0x08008369
 800834c:	08008371 	.word	0x08008371
 8008350:	0800839d 	.word	0x0800839d
 8008354:	080083a5 	.word	0x080083a5
 8008358:	2300      	movs	r3, #0
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e14a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008360:	2304      	movs	r3, #4
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e146      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008368:	2308      	movs	r3, #8
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e142      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008370:	2310      	movs	r3, #16
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e13e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008378:	cfff69f3 	.word	0xcfff69f3
 800837c:	58000c00 	.word	0x58000c00
 8008380:	11fff4ff 	.word	0x11fff4ff
 8008384:	40011000 	.word	0x40011000
 8008388:	58024400 	.word	0x58024400
 800838c:	40004400 	.word	0x40004400
 8008390:	40004800 	.word	0x40004800
 8008394:	40004c00 	.word	0x40004c00
 8008398:	40005000 	.word	0x40005000
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e128      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e124      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e120      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4acb      	ldr	r2, [pc, #812]	; (80086e8 <UART_SetConfig+0x698>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d176      	bne.n	80084ac <UART_SetConfig+0x45c>
 80083be:	4bcb      	ldr	r3, [pc, #812]	; (80086ec <UART_SetConfig+0x69c>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083c6:	2b28      	cmp	r3, #40	; 0x28
 80083c8:	d86c      	bhi.n	80084a4 <UART_SetConfig+0x454>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <UART_SetConfig+0x380>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008475 	.word	0x08008475
 80083d4:	080084a5 	.word	0x080084a5
 80083d8:	080084a5 	.word	0x080084a5
 80083dc:	080084a5 	.word	0x080084a5
 80083e0:	080084a5 	.word	0x080084a5
 80083e4:	080084a5 	.word	0x080084a5
 80083e8:	080084a5 	.word	0x080084a5
 80083ec:	080084a5 	.word	0x080084a5
 80083f0:	0800847d 	.word	0x0800847d
 80083f4:	080084a5 	.word	0x080084a5
 80083f8:	080084a5 	.word	0x080084a5
 80083fc:	080084a5 	.word	0x080084a5
 8008400:	080084a5 	.word	0x080084a5
 8008404:	080084a5 	.word	0x080084a5
 8008408:	080084a5 	.word	0x080084a5
 800840c:	080084a5 	.word	0x080084a5
 8008410:	08008485 	.word	0x08008485
 8008414:	080084a5 	.word	0x080084a5
 8008418:	080084a5 	.word	0x080084a5
 800841c:	080084a5 	.word	0x080084a5
 8008420:	080084a5 	.word	0x080084a5
 8008424:	080084a5 	.word	0x080084a5
 8008428:	080084a5 	.word	0x080084a5
 800842c:	080084a5 	.word	0x080084a5
 8008430:	0800848d 	.word	0x0800848d
 8008434:	080084a5 	.word	0x080084a5
 8008438:	080084a5 	.word	0x080084a5
 800843c:	080084a5 	.word	0x080084a5
 8008440:	080084a5 	.word	0x080084a5
 8008444:	080084a5 	.word	0x080084a5
 8008448:	080084a5 	.word	0x080084a5
 800844c:	080084a5 	.word	0x080084a5
 8008450:	08008495 	.word	0x08008495
 8008454:	080084a5 	.word	0x080084a5
 8008458:	080084a5 	.word	0x080084a5
 800845c:	080084a5 	.word	0x080084a5
 8008460:	080084a5 	.word	0x080084a5
 8008464:	080084a5 	.word	0x080084a5
 8008468:	080084a5 	.word	0x080084a5
 800846c:	080084a5 	.word	0x080084a5
 8008470:	0800849d 	.word	0x0800849d
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e0bc      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800847c:	2304      	movs	r3, #4
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e0b8      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008484:	2308      	movs	r3, #8
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e0b4      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800848c:	2310      	movs	r3, #16
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e0b0      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008494:	2320      	movs	r3, #32
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e0ac      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e0a8      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e0a4      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a8f      	ldr	r2, [pc, #572]	; (80086f0 <UART_SetConfig+0x6a0>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d130      	bne.n	8008518 <UART_SetConfig+0x4c8>
 80084b6:	4b8d      	ldr	r3, [pc, #564]	; (80086ec <UART_SetConfig+0x69c>)
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d826      	bhi.n	8008510 <UART_SetConfig+0x4c0>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x478>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084e1 	.word	0x080084e1
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	080084f1 	.word	0x080084f1
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008509 	.word	0x08008509
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e086      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e082      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e07e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e07a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e076      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e072      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e06e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a75      	ldr	r2, [pc, #468]	; (80086f4 <UART_SetConfig+0x6a4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d130      	bne.n	8008584 <UART_SetConfig+0x534>
 8008522:	4b72      	ldr	r3, [pc, #456]	; (80086ec <UART_SetConfig+0x69c>)
 8008524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b05      	cmp	r3, #5
 800852c:	d826      	bhi.n	800857c <UART_SetConfig+0x52c>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0x4e4>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800854d 	.word	0x0800854d
 8008538:	08008555 	.word	0x08008555
 800853c:	0800855d 	.word	0x0800855d
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e050      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e04c      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008562:	e048      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856a:	e044      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800856c:	2320      	movs	r3, #32
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e040      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008574:	2340      	movs	r3, #64	; 0x40
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e03c      	b.n	80085f6 <UART_SetConfig+0x5a6>
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e038      	b.n	80085f6 <UART_SetConfig+0x5a6>
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a5b      	ldr	r2, [pc, #364]	; (80086f8 <UART_SetConfig+0x6a8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d130      	bne.n	80085f0 <UART_SetConfig+0x5a0>
 800858e:	4b57      	ldr	r3, [pc, #348]	; (80086ec <UART_SetConfig+0x69c>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b05      	cmp	r3, #5
 8008598:	d826      	bhi.n	80085e8 <UART_SetConfig+0x598>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <UART_SetConfig+0x550>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	080085c9 	.word	0x080085c9
 80085ac:	080085d1 	.word	0x080085d1
 80085b0:	080085d9 	.word	0x080085d9
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	2302      	movs	r3, #2
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e01a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e016      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e012      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e00e      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085d8:	2320      	movs	r3, #32
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e00a      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e006      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e002      	b.n	80085f6 <UART_SetConfig+0x5a6>
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3f      	ldr	r2, [pc, #252]	; (80086f8 <UART_SetConfig+0x6a8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f040 80f8 	bne.w	80087f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008602:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008606:	2b20      	cmp	r3, #32
 8008608:	dc46      	bgt.n	8008698 <UART_SetConfig+0x648>
 800860a:	2b02      	cmp	r3, #2
 800860c:	f2c0 8082 	blt.w	8008714 <UART_SetConfig+0x6c4>
 8008610:	3b02      	subs	r3, #2
 8008612:	2b1e      	cmp	r3, #30
 8008614:	d87e      	bhi.n	8008714 <UART_SetConfig+0x6c4>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <UART_SetConfig+0x5cc>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800869f 	.word	0x0800869f
 8008620:	08008715 	.word	0x08008715
 8008624:	080086a7 	.word	0x080086a7
 8008628:	08008715 	.word	0x08008715
 800862c:	08008715 	.word	0x08008715
 8008630:	08008715 	.word	0x08008715
 8008634:	080086b7 	.word	0x080086b7
 8008638:	08008715 	.word	0x08008715
 800863c:	08008715 	.word	0x08008715
 8008640:	08008715 	.word	0x08008715
 8008644:	08008715 	.word	0x08008715
 8008648:	08008715 	.word	0x08008715
 800864c:	08008715 	.word	0x08008715
 8008650:	08008715 	.word	0x08008715
 8008654:	080086c7 	.word	0x080086c7
 8008658:	08008715 	.word	0x08008715
 800865c:	08008715 	.word	0x08008715
 8008660:	08008715 	.word	0x08008715
 8008664:	08008715 	.word	0x08008715
 8008668:	08008715 	.word	0x08008715
 800866c:	08008715 	.word	0x08008715
 8008670:	08008715 	.word	0x08008715
 8008674:	08008715 	.word	0x08008715
 8008678:	08008715 	.word	0x08008715
 800867c:	08008715 	.word	0x08008715
 8008680:	08008715 	.word	0x08008715
 8008684:	08008715 	.word	0x08008715
 8008688:	08008715 	.word	0x08008715
 800868c:	08008715 	.word	0x08008715
 8008690:	08008715 	.word	0x08008715
 8008694:	08008707 	.word	0x08008707
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d037      	beq.n	800870c <UART_SetConfig+0x6bc>
 800869c:	e03a      	b.n	8008714 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800869e:	f7fe f8d7 	bl	8006850 <HAL_RCCEx_GetD3PCLK1Freq>
 80086a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086a4:	e03c      	b.n	8008720 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe f8e6 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b4:	e034      	b.n	8008720 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b6:	f107 0318 	add.w	r3, r7, #24
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fa32 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c4:	e02c      	b.n	8008720 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <UART_SetConfig+0x69c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d016      	beq.n	8008700 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086d2:	4b06      	ldr	r3, [pc, #24]	; (80086ec <UART_SetConfig+0x69c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	08db      	lsrs	r3, r3, #3
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	4a07      	ldr	r2, [pc, #28]	; (80086fc <UART_SetConfig+0x6ac>)
 80086de:	fa22 f303 	lsr.w	r3, r2, r3
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086e4:	e01c      	b.n	8008720 <UART_SetConfig+0x6d0>
 80086e6:	bf00      	nop
 80086e8:	40011400 	.word	0x40011400
 80086ec:	58024400 	.word	0x58024400
 80086f0:	40007800 	.word	0x40007800
 80086f4:	40007c00 	.word	0x40007c00
 80086f8:	58000c00 	.word	0x58000c00
 80086fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008700:	4b9d      	ldr	r3, [pc, #628]	; (8008978 <UART_SetConfig+0x928>)
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008704:	e00c      	b.n	8008720 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008706:	4b9d      	ldr	r3, [pc, #628]	; (800897c <UART_SetConfig+0x92c>)
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870a:	e009      	b.n	8008720 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008712:	e005      	b.n	8008720 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800871e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 81de 	beq.w	8008ae4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	4a94      	ldr	r2, [pc, #592]	; (8008980 <UART_SetConfig+0x930>)
 800872e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008732:	461a      	mov	r2, r3
 8008734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008736:	fbb3 f3f2 	udiv	r3, r3, r2
 800873a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4413      	add	r3, r2
 8008746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008748:	429a      	cmp	r2, r3
 800874a:	d305      	bcc.n	8008758 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008754:	429a      	cmp	r2, r3
 8008756:	d903      	bls.n	8008760 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800875e:	e1c1      	b.n	8008ae4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008762:	2200      	movs	r2, #0
 8008764:	60bb      	str	r3, [r7, #8]
 8008766:	60fa      	str	r2, [r7, #12]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	4a84      	ldr	r2, [pc, #528]	; (8008980 <UART_SetConfig+0x930>)
 800876e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008772:	b29b      	uxth	r3, r3
 8008774:	2200      	movs	r2, #0
 8008776:	603b      	str	r3, [r7, #0]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800877e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008782:	f7f7 fdfd 	bl	8000380 <__aeabi_uldivmod>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4610      	mov	r0, r2
 800878c:	4619      	mov	r1, r3
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	020b      	lsls	r3, r1, #8
 8008798:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800879c:	0202      	lsls	r2, r0, #8
 800879e:	6979      	ldr	r1, [r7, #20]
 80087a0:	6849      	ldr	r1, [r1, #4]
 80087a2:	0849      	lsrs	r1, r1, #1
 80087a4:	2000      	movs	r0, #0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4605      	mov	r5, r0
 80087aa:	eb12 0804 	adds.w	r8, r2, r4
 80087ae:	eb43 0905 	adc.w	r9, r3, r5
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	469a      	mov	sl, r3
 80087ba:	4693      	mov	fp, r2
 80087bc:	4652      	mov	r2, sl
 80087be:	465b      	mov	r3, fp
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 fddc 	bl	8000380 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4613      	mov	r3, r2
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d6:	d308      	bcc.n	80087ea <UART_SetConfig+0x79a>
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087de:	d204      	bcs.n	80087ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e6:	60da      	str	r2, [r3, #12]
 80087e8:	e17c      	b.n	8008ae4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087f0:	e178      	b.n	8008ae4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fa:	f040 80c5 	bne.w	8008988 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008802:	2b20      	cmp	r3, #32
 8008804:	dc48      	bgt.n	8008898 <UART_SetConfig+0x848>
 8008806:	2b00      	cmp	r3, #0
 8008808:	db7b      	blt.n	8008902 <UART_SetConfig+0x8b2>
 800880a:	2b20      	cmp	r3, #32
 800880c:	d879      	bhi.n	8008902 <UART_SetConfig+0x8b2>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <UART_SetConfig+0x7c4>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	0800889f 	.word	0x0800889f
 8008818:	080088a7 	.word	0x080088a7
 800881c:	08008903 	.word	0x08008903
 8008820:	08008903 	.word	0x08008903
 8008824:	080088af 	.word	0x080088af
 8008828:	08008903 	.word	0x08008903
 800882c:	08008903 	.word	0x08008903
 8008830:	08008903 	.word	0x08008903
 8008834:	080088bf 	.word	0x080088bf
 8008838:	08008903 	.word	0x08008903
 800883c:	08008903 	.word	0x08008903
 8008840:	08008903 	.word	0x08008903
 8008844:	08008903 	.word	0x08008903
 8008848:	08008903 	.word	0x08008903
 800884c:	08008903 	.word	0x08008903
 8008850:	08008903 	.word	0x08008903
 8008854:	080088cf 	.word	0x080088cf
 8008858:	08008903 	.word	0x08008903
 800885c:	08008903 	.word	0x08008903
 8008860:	08008903 	.word	0x08008903
 8008864:	08008903 	.word	0x08008903
 8008868:	08008903 	.word	0x08008903
 800886c:	08008903 	.word	0x08008903
 8008870:	08008903 	.word	0x08008903
 8008874:	08008903 	.word	0x08008903
 8008878:	08008903 	.word	0x08008903
 800887c:	08008903 	.word	0x08008903
 8008880:	08008903 	.word	0x08008903
 8008884:	08008903 	.word	0x08008903
 8008888:	08008903 	.word	0x08008903
 800888c:	08008903 	.word	0x08008903
 8008890:	08008903 	.word	0x08008903
 8008894:	080088f5 	.word	0x080088f5
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d02e      	beq.n	80088fa <UART_SetConfig+0x8aa>
 800889c:	e031      	b.n	8008902 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800889e:	f7fd f823 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 80088a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088a4:	e033      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088a6:	f7fd f835 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 80088aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088ac:	e02f      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fd ffe2 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088bc:	e027      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088be:	f107 0318 	add.w	r3, r7, #24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe f92e 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088cc:	e01f      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ce:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <UART_SetConfig+0x934>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088da:	4b2a      	ldr	r3, [pc, #168]	; (8008984 <UART_SetConfig+0x934>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	4a24      	ldr	r2, [pc, #144]	; (8008978 <UART_SetConfig+0x928>)
 80088e6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088ec:	e00f      	b.n	800890e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088ee:	4b22      	ldr	r3, [pc, #136]	; (8008978 <UART_SetConfig+0x928>)
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f2:	e00c      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088f4:	4b21      	ldr	r3, [pc, #132]	; (800897c <UART_SetConfig+0x92c>)
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f8:	e009      	b.n	800890e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008900:	e005      	b.n	800890e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800890c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800890e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80e7 	beq.w	8008ae4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	4a19      	ldr	r2, [pc, #100]	; (8008980 <UART_SetConfig+0x930>)
 800891c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008920:	461a      	mov	r2, r3
 8008922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008924:	fbb3 f3f2 	udiv	r3, r3, r2
 8008928:	005a      	lsls	r2, r3, #1
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	441a      	add	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d916      	bls.n	8008970 <UART_SetConfig+0x920>
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008948:	d212      	bcs.n	8008970 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	b29b      	uxth	r3, r3
 800894e:	f023 030f 	bic.w	r3, r3, #15
 8008952:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	b29a      	uxth	r2, r3
 8008960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008962:	4313      	orrs	r3, r2
 8008964:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800896c:	60da      	str	r2, [r3, #12]
 800896e:	e0b9      	b.n	8008ae4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008976:	e0b5      	b.n	8008ae4 <UART_SetConfig+0xa94>
 8008978:	03d09000 	.word	0x03d09000
 800897c:	003d0900 	.word	0x003d0900
 8008980:	0800cd70 	.word	0x0800cd70
 8008984:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008988:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800898c:	2b20      	cmp	r3, #32
 800898e:	dc49      	bgt.n	8008a24 <UART_SetConfig+0x9d4>
 8008990:	2b00      	cmp	r3, #0
 8008992:	db7c      	blt.n	8008a8e <UART_SetConfig+0xa3e>
 8008994:	2b20      	cmp	r3, #32
 8008996:	d87a      	bhi.n	8008a8e <UART_SetConfig+0xa3e>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <UART_SetConfig+0x950>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	08008a2b 	.word	0x08008a2b
 80089a4:	08008a33 	.word	0x08008a33
 80089a8:	08008a8f 	.word	0x08008a8f
 80089ac:	08008a8f 	.word	0x08008a8f
 80089b0:	08008a3b 	.word	0x08008a3b
 80089b4:	08008a8f 	.word	0x08008a8f
 80089b8:	08008a8f 	.word	0x08008a8f
 80089bc:	08008a8f 	.word	0x08008a8f
 80089c0:	08008a4b 	.word	0x08008a4b
 80089c4:	08008a8f 	.word	0x08008a8f
 80089c8:	08008a8f 	.word	0x08008a8f
 80089cc:	08008a8f 	.word	0x08008a8f
 80089d0:	08008a8f 	.word	0x08008a8f
 80089d4:	08008a8f 	.word	0x08008a8f
 80089d8:	08008a8f 	.word	0x08008a8f
 80089dc:	08008a8f 	.word	0x08008a8f
 80089e0:	08008a5b 	.word	0x08008a5b
 80089e4:	08008a8f 	.word	0x08008a8f
 80089e8:	08008a8f 	.word	0x08008a8f
 80089ec:	08008a8f 	.word	0x08008a8f
 80089f0:	08008a8f 	.word	0x08008a8f
 80089f4:	08008a8f 	.word	0x08008a8f
 80089f8:	08008a8f 	.word	0x08008a8f
 80089fc:	08008a8f 	.word	0x08008a8f
 8008a00:	08008a8f 	.word	0x08008a8f
 8008a04:	08008a8f 	.word	0x08008a8f
 8008a08:	08008a8f 	.word	0x08008a8f
 8008a0c:	08008a8f 	.word	0x08008a8f
 8008a10:	08008a8f 	.word	0x08008a8f
 8008a14:	08008a8f 	.word	0x08008a8f
 8008a18:	08008a8f 	.word	0x08008a8f
 8008a1c:	08008a8f 	.word	0x08008a8f
 8008a20:	08008a81 	.word	0x08008a81
 8008a24:	2b40      	cmp	r3, #64	; 0x40
 8008a26:	d02e      	beq.n	8008a86 <UART_SetConfig+0xa36>
 8008a28:	e031      	b.n	8008a8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a2a:	f7fc ff5d 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8008a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a30:	e033      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a32:	f7fc ff6f 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 8008a36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a38:	e02f      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fd ff1c 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a48:	e027      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4a:	f107 0318 	add.w	r3, r7, #24
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe f868 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a58:	e01f      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a5a:	4b2d      	ldr	r3, [pc, #180]	; (8008b10 <UART_SetConfig+0xac0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a66:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <UART_SetConfig+0xac0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	08db      	lsrs	r3, r3, #3
 8008a6c:	f003 0303 	and.w	r3, r3, #3
 8008a70:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <UART_SetConfig+0xac4>)
 8008a72:	fa22 f303 	lsr.w	r3, r2, r3
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a78:	e00f      	b.n	8008a9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a7a:	4b26      	ldr	r3, [pc, #152]	; (8008b14 <UART_SetConfig+0xac4>)
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a7e:	e00c      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a80:	4b25      	ldr	r3, [pc, #148]	; (8008b18 <UART_SetConfig+0xac8>)
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a84:	e009      	b.n	8008a9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a8c:	e005      	b.n	8008a9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a98:	bf00      	nop
    }

    if (pclk != 0U)
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d021      	beq.n	8008ae4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <UART_SetConfig+0xacc>)
 8008aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aae:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	441a      	add	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d909      	bls.n	8008ade <UART_SetConfig+0xa8e>
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad0:	d205      	bcs.n	8008ade <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60da      	str	r2, [r3, #12]
 8008adc:	e002      	b.n	8008ae4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2200      	movs	r2, #0
 8008af8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2200      	movs	r2, #0
 8008afe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3748      	adds	r7, #72	; 0x48
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b0e:	bf00      	nop
 8008b10:	58024400 	.word	0x58024400
 8008b14:	03d09000 	.word	0x03d09000
 8008b18:	003d0900 	.word	0x003d0900
 8008b1c:	0800cd70 	.word	0x0800cd70

08008b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d10a      	bne.n	8008c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c74:	f7f8 fd8c 	bl	8001790 <HAL_GetTick>
 8008c78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d10e      	bne.n	8008ca6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f82f 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e025      	b.n	8008cf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d10e      	bne.n	8008cd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f819 	bl	8008cfa <UART_WaitOnFlagUntilTimeout>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e00f      	b.n	8008cf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b09c      	sub	sp, #112	; 0x70
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d0a:	e0a9      	b.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	f000 80a5 	beq.w	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d16:	f7f8 fd3b 	bl	8001790 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d302      	bcc.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d140      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d40:	667b      	str	r3, [r7, #100]	; 0x64
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e6      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	663b      	str	r3, [r7, #96]	; 0x60
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e5      	bne.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e069      	b.n	8008e82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d051      	beq.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dca:	d149      	bne.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
 8008df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e6      	bne.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3308      	adds	r3, #8
 8008e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e28:	623a      	str	r2, [r7, #32]
 8008e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	69f9      	ldr	r1, [r7, #28]
 8008e2e:	6a3a      	ldr	r2, [r7, #32]
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e010      	b.n	8008e82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69da      	ldr	r2, [r3, #28]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	f43f af46 	beq.w	8008d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3770      	adds	r7, #112	; 0x70
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b096      	sub	sp, #88	; 0x58
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2222      	movs	r2, #34	; 0x22
 8008eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d02c      	beq.n	8008f1a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec4:	4a42      	ldr	r2, [pc, #264]	; (8008fd0 <UART_Start_Receive_DMA+0x144>)
 8008ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ecc:	4a41      	ldr	r2, [pc, #260]	; (8008fd4 <UART_Start_Receive_DMA+0x148>)
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed4:	4a40      	ldr	r2, [pc, #256]	; (8008fd8 <UART_Start_Receive_DMA+0x14c>)
 8008ed6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008edc:	2200      	movs	r2, #0
 8008ede:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3324      	adds	r3, #36	; 0x24
 8008eea:	4619      	mov	r1, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	f7f9 f8a0 	bl	8002038 <HAL_DMA_Start_IT>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2210      	movs	r2, #16
 8008f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e055      	b.n	8008fc6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d018      	beq.n	8008f5c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e6      	bne.n	8008f2a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	653b      	str	r3, [r7, #80]	; 0x50
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8008f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e5      	bne.n	8008f5c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb0:	623a      	str	r2, [r7, #32]
 8008fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	6a3a      	ldr	r2, [r7, #32]
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e5      	bne.n	8008f90 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3758      	adds	r7, #88	; 0x58
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	0800912d 	.word	0x0800912d
 8008fd4:	0800924f 	.word	0x0800924f
 8008fd8:	08009287 	.word	0x08009287

08008fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b08f      	sub	sp, #60	; 0x3c
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009004:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	60bb      	str	r3, [r7, #8]
   return(result);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800902c:	633b      	str	r3, [r7, #48]	; 0x30
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009036:	61ba      	str	r2, [r7, #24]
 8009038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6979      	ldr	r1, [r7, #20]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	613b      	str	r3, [r7, #16]
   return(result);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009052:	bf00      	nop
 8009054:	373c      	adds	r7, #60	; 0x3c
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
	...

08009060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b095      	sub	sp, #84	; 0x54
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800907c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009086:	643b      	str	r3, [r7, #64]	; 0x40
 8009088:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800908c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3308      	adds	r3, #8
 80090a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <UART_EndRxTransfer+0xc8>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e5      	bne.n	800909a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d118      	bne.n	8009108 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f023 0310 	bic.w	r3, r3, #16
 80090ea:	647b      	str	r3, [r7, #68]	; 0x44
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6979      	ldr	r1, [r7, #20]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	613b      	str	r3, [r7, #16]
   return(result);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800911c:	bf00      	nop
 800911e:	3754      	adds	r7, #84	; 0x54
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	effffffe 	.word	0xeffffffe

0800912c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b09c      	sub	sp, #112	; 0x70
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d071      	beq.n	8009228 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	2200      	movs	r2, #0
 8009148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800914c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800915a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009160:	66bb      	str	r3, [r7, #104]	; 0x68
 8009162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800916a:	65bb      	str	r3, [r7, #88]	; 0x58
 800916c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e6      	bne.n	800914c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	667b      	str	r3, [r7, #100]	; 0x64
 8009196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800919e:	647a      	str	r2, [r7, #68]	; 0x44
 80091a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e5      	bne.n	800917e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	623b      	str	r3, [r7, #32]
   return(result);
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c8:	663b      	str	r3, [r7, #96]	; 0x60
 80091ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091d2:	633a      	str	r2, [r7, #48]	; 0x30
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e5      	bne.n	80091b2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	2220      	movs	r2, #32
 80091ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d118      	bne.n	8009228 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	60fb      	str	r3, [r7, #12]
   return(result);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0310 	bic.w	r3, r3, #16
 800920a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800920c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009214:	61fb      	str	r3, [r7, #28]
 8009216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	69b9      	ldr	r1, [r7, #24]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	617b      	str	r3, [r7, #20]
   return(result);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e6      	bne.n	80091f6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d107      	bne.n	8009240 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009236:	4619      	mov	r1, r3
 8009238:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800923a:	f7fe fefd 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800923e:	e002      	b.n	8009246 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8009240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009242:	f7f8 f961 	bl	8001508 <HAL_UART_RxCpltCallback>
}
 8009246:	bf00      	nop
 8009248:	3770      	adds	r7, #112	; 0x70
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009260:	2b01      	cmp	r3, #1
 8009262:	d109      	bne.n	8009278 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	b29b      	uxth	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7fe fee1 	bl	8008038 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009276:	e002      	b.n	800927e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7fe fec9 	bl	8008010 <HAL_UART_RxHalfCpltCallback>
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d109      	bne.n	80092c6 <UART_DMAError+0x40>
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b21      	cmp	r3, #33	; 0x21
 80092b6:	d106      	bne.n	80092c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f7ff fe8b 	bl	8008fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d109      	bne.n	80092e8 <UART_DMAError+0x62>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	d106      	bne.n	80092e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff febc 	bl	8009060 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ee:	f043 0210 	orr.w	r2, r3, #16
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	f7fe fe93 	bl	8008024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fe:	bf00      	nop
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7fe fe7d 	bl	8008024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b088      	sub	sp, #32
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	60bb      	str	r3, [r7, #8]
   return(result);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6979      	ldr	r1, [r7, #20]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	613b      	str	r3, [r7, #16]
   return(result);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e6      	bne.n	800933a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fe fe3e 	bl	8007ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009380:	bf00      	nop
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_UARTEx_DisableFifoMode+0x16>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e027      	b.n	800942a <HAL_UARTEx_DisableFifoMode+0x66>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2224      	movs	r2, #36	; 0x24
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0201 	bic.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800944a:	2302      	movs	r3, #2
 800944c:	e02d      	b.n	80094aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2224      	movs	r2, #36	; 0x24
 800945a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f850 	bl	8009530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094c6:	2302      	movs	r3, #2
 80094c8:	e02d      	b.n	8009526 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2224      	movs	r2, #36	; 0x24
 80094d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0201 	bic.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f812 	bl	8009530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953c:	2b00      	cmp	r3, #0
 800953e:	d108      	bne.n	8009552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009550:	e031      	b.n	80095b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009552:	2310      	movs	r3, #16
 8009554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009556:	2310      	movs	r3, #16
 8009558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	0e5b      	lsrs	r3, r3, #25
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	0f5b      	lsrs	r3, r3, #29
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	7b3a      	ldrb	r2, [r7, #12]
 800957e:	4911      	ldr	r1, [pc, #68]	; (80095c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009580:	5c8a      	ldrb	r2, [r1, r2]
 8009582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009586:	7b3a      	ldrb	r2, [r7, #12]
 8009588:	490f      	ldr	r1, [pc, #60]	; (80095c8 <UARTEx_SetNbDataToProcess+0x98>)
 800958a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800958c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009590:	b29a      	uxth	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	7b7a      	ldrb	r2, [r7, #13]
 800959c:	4909      	ldr	r1, [pc, #36]	; (80095c4 <UARTEx_SetNbDataToProcess+0x94>)
 800959e:	5c8a      	ldrb	r2, [r1, r2]
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095a4:	7b7a      	ldrb	r2, [r7, #13]
 80095a6:	4908      	ldr	r1, [pc, #32]	; (80095c8 <UARTEx_SetNbDataToProcess+0x98>)
 80095a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	0800cd88 	.word	0x0800cd88
 80095c8:	0800cd90 	.word	0x0800cd90

080095cc <__NVIC_SetPriority>:
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	6039      	str	r1, [r7, #0]
 80095d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80095d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	db0a      	blt.n	80095f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	490c      	ldr	r1, [pc, #48]	; (8009618 <__NVIC_SetPriority+0x4c>)
 80095e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ea:	0112      	lsls	r2, r2, #4
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	440b      	add	r3, r1
 80095f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095f4:	e00a      	b.n	800960c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4908      	ldr	r1, [pc, #32]	; (800961c <__NVIC_SetPriority+0x50>)
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	f003 030f 	and.w	r3, r3, #15
 8009602:	3b04      	subs	r3, #4
 8009604:	0112      	lsls	r2, r2, #4
 8009606:	b2d2      	uxtb	r2, r2
 8009608:	440b      	add	r3, r1
 800960a:	761a      	strb	r2, [r3, #24]
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	e000e100 	.word	0xe000e100
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009624:	4b05      	ldr	r3, [pc, #20]	; (800963c <SysTick_Handler+0x1c>)
 8009626:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009628:	f001 fd86 	bl	800b138 <xTaskGetSchedulerState>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d001      	beq.n	8009636 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009632:	f002 fb71 	bl	800bd18 <xPortSysTickHandler>
  }
}
 8009636:	bf00      	nop
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	e000e010 	.word	0xe000e010

08009640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009644:	2100      	movs	r1, #0
 8009646:	f06f 0004 	mvn.w	r0, #4
 800964a:	f7ff ffbf 	bl	80095cc <__NVIC_SetPriority>
#endif
}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800965a:	f3ef 8305 	mrs	r3, IPSR
 800965e:	603b      	str	r3, [r7, #0]
  return(result);
 8009660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009666:	f06f 0305 	mvn.w	r3, #5
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	e00c      	b.n	8009688 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800966e:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <osKernelInitialize+0x44>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009676:	4b08      	ldr	r3, [pc, #32]	; (8009698 <osKernelInitialize+0x44>)
 8009678:	2201      	movs	r2, #1
 800967a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800967c:	2300      	movs	r3, #0
 800967e:	607b      	str	r3, [r7, #4]
 8009680:	e002      	b.n	8009688 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009688:	687b      	ldr	r3, [r7, #4]
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	24002708 	.word	0x24002708

0800969c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a2:	f3ef 8305 	mrs	r3, IPSR
 80096a6:	603b      	str	r3, [r7, #0]
  return(result);
 80096a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096ae:	f06f 0305 	mvn.w	r3, #5
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	e010      	b.n	80096d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <osKernelStart+0x48>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d109      	bne.n	80096d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096be:	f7ff ffbf 	bl	8009640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096c2:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <osKernelStart+0x48>)
 80096c4:	2202      	movs	r2, #2
 80096c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096c8:	f001 f8da 	bl	800a880 <vTaskStartScheduler>
      stat = osOK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	e002      	b.n	80096d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80096d2:	f04f 33ff 	mov.w	r3, #4294967295
 80096d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d8:	687b      	ldr	r3, [r7, #4]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	24002708 	.word	0x24002708

080096e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08e      	sub	sp, #56	; 0x38
 80096ec:	af04      	add	r7, sp, #16
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f8:	f3ef 8305 	mrs	r3, IPSR
 80096fc:	617b      	str	r3, [r7, #20]
  return(result);
 80096fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009700:	2b00      	cmp	r3, #0
 8009702:	d17e      	bne.n	8009802 <osThreadNew+0x11a>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d07b      	beq.n	8009802 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800970a:	2380      	movs	r3, #128	; 0x80
 800970c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800970e:	2318      	movs	r3, #24
 8009710:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d045      	beq.n	80097ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <osThreadNew+0x48>
        name = attr->name;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <osThreadNew+0x6e>
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b38      	cmp	r3, #56	; 0x38
 8009748:	d805      	bhi.n	8009756 <osThreadNew+0x6e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <osThreadNew+0x72>
        return (NULL);
 8009756:	2300      	movs	r3, #0
 8009758:	e054      	b.n	8009804 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	089b      	lsrs	r3, r3, #2
 8009768:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <osThreadNew+0xa8>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2bbb      	cmp	r3, #187	; 0xbb
 8009778:	d90a      	bls.n	8009790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <osThreadNew+0xa8>
        mem = 1;
 800978a:	2301      	movs	r3, #1
 800978c:	61bb      	str	r3, [r7, #24]
 800978e:	e010      	b.n	80097b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10c      	bne.n	80097b2 <osThreadNew+0xca>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d108      	bne.n	80097b2 <osThreadNew+0xca>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <osThreadNew+0xca>
          mem = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]
 80097ac:	e001      	b.n	80097b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d110      	bne.n	80097da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097c0:	9202      	str	r2, [sp, #8]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6a3a      	ldr	r2, [r7, #32]
 80097cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fe9e 	bl	800a510 <xTaskCreateStatic>
 80097d4:	4603      	mov	r3, r0
 80097d6:	613b      	str	r3, [r7, #16]
 80097d8:	e013      	b.n	8009802 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d110      	bne.n	8009802 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f107 0310 	add.w	r3, r7, #16
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 fee9 	bl	800a5ca <xTaskCreate>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d001      	beq.n	8009802 <osThreadNew+0x11a>
            hTask = NULL;
 80097fe:	2300      	movs	r3, #0
 8009800:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009802:	693b      	ldr	r3, [r7, #16]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3728      	adds	r7, #40	; 0x28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
 8009810:	af02      	add	r7, sp, #8
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009818:	2300      	movs	r3, #0
 800981a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800981c:	f3ef 8305 	mrs	r3, IPSR
 8009820:	613b      	str	r3, [r7, #16]
  return(result);
 8009822:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009824:	2b00      	cmp	r3, #0
 8009826:	d15f      	bne.n	80098e8 <osMessageQueueNew+0xdc>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d05c      	beq.n	80098e8 <osMessageQueueNew+0xdc>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d059      	beq.n	80098e8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009834:	f04f 33ff 	mov.w	r3, #4294967295
 8009838:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d029      	beq.n	8009894 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <osMessageQueueNew+0x62>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	2b4f      	cmp	r3, #79	; 0x4f
 800984e:	d90e      	bls.n	800986e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695a      	ldr	r2, [r3, #20]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	fb01 f303 	mul.w	r3, r1, r3
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <osMessageQueueNew+0x62>
        mem = 1;
 8009868:	2301      	movs	r3, #1
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	e014      	b.n	8009898 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d110      	bne.n	8009898 <osMessageQueueNew+0x8c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009882:	2b00      	cmp	r3, #0
 8009884:	d108      	bne.n	8009898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <osMessageQueueNew+0x8c>
          mem = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e001      	b.n	8009898 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d10b      	bne.n	80098b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	2100      	movs	r1, #0
 80098a8:	9100      	str	r1, [sp, #0]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f971 	bl	8009b94 <xQueueGenericCreateStatic>
 80098b2:	61f8      	str	r0, [r7, #28]
 80098b4:	e008      	b.n	80098c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098bc:	2200      	movs	r2, #0
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f9df 	bl	8009c84 <xQueueGenericCreate>
 80098c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00c      	beq.n	80098e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <osMessageQueueNew+0xd0>
        name = attr->name;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	e001      	b.n	80098e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098dc:	2300      	movs	r3, #0
 80098de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098e0:	6979      	ldr	r1, [r7, #20]
 80098e2:	69f8      	ldr	r0, [r7, #28]
 80098e4:	f000 fdb6 	bl	800a454 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098e8:	69fb      	ldr	r3, [r7, #28]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a07      	ldr	r2, [pc, #28]	; (8009920 <vApplicationGetIdleTaskMemory+0x2c>)
 8009904:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a06      	ldr	r2, [pc, #24]	; (8009924 <vApplicationGetIdleTaskMemory+0x30>)
 800990a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2280      	movs	r2, #128	; 0x80
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	2400270c 	.word	0x2400270c
 8009924:	240027c8 	.word	0x240027c8

08009928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4a07      	ldr	r2, [pc, #28]	; (8009954 <vApplicationGetTimerTaskMemory+0x2c>)
 8009938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a06      	ldr	r2, [pc, #24]	; (8009958 <vApplicationGetTimerTaskMemory+0x30>)
 800993e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	240029c8 	.word	0x240029c8
 8009958:	24002a84 	.word	0x24002a84

0800995c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f103 0208 	add.w	r2, r3, #8
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f103 0208 	add.w	r2, r3, #8
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f103 0208 	add.w	r2, r3, #8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d103      	bne.n	8009a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e00c      	b.n	8009a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3308      	adds	r3, #8
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e002      	b.n	8009a2c <vListInsert+0x2e>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d2f6      	bcs.n	8009a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6852      	ldr	r2, [r2, #4]
 8009a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d103      	bne.n	8009aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009aee:	f002 f881 	bl	800bbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009afe:	fb01 f303 	mul.w	r3, r1, r3
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d114      	bne.n	8009b6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01a      	beq.n	8009b82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3310      	adds	r3, #16
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 f92f 	bl	800adb4 <xTaskRemoveFromEventList>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d012      	beq.n	8009b82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b5c:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <xQueueGenericReset+0xcc>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	e009      	b.n	8009b82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3310      	adds	r3, #16
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fef2 	bl	800995c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3324      	adds	r3, #36	; 0x24
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff feed 	bl	800995c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b82:	f002 f867 	bl	800bc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b86:	2301      	movs	r3, #1
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08e      	sub	sp, #56	; 0x38
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bba:	bf00      	nop
 8009bbc:	e7fe      	b.n	8009bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <xQueueGenericCreateStatic+0x52>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <xQueueGenericCreateStatic+0x56>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericCreateStatic+0x58>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <xQueueGenericCreateStatic+0x7e>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <xQueueGenericCreateStatic+0x82>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <xQueueGenericCreateStatic+0x84>
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61fb      	str	r3, [r7, #28]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c32:	2350      	movs	r3, #80	; 0x50
 8009c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b50      	cmp	r3, #80	; 0x50
 8009c3a:	d00a      	beq.n	8009c52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61bb      	str	r3, [r7, #24]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00d      	beq.n	8009c7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f83f 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	; 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08a      	sub	sp, #40	; 0x28
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	613b      	str	r3, [r7, #16]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3350      	adds	r3, #80	; 0x50
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 f8bb 	bl	800be38 <pvPortMalloc>
 8009cc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d011      	beq.n	8009cee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	3350      	adds	r3, #80	; 0x50
 8009cd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 f805 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cee:	69bb      	ldr	r3, [r7, #24]
	}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d26:	2101      	movs	r1, #1
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f7ff fecb 	bl	8009ac4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericSend+0x32>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <xQueueGenericSend+0x40>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <xQueueGenericSend+0x44>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <xQueueGenericSend+0x46>
 8009d84:	2300      	movs	r3, #0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xQueueGenericSend+0x60>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d103      	bne.n	8009dae <xQueueGenericSend+0x6e>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericSend+0x72>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericSend+0x74>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericSend+0x8e>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	623b      	str	r3, [r7, #32]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dce:	f001 f9b3 	bl	800b138 <xTaskGetSchedulerState>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <xQueueGenericSend+0x9e>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <xQueueGenericSend+0xa2>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e000      	b.n	8009de4 <xQueueGenericSend+0xa4>
 8009de2:	2300      	movs	r3, #0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueueGenericSend+0xbe>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61fb      	str	r3, [r7, #28]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dfe:	f001 fef9 	bl	800bbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <xQueueGenericSend+0xd4>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d129      	bne.n	8009e68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e1a:	f000 fa0b 	bl	800a234 <prvCopyDataToQueue>
 8009e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d010      	beq.n	8009e4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	3324      	adds	r3, #36	; 0x24
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 ffc1 	bl	800adb4 <xTaskRemoveFromEventList>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d013      	beq.n	8009e60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e38:	4b3f      	ldr	r3, [pc, #252]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	e00a      	b.n	8009e60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d007      	beq.n	8009e60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e60:	f001 fef8 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e063      	b.n	8009f30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e6e:	f001 fef1 	bl	800bc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e05c      	b.n	8009f30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fffb 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e86:	2301      	movs	r3, #1
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e8a:	f001 fee3 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e8e:	f000 fd67 	bl	800a960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e92:	f001 feaf 	bl	800bbf4 <vPortEnterCritical>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d103      	bne.n	8009eac <xQueueGenericSend+0x16c>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb2:	b25b      	sxtb	r3, r3
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d103      	bne.n	8009ec2 <xQueueGenericSend+0x182>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec2:	f001 fec7 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 ffea 	bl	800aea8 <xTaskCheckForTimeOut>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d124      	bne.n	8009f24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009edc:	f000 faa2 	bl	800a424 <prvIsQueueFull>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d018      	beq.n	8009f18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	3310      	adds	r3, #16
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 ff10 	bl	800ad14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef6:	f000 fa2d 	bl	800a354 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009efa:	f000 fd3f 	bl	800a97c <xTaskResumeAll>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f47f af7c 	bne.w	8009dfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <xQueueGenericSend+0x1f8>)
 8009f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	e772      	b.n	8009dfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1a:	f000 fa1b 	bl	800a354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f1e:	f000 fd2d 	bl	800a97c <xTaskResumeAll>
 8009f22:	e76c      	b.n	8009dfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f26:	f000 fa15 	bl	800a354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f2a:	f000 fd27 	bl	800a97c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3738      	adds	r7, #56	; 0x38
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b090      	sub	sp, #64	; 0x40
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d103      	bne.n	8009f78 <xQueueGenericSendFromISR+0x3c>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <xQueueGenericSendFromISR+0x40>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e000      	b.n	8009f7e <xQueueGenericSendFromISR+0x42>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d103      	bne.n	8009fa6 <xQueueGenericSendFromISR+0x6a>
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <xQueueGenericSendFromISR+0x6e>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <xQueueGenericSendFromISR+0x70>
 8009faa:	2300      	movs	r3, #0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	623b      	str	r3, [r7, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fc6:	f001 fef7 	bl	800bdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fca:	f3ef 8211 	mrs	r2, BASEPRI
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	61fa      	str	r2, [r7, #28]
 8009fe0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <xQueueGenericSendFromISR+0xbc>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d12f      	bne.n	800a058 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a00e:	f000 f911 	bl	800a234 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d112      	bne.n	800a042 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d016      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	3324      	adds	r3, #36	; 0x24
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fec3 	bl	800adb4 <xTaskRemoveFromEventList>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e007      	b.n	800a052 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a046:	3301      	adds	r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	b25a      	sxtb	r2, r3
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a052:	2301      	movs	r3, #1
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a056:	e001      	b.n	800a05c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a066:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3740      	adds	r7, #64	; 0x40
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08c      	sub	sp, #48	; 0x30
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <xQueueReceive+0x30>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	623b      	str	r3, [r7, #32]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <xQueueReceive+0x3e>
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueReceive+0x42>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueReceive+0x44>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueReceive+0x5e>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61fb      	str	r3, [r7, #28]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0d2:	f001 f831 	bl	800b138 <xTaskGetSchedulerState>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d102      	bne.n	800a0e2 <xQueueReceive+0x6e>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <xQueueReceive+0x72>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <xQueueReceive+0x74>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueReceive+0x8e>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61bb      	str	r3, [r7, #24]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a102:	f001 fd77 	bl	800bbf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01f      	beq.n	800a152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 f8f7 	bl	800a308 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	1e5a      	subs	r2, r3, #1
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00f      	beq.n	800a14a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	3310      	adds	r3, #16
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fe40 	bl	800adb4 <xTaskRemoveFromEventList>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a13a:	4b3d      	ldr	r3, [pc, #244]	; (800a230 <xQueueReceive+0x1bc>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a14a:	f001 fd83 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800a14e:	2301      	movs	r3, #1
 800a150:	e069      	b.n	800a226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a158:	f001 fd7c 	bl	800bc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e062      	b.n	800a226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a166:	f107 0310 	add.w	r3, r7, #16
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fe86 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a170:	2301      	movs	r3, #1
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a174:	f001 fd6e 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a178:	f000 fbf2 	bl	800a960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a17c:	f001 fd3a 	bl	800bbf4 <vPortEnterCritical>
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a186:	b25b      	sxtb	r3, r3
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18c:	d103      	bne.n	800a196 <xQueueReceive+0x122>
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d103      	bne.n	800a1ac <xQueueReceive+0x138>
 800a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ac:	f001 fd52 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1b0:	1d3a      	adds	r2, r7, #4
 800a1b2:	f107 0310 	add.w	r3, r7, #16
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 fe75 	bl	800aea8 <xTaskCheckForTimeOut>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d123      	bne.n	800a20c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c6:	f000 f917 	bl	800a3f8 <prvIsQueueEmpty>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d017      	beq.n	800a200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fd9b 	bl	800ad14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e0:	f000 f8b8 	bl	800a354 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1e4:	f000 fbca 	bl	800a97c <xTaskResumeAll>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d189      	bne.n	800a102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1ee:	4b10      	ldr	r3, [pc, #64]	; (800a230 <xQueueReceive+0x1bc>)
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	e780      	b.n	800a102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a202:	f000 f8a7 	bl	800a354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a206:	f000 fbb9 	bl	800a97c <xTaskResumeAll>
 800a20a:	e77a      	b.n	800a102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20e:	f000 f8a1 	bl	800a354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a212:	f000 fbb3 	bl	800a97c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a218:	f000 f8ee 	bl	800a3f8 <prvIsQueueEmpty>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f43f af6f 	beq.w	800a102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a226:	4618      	mov	r0, r3
 800a228:	3730      	adds	r7, #48	; 0x30
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a240:	2300      	movs	r3, #0
 800a242:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a248:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10d      	bne.n	800a26e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d14d      	bne.n	800a2f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 ff88 	bl	800b174 <xTaskPriorityDisinherit>
 800a264:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	e043      	b.n	800a2f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d119      	bne.n	800a2a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6858      	ldr	r0, [r3, #4]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	461a      	mov	r2, r3
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	f001 fff0 	bl	800c264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28c:	441a      	add	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d32b      	bcc.n	800a2f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	605a      	str	r2, [r3, #4]
 800a2a6:	e026      	b.n	800a2f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	68d8      	ldr	r0, [r3, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	f001 ffd6 	bl	800c264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	425b      	negs	r3, r3
 800a2c2:	441a      	add	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	68da      	ldr	r2, [r3, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d207      	bcs.n	800a2e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2dc:	425b      	negs	r3, r3
 800a2de:	441a      	add	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d105      	bne.n	800a2f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d018      	beq.n	800a34c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	441a      	add	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68da      	ldr	r2, [r3, #12]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	429a      	cmp	r2, r3
 800a332:	d303      	bcc.n	800a33c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68d9      	ldr	r1, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	461a      	mov	r2, r3
 800a346:	6838      	ldr	r0, [r7, #0]
 800a348:	f001 ff8c 	bl	800c264 <memcpy>
	}
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a35c:	f001 fc4a 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a366:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a368:	e011      	b.n	800a38e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d012      	beq.n	800a398 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3324      	adds	r3, #36	; 0x24
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fd1c 	bl	800adb4 <xTaskRemoveFromEventList>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a382:	f000 fdf3 	bl	800af6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	3b01      	subs	r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a392:	2b00      	cmp	r3, #0
 800a394:	dce9      	bgt.n	800a36a <prvUnlockQueue+0x16>
 800a396:	e000      	b.n	800a39a <prvUnlockQueue+0x46>
					break;
 800a398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	22ff      	movs	r2, #255	; 0xff
 800a39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3a2:	f001 fc57 	bl	800bc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3a6:	f001 fc25 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3b2:	e011      	b.n	800a3d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d012      	beq.n	800a3e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3310      	adds	r3, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fcf7 	bl	800adb4 <xTaskRemoveFromEventList>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3cc:	f000 fdce 	bl	800af6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dce9      	bgt.n	800a3b4 <prvUnlockQueue+0x60>
 800a3e0:	e000      	b.n	800a3e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	22ff      	movs	r2, #255	; 0xff
 800a3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a3ec:	f001 fc32 	bl	800bc54 <vPortExitCritical>
}
 800a3f0:	bf00      	nop
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a400:	f001 fbf8 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e001      	b.n	800a416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a416:	f001 fc1d 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a41a:	68fb      	ldr	r3, [r7, #12]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a42c:	f001 fbe2 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a438:	429a      	cmp	r2, r3
 800a43a:	d102      	bne.n	800a442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e001      	b.n	800a446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a446:	f001 fc05 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800a44a:	68fb      	ldr	r3, [r7, #12]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	e014      	b.n	800a48e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a464:	4a0f      	ldr	r2, [pc, #60]	; (800a4a4 <vQueueAddToRegistry+0x50>)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10b      	bne.n	800a488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a470:	490c      	ldr	r1, [pc, #48]	; (800a4a4 <vQueueAddToRegistry+0x50>)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a47a:	4a0a      	ldr	r2, [pc, #40]	; (800a4a4 <vQueueAddToRegistry+0x50>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	4413      	add	r3, r2
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a486:	e006      	b.n	800a496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b07      	cmp	r3, #7
 800a492:	d9e7      	bls.n	800a464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	24002e84 	.word	0x24002e84

0800a4a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4b8:	f001 fb9c 	bl	800bbf4 <vPortEnterCritical>
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4c2:	b25b      	sxtb	r3, r3
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d103      	bne.n	800a4d2 <vQueueWaitForMessageRestricted+0x2a>
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4d8:	b25b      	sxtb	r3, r3
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d103      	bne.n	800a4e8 <vQueueWaitForMessageRestricted+0x40>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e8:	f001 fbb4 	bl	800bc54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	3324      	adds	r3, #36	; 0x24
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fc2d 	bl	800ad5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a502:	6978      	ldr	r0, [r7, #20]
 800a504:	f7ff ff26 	bl	800a354 <prvUnlockQueue>
	}
 800a508:	bf00      	nop
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08e      	sub	sp, #56	; 0x38
 800a514:	af04      	add	r7, sp, #16
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xTaskCreateStatic+0x46>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	61fb      	str	r3, [r7, #28]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a556:	23bc      	movs	r3, #188	; 0xbc
 800a558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2bbc      	cmp	r3, #188	; 0xbc
 800a55e:	d00a      	beq.n	800a576 <xTaskCreateStatic+0x66>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61bb      	str	r3, [r7, #24]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a576:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01e      	beq.n	800a5bc <xTaskCreateStatic+0xac>
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a580:	2b00      	cmp	r3, #0
 800a582:	d01b      	beq.n	800a5bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a58c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	2202      	movs	r2, #2
 800a592:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a596:	2300      	movs	r3, #0
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	9302      	str	r3, [sp, #8]
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 f850 	bl	800a654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5b6:	f000 f8f3 	bl	800a7a0 <prvAddNewTaskToReadyList>
 800a5ba:	e001      	b.n	800a5c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5c0:	697b      	ldr	r3, [r7, #20]
	}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3728      	adds	r7, #40	; 0x28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b08c      	sub	sp, #48	; 0x30
 800a5ce:	af04      	add	r7, sp, #16
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fc2a 	bl	800be38 <pvPortMalloc>
 800a5e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00e      	beq.n	800a60a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5ec:	20bc      	movs	r0, #188	; 0xbc
 800a5ee:	f001 fc23 	bl	800be38 <pvPortMalloc>
 800a5f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a600:	e005      	b.n	800a60e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f001 fce4 	bl	800bfd0 <vPortFree>
 800a608:	e001      	b.n	800a60e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d017      	beq.n	800a644 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	2300      	movs	r3, #0
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f80e 	bl	800a654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a638:	69f8      	ldr	r0, [r7, #28]
 800a63a:	f000 f8b1 	bl	800a7a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a63e:	2301      	movs	r3, #1
 800a640:	61bb      	str	r3, [r7, #24]
 800a642:	e002      	b.n	800a64a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a64a:	69bb      	ldr	r3, [r7, #24]
	}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	461a      	mov	r2, r3
 800a66c:	21a5      	movs	r1, #165	; 0xa5
 800a66e:	f001 fe07 	bl	800c280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a67c:	440b      	add	r3, r1
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	617b      	str	r3, [r7, #20]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01f      	beq.n	800a6f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	e012      	b.n	800a6de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	7819      	ldrb	r1, [r3, #0]
 800a6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3334      	adds	r3, #52	; 0x34
 800a6c8:	460a      	mov	r2, r1
 800a6ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d006      	beq.n	800a6e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	2b0f      	cmp	r3, #15
 800a6e2:	d9e9      	bls.n	800a6b8 <prvInitialiseNewTask+0x64>
 800a6e4:	e000      	b.n	800a6e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a6e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6f0:	e003      	b.n	800a6fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	2b37      	cmp	r3, #55	; 0x37
 800a6fe:	d901      	bls.n	800a704 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a700:	2337      	movs	r3, #55	; 0x37
 800a702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a70e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	3304      	adds	r3, #4
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff f93e 	bl	800999c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	3318      	adds	r3, #24
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff f939 	bl	800999c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	3354      	adds	r3, #84	; 0x54
 800a754:	2260      	movs	r2, #96	; 0x60
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f001 fd91 	bl	800c280 <memset>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	4a0c      	ldr	r2, [pc, #48]	; (800a794 <prvInitialiseNewTask+0x140>)
 800a762:	659a      	str	r2, [r3, #88]	; 0x58
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	4a0c      	ldr	r2, [pc, #48]	; (800a798 <prvInitialiseNewTask+0x144>)
 800a768:	65da      	str	r2, [r3, #92]	; 0x5c
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	4a0b      	ldr	r2, [pc, #44]	; (800a79c <prvInitialiseNewTask+0x148>)
 800a76e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	69b8      	ldr	r0, [r7, #24]
 800a776:	f001 f90d 	bl	800b994 <pxPortInitialiseStack>
 800a77a:	4602      	mov	r2, r0
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a78c:	bf00      	nop
 800a78e:	3720      	adds	r7, #32
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	0800cdb8 	.word	0x0800cdb8
 800a798:	0800cdd8 	.word	0x0800cdd8
 800a79c:	0800cd98 	.word	0x0800cd98

0800a7a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7a8:	f001 fa24 	bl	800bbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7ac:	4b2d      	ldr	r3, [pc, #180]	; (800a864 <prvAddNewTaskToReadyList+0xc4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	4a2c      	ldr	r2, [pc, #176]	; (800a864 <prvAddNewTaskToReadyList+0xc4>)
 800a7b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7b6:	4b2c      	ldr	r3, [pc, #176]	; (800a868 <prvAddNewTaskToReadyList+0xc8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d109      	bne.n	800a7d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7be:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <prvAddNewTaskToReadyList+0xc8>)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7c4:	4b27      	ldr	r3, [pc, #156]	; (800a864 <prvAddNewTaskToReadyList+0xc4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d110      	bne.n	800a7ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7cc:	f000 fbf2 	bl	800afb4 <prvInitialiseTaskLists>
 800a7d0:	e00d      	b.n	800a7ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7d2:	4b26      	ldr	r3, [pc, #152]	; (800a86c <prvAddNewTaskToReadyList+0xcc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7da:	4b23      	ldr	r3, [pc, #140]	; (800a868 <prvAddNewTaskToReadyList+0xc8>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d802      	bhi.n	800a7ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7e8:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <prvAddNewTaskToReadyList+0xc8>)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7ee:	4b20      	ldr	r3, [pc, #128]	; (800a870 <prvAddNewTaskToReadyList+0xd0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	4a1e      	ldr	r2, [pc, #120]	; (800a870 <prvAddNewTaskToReadyList+0xd0>)
 800a7f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	; (800a870 <prvAddNewTaskToReadyList+0xd0>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a804:	4b1b      	ldr	r3, [pc, #108]	; (800a874 <prvAddNewTaskToReadyList+0xd4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d903      	bls.n	800a814 <prvAddNewTaskToReadyList+0x74>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	4a18      	ldr	r2, [pc, #96]	; (800a874 <prvAddNewTaskToReadyList+0xd4>)
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4a15      	ldr	r2, [pc, #84]	; (800a878 <prvAddNewTaskToReadyList+0xd8>)
 800a822:	441a      	add	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3304      	adds	r3, #4
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7ff f8c3 	bl	80099b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a830:	f001 fa10 	bl	800bc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a834:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <prvAddNewTaskToReadyList+0xcc>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <prvAddNewTaskToReadyList+0xc8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	429a      	cmp	r2, r3
 800a848:	d207      	bcs.n	800a85a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a84a:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <prvAddNewTaskToReadyList+0xdc>)
 800a84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	24003398 	.word	0x24003398
 800a868:	24002ec4 	.word	0x24002ec4
 800a86c:	240033a4 	.word	0x240033a4
 800a870:	240033b4 	.word	0x240033b4
 800a874:	240033a0 	.word	0x240033a0
 800a878:	24002ec8 	.word	0x24002ec8
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	; 0x28
 800a884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a88e:	463a      	mov	r2, r7
 800a890:	1d39      	adds	r1, r7, #4
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff f82c 	bl	80098f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	9202      	str	r2, [sp, #8]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	460a      	mov	r2, r1
 800a8ae:	4924      	ldr	r1, [pc, #144]	; (800a940 <vTaskStartScheduler+0xc0>)
 800a8b0:	4824      	ldr	r0, [pc, #144]	; (800a944 <vTaskStartScheduler+0xc4>)
 800a8b2:	f7ff fe2d 	bl	800a510 <xTaskCreateStatic>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4a23      	ldr	r2, [pc, #140]	; (800a948 <vTaskStartScheduler+0xc8>)
 800a8ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8bc:	4b22      	ldr	r3, [pc, #136]	; (800a948 <vTaskStartScheduler+0xc8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e001      	b.n	800a8ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d102      	bne.n	800a8da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8d4:	f000 fd10 	bl	800b2f8 <xTimerCreateTimerTask>
 800a8d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d11b      	bne.n	800a918 <vTaskStartScheduler+0x98>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8f4:	4b15      	ldr	r3, [pc, #84]	; (800a94c <vTaskStartScheduler+0xcc>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3354      	adds	r3, #84	; 0x54
 800a8fa:	4a15      	ldr	r2, [pc, #84]	; (800a950 <vTaskStartScheduler+0xd0>)
 800a8fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8fe:	4b15      	ldr	r3, [pc, #84]	; (800a954 <vTaskStartScheduler+0xd4>)
 800a900:	f04f 32ff 	mov.w	r2, #4294967295
 800a904:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <vTaskStartScheduler+0xd8>)
 800a908:	2201      	movs	r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a90c:	4b13      	ldr	r3, [pc, #76]	; (800a95c <vTaskStartScheduler+0xdc>)
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a912:	f001 f8cd 	bl	800bab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a916:	e00e      	b.n	800a936 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d10a      	bne.n	800a936 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	60fb      	str	r3, [r7, #12]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <vTaskStartScheduler+0xb4>
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	0800ccbc 	.word	0x0800ccbc
 800a944:	0800af85 	.word	0x0800af85
 800a948:	240033bc 	.word	0x240033bc
 800a94c:	24002ec4 	.word	0x24002ec4
 800a950:	24000014 	.word	0x24000014
 800a954:	240033b8 	.word	0x240033b8
 800a958:	240033a4 	.word	0x240033a4
 800a95c:	2400339c 	.word	0x2400339c

0800a960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a964:	4b04      	ldr	r3, [pc, #16]	; (800a978 <vTaskSuspendAll+0x18>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3301      	adds	r3, #1
 800a96a:	4a03      	ldr	r2, [pc, #12]	; (800a978 <vTaskSuspendAll+0x18>)
 800a96c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a96e:	bf00      	nop
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	240033c0 	.word	0x240033c0

0800a97c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a986:	2300      	movs	r3, #0
 800a988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a98a:	4b42      	ldr	r3, [pc, #264]	; (800aa94 <xTaskResumeAll+0x118>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	603b      	str	r3, [r7, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9a8:	f001 f924 	bl	800bbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9ac:	4b39      	ldr	r3, [pc, #228]	; (800aa94 <xTaskResumeAll+0x118>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4a38      	ldr	r2, [pc, #224]	; (800aa94 <xTaskResumeAll+0x118>)
 800a9b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b6:	4b37      	ldr	r3, [pc, #220]	; (800aa94 <xTaskResumeAll+0x118>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d162      	bne.n	800aa84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9be:	4b36      	ldr	r3, [pc, #216]	; (800aa98 <xTaskResumeAll+0x11c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d05e      	beq.n	800aa84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c6:	e02f      	b.n	800aa28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c8:	4b34      	ldr	r3, [pc, #208]	; (800aa9c <xTaskResumeAll+0x120>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	3318      	adds	r3, #24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff f84b 	bl	8009a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff f846 	bl	8009a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4b2d      	ldr	r3, [pc, #180]	; (800aaa0 <xTaskResumeAll+0x124>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d903      	bls.n	800a9f8 <xTaskResumeAll+0x7c>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	4a2a      	ldr	r2, [pc, #168]	; (800aaa0 <xTaskResumeAll+0x124>)
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4a27      	ldr	r2, [pc, #156]	; (800aaa4 <xTaskResumeAll+0x128>)
 800aa06:	441a      	add	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f7fe ffd1 	bl	80099b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa18:	4b23      	ldr	r3, [pc, #140]	; (800aaa8 <xTaskResumeAll+0x12c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d302      	bcc.n	800aa28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa22:	4b22      	ldr	r3, [pc, #136]	; (800aaac <xTaskResumeAll+0x130>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa28:	4b1c      	ldr	r3, [pc, #112]	; (800aa9c <xTaskResumeAll+0x120>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1cb      	bne.n	800a9c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa36:	f000 fb5f 	bl	800b0f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa3a:	4b1d      	ldr	r3, [pc, #116]	; (800aab0 <xTaskResumeAll+0x134>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d010      	beq.n	800aa68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa46:	f000 f847 	bl	800aad8 <xTaskIncrementTick>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa50:	4b16      	ldr	r3, [pc, #88]	; (800aaac <xTaskResumeAll+0x130>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f1      	bne.n	800aa46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa62:	4b13      	ldr	r3, [pc, #76]	; (800aab0 <xTaskResumeAll+0x134>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa68:	4b10      	ldr	r3, [pc, #64]	; (800aaac <xTaskResumeAll+0x130>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa70:	2301      	movs	r3, #1
 800aa72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa74:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <xTaskResumeAll+0x138>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa84:	f001 f8e6 	bl	800bc54 <vPortExitCritical>

	return xAlreadyYielded;
 800aa88:	68bb      	ldr	r3, [r7, #8]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	240033c0 	.word	0x240033c0
 800aa98:	24003398 	.word	0x24003398
 800aa9c:	24003358 	.word	0x24003358
 800aaa0:	240033a0 	.word	0x240033a0
 800aaa4:	24002ec8 	.word	0x24002ec8
 800aaa8:	24002ec4 	.word	0x24002ec4
 800aaac:	240033ac 	.word	0x240033ac
 800aab0:	240033a8 	.word	0x240033a8
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <xTaskGetTickCount+0x1c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aac4:	687b      	ldr	r3, [r7, #4]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	2400339c 	.word	0x2400339c

0800aad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae2:	4b4f      	ldr	r3, [pc, #316]	; (800ac20 <xTaskIncrementTick+0x148>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 808f 	bne.w	800ac0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaec:	4b4d      	ldr	r3, [pc, #308]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aaf4:	4a4b      	ldr	r2, [pc, #300]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d120      	bne.n	800ab42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab00:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	603b      	str	r3, [r7, #0]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xTaskIncrementTick+0x46>
 800ab20:	4b41      	ldr	r3, [pc, #260]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	4b41      	ldr	r3, [pc, #260]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	4a3f      	ldr	r2, [pc, #252]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	4a3d      	ldr	r2, [pc, #244]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	f000 fadb 	bl	800b0f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab42:	4b3c      	ldr	r3, [pc, #240]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d349      	bcc.n	800abe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab4c:	4b36      	ldr	r3, [pc, #216]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab56:	4b37      	ldr	r3, [pc, #220]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab58:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5c:	601a      	str	r2, [r3, #0]
					break;
 800ab5e:	e03f      	b.n	800abe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab60:	4b31      	ldr	r3, [pc, #196]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d203      	bcs.n	800ab80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab78:	4a2e      	ldr	r2, [pc, #184]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab7e:	e02f      	b.n	800abe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe ff73 	bl	8009a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3318      	adds	r3, #24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe ff6a 	bl	8009a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <xTaskIncrementTick+0x160>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d903      	bls.n	800abb0 <xTaskIncrementTick+0xd8>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <xTaskIncrementTick+0x160>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abbe:	441a      	add	r2, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fe fef5 	bl	80099b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	4b1b      	ldr	r3, [pc, #108]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d3b8      	bcc.n	800ab4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abde:	e7b5      	b.n	800ab4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe6:	4915      	ldr	r1, [pc, #84]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d901      	bls.n	800abfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <xTaskIncrementTick+0x16c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac04:	2301      	movs	r3, #1
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	e004      	b.n	800ac14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <xTaskIncrementTick+0x170>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <xTaskIncrementTick+0x170>)
 800ac12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac14:	697b      	ldr	r3, [r7, #20]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	240033c0 	.word	0x240033c0
 800ac24:	2400339c 	.word	0x2400339c
 800ac28:	24003350 	.word	0x24003350
 800ac2c:	24003354 	.word	0x24003354
 800ac30:	240033b0 	.word	0x240033b0
 800ac34:	240033b8 	.word	0x240033b8
 800ac38:	240033a0 	.word	0x240033a0
 800ac3c:	24002ec8 	.word	0x24002ec8
 800ac40:	24002ec4 	.word	0x24002ec4
 800ac44:	240033ac 	.word	0x240033ac
 800ac48:	240033a8 	.word	0x240033a8

0800ac4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac52:	4b2a      	ldr	r3, [pc, #168]	; (800acfc <vTaskSwitchContext+0xb0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac60:	e046      	b.n	800acf0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac62:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac68:	4b26      	ldr	r3, [pc, #152]	; (800ad04 <vTaskSwitchContext+0xb8>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	e010      	b.n	800ac92 <vTaskSwitchContext+0x46>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <vTaskSwitchContext+0x40>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	607b      	str	r3, [r7, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <vTaskSwitchContext+0x3e>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	491d      	ldr	r1, [pc, #116]	; (800ad08 <vTaskSwitchContext+0xbc>)
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0e4      	beq.n	800ac70 <vTaskSwitchContext+0x24>
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4a15      	ldr	r2, [pc, #84]	; (800ad08 <vTaskSwitchContext+0xbc>)
 800acb2:	4413      	add	r3, r2
 800acb4:	60bb      	str	r3, [r7, #8]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	605a      	str	r2, [r3, #4]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	3308      	adds	r3, #8
 800acc8:	429a      	cmp	r2, r3
 800acca:	d104      	bne.n	800acd6 <vTaskSwitchContext+0x8a>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <vTaskSwitchContext+0xc0>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <vTaskSwitchContext+0xb8>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <vTaskSwitchContext+0xc0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3354      	adds	r3, #84	; 0x54
 800acec:	4a08      	ldr	r2, [pc, #32]	; (800ad10 <vTaskSwitchContext+0xc4>)
 800acee:	6013      	str	r3, [r2, #0]
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	240033c0 	.word	0x240033c0
 800ad00:	240033ac 	.word	0x240033ac
 800ad04:	240033a0 	.word	0x240033a0
 800ad08:	24002ec8 	.word	0x24002ec8
 800ad0c:	24002ec4 	.word	0x24002ec4
 800ad10:	24000014 	.word	0x24000014

0800ad14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	60fb      	str	r3, [r7, #12]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <vTaskPlaceOnEventList+0x44>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3318      	adds	r3, #24
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fe fe5b 	bl	80099fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad48:	2101      	movs	r1, #1
 800ad4a:	6838      	ldr	r0, [r7, #0]
 800ad4c:	f000 fa80 	bl	800b250 <prvAddCurrentTaskToDelayedList>
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	24002ec4 	.word	0x24002ec4

0800ad5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	617b      	str	r3, [r7, #20]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad84:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3318      	adds	r3, #24
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7fe fe12 	bl	80099b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f000 fa55 	bl	800b250 <prvAddCurrentTaskToDelayedList>
	}
 800ada6:	bf00      	nop
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	24002ec4 	.word	0x24002ec4

0800adb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60fb      	str	r3, [r7, #12]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3318      	adds	r3, #24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fe43 	bl	8009a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adea:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <xTaskRemoveFromEventList+0xb0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d11d      	bne.n	800ae2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fe3a 	bl	8009a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae00:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <xTaskRemoveFromEventList+0xb4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d903      	bls.n	800ae10 <xTaskRemoveFromEventList+0x5c>
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	4a16      	ldr	r2, [pc, #88]	; (800ae68 <xTaskRemoveFromEventList+0xb4>)
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4a13      	ldr	r2, [pc, #76]	; (800ae6c <xTaskRemoveFromEventList+0xb8>)
 800ae1e:	441a      	add	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	3304      	adds	r3, #4
 800ae24:	4619      	mov	r1, r3
 800ae26:	4610      	mov	r0, r2
 800ae28:	f7fe fdc5 	bl	80099b6 <vListInsertEnd>
 800ae2c:	e005      	b.n	800ae3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	3318      	adds	r3, #24
 800ae32:	4619      	mov	r1, r3
 800ae34:	480e      	ldr	r0, [pc, #56]	; (800ae70 <xTaskRemoveFromEventList+0xbc>)
 800ae36:	f7fe fdbe 	bl	80099b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <xTaskRemoveFromEventList+0xc0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d905      	bls.n	800ae54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <xTaskRemoveFromEventList+0xc4>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	e001      	b.n	800ae58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae58:	697b      	ldr	r3, [r7, #20]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	240033c0 	.word	0x240033c0
 800ae68:	240033a0 	.word	0x240033a0
 800ae6c:	24002ec8 	.word	0x24002ec8
 800ae70:	24003358 	.word	0x24003358
 800ae74:	24002ec4 	.word	0x24002ec4
 800ae78:	240033ac 	.word	0x240033ac

0800ae7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <vTaskInternalSetTimeOutState+0x24>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <vTaskInternalSetTimeOutState+0x28>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	605a      	str	r2, [r3, #4]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	240033b0 	.word	0x240033b0
 800aea4:	2400339c 	.word	0x2400339c

0800aea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	613b      	str	r3, [r7, #16]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10a      	bne.n	800aeea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60fb      	str	r3, [r7, #12]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aeea:	f000 fe83 	bl	800bbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeee:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <xTaskCheckForTimeOut+0xbc>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d102      	bne.n	800af0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
 800af0c:	e023      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <xTaskCheckForTimeOut+0xc0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d007      	beq.n	800af2a <xTaskCheckForTimeOut+0x82>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	d302      	bcc.n	800af2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e015      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	d20b      	bcs.n	800af4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	1ad2      	subs	r2, r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ff9b 	bl	800ae7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	e004      	b.n	800af56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af52:	2301      	movs	r3, #1
 800af54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af56:	f000 fe7d 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	2400339c 	.word	0x2400339c
 800af68:	240033b0 	.word	0x240033b0

0800af6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <vTaskMissedYield+0x14>)
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	240033ac 	.word	0x240033ac

0800af84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af8c:	f000 f852 	bl	800b034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af90:	4b06      	ldr	r3, [pc, #24]	; (800afac <prvIdleTask+0x28>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d9f9      	bls.n	800af8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <prvIdleTask+0x2c>)
 800af9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afa8:	e7f0      	b.n	800af8c <prvIdleTask+0x8>
 800afaa:	bf00      	nop
 800afac:	24002ec8 	.word	0x24002ec8
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afba:	2300      	movs	r3, #0
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	e00c      	b.n	800afda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4a12      	ldr	r2, [pc, #72]	; (800b014 <prvInitialiseTaskLists+0x60>)
 800afcc:	4413      	add	r3, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fcc4 	bl	800995c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3301      	adds	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b37      	cmp	r3, #55	; 0x37
 800afde:	d9ef      	bls.n	800afc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe0:	480d      	ldr	r0, [pc, #52]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800afe2:	f7fe fcbb 	bl	800995c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afe6:	480d      	ldr	r0, [pc, #52]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800afe8:	f7fe fcb8 	bl	800995c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afec:	480c      	ldr	r0, [pc, #48]	; (800b020 <prvInitialiseTaskLists+0x6c>)
 800afee:	f7fe fcb5 	bl	800995c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aff2:	480c      	ldr	r0, [pc, #48]	; (800b024 <prvInitialiseTaskLists+0x70>)
 800aff4:	f7fe fcb2 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aff8:	480b      	ldr	r0, [pc, #44]	; (800b028 <prvInitialiseTaskLists+0x74>)
 800affa:	f7fe fcaf 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <prvInitialiseTaskLists+0x78>)
 800b000:	4a05      	ldr	r2, [pc, #20]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800b002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <prvInitialiseTaskLists+0x7c>)
 800b006:	4a05      	ldr	r2, [pc, #20]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	24002ec8 	.word	0x24002ec8
 800b018:	24003328 	.word	0x24003328
 800b01c:	2400333c 	.word	0x2400333c
 800b020:	24003358 	.word	0x24003358
 800b024:	2400336c 	.word	0x2400336c
 800b028:	24003384 	.word	0x24003384
 800b02c:	24003350 	.word	0x24003350
 800b030:	24003354 	.word	0x24003354

0800b034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b03a:	e019      	b.n	800b070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b03c:	f000 fdda 	bl	800bbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <prvCheckTasksWaitingTermination+0x50>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fd0f 	bl	8009a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3b01      	subs	r3, #1
 800b058:	4a0b      	ldr	r2, [pc, #44]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b05a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b05c:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3b01      	subs	r3, #1
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b066:	f000 fdf5 	bl	800bc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f810 	bl	800b090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b070:	4b06      	ldr	r3, [pc, #24]	; (800b08c <prvCheckTasksWaitingTermination+0x58>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e1      	bne.n	800b03c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	2400336c 	.word	0x2400336c
 800b088:	24003398 	.word	0x24003398
 800b08c:	24003380 	.word	0x24003380

0800b090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3354      	adds	r3, #84	; 0x54
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 f999 	bl	800c3d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d108      	bne.n	800b0be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 ff8d 	bl	800bfd0 <vPortFree>
				vPortFree( pxTCB );
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 ff8a 	bl	800bfd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0bc:	e018      	b.n	800b0f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d103      	bne.n	800b0d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 ff81 	bl	800bfd0 <vPortFree>
	}
 800b0ce:	e00f      	b.n	800b0f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d00a      	beq.n	800b0f0 <prvDeleteTCB+0x60>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	60fb      	str	r3, [r7, #12]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <prvDeleteTCB+0x5e>
	}
 800b0f0:	bf00      	nop
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b108:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295
 800b10e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b110:	e008      	b.n	800b124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4a04      	ldr	r2, [pc, #16]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b122:	6013      	str	r3, [r2, #0]
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	24003350 	.word	0x24003350
 800b134:	240033b8 	.word	0x240033b8

0800b138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <xTaskGetSchedulerState+0x34>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d102      	bne.n	800b14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b146:	2301      	movs	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	e008      	b.n	800b15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14c:	4b08      	ldr	r3, [pc, #32]	; (800b170 <xTaskGetSchedulerState+0x38>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b154:	2302      	movs	r3, #2
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	e001      	b.n	800b15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b15a:	2300      	movs	r3, #0
 800b15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b15e:	687b      	ldr	r3, [r7, #4]
	}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	240033a4 	.word	0x240033a4
 800b170:	240033c0 	.word	0x240033c0

0800b174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d056      	beq.n	800b238 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b18a:	4b2e      	ldr	r3, [pc, #184]	; (800b244 <xTaskPriorityDisinherit+0xd0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	d00a      	beq.n	800b1aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	60fb      	str	r3, [r7, #12]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60bb      	str	r3, [r7, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	1e5a      	subs	r2, r3, #1
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d02c      	beq.n	800b238 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d128      	bne.n	800b238 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fc40 	bl	8009a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <xTaskPriorityDisinherit+0xd4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d903      	bls.n	800b218 <xTaskPriorityDisinherit+0xa4>
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <xTaskPriorityDisinherit+0xd4>)
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4a09      	ldr	r2, [pc, #36]	; (800b24c <xTaskPriorityDisinherit+0xd8>)
 800b226:	441a      	add	r2, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f7fe fbc1 	bl	80099b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b238:	697b      	ldr	r3, [r7, #20]
	}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	24002ec4 	.word	0x24002ec4
 800b248:	240033a0 	.word	0x240033a0
 800b24c:	24002ec8 	.word	0x24002ec8

0800b250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b25a:	4b21      	ldr	r3, [pc, #132]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b260:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3304      	adds	r3, #4
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fc02 	bl	8009a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b272:	d10a      	bne.n	800b28a <prvAddCurrentTaskToDelayedList+0x3a>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d007      	beq.n	800b28a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27a:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3304      	adds	r3, #4
 800b280:	4619      	mov	r1, r3
 800b282:	4819      	ldr	r0, [pc, #100]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b284:	f7fe fb97 	bl	80099b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b288:	e026      	b.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4413      	add	r3, r2
 800b290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b292:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d209      	bcs.n	800b2b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a2:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe fba5 	bl	80099fe <vListInsert>
}
 800b2b4:	e010      	b.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b6:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7fe fb9b 	bl	80099fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d202      	bcs.n	800b2d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2d2:	4a08      	ldr	r2, [pc, #32]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6013      	str	r3, [r2, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	2400339c 	.word	0x2400339c
 800b2e4:	24002ec4 	.word	0x24002ec4
 800b2e8:	24003384 	.word	0x24003384
 800b2ec:	24003354 	.word	0x24003354
 800b2f0:	24003350 	.word	0x24003350
 800b2f4:	240033b8 	.word	0x240033b8

0800b2f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b302:	f000 fb07 	bl	800b914 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b306:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <xTimerCreateTimerTask+0x80>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d021      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b316:	1d3a      	adds	r2, r7, #4
 800b318:	f107 0108 	add.w	r1, r7, #8
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe fb01 	bl	8009928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	9202      	str	r2, [sp, #8]
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	2302      	movs	r3, #2
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2300      	movs	r3, #0
 800b336:	460a      	mov	r2, r1
 800b338:	4910      	ldr	r1, [pc, #64]	; (800b37c <xTimerCreateTimerTask+0x84>)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <xTimerCreateTimerTask+0x88>)
 800b33c:	f7ff f8e8 	bl	800a510 <xTaskCreateStatic>
 800b340:	4603      	mov	r3, r0
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b344:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b34e:	2301      	movs	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b36e:	697b      	ldr	r3, [r7, #20]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	240033f4 	.word	0x240033f4
 800b37c:	0800ccc4 	.word	0x0800ccc4
 800b380:	0800b4bd 	.word	0x0800b4bd
 800b384:	240033f8 	.word	0x240033f8

0800b388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b396:	2300      	movs	r3, #0
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	623b      	str	r3, [r7, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3b6:	4b1a      	ldr	r3, [pc, #104]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d02a      	beq.n	800b414 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	dc18      	bgt.n	800b402 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3d0:	f7ff feb2 	bl	800b138 <xTaskGetSchedulerState>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d109      	bne.n	800b3ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3da:	4b11      	ldr	r3, [pc, #68]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f107 0110 	add.w	r1, r7, #16
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e6:	f7fe fcab 	bl	8009d40 <xQueueGenericSend>
 800b3ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b3ec:	e012      	b.n	800b414 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <xTimerGenericCommand+0x98>)
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f107 0110 	add.w	r1, r7, #16
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7fe fca1 	bl	8009d40 <xQueueGenericSend>
 800b3fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b400:	e008      	b.n	800b414 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <xTimerGenericCommand+0x98>)
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	f107 0110 	add.w	r1, r7, #16
 800b40a:	2300      	movs	r3, #0
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	f7fe fd95 	bl	8009f3c <xQueueGenericSendFromISR>
 800b412:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b416:	4618      	mov	r0, r3
 800b418:	3728      	adds	r7, #40	; 0x28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	240033f4 	.word	0x240033f4

0800b424 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42e:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <prvProcessExpiredTimer+0x94>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fb17 	bl	8009a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d022      	beq.n	800b496 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	18d1      	adds	r1, r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	6978      	ldr	r0, [r7, #20]
 800b45e:	f000 f8d1 	bl	800b604 <prvInsertTimerInActiveList>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01f      	beq.n	800b4a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b468:	2300      	movs	r3, #0
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2300      	movs	r3, #0
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	2100      	movs	r1, #0
 800b472:	6978      	ldr	r0, [r7, #20]
 800b474:	f7ff ff88 	bl	800b388 <xTimerGenericCommand>
 800b478:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d113      	bne.n	800b4a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	60fb      	str	r3, [r7, #12]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b49c:	f023 0301 	bic.w	r3, r3, #1
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	6978      	ldr	r0, [r7, #20]
 800b4ae:	4798      	blx	r3
}
 800b4b0:	bf00      	nop
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	240033ec 	.word	0x240033ec

0800b4bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4c4:	f107 0308 	add.w	r3, r7, #8
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 f857 	bl	800b57c <prvGetNextExpireTime>
 800b4ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f803 	bl	800b4e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4da:	f000 f8d5 	bl	800b688 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4de:	e7f1      	b.n	800b4c4 <prvTimerTask+0x8>

0800b4e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4ea:	f7ff fa39 	bl	800a960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f866 	bl	800b5c4 <prvSampleTimeNow>
 800b4f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d130      	bne.n	800b562 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <prvProcessTimerOrBlockTask+0x3c>
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d806      	bhi.n	800b51c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b50e:	f7ff fa35 	bl	800a97c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ff85 	bl	800b424 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b51a:	e024      	b.n	800b566 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d008      	beq.n	800b534 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b522:	4b13      	ldr	r3, [pc, #76]	; (800b570 <prvProcessTimerOrBlockTask+0x90>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <prvProcessTimerOrBlockTask+0x50>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e000      	b.n	800b532 <prvProcessTimerOrBlockTask+0x52>
 800b530:	2300      	movs	r3, #0
 800b532:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <prvProcessTimerOrBlockTask+0x94>)
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	f7fe ffb1 	bl	800a4a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b546:	f7ff fa19 	bl	800a97c <xTaskResumeAll>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b550:	4b09      	ldr	r3, [pc, #36]	; (800b578 <prvProcessTimerOrBlockTask+0x98>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
}
 800b560:	e001      	b.n	800b566 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b562:	f7ff fa0b 	bl	800a97c <xTaskResumeAll>
}
 800b566:	bf00      	nop
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	240033f0 	.word	0x240033f0
 800b574:	240033f4 	.word	0x240033f4
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b584:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <prvGetNextExpireTime+0x44>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <prvGetNextExpireTime+0x16>
 800b58e:	2201      	movs	r2, #1
 800b590:	e000      	b.n	800b594 <prvGetNextExpireTime+0x18>
 800b592:	2200      	movs	r2, #0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d105      	bne.n	800b5ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5a0:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <prvGetNextExpireTime+0x44>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	e001      	b.n	800b5b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	240033ec 	.word	0x240033ec

0800b5c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5cc:	f7ff fa74 	bl	800aab8 <xTaskGetTickCount>
 800b5d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5d2:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <prvSampleTimeNow+0x3c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d205      	bcs.n	800b5e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5dc:	f000 f936 	bl	800b84c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	e002      	b.n	800b5ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5ee:	4a04      	ldr	r2, [pc, #16]	; (800b600 <prvSampleTimeNow+0x3c>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	240033fc 	.word	0x240033fc

0800b604 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
 800b610:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	429a      	cmp	r2, r3
 800b628:	d812      	bhi.n	800b650 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	429a      	cmp	r2, r3
 800b636:	d302      	bcc.n	800b63e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	e01b      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b63e:	4b10      	ldr	r3, [pc, #64]	; (800b680 <prvInsertTimerInActiveList+0x7c>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3304      	adds	r3, #4
 800b646:	4619      	mov	r1, r3
 800b648:	4610      	mov	r0, r2
 800b64a:	f7fe f9d8 	bl	80099fe <vListInsert>
 800b64e:	e012      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d206      	bcs.n	800b666 <prvInsertTimerInActiveList+0x62>
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d302      	bcc.n	800b666 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b660:	2301      	movs	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	e007      	b.n	800b676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b666:	4b07      	ldr	r3, [pc, #28]	; (800b684 <prvInsertTimerInActiveList+0x80>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4619      	mov	r1, r3
 800b670:	4610      	mov	r0, r2
 800b672:	f7fe f9c4 	bl	80099fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b676:	697b      	ldr	r3, [r7, #20]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	240033f0 	.word	0x240033f0
 800b684:	240033ec 	.word	0x240033ec

0800b688 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08e      	sub	sp, #56	; 0x38
 800b68c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b68e:	e0ca      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	da18      	bge.n	800b6c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b696:	1d3b      	adds	r3, r7, #4
 800b698:	3304      	adds	r3, #4
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	61fb      	str	r3, [r7, #28]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6be:	6850      	ldr	r0, [r2, #4]
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	6892      	ldr	r2, [r2, #8]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f2c0 80aa 	blt.w	800b824 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	3304      	adds	r3, #4
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe f9c5 	bl	8009a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff ff6b 	bl	800b5c4 <prvSampleTimeNow>
 800b6ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	f200 8097 	bhi.w	800b826 <prvProcessReceivedCommands+0x19e>
 800b6f8:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <prvProcessReceivedCommands+0x78>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b729 	.word	0x0800b729
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b729 	.word	0x0800b729
 800b70c:	0800b79d 	.word	0x0800b79d
 800b710:	0800b7b1 	.word	0x0800b7b1
 800b714:	0800b7fb 	.word	0x0800b7fb
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b729 	.word	0x0800b729
 800b720:	0800b79d 	.word	0x0800b79d
 800b724:	0800b7b1 	.word	0x0800b7b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	b2da      	uxtb	r2, r3
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	18d1      	adds	r1, r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b748:	f7ff ff5c 	bl	800b604 <prvInsertTimerInActiveList>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d069      	beq.n	800b826 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b758:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d05e      	beq.n	800b826 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	441a      	add	r2, r3
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	2100      	movs	r1, #0
 800b778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77a:	f7ff fe05 	bl	800b388 <xTimerGenericCommand>
 800b77e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d14f      	bne.n	800b826 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	61bb      	str	r3, [r7, #24]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a2:	f023 0301 	bic.w	r3, r3, #1
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7ae:	e03a      	b.n	800b826 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	617b      	str	r3, [r7, #20]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	18d1      	adds	r1, r2, r3
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f4:	f7ff ff06 	bl	800b604 <prvInsertTimerInActiveList>
					break;
 800b7f8:	e015      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80a:	f000 fbe1 	bl	800bfd0 <vPortFree>
 800b80e:	e00a      	b.n	800b826 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b816:	f023 0301 	bic.w	r3, r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b822:	e000      	b.n	800b826 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b824:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <prvProcessReceivedCommands+0x1c0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	1d39      	adds	r1, r7, #4
 800b82c:	2200      	movs	r2, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fc20 	bl	800a074 <xQueueReceive>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	f47f af2a 	bne.w	800b690 <prvProcessReceivedCommands+0x8>
	}
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	3730      	adds	r7, #48	; 0x30
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	240033f4 	.word	0x240033f4

0800b84c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b852:	e048      	b.n	800b8e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b854:	4b2d      	ldr	r3, [pc, #180]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b85e:	4b2b      	ldr	r3, [pc, #172]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe f8ff 	bl	8009a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d02e      	beq.n	800b8e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4413      	add	r3, r2
 800b890:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d90e      	bls.n	800b8b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8a6:	4b19      	ldr	r3, [pc, #100]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fe f8a4 	bl	80099fe <vListInsert>
 800b8b6:	e016      	b.n	800b8e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fd60 	bl	800b388 <xTimerGenericCommand>
 800b8c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	603b      	str	r3, [r7, #0]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8e6:	4b09      	ldr	r3, [pc, #36]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1b1      	bne.n	800b854 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8f0:	4b06      	ldr	r3, [pc, #24]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8f6:	4b06      	ldr	r3, [pc, #24]	; (800b910 <prvSwitchTimerLists+0xc4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a04      	ldr	r2, [pc, #16]	; (800b90c <prvSwitchTimerLists+0xc0>)
 800b8fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8fe:	4a04      	ldr	r2, [pc, #16]	; (800b910 <prvSwitchTimerLists+0xc4>)
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	6013      	str	r3, [r2, #0]
}
 800b904:	bf00      	nop
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	240033ec 	.word	0x240033ec
 800b910:	240033f0 	.word	0x240033f0

0800b914 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b91a:	f000 f96b 	bl	800bbf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b91e:	4b15      	ldr	r3, [pc, #84]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d120      	bne.n	800b968 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b926:	4814      	ldr	r0, [pc, #80]	; (800b978 <prvCheckForValidListAndQueue+0x64>)
 800b928:	f7fe f818 	bl	800995c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b92c:	4813      	ldr	r0, [pc, #76]	; (800b97c <prvCheckForValidListAndQueue+0x68>)
 800b92e:	f7fe f815 	bl	800995c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b932:	4b13      	ldr	r3, [pc, #76]	; (800b980 <prvCheckForValidListAndQueue+0x6c>)
 800b934:	4a10      	ldr	r2, [pc, #64]	; (800b978 <prvCheckForValidListAndQueue+0x64>)
 800b936:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <prvCheckForValidListAndQueue+0x70>)
 800b93a:	4a10      	ldr	r2, [pc, #64]	; (800b97c <prvCheckForValidListAndQueue+0x68>)
 800b93c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b93e:	2300      	movs	r3, #0
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <prvCheckForValidListAndQueue+0x74>)
 800b944:	4a11      	ldr	r2, [pc, #68]	; (800b98c <prvCheckForValidListAndQueue+0x78>)
 800b946:	2110      	movs	r1, #16
 800b948:	200a      	movs	r0, #10
 800b94a:	f7fe f923 	bl	8009b94 <xQueueGenericCreateStatic>
 800b94e:	4603      	mov	r3, r0
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b952:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b954:	4b07      	ldr	r3, [pc, #28]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <prvCheckForValidListAndQueue+0x60>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	490b      	ldr	r1, [pc, #44]	; (800b990 <prvCheckForValidListAndQueue+0x7c>)
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe fd76 	bl	800a454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b968:	f000 f974 	bl	800bc54 <vPortExitCritical>
}
 800b96c:	bf00      	nop
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	240033f4 	.word	0x240033f4
 800b978:	240033c4 	.word	0x240033c4
 800b97c:	240033d8 	.word	0x240033d8
 800b980:	240033ec 	.word	0x240033ec
 800b984:	240033f0 	.word	0x240033f0
 800b988:	240034a0 	.word	0x240034a0
 800b98c:	24003400 	.word	0x24003400
 800b990:	0800cccc 	.word	0x0800cccc

0800b994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3b04      	subs	r3, #4
 800b9a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f023 0201 	bic.w	r2, r3, #1
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3b04      	subs	r3, #4
 800b9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9c4:	4a0c      	ldr	r2, [pc, #48]	; (800b9f8 <pxPortInitialiseStack+0x64>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3b14      	subs	r3, #20
 800b9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3b04      	subs	r3, #4
 800b9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f06f 0202 	mvn.w	r2, #2
 800b9e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3b20      	subs	r3, #32
 800b9e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	0800b9fd 	.word	0x0800b9fd

0800b9fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba06:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <prvTaskExitError+0x54>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d00a      	beq.n	800ba26 <prvTaskExitError+0x2a>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	60fb      	str	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <prvTaskExitError+0x28>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
}
 800ba38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba3a:	bf00      	nop
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0fc      	beq.n	800ba3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	24000010 	.word	0x24000010
	...

0800ba60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <pxCurrentTCBConst2>)
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f380 8809 	msr	PSP, r0
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst2>:
 800ba80:	24002ec4 	.word	0x24002ec4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	bf00      	nop
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bab6:	4b46      	ldr	r3, [pc, #280]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <xPortStartScheduler+0x124>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10a      	bne.n	800bad6 <xPortStartScheduler+0x26>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad6:	4b3e      	ldr	r3, [pc, #248]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a3f      	ldr	r2, [pc, #252]	; (800bbd8 <xPortStartScheduler+0x128>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d10a      	bne.n	800baf6 <xPortStartScheduler+0x46>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baf6:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xPortStartScheduler+0x12c>)
 800baf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <xPortStartScheduler+0x130>)
 800bb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb1e:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb24:	e009      	b.n	800bb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb26:	4b2f      	ldr	r3, [pc, #188]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4a2d      	ldr	r2, [pc, #180]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d0ef      	beq.n	800bb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f1c3 0307 	rsb	r3, r3, #7
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d00a      	beq.n	800bb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60bb      	str	r3, [r7, #8]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb68:	4b1e      	ldr	r3, [pc, #120]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb72:	4b1c      	ldr	r3, [pc, #112]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb7a:	4a1a      	ldr	r2, [pc, #104]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb9e:	f000 f8dd 	bl	800bd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <xPortStartScheduler+0x13c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bba8:	f000 f8fc 	bl	800bda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0f      	ldr	r2, [pc, #60]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbb8:	f7ff ff66 	bl	800ba88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbbc:	f7ff f846 	bl	800ac4c <vTaskSwitchContext>
	prvTaskExitError();
 800bbc0:	f7ff ff1c 	bl	800b9fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed00 	.word	0xe000ed00
 800bbd4:	410fc271 	.word	0x410fc271
 800bbd8:	410fc270 	.word	0x410fc270
 800bbdc:	e000e400 	.word	0xe000e400
 800bbe0:	240034f0 	.word	0x240034f0
 800bbe4:	240034f4 	.word	0x240034f4
 800bbe8:	e000ed20 	.word	0xe000ed20
 800bbec:	24000010 	.word	0x24000010
 800bbf0:	e000ef34 	.word	0xe000ef34

0800bbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	607b      	str	r3, [r7, #4]
}
 800bc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a0d      	ldr	r2, [pc, #52]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc18:	4b0c      	ldr	r3, [pc, #48]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10f      	bne.n	800bc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <vPortEnterCritical+0x5c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	603b      	str	r3, [r7, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vPortEnterCritical+0x4a>
	}
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	24000010 	.word	0x24000010
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <vPortExitCritical+0x50>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <vPortExitCritical+0x24>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <vPortExitCritical+0x50>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <vPortExitCritical+0x50>)
 800bc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <vPortExitCritical+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <vPortExitCritical+0x42>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f383 8811 	msr	BASEPRI, r3
}
 800bc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	24000010 	.word	0x24000010
	...

0800bcb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcb0:	f3ef 8009 	mrs	r0, PSP
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <pxCurrentTCBConst>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f01e 0f10 	tst.w	lr, #16
 800bcc0:	bf08      	it	eq
 800bcc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f7fe ffb4 	bl	800ac4c <vTaskSwitchContext>
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f380 8811 	msr	BASEPRI, r0
 800bcec:	bc09      	pop	{r0, r3}
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f01e 0f10 	tst.w	lr, #16
 800bcfa:	bf08      	it	eq
 800bcfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd00:	f380 8809 	msr	PSP, r0
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst>:
 800bd10:	24002ec4 	.word	0x24002ec4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd32:	f7fe fed1 	bl	800aad8 <xTaskIncrementTick>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <xPortSysTickHandler+0x40>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
}
 800bd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <vPortSetupTimerInterrupt+0x38>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <vPortSetupTimerInterrupt+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a0a      	ldr	r2, [pc, #40]	; (800bd9c <vPortSetupTimerInterrupt+0x40>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <vPortSetupTimerInterrupt+0x44>)
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd7e:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e010 	.word	0xe000e010
 800bd94:	e000e018 	.word	0xe000e018
 800bd98:	24000000 	.word	0x24000000
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	e000e014 	.word	0xe000e014

0800bda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdb4 <vPortEnableVFP+0x10>
 800bda8:	6801      	ldr	r1, [r0, #0]
 800bdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdae:	6001      	str	r1, [r0, #0]
 800bdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed88 	.word	0xe000ed88

0800bdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdbe:	f3ef 8305 	mrs	r3, IPSR
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d914      	bls.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdca:	4a17      	ldr	r2, [pc, #92]	; (800be28 <vPortValidateInterruptPriority+0x70>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4b15      	ldr	r3, [pc, #84]	; (800be2c <vPortValidateInterruptPriority+0x74>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20a      	bcs.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	; (800be30 <vPortValidateInterruptPriority+0x78>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <vPortValidateInterruptPriority+0x7c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d90a      	bls.n	800be1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	603b      	str	r3, [r7, #0]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <vPortValidateInterruptPriority+0x60>
	}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000e3f0 	.word	0xe000e3f0
 800be2c:	240034f0 	.word	0x240034f0
 800be30:	e000ed0c 	.word	0xe000ed0c
 800be34:	240034f4 	.word	0x240034f4

0800be38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be44:	f7fe fd8c 	bl	800a960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be48:	4b5b      	ldr	r3, [pc, #364]	; (800bfb8 <pvPortMalloc+0x180>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be50:	f000 f920 	bl	800c094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be54:	4b59      	ldr	r3, [pc, #356]	; (800bfbc <pvPortMalloc+0x184>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 8093 	bne.w	800bf88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01d      	beq.n	800bea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be68:	2208      	movs	r2, #8
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f023 0307 	bic.w	r3, r3, #7
 800be80:	3308      	adds	r3, #8
 800be82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <pvPortMalloc+0x6c>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d06e      	beq.n	800bf88 <pvPortMalloc+0x150>
 800beaa:	4b45      	ldr	r3, [pc, #276]	; (800bfc0 <pvPortMalloc+0x188>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d869      	bhi.n	800bf88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beb4:	4b43      	ldr	r3, [pc, #268]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beb8:	4b42      	ldr	r3, [pc, #264]	; (800bfc4 <pvPortMalloc+0x18c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bebe:	e004      	b.n	800beca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d903      	bls.n	800bedc <pvPortMalloc+0xa4>
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bedc:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <pvPortMalloc+0x180>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d050      	beq.n	800bf88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2208      	movs	r2, #8
 800beec:	4413      	add	r3, r2
 800beee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	2308      	movs	r3, #8
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d91f      	bls.n	800bf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <pvPortMalloc+0xf8>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	613b      	str	r3, [r7, #16]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f000 f908 	bl	800c158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf48:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf56:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d203      	bcs.n	800bf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf62:	4b17      	ldr	r3, [pc, #92]	; (800bfc0 <pvPortMalloc+0x188>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a18      	ldr	r2, [pc, #96]	; (800bfc8 <pvPortMalloc+0x190>)
 800bf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <pvPortMalloc+0x184>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <pvPortMalloc+0x194>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <pvPortMalloc+0x194>)
 800bf86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf88:	f7fe fcf8 	bl	800a97c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <pvPortMalloc+0x174>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60fb      	str	r3, [r7, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <pvPortMalloc+0x172>
	return pvReturn;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3728      	adds	r7, #40	; 0x28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	24007100 	.word	0x24007100
 800bfbc:	24007114 	.word	0x24007114
 800bfc0:	24007104 	.word	0x24007104
 800bfc4:	240070f8 	.word	0x240070f8
 800bfc8:	24007108 	.word	0x24007108
 800bfcc:	2400710c 	.word	0x2400710c

0800bfd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d04d      	beq.n	800c07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	4b24      	ldr	r3, [pc, #144]	; (800c088 <vPortFree+0xb8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4013      	ands	r3, r2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <vPortFree+0x44>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60fb      	str	r3, [r7, #12]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <vPortFree+0x62>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60bb      	str	r3, [r7, #8]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	4b14      	ldr	r3, [pc, #80]	; (800c088 <vPortFree+0xb8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d01e      	beq.n	800c07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11a      	bne.n	800c07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <vPortFree+0xb8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	43db      	mvns	r3, r3
 800c052:	401a      	ands	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c058:	f7fe fc82 	bl	800a960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <vPortFree+0xbc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4413      	add	r3, r2
 800c066:	4a09      	ldr	r2, [pc, #36]	; (800c08c <vPortFree+0xbc>)
 800c068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f000 f874 	bl	800c158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <vPortFree+0xc0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3301      	adds	r3, #1
 800c076:	4a06      	ldr	r2, [pc, #24]	; (800c090 <vPortFree+0xc0>)
 800c078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c07a:	f7fe fc7f 	bl	800a97c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c07e:	bf00      	nop
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	24007114 	.word	0x24007114
 800c08c:	24007104 	.word	0x24007104
 800c090:	24007110 	.word	0x24007110

0800c094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a0:	4b27      	ldr	r3, [pc, #156]	; (800c140 <prvHeapInit+0xac>)
 800c0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0307 	bic.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <prvHeapInit+0xac>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0cc:	4a1d      	ldr	r2, [pc, #116]	; (800c144 <prvHeapInit+0xb0>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0d2:	4b1c      	ldr	r3, [pc, #112]	; (800c144 <prvHeapInit+0xb0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0307 	bic.w	r3, r3, #7
 800c0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <prvHeapInit+0xb4>)
 800c0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <prvHeapInit+0xb4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <prvHeapInit+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <prvHeapInit+0xb4>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvHeapInit+0xb8>)
 800c122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a09      	ldr	r2, [pc, #36]	; (800c150 <prvHeapInit+0xbc>)
 800c12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <prvHeapInit+0xc0>)
 800c12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c132:	601a      	str	r2, [r3, #0]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	240034f8 	.word	0x240034f8
 800c144:	240070f8 	.word	0x240070f8
 800c148:	24007100 	.word	0x24007100
 800c14c:	24007108 	.word	0x24007108
 800c150:	24007104 	.word	0x24007104
 800c154:	24007114 	.word	0x24007114

0800c158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c160:	4b28      	ldr	r3, [pc, #160]	; (800c204 <prvInsertBlockIntoFreeList+0xac>)
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	e002      	b.n	800c16c <prvInsertBlockIntoFreeList+0x14>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	429a      	cmp	r2, r3
 800c174:	d8f7      	bhi.n	800c166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	4413      	add	r3, r2
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	429a      	cmp	r2, r3
 800c186:	d108      	bne.n	800c19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d118      	bne.n	800c1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d00d      	beq.n	800c1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	441a      	add	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	e008      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e003      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d002      	beq.n	800c1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	240070f8 	.word	0x240070f8
 800c208:	24007100 	.word	0x24007100

0800c20c <__errno>:
 800c20c:	4b01      	ldr	r3, [pc, #4]	; (800c214 <__errno+0x8>)
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	24000014 	.word	0x24000014

0800c218 <__libc_init_array>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4d0d      	ldr	r5, [pc, #52]	; (800c250 <__libc_init_array+0x38>)
 800c21c:	4c0d      	ldr	r4, [pc, #52]	; (800c254 <__libc_init_array+0x3c>)
 800c21e:	1b64      	subs	r4, r4, r5
 800c220:	10a4      	asrs	r4, r4, #2
 800c222:	2600      	movs	r6, #0
 800c224:	42a6      	cmp	r6, r4
 800c226:	d109      	bne.n	800c23c <__libc_init_array+0x24>
 800c228:	4d0b      	ldr	r5, [pc, #44]	; (800c258 <__libc_init_array+0x40>)
 800c22a:	4c0c      	ldr	r4, [pc, #48]	; (800c25c <__libc_init_array+0x44>)
 800c22c:	f000 fd12 	bl	800cc54 <_init>
 800c230:	1b64      	subs	r4, r4, r5
 800c232:	10a4      	asrs	r4, r4, #2
 800c234:	2600      	movs	r6, #0
 800c236:	42a6      	cmp	r6, r4
 800c238:	d105      	bne.n	800c246 <__libc_init_array+0x2e>
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c240:	4798      	blx	r3
 800c242:	3601      	adds	r6, #1
 800c244:	e7ee      	b.n	800c224 <__libc_init_array+0xc>
 800c246:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24a:	4798      	blx	r3
 800c24c:	3601      	adds	r6, #1
 800c24e:	e7f2      	b.n	800c236 <__libc_init_array+0x1e>
 800c250:	0800ce34 	.word	0x0800ce34
 800c254:	0800ce34 	.word	0x0800ce34
 800c258:	0800ce34 	.word	0x0800ce34
 800c25c:	0800ce38 	.word	0x0800ce38

0800c260 <__retarget_lock_acquire_recursive>:
 800c260:	4770      	bx	lr

0800c262 <__retarget_lock_release_recursive>:
 800c262:	4770      	bx	lr

0800c264 <memcpy>:
 800c264:	440a      	add	r2, r1
 800c266:	4291      	cmp	r1, r2
 800c268:	f100 33ff 	add.w	r3, r0, #4294967295
 800c26c:	d100      	bne.n	800c270 <memcpy+0xc>
 800c26e:	4770      	bx	lr
 800c270:	b510      	push	{r4, lr}
 800c272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c27a:	4291      	cmp	r1, r2
 800c27c:	d1f9      	bne.n	800c272 <memcpy+0xe>
 800c27e:	bd10      	pop	{r4, pc}

0800c280 <memset>:
 800c280:	4402      	add	r2, r0
 800c282:	4603      	mov	r3, r0
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memset+0xa>
 800c288:	4770      	bx	lr
 800c28a:	f803 1b01 	strb.w	r1, [r3], #1
 800c28e:	e7f9      	b.n	800c284 <memset+0x4>

0800c290 <sbrk_aligned>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	4e0e      	ldr	r6, [pc, #56]	; (800c2cc <sbrk_aligned+0x3c>)
 800c294:	460c      	mov	r4, r1
 800c296:	6831      	ldr	r1, [r6, #0]
 800c298:	4605      	mov	r5, r0
 800c29a:	b911      	cbnz	r1, 800c2a2 <sbrk_aligned+0x12>
 800c29c:	f000 f8f6 	bl	800c48c <_sbrk_r>
 800c2a0:	6030      	str	r0, [r6, #0]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f000 f8f1 	bl	800c48c <_sbrk_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d00a      	beq.n	800c2c4 <sbrk_aligned+0x34>
 800c2ae:	1cc4      	adds	r4, r0, #3
 800c2b0:	f024 0403 	bic.w	r4, r4, #3
 800c2b4:	42a0      	cmp	r0, r4
 800c2b6:	d007      	beq.n	800c2c8 <sbrk_aligned+0x38>
 800c2b8:	1a21      	subs	r1, r4, r0
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f000 f8e6 	bl	800c48c <_sbrk_r>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	d101      	bne.n	800c2c8 <sbrk_aligned+0x38>
 800c2c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	24007120 	.word	0x24007120

0800c2d0 <_malloc_r>:
 800c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d4:	1ccd      	adds	r5, r1, #3
 800c2d6:	f025 0503 	bic.w	r5, r5, #3
 800c2da:	3508      	adds	r5, #8
 800c2dc:	2d0c      	cmp	r5, #12
 800c2de:	bf38      	it	cc
 800c2e0:	250c      	movcc	r5, #12
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	db01      	blt.n	800c2ec <_malloc_r+0x1c>
 800c2e8:	42a9      	cmp	r1, r5
 800c2ea:	d905      	bls.n	800c2f8 <_malloc_r+0x28>
 800c2ec:	230c      	movs	r3, #12
 800c2ee:	603b      	str	r3, [r7, #0]
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	4e2e      	ldr	r6, [pc, #184]	; (800c3b4 <_malloc_r+0xe4>)
 800c2fa:	f000 f911 	bl	800c520 <__malloc_lock>
 800c2fe:	6833      	ldr	r3, [r6, #0]
 800c300:	461c      	mov	r4, r3
 800c302:	bb34      	cbnz	r4, 800c352 <_malloc_r+0x82>
 800c304:	4629      	mov	r1, r5
 800c306:	4638      	mov	r0, r7
 800c308:	f7ff ffc2 	bl	800c290 <sbrk_aligned>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	4604      	mov	r4, r0
 800c310:	d14d      	bne.n	800c3ae <_malloc_r+0xde>
 800c312:	6834      	ldr	r4, [r6, #0]
 800c314:	4626      	mov	r6, r4
 800c316:	2e00      	cmp	r6, #0
 800c318:	d140      	bne.n	800c39c <_malloc_r+0xcc>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	4631      	mov	r1, r6
 800c31e:	4638      	mov	r0, r7
 800c320:	eb04 0803 	add.w	r8, r4, r3
 800c324:	f000 f8b2 	bl	800c48c <_sbrk_r>
 800c328:	4580      	cmp	r8, r0
 800c32a:	d13a      	bne.n	800c3a2 <_malloc_r+0xd2>
 800c32c:	6821      	ldr	r1, [r4, #0]
 800c32e:	3503      	adds	r5, #3
 800c330:	1a6d      	subs	r5, r5, r1
 800c332:	f025 0503 	bic.w	r5, r5, #3
 800c336:	3508      	adds	r5, #8
 800c338:	2d0c      	cmp	r5, #12
 800c33a:	bf38      	it	cc
 800c33c:	250c      	movcc	r5, #12
 800c33e:	4629      	mov	r1, r5
 800c340:	4638      	mov	r0, r7
 800c342:	f7ff ffa5 	bl	800c290 <sbrk_aligned>
 800c346:	3001      	adds	r0, #1
 800c348:	d02b      	beq.n	800c3a2 <_malloc_r+0xd2>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	442b      	add	r3, r5
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	e00e      	b.n	800c370 <_malloc_r+0xa0>
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	1b52      	subs	r2, r2, r5
 800c356:	d41e      	bmi.n	800c396 <_malloc_r+0xc6>
 800c358:	2a0b      	cmp	r2, #11
 800c35a:	d916      	bls.n	800c38a <_malloc_r+0xba>
 800c35c:	1961      	adds	r1, r4, r5
 800c35e:	42a3      	cmp	r3, r4
 800c360:	6025      	str	r5, [r4, #0]
 800c362:	bf18      	it	ne
 800c364:	6059      	strne	r1, [r3, #4]
 800c366:	6863      	ldr	r3, [r4, #4]
 800c368:	bf08      	it	eq
 800c36a:	6031      	streq	r1, [r6, #0]
 800c36c:	5162      	str	r2, [r4, r5]
 800c36e:	604b      	str	r3, [r1, #4]
 800c370:	4638      	mov	r0, r7
 800c372:	f104 060b 	add.w	r6, r4, #11
 800c376:	f000 f8d9 	bl	800c52c <__malloc_unlock>
 800c37a:	f026 0607 	bic.w	r6, r6, #7
 800c37e:	1d23      	adds	r3, r4, #4
 800c380:	1af2      	subs	r2, r6, r3
 800c382:	d0b6      	beq.n	800c2f2 <_malloc_r+0x22>
 800c384:	1b9b      	subs	r3, r3, r6
 800c386:	50a3      	str	r3, [r4, r2]
 800c388:	e7b3      	b.n	800c2f2 <_malloc_r+0x22>
 800c38a:	6862      	ldr	r2, [r4, #4]
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	bf0c      	ite	eq
 800c390:	6032      	streq	r2, [r6, #0]
 800c392:	605a      	strne	r2, [r3, #4]
 800c394:	e7ec      	b.n	800c370 <_malloc_r+0xa0>
 800c396:	4623      	mov	r3, r4
 800c398:	6864      	ldr	r4, [r4, #4]
 800c39a:	e7b2      	b.n	800c302 <_malloc_r+0x32>
 800c39c:	4634      	mov	r4, r6
 800c39e:	6876      	ldr	r6, [r6, #4]
 800c3a0:	e7b9      	b.n	800c316 <_malloc_r+0x46>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	603b      	str	r3, [r7, #0]
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f000 f8c0 	bl	800c52c <__malloc_unlock>
 800c3ac:	e7a1      	b.n	800c2f2 <_malloc_r+0x22>
 800c3ae:	6025      	str	r5, [r4, #0]
 800c3b0:	e7de      	b.n	800c370 <_malloc_r+0xa0>
 800c3b2:	bf00      	nop
 800c3b4:	2400711c 	.word	0x2400711c

0800c3b8 <cleanup_glue>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	6809      	ldr	r1, [r1, #0]
 800c3be:	4605      	mov	r5, r0
 800c3c0:	b109      	cbz	r1, 800c3c6 <cleanup_glue+0xe>
 800c3c2:	f7ff fff9 	bl	800c3b8 <cleanup_glue>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ce:	f000 b8b3 	b.w	800c538 <_free_r>
	...

0800c3d4 <_reclaim_reent>:
 800c3d4:	4b2c      	ldr	r3, [pc, #176]	; (800c488 <_reclaim_reent+0xb4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4283      	cmp	r3, r0
 800c3da:	b570      	push	{r4, r5, r6, lr}
 800c3dc:	4604      	mov	r4, r0
 800c3de:	d051      	beq.n	800c484 <_reclaim_reent+0xb0>
 800c3e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3e2:	b143      	cbz	r3, 800c3f6 <_reclaim_reent+0x22>
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d14a      	bne.n	800c480 <_reclaim_reent+0xac>
 800c3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ec:	6819      	ldr	r1, [r3, #0]
 800c3ee:	b111      	cbz	r1, 800c3f6 <_reclaim_reent+0x22>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 f8a1 	bl	800c538 <_free_r>
 800c3f6:	6961      	ldr	r1, [r4, #20]
 800c3f8:	b111      	cbz	r1, 800c400 <_reclaim_reent+0x2c>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f89c 	bl	800c538 <_free_r>
 800c400:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c402:	b111      	cbz	r1, 800c40a <_reclaim_reent+0x36>
 800c404:	4620      	mov	r0, r4
 800c406:	f000 f897 	bl	800c538 <_free_r>
 800c40a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c40c:	b111      	cbz	r1, 800c414 <_reclaim_reent+0x40>
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 f892 	bl	800c538 <_free_r>
 800c414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c416:	b111      	cbz	r1, 800c41e <_reclaim_reent+0x4a>
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 f88d 	bl	800c538 <_free_r>
 800c41e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c420:	b111      	cbz	r1, 800c428 <_reclaim_reent+0x54>
 800c422:	4620      	mov	r0, r4
 800c424:	f000 f888 	bl	800c538 <_free_r>
 800c428:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c42a:	b111      	cbz	r1, 800c432 <_reclaim_reent+0x5e>
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 f883 	bl	800c538 <_free_r>
 800c432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c434:	b111      	cbz	r1, 800c43c <_reclaim_reent+0x68>
 800c436:	4620      	mov	r0, r4
 800c438:	f000 f87e 	bl	800c538 <_free_r>
 800c43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c43e:	b111      	cbz	r1, 800c446 <_reclaim_reent+0x72>
 800c440:	4620      	mov	r0, r4
 800c442:	f000 f879 	bl	800c538 <_free_r>
 800c446:	69a3      	ldr	r3, [r4, #24]
 800c448:	b1e3      	cbz	r3, 800c484 <_reclaim_reent+0xb0>
 800c44a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c44c:	4620      	mov	r0, r4
 800c44e:	4798      	blx	r3
 800c450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c452:	b1b9      	cbz	r1, 800c484 <_reclaim_reent+0xb0>
 800c454:	4620      	mov	r0, r4
 800c456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c45a:	f7ff bfad 	b.w	800c3b8 <cleanup_glue>
 800c45e:	5949      	ldr	r1, [r1, r5]
 800c460:	b941      	cbnz	r1, 800c474 <_reclaim_reent+0xa0>
 800c462:	3504      	adds	r5, #4
 800c464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c466:	2d80      	cmp	r5, #128	; 0x80
 800c468:	68d9      	ldr	r1, [r3, #12]
 800c46a:	d1f8      	bne.n	800c45e <_reclaim_reent+0x8a>
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 f863 	bl	800c538 <_free_r>
 800c472:	e7ba      	b.n	800c3ea <_reclaim_reent+0x16>
 800c474:	680e      	ldr	r6, [r1, #0]
 800c476:	4620      	mov	r0, r4
 800c478:	f000 f85e 	bl	800c538 <_free_r>
 800c47c:	4631      	mov	r1, r6
 800c47e:	e7ef      	b.n	800c460 <_reclaim_reent+0x8c>
 800c480:	2500      	movs	r5, #0
 800c482:	e7ef      	b.n	800c464 <_reclaim_reent+0x90>
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	bf00      	nop
 800c488:	24000014 	.word	0x24000014

0800c48c <_sbrk_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4d06      	ldr	r5, [pc, #24]	; (800c4a8 <_sbrk_r+0x1c>)
 800c490:	2300      	movs	r3, #0
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	602b      	str	r3, [r5, #0]
 800c498:	f7f4 fe3a 	bl	8001110 <_sbrk>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d102      	bne.n	800c4a6 <_sbrk_r+0x1a>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	b103      	cbz	r3, 800c4a6 <_sbrk_r+0x1a>
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	24007124 	.word	0x24007124

0800c4ac <_vsniprintf_r>:
 800c4ac:	b530      	push	{r4, r5, lr}
 800c4ae:	4614      	mov	r4, r2
 800c4b0:	2c00      	cmp	r4, #0
 800c4b2:	b09b      	sub	sp, #108	; 0x6c
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	da05      	bge.n	800c4c6 <_vsniprintf_r+0x1a>
 800c4ba:	238b      	movs	r3, #139	; 0x8b
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c2:	b01b      	add	sp, #108	; 0x6c
 800c4c4:	bd30      	pop	{r4, r5, pc}
 800c4c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c4ce:	bf14      	ite	ne
 800c4d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4d4:	4623      	moveq	r3, r4
 800c4d6:	9302      	str	r3, [sp, #8]
 800c4d8:	9305      	str	r3, [sp, #20]
 800c4da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4de:	9100      	str	r1, [sp, #0]
 800c4e0:	9104      	str	r1, [sp, #16]
 800c4e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c4e6:	4669      	mov	r1, sp
 800c4e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c4ea:	f000 f8cd 	bl	800c688 <_svfiprintf_r>
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	bfbc      	itt	lt
 800c4f2:	238b      	movlt	r3, #139	; 0x8b
 800c4f4:	602b      	strlt	r3, [r5, #0]
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	d0e3      	beq.n	800c4c2 <_vsniprintf_r+0x16>
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e7df      	b.n	800c4c2 <_vsniprintf_r+0x16>
	...

0800c504 <vsniprintf>:
 800c504:	b507      	push	{r0, r1, r2, lr}
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	4613      	mov	r3, r2
 800c50a:	460a      	mov	r2, r1
 800c50c:	4601      	mov	r1, r0
 800c50e:	4803      	ldr	r0, [pc, #12]	; (800c51c <vsniprintf+0x18>)
 800c510:	6800      	ldr	r0, [r0, #0]
 800c512:	f7ff ffcb 	bl	800c4ac <_vsniprintf_r>
 800c516:	b003      	add	sp, #12
 800c518:	f85d fb04 	ldr.w	pc, [sp], #4
 800c51c:	24000014 	.word	0x24000014

0800c520 <__malloc_lock>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__malloc_lock+0x8>)
 800c522:	f7ff be9d 	b.w	800c260 <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	24007118 	.word	0x24007118

0800c52c <__malloc_unlock>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__malloc_unlock+0x8>)
 800c52e:	f7ff be98 	b.w	800c262 <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	24007118 	.word	0x24007118

0800c538 <_free_r>:
 800c538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c53a:	2900      	cmp	r1, #0
 800c53c:	d044      	beq.n	800c5c8 <_free_r+0x90>
 800c53e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c542:	9001      	str	r0, [sp, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	f1a1 0404 	sub.w	r4, r1, #4
 800c54a:	bfb8      	it	lt
 800c54c:	18e4      	addlt	r4, r4, r3
 800c54e:	f7ff ffe7 	bl	800c520 <__malloc_lock>
 800c552:	4a1e      	ldr	r2, [pc, #120]	; (800c5cc <_free_r+0x94>)
 800c554:	9801      	ldr	r0, [sp, #4]
 800c556:	6813      	ldr	r3, [r2, #0]
 800c558:	b933      	cbnz	r3, 800c568 <_free_r+0x30>
 800c55a:	6063      	str	r3, [r4, #4]
 800c55c:	6014      	str	r4, [r2, #0]
 800c55e:	b003      	add	sp, #12
 800c560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c564:	f7ff bfe2 	b.w	800c52c <__malloc_unlock>
 800c568:	42a3      	cmp	r3, r4
 800c56a:	d908      	bls.n	800c57e <_free_r+0x46>
 800c56c:	6825      	ldr	r5, [r4, #0]
 800c56e:	1961      	adds	r1, r4, r5
 800c570:	428b      	cmp	r3, r1
 800c572:	bf01      	itttt	eq
 800c574:	6819      	ldreq	r1, [r3, #0]
 800c576:	685b      	ldreq	r3, [r3, #4]
 800c578:	1949      	addeq	r1, r1, r5
 800c57a:	6021      	streq	r1, [r4, #0]
 800c57c:	e7ed      	b.n	800c55a <_free_r+0x22>
 800c57e:	461a      	mov	r2, r3
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	b10b      	cbz	r3, 800c588 <_free_r+0x50>
 800c584:	42a3      	cmp	r3, r4
 800c586:	d9fa      	bls.n	800c57e <_free_r+0x46>
 800c588:	6811      	ldr	r1, [r2, #0]
 800c58a:	1855      	adds	r5, r2, r1
 800c58c:	42a5      	cmp	r5, r4
 800c58e:	d10b      	bne.n	800c5a8 <_free_r+0x70>
 800c590:	6824      	ldr	r4, [r4, #0]
 800c592:	4421      	add	r1, r4
 800c594:	1854      	adds	r4, r2, r1
 800c596:	42a3      	cmp	r3, r4
 800c598:	6011      	str	r1, [r2, #0]
 800c59a:	d1e0      	bne.n	800c55e <_free_r+0x26>
 800c59c:	681c      	ldr	r4, [r3, #0]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	6053      	str	r3, [r2, #4]
 800c5a2:	4421      	add	r1, r4
 800c5a4:	6011      	str	r1, [r2, #0]
 800c5a6:	e7da      	b.n	800c55e <_free_r+0x26>
 800c5a8:	d902      	bls.n	800c5b0 <_free_r+0x78>
 800c5aa:	230c      	movs	r3, #12
 800c5ac:	6003      	str	r3, [r0, #0]
 800c5ae:	e7d6      	b.n	800c55e <_free_r+0x26>
 800c5b0:	6825      	ldr	r5, [r4, #0]
 800c5b2:	1961      	adds	r1, r4, r5
 800c5b4:	428b      	cmp	r3, r1
 800c5b6:	bf04      	itt	eq
 800c5b8:	6819      	ldreq	r1, [r3, #0]
 800c5ba:	685b      	ldreq	r3, [r3, #4]
 800c5bc:	6063      	str	r3, [r4, #4]
 800c5be:	bf04      	itt	eq
 800c5c0:	1949      	addeq	r1, r1, r5
 800c5c2:	6021      	streq	r1, [r4, #0]
 800c5c4:	6054      	str	r4, [r2, #4]
 800c5c6:	e7ca      	b.n	800c55e <_free_r+0x26>
 800c5c8:	b003      	add	sp, #12
 800c5ca:	bd30      	pop	{r4, r5, pc}
 800c5cc:	2400711c 	.word	0x2400711c

0800c5d0 <__ssputs_r>:
 800c5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d4:	688e      	ldr	r6, [r1, #8]
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	4682      	mov	sl, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4690      	mov	r8, r2
 800c5de:	461f      	mov	r7, r3
 800c5e0:	d838      	bhi.n	800c654 <__ssputs_r+0x84>
 800c5e2:	898a      	ldrh	r2, [r1, #12]
 800c5e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5e8:	d032      	beq.n	800c650 <__ssputs_r+0x80>
 800c5ea:	6825      	ldr	r5, [r4, #0]
 800c5ec:	6909      	ldr	r1, [r1, #16]
 800c5ee:	eba5 0901 	sub.w	r9, r5, r1
 800c5f2:	6965      	ldr	r5, [r4, #20]
 800c5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	444b      	add	r3, r9
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	429d      	cmp	r5, r3
 800c604:	bf38      	it	cc
 800c606:	461d      	movcc	r5, r3
 800c608:	0553      	lsls	r3, r2, #21
 800c60a:	d531      	bpl.n	800c670 <__ssputs_r+0xa0>
 800c60c:	4629      	mov	r1, r5
 800c60e:	f7ff fe5f 	bl	800c2d0 <_malloc_r>
 800c612:	4606      	mov	r6, r0
 800c614:	b950      	cbnz	r0, 800c62c <__ssputs_r+0x5c>
 800c616:	230c      	movs	r3, #12
 800c618:	f8ca 3000 	str.w	r3, [sl]
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	f04f 30ff 	mov.w	r0, #4294967295
 800c628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62c:	6921      	ldr	r1, [r4, #16]
 800c62e:	464a      	mov	r2, r9
 800c630:	f7ff fe18 	bl	800c264 <memcpy>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63e:	81a3      	strh	r3, [r4, #12]
 800c640:	6126      	str	r6, [r4, #16]
 800c642:	6165      	str	r5, [r4, #20]
 800c644:	444e      	add	r6, r9
 800c646:	eba5 0509 	sub.w	r5, r5, r9
 800c64a:	6026      	str	r6, [r4, #0]
 800c64c:	60a5      	str	r5, [r4, #8]
 800c64e:	463e      	mov	r6, r7
 800c650:	42be      	cmp	r6, r7
 800c652:	d900      	bls.n	800c656 <__ssputs_r+0x86>
 800c654:	463e      	mov	r6, r7
 800c656:	6820      	ldr	r0, [r4, #0]
 800c658:	4632      	mov	r2, r6
 800c65a:	4641      	mov	r1, r8
 800c65c:	f000 faa8 	bl	800cbb0 <memmove>
 800c660:	68a3      	ldr	r3, [r4, #8]
 800c662:	1b9b      	subs	r3, r3, r6
 800c664:	60a3      	str	r3, [r4, #8]
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	4433      	add	r3, r6
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	2000      	movs	r0, #0
 800c66e:	e7db      	b.n	800c628 <__ssputs_r+0x58>
 800c670:	462a      	mov	r2, r5
 800c672:	f000 fab7 	bl	800cbe4 <_realloc_r>
 800c676:	4606      	mov	r6, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	d1e1      	bne.n	800c640 <__ssputs_r+0x70>
 800c67c:	6921      	ldr	r1, [r4, #16]
 800c67e:	4650      	mov	r0, sl
 800c680:	f7ff ff5a 	bl	800c538 <_free_r>
 800c684:	e7c7      	b.n	800c616 <__ssputs_r+0x46>
	...

0800c688 <_svfiprintf_r>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	4698      	mov	r8, r3
 800c68e:	898b      	ldrh	r3, [r1, #12]
 800c690:	061b      	lsls	r3, r3, #24
 800c692:	b09d      	sub	sp, #116	; 0x74
 800c694:	4607      	mov	r7, r0
 800c696:	460d      	mov	r5, r1
 800c698:	4614      	mov	r4, r2
 800c69a:	d50e      	bpl.n	800c6ba <_svfiprintf_r+0x32>
 800c69c:	690b      	ldr	r3, [r1, #16]
 800c69e:	b963      	cbnz	r3, 800c6ba <_svfiprintf_r+0x32>
 800c6a0:	2140      	movs	r1, #64	; 0x40
 800c6a2:	f7ff fe15 	bl	800c2d0 <_malloc_r>
 800c6a6:	6028      	str	r0, [r5, #0]
 800c6a8:	6128      	str	r0, [r5, #16]
 800c6aa:	b920      	cbnz	r0, 800c6b6 <_svfiprintf_r+0x2e>
 800c6ac:	230c      	movs	r3, #12
 800c6ae:	603b      	str	r3, [r7, #0]
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b4:	e0d1      	b.n	800c85a <_svfiprintf_r+0x1d2>
 800c6b6:	2340      	movs	r3, #64	; 0x40
 800c6b8:	616b      	str	r3, [r5, #20]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6be:	2320      	movs	r3, #32
 800c6c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c8:	2330      	movs	r3, #48	; 0x30
 800c6ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c874 <_svfiprintf_r+0x1ec>
 800c6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	469a      	mov	sl, r3
 800c6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6de:	b10a      	cbz	r2, 800c6e4 <_svfiprintf_r+0x5c>
 800c6e0:	2a25      	cmp	r2, #37	; 0x25
 800c6e2:	d1f9      	bne.n	800c6d8 <_svfiprintf_r+0x50>
 800c6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e8:	d00b      	beq.n	800c702 <_svfiprintf_r+0x7a>
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff ff6d 	bl	800c5d0 <__ssputs_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f000 80aa 	beq.w	800c850 <_svfiprintf_r+0x1c8>
 800c6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6fe:	445a      	add	r2, fp
 800c700:	9209      	str	r2, [sp, #36]	; 0x24
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 80a2 	beq.w	800c850 <_svfiprintf_r+0x1c8>
 800c70c:	2300      	movs	r3, #0
 800c70e:	f04f 32ff 	mov.w	r2, #4294967295
 800c712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c716:	f10a 0a01 	add.w	sl, sl, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c722:	931a      	str	r3, [sp, #104]	; 0x68
 800c724:	4654      	mov	r4, sl
 800c726:	2205      	movs	r2, #5
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	4851      	ldr	r0, [pc, #324]	; (800c874 <_svfiprintf_r+0x1ec>)
 800c72e:	f7f3 fdd7 	bl	80002e0 <memchr>
 800c732:	9a04      	ldr	r2, [sp, #16]
 800c734:	b9d8      	cbnz	r0, 800c76e <_svfiprintf_r+0xe6>
 800c736:	06d0      	lsls	r0, r2, #27
 800c738:	bf44      	itt	mi
 800c73a:	2320      	movmi	r3, #32
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c740:	0711      	lsls	r1, r2, #28
 800c742:	bf44      	itt	mi
 800c744:	232b      	movmi	r3, #43	; 0x2b
 800c746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b2a      	cmp	r3, #42	; 0x2a
 800c750:	d015      	beq.n	800c77e <_svfiprintf_r+0xf6>
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	4654      	mov	r4, sl
 800c756:	2000      	movs	r0, #0
 800c758:	f04f 0c0a 	mov.w	ip, #10
 800c75c:	4621      	mov	r1, r4
 800c75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c762:	3b30      	subs	r3, #48	; 0x30
 800c764:	2b09      	cmp	r3, #9
 800c766:	d94e      	bls.n	800c806 <_svfiprintf_r+0x17e>
 800c768:	b1b0      	cbz	r0, 800c798 <_svfiprintf_r+0x110>
 800c76a:	9207      	str	r2, [sp, #28]
 800c76c:	e014      	b.n	800c798 <_svfiprintf_r+0x110>
 800c76e:	eba0 0308 	sub.w	r3, r0, r8
 800c772:	fa09 f303 	lsl.w	r3, r9, r3
 800c776:	4313      	orrs	r3, r2
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	46a2      	mov	sl, r4
 800c77c:	e7d2      	b.n	800c724 <_svfiprintf_r+0x9c>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	1d19      	adds	r1, r3, #4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	9103      	str	r1, [sp, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfbb      	ittet	lt
 800c78a:	425b      	neglt	r3, r3
 800c78c:	f042 0202 	orrlt.w	r2, r2, #2
 800c790:	9307      	strge	r3, [sp, #28]
 800c792:	9307      	strlt	r3, [sp, #28]
 800c794:	bfb8      	it	lt
 800c796:	9204      	strlt	r2, [sp, #16]
 800c798:	7823      	ldrb	r3, [r4, #0]
 800c79a:	2b2e      	cmp	r3, #46	; 0x2e
 800c79c:	d10c      	bne.n	800c7b8 <_svfiprintf_r+0x130>
 800c79e:	7863      	ldrb	r3, [r4, #1]
 800c7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a2:	d135      	bne.n	800c810 <_svfiprintf_r+0x188>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d1a      	adds	r2, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9203      	str	r2, [sp, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfb8      	it	lt
 800c7b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7b4:	3402      	adds	r4, #2
 800c7b6:	9305      	str	r3, [sp, #20]
 800c7b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c884 <_svfiprintf_r+0x1fc>
 800c7bc:	7821      	ldrb	r1, [r4, #0]
 800c7be:	2203      	movs	r2, #3
 800c7c0:	4650      	mov	r0, sl
 800c7c2:	f7f3 fd8d 	bl	80002e0 <memchr>
 800c7c6:	b140      	cbz	r0, 800c7da <_svfiprintf_r+0x152>
 800c7c8:	2340      	movs	r3, #64	; 0x40
 800c7ca:	eba0 000a 	sub.w	r0, r0, sl
 800c7ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	4303      	orrs	r3, r0
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7de:	4826      	ldr	r0, [pc, #152]	; (800c878 <_svfiprintf_r+0x1f0>)
 800c7e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7e4:	2206      	movs	r2, #6
 800c7e6:	f7f3 fd7b 	bl	80002e0 <memchr>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d038      	beq.n	800c860 <_svfiprintf_r+0x1d8>
 800c7ee:	4b23      	ldr	r3, [pc, #140]	; (800c87c <_svfiprintf_r+0x1f4>)
 800c7f0:	bb1b      	cbnz	r3, 800c83a <_svfiprintf_r+0x1b2>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	3307      	adds	r3, #7
 800c7f6:	f023 0307 	bic.w	r3, r3, #7
 800c7fa:	3308      	adds	r3, #8
 800c7fc:	9303      	str	r3, [sp, #12]
 800c7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c800:	4433      	add	r3, r6
 800c802:	9309      	str	r3, [sp, #36]	; 0x24
 800c804:	e767      	b.n	800c6d6 <_svfiprintf_r+0x4e>
 800c806:	fb0c 3202 	mla	r2, ip, r2, r3
 800c80a:	460c      	mov	r4, r1
 800c80c:	2001      	movs	r0, #1
 800c80e:	e7a5      	b.n	800c75c <_svfiprintf_r+0xd4>
 800c810:	2300      	movs	r3, #0
 800c812:	3401      	adds	r4, #1
 800c814:	9305      	str	r3, [sp, #20]
 800c816:	4619      	mov	r1, r3
 800c818:	f04f 0c0a 	mov.w	ip, #10
 800c81c:	4620      	mov	r0, r4
 800c81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c822:	3a30      	subs	r2, #48	; 0x30
 800c824:	2a09      	cmp	r2, #9
 800c826:	d903      	bls.n	800c830 <_svfiprintf_r+0x1a8>
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0c5      	beq.n	800c7b8 <_svfiprintf_r+0x130>
 800c82c:	9105      	str	r1, [sp, #20]
 800c82e:	e7c3      	b.n	800c7b8 <_svfiprintf_r+0x130>
 800c830:	fb0c 2101 	mla	r1, ip, r1, r2
 800c834:	4604      	mov	r4, r0
 800c836:	2301      	movs	r3, #1
 800c838:	e7f0      	b.n	800c81c <_svfiprintf_r+0x194>
 800c83a:	ab03      	add	r3, sp, #12
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	462a      	mov	r2, r5
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <_svfiprintf_r+0x1f8>)
 800c842:	a904      	add	r1, sp, #16
 800c844:	4638      	mov	r0, r7
 800c846:	f3af 8000 	nop.w
 800c84a:	1c42      	adds	r2, r0, #1
 800c84c:	4606      	mov	r6, r0
 800c84e:	d1d6      	bne.n	800c7fe <_svfiprintf_r+0x176>
 800c850:	89ab      	ldrh	r3, [r5, #12]
 800c852:	065b      	lsls	r3, r3, #25
 800c854:	f53f af2c 	bmi.w	800c6b0 <_svfiprintf_r+0x28>
 800c858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c85a:	b01d      	add	sp, #116	; 0x74
 800c85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c860:	ab03      	add	r3, sp, #12
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	462a      	mov	r2, r5
 800c866:	4b06      	ldr	r3, [pc, #24]	; (800c880 <_svfiprintf_r+0x1f8>)
 800c868:	a904      	add	r1, sp, #16
 800c86a:	4638      	mov	r0, r7
 800c86c:	f000 f87a 	bl	800c964 <_printf_i>
 800c870:	e7eb      	b.n	800c84a <_svfiprintf_r+0x1c2>
 800c872:	bf00      	nop
 800c874:	0800cdf8 	.word	0x0800cdf8
 800c878:	0800ce02 	.word	0x0800ce02
 800c87c:	00000000 	.word	0x00000000
 800c880:	0800c5d1 	.word	0x0800c5d1
 800c884:	0800cdfe 	.word	0x0800cdfe

0800c888 <_printf_common>:
 800c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c88c:	4616      	mov	r6, r2
 800c88e:	4699      	mov	r9, r3
 800c890:	688a      	ldr	r2, [r1, #8]
 800c892:	690b      	ldr	r3, [r1, #16]
 800c894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c898:	4293      	cmp	r3, r2
 800c89a:	bfb8      	it	lt
 800c89c:	4613      	movlt	r3, r2
 800c89e:	6033      	str	r3, [r6, #0]
 800c8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	b10a      	cbz	r2, 800c8ae <_printf_common+0x26>
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	6033      	str	r3, [r6, #0]
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	0699      	lsls	r1, r3, #26
 800c8b2:	bf42      	ittt	mi
 800c8b4:	6833      	ldrmi	r3, [r6, #0]
 800c8b6:	3302      	addmi	r3, #2
 800c8b8:	6033      	strmi	r3, [r6, #0]
 800c8ba:	6825      	ldr	r5, [r4, #0]
 800c8bc:	f015 0506 	ands.w	r5, r5, #6
 800c8c0:	d106      	bne.n	800c8d0 <_printf_common+0x48>
 800c8c2:	f104 0a19 	add.w	sl, r4, #25
 800c8c6:	68e3      	ldr	r3, [r4, #12]
 800c8c8:	6832      	ldr	r2, [r6, #0]
 800c8ca:	1a9b      	subs	r3, r3, r2
 800c8cc:	42ab      	cmp	r3, r5
 800c8ce:	dc26      	bgt.n	800c91e <_printf_common+0x96>
 800c8d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8d4:	1e13      	subs	r3, r2, #0
 800c8d6:	6822      	ldr	r2, [r4, #0]
 800c8d8:	bf18      	it	ne
 800c8da:	2301      	movne	r3, #1
 800c8dc:	0692      	lsls	r2, r2, #26
 800c8de:	d42b      	bmi.n	800c938 <_printf_common+0xb0>
 800c8e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	47c0      	blx	r8
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d01e      	beq.n	800c92c <_printf_common+0xa4>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	68e5      	ldr	r5, [r4, #12]
 800c8f2:	6832      	ldr	r2, [r6, #0]
 800c8f4:	f003 0306 	and.w	r3, r3, #6
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	bf08      	it	eq
 800c8fc:	1aad      	subeq	r5, r5, r2
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	6922      	ldr	r2, [r4, #16]
 800c902:	bf0c      	ite	eq
 800c904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c908:	2500      	movne	r5, #0
 800c90a:	4293      	cmp	r3, r2
 800c90c:	bfc4      	itt	gt
 800c90e:	1a9b      	subgt	r3, r3, r2
 800c910:	18ed      	addgt	r5, r5, r3
 800c912:	2600      	movs	r6, #0
 800c914:	341a      	adds	r4, #26
 800c916:	42b5      	cmp	r5, r6
 800c918:	d11a      	bne.n	800c950 <_printf_common+0xc8>
 800c91a:	2000      	movs	r0, #0
 800c91c:	e008      	b.n	800c930 <_printf_common+0xa8>
 800c91e:	2301      	movs	r3, #1
 800c920:	4652      	mov	r2, sl
 800c922:	4649      	mov	r1, r9
 800c924:	4638      	mov	r0, r7
 800c926:	47c0      	blx	r8
 800c928:	3001      	adds	r0, #1
 800c92a:	d103      	bne.n	800c934 <_printf_common+0xac>
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c934:	3501      	adds	r5, #1
 800c936:	e7c6      	b.n	800c8c6 <_printf_common+0x3e>
 800c938:	18e1      	adds	r1, r4, r3
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	2030      	movs	r0, #48	; 0x30
 800c93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c942:	4422      	add	r2, r4
 800c944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c94c:	3302      	adds	r3, #2
 800c94e:	e7c7      	b.n	800c8e0 <_printf_common+0x58>
 800c950:	2301      	movs	r3, #1
 800c952:	4622      	mov	r2, r4
 800c954:	4649      	mov	r1, r9
 800c956:	4638      	mov	r0, r7
 800c958:	47c0      	blx	r8
 800c95a:	3001      	adds	r0, #1
 800c95c:	d0e6      	beq.n	800c92c <_printf_common+0xa4>
 800c95e:	3601      	adds	r6, #1
 800c960:	e7d9      	b.n	800c916 <_printf_common+0x8e>
	...

0800c964 <_printf_i>:
 800c964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c968:	7e0f      	ldrb	r7, [r1, #24]
 800c96a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c96c:	2f78      	cmp	r7, #120	; 0x78
 800c96e:	4691      	mov	r9, r2
 800c970:	4680      	mov	r8, r0
 800c972:	460c      	mov	r4, r1
 800c974:	469a      	mov	sl, r3
 800c976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c97a:	d807      	bhi.n	800c98c <_printf_i+0x28>
 800c97c:	2f62      	cmp	r7, #98	; 0x62
 800c97e:	d80a      	bhi.n	800c996 <_printf_i+0x32>
 800c980:	2f00      	cmp	r7, #0
 800c982:	f000 80d8 	beq.w	800cb36 <_printf_i+0x1d2>
 800c986:	2f58      	cmp	r7, #88	; 0x58
 800c988:	f000 80a3 	beq.w	800cad2 <_printf_i+0x16e>
 800c98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c994:	e03a      	b.n	800ca0c <_printf_i+0xa8>
 800c996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c99a:	2b15      	cmp	r3, #21
 800c99c:	d8f6      	bhi.n	800c98c <_printf_i+0x28>
 800c99e:	a101      	add	r1, pc, #4	; (adr r1, 800c9a4 <_printf_i+0x40>)
 800c9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9a4:	0800c9fd 	.word	0x0800c9fd
 800c9a8:	0800ca11 	.word	0x0800ca11
 800c9ac:	0800c98d 	.word	0x0800c98d
 800c9b0:	0800c98d 	.word	0x0800c98d
 800c9b4:	0800c98d 	.word	0x0800c98d
 800c9b8:	0800c98d 	.word	0x0800c98d
 800c9bc:	0800ca11 	.word	0x0800ca11
 800c9c0:	0800c98d 	.word	0x0800c98d
 800c9c4:	0800c98d 	.word	0x0800c98d
 800c9c8:	0800c98d 	.word	0x0800c98d
 800c9cc:	0800c98d 	.word	0x0800c98d
 800c9d0:	0800cb1d 	.word	0x0800cb1d
 800c9d4:	0800ca41 	.word	0x0800ca41
 800c9d8:	0800caff 	.word	0x0800caff
 800c9dc:	0800c98d 	.word	0x0800c98d
 800c9e0:	0800c98d 	.word	0x0800c98d
 800c9e4:	0800cb3f 	.word	0x0800cb3f
 800c9e8:	0800c98d 	.word	0x0800c98d
 800c9ec:	0800ca41 	.word	0x0800ca41
 800c9f0:	0800c98d 	.word	0x0800c98d
 800c9f4:	0800c98d 	.word	0x0800c98d
 800c9f8:	0800cb07 	.word	0x0800cb07
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	1d1a      	adds	r2, r3, #4
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	602a      	str	r2, [r5, #0]
 800ca04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e0a3      	b.n	800cb58 <_printf_i+0x1f4>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	6829      	ldr	r1, [r5, #0]
 800ca14:	0606      	lsls	r6, r0, #24
 800ca16:	f101 0304 	add.w	r3, r1, #4
 800ca1a:	d50a      	bpl.n	800ca32 <_printf_i+0xce>
 800ca1c:	680e      	ldr	r6, [r1, #0]
 800ca1e:	602b      	str	r3, [r5, #0]
 800ca20:	2e00      	cmp	r6, #0
 800ca22:	da03      	bge.n	800ca2c <_printf_i+0xc8>
 800ca24:	232d      	movs	r3, #45	; 0x2d
 800ca26:	4276      	negs	r6, r6
 800ca28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca2c:	485e      	ldr	r0, [pc, #376]	; (800cba8 <_printf_i+0x244>)
 800ca2e:	230a      	movs	r3, #10
 800ca30:	e019      	b.n	800ca66 <_printf_i+0x102>
 800ca32:	680e      	ldr	r6, [r1, #0]
 800ca34:	602b      	str	r3, [r5, #0]
 800ca36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca3a:	bf18      	it	ne
 800ca3c:	b236      	sxthne	r6, r6
 800ca3e:	e7ef      	b.n	800ca20 <_printf_i+0xbc>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	6820      	ldr	r0, [r4, #0]
 800ca44:	1d19      	adds	r1, r3, #4
 800ca46:	6029      	str	r1, [r5, #0]
 800ca48:	0601      	lsls	r1, r0, #24
 800ca4a:	d501      	bpl.n	800ca50 <_printf_i+0xec>
 800ca4c:	681e      	ldr	r6, [r3, #0]
 800ca4e:	e002      	b.n	800ca56 <_printf_i+0xf2>
 800ca50:	0646      	lsls	r6, r0, #25
 800ca52:	d5fb      	bpl.n	800ca4c <_printf_i+0xe8>
 800ca54:	881e      	ldrh	r6, [r3, #0]
 800ca56:	4854      	ldr	r0, [pc, #336]	; (800cba8 <_printf_i+0x244>)
 800ca58:	2f6f      	cmp	r7, #111	; 0x6f
 800ca5a:	bf0c      	ite	eq
 800ca5c:	2308      	moveq	r3, #8
 800ca5e:	230a      	movne	r3, #10
 800ca60:	2100      	movs	r1, #0
 800ca62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca66:	6865      	ldr	r5, [r4, #4]
 800ca68:	60a5      	str	r5, [r4, #8]
 800ca6a:	2d00      	cmp	r5, #0
 800ca6c:	bfa2      	ittt	ge
 800ca6e:	6821      	ldrge	r1, [r4, #0]
 800ca70:	f021 0104 	bicge.w	r1, r1, #4
 800ca74:	6021      	strge	r1, [r4, #0]
 800ca76:	b90e      	cbnz	r6, 800ca7c <_printf_i+0x118>
 800ca78:	2d00      	cmp	r5, #0
 800ca7a:	d04d      	beq.n	800cb18 <_printf_i+0x1b4>
 800ca7c:	4615      	mov	r5, r2
 800ca7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca82:	fb03 6711 	mls	r7, r3, r1, r6
 800ca86:	5dc7      	ldrb	r7, [r0, r7]
 800ca88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca8c:	4637      	mov	r7, r6
 800ca8e:	42bb      	cmp	r3, r7
 800ca90:	460e      	mov	r6, r1
 800ca92:	d9f4      	bls.n	800ca7e <_printf_i+0x11a>
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	d10b      	bne.n	800cab0 <_printf_i+0x14c>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	07de      	lsls	r6, r3, #31
 800ca9c:	d508      	bpl.n	800cab0 <_printf_i+0x14c>
 800ca9e:	6923      	ldr	r3, [r4, #16]
 800caa0:	6861      	ldr	r1, [r4, #4]
 800caa2:	4299      	cmp	r1, r3
 800caa4:	bfde      	ittt	le
 800caa6:	2330      	movle	r3, #48	; 0x30
 800caa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cab0:	1b52      	subs	r2, r2, r5
 800cab2:	6122      	str	r2, [r4, #16]
 800cab4:	f8cd a000 	str.w	sl, [sp]
 800cab8:	464b      	mov	r3, r9
 800caba:	aa03      	add	r2, sp, #12
 800cabc:	4621      	mov	r1, r4
 800cabe:	4640      	mov	r0, r8
 800cac0:	f7ff fee2 	bl	800c888 <_printf_common>
 800cac4:	3001      	adds	r0, #1
 800cac6:	d14c      	bne.n	800cb62 <_printf_i+0x1fe>
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	b004      	add	sp, #16
 800cace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad2:	4835      	ldr	r0, [pc, #212]	; (800cba8 <_printf_i+0x244>)
 800cad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cad8:	6829      	ldr	r1, [r5, #0]
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cae0:	6029      	str	r1, [r5, #0]
 800cae2:	061d      	lsls	r5, r3, #24
 800cae4:	d514      	bpl.n	800cb10 <_printf_i+0x1ac>
 800cae6:	07df      	lsls	r7, r3, #31
 800cae8:	bf44      	itt	mi
 800caea:	f043 0320 	orrmi.w	r3, r3, #32
 800caee:	6023      	strmi	r3, [r4, #0]
 800caf0:	b91e      	cbnz	r6, 800cafa <_printf_i+0x196>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	f023 0320 	bic.w	r3, r3, #32
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	2310      	movs	r3, #16
 800cafc:	e7b0      	b.n	800ca60 <_printf_i+0xfc>
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	f043 0320 	orr.w	r3, r3, #32
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	2378      	movs	r3, #120	; 0x78
 800cb08:	4828      	ldr	r0, [pc, #160]	; (800cbac <_printf_i+0x248>)
 800cb0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb0e:	e7e3      	b.n	800cad8 <_printf_i+0x174>
 800cb10:	0659      	lsls	r1, r3, #25
 800cb12:	bf48      	it	mi
 800cb14:	b2b6      	uxthmi	r6, r6
 800cb16:	e7e6      	b.n	800cae6 <_printf_i+0x182>
 800cb18:	4615      	mov	r5, r2
 800cb1a:	e7bb      	b.n	800ca94 <_printf_i+0x130>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	6826      	ldr	r6, [r4, #0]
 800cb20:	6961      	ldr	r1, [r4, #20]
 800cb22:	1d18      	adds	r0, r3, #4
 800cb24:	6028      	str	r0, [r5, #0]
 800cb26:	0635      	lsls	r5, r6, #24
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	d501      	bpl.n	800cb30 <_printf_i+0x1cc>
 800cb2c:	6019      	str	r1, [r3, #0]
 800cb2e:	e002      	b.n	800cb36 <_printf_i+0x1d2>
 800cb30:	0670      	lsls	r0, r6, #25
 800cb32:	d5fb      	bpl.n	800cb2c <_printf_i+0x1c8>
 800cb34:	8019      	strh	r1, [r3, #0]
 800cb36:	2300      	movs	r3, #0
 800cb38:	6123      	str	r3, [r4, #16]
 800cb3a:	4615      	mov	r5, r2
 800cb3c:	e7ba      	b.n	800cab4 <_printf_i+0x150>
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	1d1a      	adds	r2, r3, #4
 800cb42:	602a      	str	r2, [r5, #0]
 800cb44:	681d      	ldr	r5, [r3, #0]
 800cb46:	6862      	ldr	r2, [r4, #4]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f7f3 fbc8 	bl	80002e0 <memchr>
 800cb50:	b108      	cbz	r0, 800cb56 <_printf_i+0x1f2>
 800cb52:	1b40      	subs	r0, r0, r5
 800cb54:	6060      	str	r0, [r4, #4]
 800cb56:	6863      	ldr	r3, [r4, #4]
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb60:	e7a8      	b.n	800cab4 <_printf_i+0x150>
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	462a      	mov	r2, r5
 800cb66:	4649      	mov	r1, r9
 800cb68:	4640      	mov	r0, r8
 800cb6a:	47d0      	blx	sl
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d0ab      	beq.n	800cac8 <_printf_i+0x164>
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	079b      	lsls	r3, r3, #30
 800cb74:	d413      	bmi.n	800cb9e <_printf_i+0x23a>
 800cb76:	68e0      	ldr	r0, [r4, #12]
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	4298      	cmp	r0, r3
 800cb7c:	bfb8      	it	lt
 800cb7e:	4618      	movlt	r0, r3
 800cb80:	e7a4      	b.n	800cacc <_printf_i+0x168>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4632      	mov	r2, r6
 800cb86:	4649      	mov	r1, r9
 800cb88:	4640      	mov	r0, r8
 800cb8a:	47d0      	blx	sl
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d09b      	beq.n	800cac8 <_printf_i+0x164>
 800cb90:	3501      	adds	r5, #1
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	9903      	ldr	r1, [sp, #12]
 800cb96:	1a5b      	subs	r3, r3, r1
 800cb98:	42ab      	cmp	r3, r5
 800cb9a:	dcf2      	bgt.n	800cb82 <_printf_i+0x21e>
 800cb9c:	e7eb      	b.n	800cb76 <_printf_i+0x212>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	f104 0619 	add.w	r6, r4, #25
 800cba4:	e7f5      	b.n	800cb92 <_printf_i+0x22e>
 800cba6:	bf00      	nop
 800cba8:	0800ce09 	.word	0x0800ce09
 800cbac:	0800ce1a 	.word	0x0800ce1a

0800cbb0 <memmove>:
 800cbb0:	4288      	cmp	r0, r1
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	eb01 0402 	add.w	r4, r1, r2
 800cbb8:	d902      	bls.n	800cbc0 <memmove+0x10>
 800cbba:	4284      	cmp	r4, r0
 800cbbc:	4623      	mov	r3, r4
 800cbbe:	d807      	bhi.n	800cbd0 <memmove+0x20>
 800cbc0:	1e43      	subs	r3, r0, #1
 800cbc2:	42a1      	cmp	r1, r4
 800cbc4:	d008      	beq.n	800cbd8 <memmove+0x28>
 800cbc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbce:	e7f8      	b.n	800cbc2 <memmove+0x12>
 800cbd0:	4402      	add	r2, r0
 800cbd2:	4601      	mov	r1, r0
 800cbd4:	428a      	cmp	r2, r1
 800cbd6:	d100      	bne.n	800cbda <memmove+0x2a>
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbe2:	e7f7      	b.n	800cbd4 <memmove+0x24>

0800cbe4 <_realloc_r>:
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	4680      	mov	r8, r0
 800cbea:	4614      	mov	r4, r2
 800cbec:	460e      	mov	r6, r1
 800cbee:	b921      	cbnz	r1, 800cbfa <_realloc_r+0x16>
 800cbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	f7ff bb6b 	b.w	800c2d0 <_malloc_r>
 800cbfa:	b92a      	cbnz	r2, 800cc08 <_realloc_r+0x24>
 800cbfc:	f7ff fc9c 	bl	800c538 <_free_r>
 800cc00:	4625      	mov	r5, r4
 800cc02:	4628      	mov	r0, r5
 800cc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc08:	f000 f81b 	bl	800cc42 <_malloc_usable_size_r>
 800cc0c:	4284      	cmp	r4, r0
 800cc0e:	4607      	mov	r7, r0
 800cc10:	d802      	bhi.n	800cc18 <_realloc_r+0x34>
 800cc12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc16:	d812      	bhi.n	800cc3e <_realloc_r+0x5a>
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	f7ff fb58 	bl	800c2d0 <_malloc_r>
 800cc20:	4605      	mov	r5, r0
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d0ed      	beq.n	800cc02 <_realloc_r+0x1e>
 800cc26:	42bc      	cmp	r4, r7
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	bf28      	it	cs
 800cc2e:	463a      	movcs	r2, r7
 800cc30:	f7ff fb18 	bl	800c264 <memcpy>
 800cc34:	4631      	mov	r1, r6
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7ff fc7e 	bl	800c538 <_free_r>
 800cc3c:	e7e1      	b.n	800cc02 <_realloc_r+0x1e>
 800cc3e:	4635      	mov	r5, r6
 800cc40:	e7df      	b.n	800cc02 <_realloc_r+0x1e>

0800cc42 <_malloc_usable_size_r>:
 800cc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc46:	1f18      	subs	r0, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfbc      	itt	lt
 800cc4c:	580b      	ldrlt	r3, [r1, r0]
 800cc4e:	18c0      	addlt	r0, r0, r3
 800cc50:	4770      	bx	lr
	...

0800cc54 <_init>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr

0800cc60 <_fini>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	bf00      	nop
 800cc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc66:	bc08      	pop	{r3}
 800cc68:	469e      	mov	lr, r3
 800cc6a:	4770      	bx	lr
