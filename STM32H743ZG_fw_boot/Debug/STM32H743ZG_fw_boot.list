
STM32H743ZG_fw_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b244  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800b4e8  0800b4e8  0001b4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb94  0800bb94  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb94  0800bb94  0001bb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb9c  0800bb9c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb9c  0800bb9c  0001bb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800bba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007590  240001e8  0800bd8c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24007778  0800bd8c  00027778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044889  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006eed  00000000  00000000  00064a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ccb0  00000000  00000000  0006b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00088640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ca8  00000000  00000000  0008a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e08b  00000000  00000000  0008ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000345f3  00000000  00000000  000cad5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00179dc0  00000000  00000000  000ff34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0027910e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005efc  00000000  00000000  00279160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b4cc 	.word	0x0800b4cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800b4cc 	.word	0x0800b4cc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <_Z7bspInitv>:



void bspInit(void){

}
 8000a9c:	4770      	bx	lr

08000a9e <_Z5delaym>:

void delay(uint32_t ms){
	HAL_Delay(ms);
 8000a9e:	f001 bb51 	b.w	8002144 <HAL_Delay>

08000aa2 <__io_putchar>:
uint32_t millis(void){

	return HAL_GetTick();
}

extern "C" int __io_putchar(int ch){
 8000aa2:	b507      	push	{r0, r1, r2, lr}
	uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000aa4:	2201      	movs	r2, #1
extern "C" int __io_putchar(int ch){
 8000aa6:	9001      	str	r0, [sp, #4]
	uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000aa8:	a901      	add	r1, sp, #4
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f001 fa5a 	bl	8001f64 <uartWrite>

	return 0;
}
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	b003      	add	sp, #12
 8000ab4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b530      	push	{r4, r5, lr}
 8000aba:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abc:	224c      	movs	r2, #76	; 0x4c
 8000abe:	2100      	movs	r1, #0
 8000ac0:	a809      	add	r0, sp, #36	; 0x24
 8000ac2:	f007 fc78 	bl	80083b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	2100      	movs	r1, #0
 8000aca:	a801      	add	r0, sp, #4
 8000acc:	f007 fc73 	bl	80083b6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f002 fdfb 	bl	80036cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemClock_Config+0xb8>)
 8000adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ade:	f022 0201 	bic.w	r2, r2, #1
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <SystemClock_Config+0xbc>)
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	6993      	ldr	r3, [r2, #24]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	6993      	ldr	r3, [r2, #24]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b04:	6993      	ldr	r3, [r2, #24]
 8000b06:	0498      	lsls	r0, r3, #18
 8000b08:	d5fc      	bpl.n	8000b04 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0a:	2109      	movs	r1, #9
 8000b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b10:	2205      	movs	r2, #5
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b12:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b14:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b18:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1a:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b20:	2130      	movs	r1, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b26:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b2e:	e9cd 2114 	strd	r2, r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b32:	e9cd 5319 	strd	r5, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b36:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f002 fdec 	bl	8003714 <HAL_RCC_OscConfig>
 8000b3c:	b108      	cbz	r0, 8000b42 <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2303      	movs	r3, #3
 8000b44:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b46:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b4c:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b56:	e9cd 0503 	strd	r0, r5, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b5a:	e9cd 3007 	strd	r3, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5e:	a801      	add	r0, sp, #4
 8000b60:	f003 f90a 	bl	8003d78 <HAL_RCC_ClockConfig>
 8000b64:	b108      	cbz	r0, 8000b6a <SystemClock_Config+0xb2>
 8000b66:	b672      	cpsid	i
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <SystemClock_Config+0xb0>
}
 8000b6a:	b01d      	add	sp, #116	; 0x74
 8000b6c:	bd30      	pop	{r4, r5, pc}
 8000b6e:	bf00      	nop
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800

08000b78 <main>:
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
  huart8.Instance = UART8;
 8000b7c:	4caa      	ldr	r4, [pc, #680]	; (8000e28 <main+0x2b0>)
  HAL_Init();
 8000b7e:	f001 faa1 	bl	80020c4 <HAL_Init>
  huart8.Init.BaudRate = 115200;
 8000b82:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  SystemClock_Config();
 8000b86:	f7ff ff97 	bl	8000ab8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4ba8      	ldr	r3, [pc, #672]	; (8000e2c <main+0x2b4>)
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	250c      	movs	r5, #12
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b8e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ba4:	9202      	str	r2, [sp, #8]
 8000ba6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bac:	f042 0202 	orr.w	r2, r2, #2
 8000bb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb8:	f002 0202 	and.w	r2, r2, #2
 8000bbc:	9203      	str	r2, [sp, #12]
 8000bbe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bc4:	f042 0204 	orr.w	r2, r2, #4
 8000bc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd0:	f002 0204 	and.w	r2, r2, #4
 8000bd4:	9204      	str	r2, [sp, #16]
 8000bd6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000be4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000be8:	f002 0201 	and.w	r2, r2, #1
 8000bec:	9205      	str	r2, [sp, #20]
 8000bee:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c00:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000c04:	9206      	str	r2, [sp, #24]
 8000c06:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c0c:	f042 0210 	orr.w	r2, r2, #16
 8000c10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	9307      	str	r3, [sp, #28]
 8000c1e:	9b07      	ldr	r3, [sp, #28]
  huart8.Init.BaudRate = 115200;
 8000c20:	4b83      	ldr	r3, [pc, #524]	; (8000e30 <main+0x2b8>)
 8000c22:	e9c4 3600 	strd	r3, r6, [r4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	2300      	movs	r3, #0
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c28:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000c2c:	6123      	str	r3, [r4, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	e9c4 5305 	strd	r5, r3, [r4, #20]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000c3a:	f005 fb0a 	bl	8006252 <HAL_UART_Init>
 8000c3e:	4601      	mov	r1, r0
 8000c40:	b108      	cbz	r0, 8000c46 <main+0xce>
 8000c42:	b672      	cpsid	i
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0xcc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	4620      	mov	r0, r4
 8000c48:	f005 fcae 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	b108      	cbz	r0, 8000c54 <main+0xdc>
 8000c50:	b672      	cpsid	i
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <main+0xda>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	4620      	mov	r0, r4
 8000c56:	f005 fccb 	bl	80065f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	b108      	cbz	r0, 8000c60 <main+0xe8>
 8000c5c:	b672      	cpsid	i
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <main+0xe6>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000c60:	4620      	mov	r0, r4
 8000c62:	f005 fc86 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000c66:	b108      	cbz	r0, 8000c6c <main+0xf4>
 8000c68:	b672      	cpsid	i
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <main+0xf2>
  huart6.Instance = USART6;
 8000c6c:	4c71      	ldr	r4, [pc, #452]	; (8000e34 <main+0x2bc>)
  huart6.Init.BaudRate = 9600;
 8000c6e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c72:	4f71      	ldr	r7, [pc, #452]	; (8000e38 <main+0x2c0>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	62a0      	str	r0, [r4, #40]	; 0x28
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c76:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c7a:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c82:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c86:	4620      	mov	r0, r4
  huart6.Init.BaudRate = 9600;
 8000c88:	e9c4 7300 	strd	r7, r3, [r4]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c8c:	f005 fae1 	bl	8006252 <HAL_UART_Init>
 8000c90:	4601      	mov	r1, r0
 8000c92:	b108      	cbz	r0, 8000c98 <main+0x120>
 8000c94:	b672      	cpsid	i
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <main+0x11e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f005 fc85 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	b108      	cbz	r0, 8000ca6 <main+0x12e>
 8000ca2:	b672      	cpsid	i
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <main+0x12c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f005 fca2 	bl	80065f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cac:	b108      	cbz	r0, 8000cb2 <main+0x13a>
 8000cae:	b672      	cpsid	i
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <main+0x138>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f005 fc5d 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000cb8:	b108      	cbz	r0, 8000cbe <main+0x146>
 8000cba:	b672      	cpsid	i
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <main+0x144>
  huart5.Instance = UART5;
 8000cbe:	4c5f      	ldr	r4, [pc, #380]	; (8000e3c <main+0x2c4>)
 8000cc0:	4b5f      	ldr	r3, [pc, #380]	; (8000e40 <main+0x2c8>)
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	62a0      	str	r0, [r4, #40]	; 0x28
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cd4:	4620      	mov	r0, r4
  huart5.Init.BaudRate = 115200;
 8000cd6:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cda:	f005 faba 	bl	8006252 <HAL_UART_Init>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	b108      	cbz	r0, 8000ce6 <main+0x16e>
 8000ce2:	b672      	cpsid	i
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <main+0x16c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f005 fc5e 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	b108      	cbz	r0, 8000cf2 <main+0x17a>
 8000cee:	b672      	cpsid	i
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x178>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4851      	ldr	r0, [pc, #324]	; (8000e3c <main+0x2c4>)
 8000cf6:	f005 fc7b 	bl	80065f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	b108      	cbz	r0, 8000d00 <main+0x188>
 8000cfc:	b672      	cpsid	i
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <main+0x186>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000d00:	484e      	ldr	r0, [pc, #312]	; (8000e3c <main+0x2c4>)
 8000d02:	f005 fc36 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000d06:	4605      	mov	r5, r0
 8000d08:	b108      	cbz	r0, 8000d0e <main+0x196>
 8000d0a:	b672      	cpsid	i
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <main+0x194>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <main+0x2b4>)
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d10:	2105      	movs	r1, #5
  huart1.Instance = USART1;
 8000d12:	4c4c      	ldr	r4, [pc, #304]	; (8000e44 <main+0x2cc>)
  huart1.Init.BaudRate = 115200;
 8000d14:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d18:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	260c      	movs	r6, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000d26:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000d2a:	f002 0201 	and.w	r2, r2, #1
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d32:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000d36:	f042 0202 	orr.w	r2, r2, #2
 8000d3a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d3e:	4602      	mov	r2, r0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d44:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d4e:	f001 fa23 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d52:	200b      	movs	r0, #11
 8000d54:	f001 fa52 	bl	80021fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000d58:	2105      	movs	r1, #5
 8000d5a:	462a      	mov	r2, r5
 8000d5c:	203a      	movs	r0, #58	; 0x3a
 8000d5e:	f001 fa1b 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d62:	203a      	movs	r0, #58	; 0x3a
 8000d64:	f001 fa4a 	bl	80021fc <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8000d68:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <main+0x2d0>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6a:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6c:	6125      	str	r5, [r4, #16]
  huart1.Init.BaudRate = 115200;
 8000d6e:	e9c4 3700 	strd	r3, r7, [r4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d72:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	e9c4 6505 	strd	r6, r5, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7e:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d82:	f005 fa66 	bl	8006252 <HAL_UART_Init>
 8000d86:	4601      	mov	r1, r0
 8000d88:	b108      	cbz	r0, 8000d8e <main+0x216>
 8000d8a:	b672      	cpsid	i
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <main+0x214>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f005 fc0a 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d94:	4601      	mov	r1, r0
 8000d96:	b108      	cbz	r0, 8000d9c <main+0x224>
 8000d98:	b672      	cpsid	i
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <main+0x222>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f005 fc27 	bl	80065f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	b108      	cbz	r0, 8000da8 <main+0x230>
 8000da4:	b672      	cpsid	i
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <main+0x22e>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da8:	4620      	mov	r0, r4
 8000daa:	f005 fbe2 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000dae:	b108      	cbz	r0, 8000db4 <main+0x23c>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x23a>
  hlpuart1.Instance = LPUART1;
 8000db4:	4c25      	ldr	r4, [pc, #148]	; (8000e4c <main+0x2d4>)
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0x2d8>)
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db8:	61a0      	str	r0, [r4, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dba:	62a0      	str	r0, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000dbc:	6660      	str	r0, [r4, #100]	; 0x64
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dbe:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dc2:	e9c4 0604 	strd	r0, r6, [r4, #16]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc6:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dca:	4620      	mov	r0, r4
  hlpuart1.Init.BaudRate = 115200;
 8000dcc:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dd0:	f005 fa3f 	bl	8006252 <HAL_UART_Init>
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	b108      	cbz	r0, 8000ddc <main+0x264>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x262>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f005 fbe3 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000de2:	4601      	mov	r1, r0
 8000de4:	b108      	cbz	r0, 8000dea <main+0x272>
 8000de6:	b672      	cpsid	i
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <main+0x270>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	4620      	mov	r0, r4
 8000dec:	f005 fc00 	bl	80065f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000df0:	b108      	cbz	r0, 8000df6 <main+0x27e>
 8000df2:	b672      	cpsid	i
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x27c>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000df6:	4620      	mov	r0, r4
 8000df8:	f005 fbbb 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000dfc:	b108      	cbz	r0, 8000e02 <main+0x28a>
 8000dfe:	b672      	cpsid	i
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <main+0x288>
  hrtc.Instance = RTC;
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <main+0x2dc>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e04:	2300      	movs	r3, #0
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <main+0x2e0>)
  hrtc.Init.SynchPrediv = 255;
 8000e08:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e0a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e0c:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e0e:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000e12:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e14:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 8000e18:	e9c0 1202 	strd	r1, r2, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e1c:	f004 f8a8 	bl	8004f70 <HAL_RTC_Init>
 8000e20:	4604      	mov	r4, r0
 8000e22:	b1d8      	cbz	r0, 8000e5c <main+0x2e4>
 8000e24:	b672      	cpsid	i
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <main+0x2ae>
 8000e28:	2400279c 	.word	0x2400279c
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	40007c00 	.word	0x40007c00
 8000e34:	2400270c 	.word	0x2400270c
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	2400267c 	.word	0x2400267c
 8000e40:	40005000 	.word	0x40005000
 8000e44:	240025ec 	.word	0x240025ec
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	24002538 	.word	0x24002538
 8000e50:	58000c00 	.word	0x58000c00
 8000e54:	240025c8 	.word	0x240025c8
 8000e58:	58004000 	.word	0x58004000
  osKernelInitialize();
 8000e5c:	f005 fbfa 	bl	8006654 <osKernelInitialize>
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <main+0x328>)
 8000e62:	2104      	movs	r1, #4
 8000e64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e68:	f005 fc69 	bl	800673e <osMessageQueueNew>
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <main+0x32c>)
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <main+0x330>)
 8000e70:	4621      	mov	r1, r4
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 8000e72:	6018      	str	r0, [r3, #0]
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <main+0x334>)
 8000e76:	f005 fc19 	bl	80066ac <osThreadNew>
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <main+0x338>)
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <main+0x33c>)
 8000e7e:	4621      	mov	r1, r4
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 8000e80:	6018      	str	r0, [r3, #0]
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <main+0x340>)
 8000e84:	f005 fc12 	bl	80066ac <osThreadNew>
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <main+0x344>)
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <main+0x348>)
 8000e8c:	4621      	mov	r1, r4
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 8000e8e:	6018      	str	r0, [r3, #0]
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <main+0x34c>)
 8000e92:	f005 fc0b 	bl	80066ac <osThreadNew>
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <main+0x350>)
 8000e98:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000e9a:	f005 fbed 	bl	8006678 <osKernelStart>
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0x326>
 8000ea0:	0800b580 	.word	0x0800b580
 8000ea4:	24002444 	.word	0x24002444
 8000ea8:	0800b514 	.word	0x0800b514
 8000eac:	08001fd5 	.word	0x08001fd5
 8000eb0:	24000ac0 	.word	0x24000ac0
 8000eb4:	0800b55c 	.word	0x0800b55c
 8000eb8:	08002007 	.word	0x08002007
 8000ebc:	24002440 	.word	0x24002440
 8000ec0:	0800b538 	.word	0x0800b538
 8000ec4:	08002005 	.word	0x08002005
 8000ec8:	24001b80 	.word	0x24001b80

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000ecc:	6802      	ldr	r2, [r0, #0]
 8000ece:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d101      	bne.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ed4:	f001 b924 	b.w	8002120 <HAL_IncTick>
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000

08000ee0 <Error_Handler>:
 8000ee0:	b672      	cpsid	i
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <Error_Handler+0x2>

08000ee4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MspInit+0x2c>)
{
 8000ee6:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee8:	210f      	movs	r1, #15
 8000eea:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ef2:	f042 0202 	orr.w	r2, r2, #2
 8000ef6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efa:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0a:	f001 b945 	b.w	8002198 <HAL_NVIC_SetPriority>
 8000f0e:	bf00      	nop
 8000f10:	58024400 	.word	0x58024400

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	b0c0      	sub	sp, #256	; 0x100
 8000f18:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	2214      	movs	r2, #20
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	a80c      	add	r0, sp, #48	; 0x30
 8000f20:	f007 fa49 	bl	80083b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	22bc      	movs	r2, #188	; 0xbc
 8000f26:	2100      	movs	r1, #0
 8000f28:	a811      	add	r0, sp, #68	; 0x44
 8000f2a:	f007 fa44 	bl	80083b6 <memset>
  if(huart->Instance==LPUART1)
 8000f2e:	6833      	ldr	r3, [r6, #0]
 8000f30:	4ab6      	ldr	r2, [pc, #728]	; (800120c <HAL_UART_MspInit+0x2f8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d130      	bne.n	8000f98 <HAL_UART_MspInit+0x84>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f36:	2304      	movs	r3, #4
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f38:	a811      	add	r0, sp, #68	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f3a:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f003 f9a2 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	b108      	cbz	r0, 8000f46 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000f42:	f7ff ffcd 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f46:	4bb2      	ldr	r3, [pc, #712]	; (8001210 <HAL_UART_MspInit+0x2fc>)
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	a90c      	add	r1, sp, #48	; 0x30
 8000f4e:	48b1      	ldr	r0, [pc, #708]	; (8001214 <HAL_UART_MspInit+0x300>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f54:	f042 0208 	orr.w	r2, r2, #8
 8000f58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000f5c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f60:	f002 0208 	and.w	r2, r2, #8
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	e9cd e30c 	strd	lr, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f002 fab0 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f94:	b040      	add	sp, #256	; 0x100
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==UART5)
 8000f98:	4a9f      	ldr	r2, [pc, #636]	; (8001218 <HAL_UART_MspInit+0x304>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d151      	bne.n	8001042 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000f9e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	a811      	add	r0, sp, #68	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000fa2:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa4:	f003 f96e 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	b108      	cbz	r0, 8000fae <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8000faa:	f7ff ff99 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fae:	4b98      	ldr	r3, [pc, #608]	; (8001210 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	f242 0020 	movw	r0, #8224	; 0x2020
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fb8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_uart5_rx.Instance = DMA2_Stream2;
 8000fbc:	4c97      	ldr	r4, [pc, #604]	; (800121c <HAL_UART_MspInit+0x308>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fc2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000fc6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000fca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000fce:	9203      	str	r2, [sp, #12]
 8000fd0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fd6:	f042 0202 	orr.w	r2, r2, #2
 8000fda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	9304      	str	r3, [sp, #16]
 8000fe8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000ff0:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	488b      	ldr	r0, [pc, #556]	; (8001220 <HAL_UART_MspInit+0x30c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000ff4:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f002 fa7b 	bl	80034f4 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000ffe:	2341      	movs	r3, #65	; 0x41
 8001000:	f8df c240 	ldr.w	ip, [pc, #576]	; 8001244 <HAL_UART_MspInit+0x330>
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001004:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001006:	61a5      	str	r5, [r4, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001008:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800100a:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001012:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001016:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	e9c4 3507 	strd	r3, r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001022:	f001 fa89 	bl	8002538 <HAL_DMA_Init>
 8001026:	b108      	cbz	r0, 800102c <HAL_UART_MspInit+0x118>
      Error_Handler();
 8001028:	f7ff ff5a 	bl	8000ee0 <Error_Handler>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800102c:	2035      	movs	r0, #53	; 0x35
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001032:	67f4      	str	r4, [r6, #124]	; 0x7c
 8001034:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001036:	f001 f8af 	bl	8002198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800103a:	2035      	movs	r0, #53	; 0x35
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800103c:	f001 f8de 	bl	80021fc <HAL_NVIC_EnableIRQ>
}
 8001040:	e7a8      	b.n	8000f94 <HAL_UART_MspInit+0x80>
  else if(huart->Instance==UART8)
 8001042:	4a78      	ldr	r2, [pc, #480]	; (8001224 <HAL_UART_MspInit+0x310>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d134      	bne.n	80010b2 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001048:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104a:	a811      	add	r0, sp, #68	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800104c:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104e:	f003 f919 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	b108      	cbz	r0, 8001058 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001054:	f7ff ff44 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105c:	4872      	ldr	r0, [pc, #456]	; (8001228 <HAL_UART_MspInit+0x314>)
    __HAL_RCC_UART8_CLK_ENABLE();
 800105e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001062:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001066:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800106a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800106e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001072:	9205      	str	r2, [sp, #20]
 8001074:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800107a:	f042 0210 	orr.w	r2, r2, #16
 800107e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001082:	2201      	movs	r2, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	9306      	str	r3, [sp, #24]
 800108e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800109a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109c:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800109e:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f002 fa28 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80010a4:	2053      	movs	r0, #83	; 0x53
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	f001 f875 	bl	8002198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80010ae:	2053      	movs	r0, #83	; 0x53
 80010b0:	e7c4      	b.n	800103c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART1)
 80010b2:	4a5e      	ldr	r2, [pc, #376]	; (800122c <HAL_UART_MspInit+0x318>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d159      	bne.n	800116c <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b8:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	a811      	add	r0, sp, #68	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010bc:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f003 f8e1 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	b108      	cbz	r0, 80010c8 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80010c4:	f7ff ff0c 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c8:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	4852      	ldr	r0, [pc, #328]	; (8001220 <HAL_UART_MspInit+0x30c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d6:	f042 0210 	orr.w	r2, r2, #16
 80010da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80010de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80010e2:	f002 0210 	and.w	r2, r2, #16
 80010e6:	9207      	str	r2, [sp, #28]
 80010e8:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	9308      	str	r3, [sp, #32]
 8001100:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800110a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001110:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f002 f9ef 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001116:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	4841      	ldr	r0, [pc, #260]	; (8001220 <HAL_UART_MspInit+0x30c>)
 800111a:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001120:	2307      	movs	r3, #7
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001122:	4c43      	ldr	r4, [pc, #268]	; (8001230 <HAL_UART_MspInit+0x31c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001124:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f002 f9e3 	bl	80034f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800112e:	2329      	movs	r3, #41	; 0x29
 8001130:	4a40      	ldr	r2, [pc, #256]	; (8001234 <HAL_UART_MspInit+0x320>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001132:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001138:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	e9c4 3507 	strd	r3, r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001150:	f001 f9f2 	bl	8002538 <HAL_DMA_Init>
 8001154:	b108      	cbz	r0, 800115a <HAL_UART_MspInit+0x246>
      Error_Handler();
 8001156:	f7ff fec3 	bl	8000ee0 <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800115a:	2025      	movs	r0, #37	; 0x25
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001160:	67f4      	str	r4, [r6, #124]	; 0x7c
 8001162:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001164:	f001 f818 	bl	8002198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001168:	2025      	movs	r0, #37	; 0x25
 800116a:	e767      	b.n	800103c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART6)
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_UART_MspInit+0x324>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f47f af10 	bne.w	8000f94 <HAL_UART_MspInit+0x80>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001174:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	a811      	add	r0, sp, #68	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001178:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f003 f883 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	b108      	cbz	r0, 8001184 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8001180:	f7ff feae 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800118a:	2507      	movs	r5, #7
    __HAL_RCC_USART6_CLK_ENABLE();
 800118c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	a90c      	add	r1, sp, #48	; 0x30
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <HAL_UART_MspInit+0x328>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800119c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80011a0:	f002 0220 	and.w	r2, r2, #32
 80011a4:	9209      	str	r2, [sp, #36]	; 0x24
 80011a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ac:	f042 0204 	orr.w	r2, r2, #4
 80011b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011b8:	f002 0204 	and.w	r2, r2, #4
 80011bc:	920a      	str	r2, [sp, #40]	; 0x28
 80011be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80011d0:	9510      	str	r5, [sp, #64]	; 0x40
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80011d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f002 f986 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ec:	a90c      	add	r1, sp, #48	; 0x30
 80011ee:	4814      	ldr	r0, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x32c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80011f0:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fa:	f002 f97b 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80011fe:	2047      	movs	r0, #71	; 0x47
 8001200:	4622      	mov	r2, r4
 8001202:	2105      	movs	r1, #5
 8001204:	f000 ffc8 	bl	8002198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001208:	2047      	movs	r0, #71	; 0x47
 800120a:	e717      	b.n	800103c <HAL_UART_MspInit+0x128>
 800120c:	58000c00 	.word	0x58000c00
 8001210:	58024400 	.word	0x58024400
 8001214:	58020000 	.word	0x58020000
 8001218:	40005000 	.word	0x40005000
 800121c:	24002448 	.word	0x24002448
 8001220:	58020400 	.word	0x58020400
 8001224:	40007c00 	.word	0x40007c00
 8001228:	58021000 	.word	0x58021000
 800122c:	40011000 	.word	0x40011000
 8001230:	240024c0 	.word	0x240024c0
 8001234:	40020010 	.word	0x40020010
 8001238:	40011400 	.word	0x40011400
 800123c:	58020800 	.word	0x58020800
 8001240:	58021800 	.word	0x58021800
 8001244:	40020440 	.word	0x40020440

08001248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001248:	b510      	push	{r4, lr}
 800124a:	b0b0      	sub	sp, #192	; 0xc0
 800124c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124e:	22bc      	movs	r2, #188	; 0xbc
 8001250:	2100      	movs	r1, #0
 8001252:	a801      	add	r0, sp, #4
 8001254:	f007 f8af 	bl	80083b6 <memset>
  if(hrtc->Instance==RTC)
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_RTC_MspInit+0x40>)
 800125c:	429a      	cmp	r2, r3
 800125e:	d110      	bne.n	8001282 <HAL_RTC_MspInit+0x3a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001266:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126c:	932d      	str	r3, [sp, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	f003 f809 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	b108      	cbz	r0, 8001278 <HAL_RTC_MspInit+0x30>
    {
      Error_Handler();
 8001274:	f7ff fe34 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_RTC_MspInit+0x44>)
 800127a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800127c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001282:	b030      	add	sp, #192	; 0xc0
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	58004000 	.word	0x58004000
 800128c:	58024400 	.word	0x58024400

08001290 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	280f      	cmp	r0, #15
{
 8001292:	b510      	push	{r4, lr}
 8001294:	4604      	mov	r4, r0
 8001296:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001298:	d902      	bls.n	80012a0 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800129c:	b00a      	add	sp, #40	; 0x28
 800129e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80012a0:	4601      	mov	r1, r0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2019      	movs	r0, #25
 80012a6:	f000 ff77 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 ffa6 	bl	80021fc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_InitTick+0x7c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b2:	4669      	mov	r1, sp
 80012b4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80012b6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_InitTick+0x80>)
  htim1.Instance = TIM1;
 80012ba:	4c16      	ldr	r4, [pc, #88]	; (8001314 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80012c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d4:	f002 febc 	bl	8004050 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012d8:	f002 fea8 	bl	800402c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_InitTick+0x88>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012de:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 80012e0:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012e2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012e6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_InitTick+0x8c>)
 80012ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ee:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 80012f0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80012f2:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012f4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80012f6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012fa:	f003 ffe3 	bl	80052c4 <HAL_TIM_Base_Init>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d1cb      	bne.n	800129a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim1);
 8001302:	4620      	mov	r0, r4
 8001304:	f003 fe86 	bl	8005014 <HAL_TIM_Base_Start_IT>
 8001308:	e7c8      	b.n	800129c <HAL_InitTick+0xc>
 800130a:	bf00      	nop
 800130c:	2400000c 	.word	0x2400000c
 8001310:	58024400 	.word	0x58024400
 8001314:	2400282c 	.word	0x2400282c
 8001318:	40010000 	.word	0x40010000
 800131c:	000f4240 	.word	0x000f4240

08001320 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler>

08001322 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler>

08001324 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler>

08001326 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler>

08001328 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler>

0800132a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	4770      	bx	lr

0800132c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800132c:	4801      	ldr	r0, [pc, #4]	; (8001334 <DMA1_Stream0_IRQHandler+0x8>)
 800132e:	f001 be3b 	b.w	8002fa8 <HAL_DMA_IRQHandler>
 8001332:	bf00      	nop
 8001334:	240024c0 	.word	0x240024c0

08001338 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001338:	4801      	ldr	r0, [pc, #4]	; (8001340 <TIM1_UP_IRQHandler+0x8>)
 800133a:	f003 bead 	b.w	8005098 <HAL_TIM_IRQHandler>
 800133e:	bf00      	nop
 8001340:	2400282c 	.word	0x2400282c

08001344 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001344:	4801      	ldr	r0, [pc, #4]	; (800134c <USART1_IRQHandler+0x8>)
 8001346:	f004 b86b 	b.w	8005420 <HAL_UART_IRQHandler>
 800134a:	bf00      	nop
 800134c:	240025ec 	.word	0x240025ec

08001350 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <UART5_IRQHandler+0x8>)
 8001352:	f004 b865 	b.w	8005420 <HAL_UART_IRQHandler>
 8001356:	bf00      	nop
 8001358:	2400267c 	.word	0x2400267c

0800135c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800135c:	4801      	ldr	r0, [pc, #4]	; (8001364 <DMA2_Stream2_IRQHandler+0x8>)
 800135e:	f001 be23 	b.w	8002fa8 <HAL_DMA_IRQHandler>
 8001362:	bf00      	nop
 8001364:	24002448 	.word	0x24002448

08001368 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001368:	4801      	ldr	r0, [pc, #4]	; (8001370 <USART6_IRQHandler+0x8>)
 800136a:	f004 b859 	b.w	8005420 <HAL_UART_IRQHandler>
 800136e:	bf00      	nop
 8001370:	2400270c 	.word	0x2400270c

08001374 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001374:	4801      	ldr	r0, [pc, #4]	; (800137c <UART8_IRQHandler+0x8>)
 8001376:	f004 b853 	b.w	8005420 <HAL_UART_IRQHandler>
 800137a:	bf00      	nop
 800137c:	2400279c 	.word	0x2400279c

08001380 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001380:	2001      	movs	r0, #1
 8001382:	4770      	bx	lr

08001384 <_kill>:

int _kill(int pid, int sig)
{
 8001384:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001386:	f006 fecb 	bl	8008120 <__errno>
 800138a:	2316      	movs	r3, #22
 800138c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800138e:	f04f 30ff 	mov.w	r0, #4294967295
 8001392:	bd08      	pop	{r3, pc}

08001394 <_exit>:

void _exit (int status)
{
 8001394:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001396:	f006 fec3 	bl	8008120 <__errno>
 800139a:	2316      	movs	r3, #22
 800139c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800139e:	e7fe      	b.n	800139e <_exit+0xa>

080013a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	460d      	mov	r5, r1
 80013a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	460e      	mov	r6, r1
 80013a8:	1b73      	subs	r3, r6, r5
 80013aa:	429c      	cmp	r4, r3
 80013ac:	dc01      	bgt.n	80013b2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80013ae:	4620      	mov	r0, r4
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	e7f5      	b.n	80013a8 <_read+0x8>

080013bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	460d      	mov	r5, r1
 80013c0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	460e      	mov	r6, r1
 80013c4:	1b73      	subs	r3, r6, r5
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dc01      	bgt.n	80013ce <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80013ca:	4620      	mov	r0, r4
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80013ce:	f816 0b01 	ldrb.w	r0, [r6], #1
 80013d2:	f7ff fb66 	bl	8000aa2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	e7f5      	b.n	80013c4 <_write+0x8>

080013d8 <_close>:

int _close(int file)
{
	return -1;
}
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80013e2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80013e4:	604b      	str	r3, [r1, #4]
}
 80013e6:	4770      	bx	lr

080013e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80013e8:	2001      	movs	r0, #1
 80013ea:	4770      	bx	lr

080013ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80013ec:	2000      	movs	r0, #0
 80013ee:	4770      	bx	lr

080013f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <_sbrk+0x30>)
{
 80013f2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80013f4:	6811      	ldr	r1, [r2, #0]
{
 80013f6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80013f8:	b909      	cbnz	r1, 80013fe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <_sbrk+0x34>)
 80013fc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	6810      	ldr	r0, [r2, #0]
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <_sbrk+0x38>)
 8001402:	4c0a      	ldr	r4, [pc, #40]	; (800142c <_sbrk+0x3c>)
 8001404:	4403      	add	r3, r0
 8001406:	1b09      	subs	r1, r1, r4
 8001408:	428b      	cmp	r3, r1
 800140a:	d906      	bls.n	800141a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800140c:	f006 fe88 	bl	8008120 <__errno>
 8001410:	230c      	movs	r3, #12
 8001412:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001414:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001418:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800141a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800141c:	e7fc      	b.n	8001418 <_sbrk+0x28>
 800141e:	bf00      	nop
 8001420:	24002878 	.word	0x24002878
 8001424:	24007778 	.word	0x24007778
 8001428:	24080000 	.word	0x24080000
 800142c:	00000400 	.word	0x00000400

08001430 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <SystemInit+0xa0>)
 8001432:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001436:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <SystemInit+0xa4>)
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	2b06      	cmp	r3, #6
 8001448:	d805      	bhi.n	8001456 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	f043 0307 	orr.w	r3, r3, #7
 8001454:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <SystemInit+0xa8>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <SystemInit+0xac>)
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146a:	491a      	ldr	r1, [pc, #104]	; (80014d4 <SystemInit+0xa4>)
  RCC->CR &= 0xEAF6ED7FU;
 800146c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146e:	680a      	ldr	r2, [r1, #0]
 8001470:	0712      	lsls	r2, r2, #28
 8001472:	d505      	bpl.n	8001480 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001474:	680a      	ldr	r2, [r1, #0]
 8001476:	f022 020f 	bic.w	r2, r2, #15
 800147a:	f042 0207 	orr.w	r2, r2, #7
 800147e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001480:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001482:	4917      	ldr	r1, [pc, #92]	; (80014e0 <SystemInit+0xb0>)
  RCC->D1CFGR = 0x00000000;
 8001484:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001486:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001488:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800148a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800148c:	4915      	ldr	r1, [pc, #84]	; (80014e4 <SystemInit+0xb4>)
 800148e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001490:	4915      	ldr	r1, [pc, #84]	; (80014e8 <SystemInit+0xb8>)
 8001492:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001496:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800149a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80014a4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014a6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <SystemInit+0xbc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b4:	d203      	bcs.n	80014be <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <SystemInit+0xc0>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <SystemInit+0xc4>)
 80014c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ca:	4b01      	ldr	r3, [pc, #4]	; (80014d0 <SystemInit+0xa0>)
 80014cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	52002000 	.word	0x52002000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e0:	02020200 	.word	0x02020200
 80014e4:	01ff0000 	.word	0x01ff0000
 80014e8:	01010280 	.word	0x01010280
 80014ec:	5c001000 	.word	0x5c001000
 80014f0:	51008000 	.word	0x51008000
 80014f4:	52004000 	.word	0x52004000

080014f8 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80014f8:	1e42      	subs	r2, r0, #1
 80014fa:	f100 010f 	add.w	r1, r0, #15
{
 80014fe:	b510      	push	{r4, lr}
  {
    str_ch = str[i];
 8001500:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 8001504:	b153      	cbz	r3, 800151c <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001506:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 800150a:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 800150c:	bf9c      	itt	ls
 800150e:	3b20      	subls	r3, #32
 8001510:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001512:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 8001514:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001516:	d1f3      	bne.n	8001500 <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	73c3      	strb	r3, [r0, #15]
  }
}
 800151c:	bd10      	pop	{r4, pc}
	...

08001520 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <cliArgsGetStr+0x18>)
 8001522:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 8001526:	4290      	cmp	r0, r2
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8001528:	bfba      	itte	lt
 800152a:	f8d3 3390 	ldrlt.w	r3, [r3, #912]	; 0x390
 800152e:	f853 0020 	ldrlt.w	r0, [r3, r0, lsl #2]
    return 0;
 8001532:	2000      	movge	r0, #0

  return ret;
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2400287c 	.word	0x2400287c

0800153c <cliArgsIsStr>:
{
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <cliArgsIsStr+0x28>)
{
 800153e:	b508      	push	{r3, lr}
 8001540:	4603      	mov	r3, r0
 8001542:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8001544:	f8b2 138c 	ldrh.w	r1, [r2, #908]	; 0x38c
 8001548:	428b      	cmp	r3, r1
 800154a:	da09      	bge.n	8001560 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800154c:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
 8001550:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001554:	f7fe fec4 	bl	80002e0 <strcmp>
 8001558:	fab0 f080 	clz	r0, r0
 800155c:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 800155e:	bd08      	pop	{r3, pc}
    return 0;
 8001560:	2000      	movs	r0, #0
 8001562:	e7fc      	b.n	800155e <cliArgsIsStr+0x22>
 8001564:	2400287c 	.word	0x2400287c

08001568 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <cliArgsGetFloat+0x20>)
 800156a:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800156e:	4290      	cmp	r0, r2
 8001570:	da06      	bge.n	8001580 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001572:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8001576:	2100      	movs	r1, #0
 8001578:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800157c:	f007 be50 	b.w	8009220 <strtof>
}
 8001580:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800158c <cliArgsGetFloat+0x24>
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2400287c 	.word	0x2400287c
 800158c:	00000000 	.word	0x00000000

08001590 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <cliArgsGetData+0x20>)
 8001592:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 8001596:	4290      	cmp	r0, r2
 8001598:	da07      	bge.n	80015aa <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800159a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800159e:	2200      	movs	r2, #0
 80015a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80015a4:	4611      	mov	r1, r2
 80015a6:	f007 bf1d 	b.w	80093e4 <strtoul>
}
 80015aa:	2000      	movs	r0, #0
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2400287c 	.word	0x2400287c

080015b4 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80015b4:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 80015b6:	4c25      	ldr	r4, [pc, #148]	; (800164c <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80015b8:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 80015ba:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03f      	beq.n	8001642 <cliLineChange.constprop.0+0x8e>
  if (p_cli->line.cursor > 0)
 80015c2:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80015c6:	b11a      	cbz	r2, 80015d0 <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80015c8:	4921      	ldr	r1, [pc, #132]	; (8001650 <cliLineChange.constprop.0+0x9c>)
 80015ca:	7820      	ldrb	r0, [r4, #0]
 80015cc:	f000 fce2 	bl	8001f94 <uartPrintf>
  if (p_cli->line.count > 0)
 80015d0:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80015d4:	b11a      	cbz	r2, 80015de <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80015d6:	491f      	ldr	r1, [pc, #124]	; (8001654 <cliLineChange.constprop.0+0xa0>)
 80015d8:	7820      	ldrb	r0, [r4, #0]
 80015da:	f000 fcdb 	bl	8001f94 <uartPrintf>
  if (key_up == true)
 80015de:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80015e0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
  if (key_up == true)
 80015e4:	d12e      	bne.n	8001644 <cliLineChange.constprop.0+0x90>
    if (p_cli->hist_line_new == true)
 80015e6:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 80015ea:	b11b      	cbz	r3, 80015f4 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80015ec:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 80015f0:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80015f4:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 80015f8:	4413      	add	r3, r2
 80015fa:	3b01      	subs	r3, #1
  p_cli->line = p_cli->line_buf[change_i];
 80015fc:	4d16      	ldr	r5, [pc, #88]	; (8001658 <cliLineChange.constprop.0+0xa4>)
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80015fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001602:	fb02 3311 	mls	r3, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 8001606:	2223      	movs	r2, #35	; 0x23
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001608:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800160c:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 800160e:	fb02 4303 	mla	r3, r2, r3, r4
 8001612:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001616:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800161a:	6810      	ldr	r0, [r2, #0]
 800161c:	3208      	adds	r2, #8
 800161e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8001622:	462e      	mov	r6, r5
 8001624:	429a      	cmp	r2, r3
 8001626:	c603      	stmia	r6!, {r0, r1}
 8001628:	4635      	mov	r5, r6
 800162a:	d1f6      	bne.n	800161a <cliLineChange.constprop.0+0x66>
 800162c:	7893      	ldrb	r3, [r2, #2]
 800162e:	8811      	ldrh	r1, [r2, #0]
 8001630:	70b3      	strb	r3, [r6, #2]
 8001632:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 8001634:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001638:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
  p_cli->hist_line_new = false;
 800163c:	2300      	movs	r3, #0
 800163e:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8001642:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001644:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8001648:	3301      	adds	r3, #1
 800164a:	e7d7      	b.n	80015fc <cliLineChange.constprop.0+0x48>
 800164c:	2400287c 	.word	0x2400287c
 8001650:	0800b5a8 	.word	0x0800b5a8
 8001654:	0800b5ae 	.word	0x0800b5ae
 8001658:	24002aa0 	.word	0x24002aa0

0800165c <cliOpen>:
{
 800165c:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 800165e:	4c03      	ldr	r4, [pc, #12]	; (800166c <cliOpen+0x10>)
 8001660:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 8001662:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 8001664:	f000 fbee 	bl	8001e44 <uartOpen>
 8001668:	7220      	strb	r0, [r4, #8]
}
 800166a:	bd10      	pop	{r4, pc}
 800166c:	2400287c 	.word	0x2400287c

08001670 <cliOpenLog>:
{
 8001670:	b510      	push	{r4, lr}
  cli_node.log_ch = ch;
 8001672:	4c04      	ldr	r4, [pc, #16]	; (8001684 <cliOpenLog+0x14>)
 8001674:	72a0      	strb	r0, [r4, #10]
  cli_node.log_baud = baud;
 8001676:	60e1      	str	r1, [r4, #12]
  ret = uartOpen(ch, baud);
 8001678:	f000 fbe4 	bl	8001e44 <uartOpen>
  if (ret == true)
 800167c:	b108      	cbz	r0, 8001682 <cliOpenLog+0x12>
    cli_node.is_log = true;
 800167e:	2301      	movs	r3, #1
 8001680:	7263      	strb	r3, [r4, #9]
}
 8001682:	bd10      	pop	{r4, pc}
 8001684:	2400287c 	.word	0x2400287c

08001688 <cliShowLog>:
{
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <cliShowLog+0x90>)
{
 800168c:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 800168e:	7a5b      	ldrb	r3, [r3, #9]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03f      	beq.n	8001714 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001694:	f890 2245 	ldrb.w	r2, [r0, #581]	; 0x245
 8001698:	f504 76cc 	add.w	r6, r4, #408	; 0x198
 800169c:	491f      	ldr	r1, [pc, #124]	; (800171c <cliShowLog+0x94>)
    for (int i=0; i<p_cli->hist_line_count; i++)
 800169e:	2500      	movs	r5, #0
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80016a0:	7a80      	ldrb	r0, [r0, #10]
 80016a2:	f000 fc77 	bl	8001f94 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80016a6:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80016aa:	491d      	ldr	r1, [pc, #116]	; (8001720 <cliShowLog+0x98>)
 80016ac:	7aa0      	ldrb	r0, [r4, #10]
 80016ae:	f000 fc71 	bl	8001f94 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80016b2:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 80016b6:	491b      	ldr	r1, [pc, #108]	; (8001724 <cliShowLog+0x9c>)
 80016b8:	7aa0      	ldrb	r0, [r4, #10]
 80016ba:	f000 fc6b 	bl	8001f94 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80016be:	f504 7209 	add.w	r2, r4, #548	; 0x224
 80016c2:	4919      	ldr	r1, [pc, #100]	; (8001728 <cliShowLog+0xa0>)
 80016c4:	7aa0      	ldrb	r0, [r4, #10]
 80016c6:	f000 fc65 	bl	8001f94 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80016ca:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 80016ce:	4917      	ldr	r1, [pc, #92]	; (800172c <cliShowLog+0xa4>)
 80016d0:	7aa0      	ldrb	r0, [r4, #10]
 80016d2:	f000 fc5f 	bl	8001f94 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80016d6:	4f16      	ldr	r7, [pc, #88]	; (8001730 <cliShowLog+0xa8>)
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80016d8:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 80016dc:	4915      	ldr	r1, [pc, #84]	; (8001734 <cliShowLog+0xac>)
 80016de:	7aa0      	ldrb	r0, [r4, #10]
 80016e0:	f000 fc58 	bl	8001f94 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80016e4:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 80016e8:	4913      	ldr	r1, [pc, #76]	; (8001738 <cliShowLog+0xb0>)
 80016ea:	7aa0      	ldrb	r0, [r4, #10]
 80016ec:	f000 fc52 	bl	8001f94 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80016f0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80016f4:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 80016f6:	42ab      	cmp	r3, r5
 80016f8:	dd07      	ble.n	800170a <cliShowLog+0x82>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80016fa:	4633      	mov	r3, r6
 80016fc:	462a      	mov	r2, r5
 80016fe:	4639      	mov	r1, r7
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001700:	3501      	adds	r5, #1
 8001702:	3623      	adds	r6, #35	; 0x23
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001704:	f000 fc46 	bl	8001f94 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001708:	e7f2      	b.n	80016f0 <cliShowLog+0x68>
    uartPrintf(p_cli->log_ch, "\n");
 800170a:	490c      	ldr	r1, [pc, #48]	; (800173c <cliShowLog+0xb4>)
}
 800170c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 8001710:	f000 bc40 	b.w	8001f94 <uartPrintf>
}
 8001714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	2400287c 	.word	0x2400287c
 800171c:	0800b5b4 	.word	0x0800b5b4
 8001720:	0800b5c2 	.word	0x0800b5c2
 8001724:	0800b5d0 	.word	0x0800b5d0
 8001728:	0800b5de 	.word	0x0800b5de
 800172c:	0800b5ec 	.word	0x0800b5ec
 8001730:	0800b616 	.word	0x0800b616
 8001734:	0800b5fa 	.word	0x0800b5fa
 8001738:	0800b608 	.word	0x0800b608
 800173c:	0800b6e9 	.word	0x0800b6e9

08001740 <cliPrintf>:
{
 8001740:	b40f      	push	{r0, r1, r2, r3}
 8001742:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <cliPrintf+0x30>)
{
 8001746:	ab06      	add	r3, sp, #24
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	f104 0511 	add.w	r5, r4, #17
{
 8001750:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001754:	4628      	mov	r0, r5
  va_start (arg, fmt);
 8001756:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001758:	f007 fe7a 	bl	8009450 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800175c:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800175e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001760:	7820      	ldrb	r0, [r4, #0]
 8001762:	f000 fbff 	bl	8001f64 <uartWrite>
}
 8001766:	b003      	add	sp, #12
 8001768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr
 8001770:	2400287c 	.word	0x2400287c

08001774 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	4c0e      	ldr	r4, [pc, #56]	; (80017b0 <cliShowList+0x3c>)


  cliPrintf("\r\n");
  cliPrintf("---------- cmd list ---------\r\n");

  for (int i=0; i<p_cli->cmd_count; i++)
 8001778:	2500      	movs	r5, #0
  cliPrintf("\r\n");
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <cliShowList+0x40>)
  for (int i=0; i<p_cli->cmd_count; i++)
 800177c:	f5a4 7713 	sub.w	r7, r4, #588	; 0x24c
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 8001780:	4e0c      	ldr	r6, [pc, #48]	; (80017b4 <cliShowList+0x40>)
  cliPrintf("\r\n");
 8001782:	f7ff ffdd 	bl	8001740 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <cliShowList+0x44>)
 8001788:	f7ff ffda 	bl	8001740 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800178c:	f8b7 3248 	ldrh.w	r3, [r7, #584]	; 0x248
 8001790:	42ab      	cmp	r3, r5
 8001792:	dd08      	ble.n	80017a6 <cliShowList+0x32>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001794:	4620      	mov	r0, r4
  for (int i=0; i<p_cli->cmd_count; i++)
 8001796:	3501      	adds	r5, #1
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001798:	f7ff ffd2 	bl	8001740 <cliPrintf>
    cliPrintf("\r\n");
 800179c:	4630      	mov	r0, r6
 800179e:	3414      	adds	r4, #20
 80017a0:	f7ff ffce 	bl	8001740 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80017a4:	e7f2      	b.n	800178c <cliShowList+0x18>
  }

  cliPrintf("-----------------------------\r\n");
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <cliShowList+0x48>)
}
 80017a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 80017ac:	f7ff bfc8 	b.w	8001740 <cliPrintf>
 80017b0:	24002ac8 	.word	0x24002ac8
 80017b4:	0800b6e8 	.word	0x0800b6e8
 80017b8:	0800b625 	.word	0x0800b625
 80017bc:	0800b645 	.word	0x0800b645

080017c0 <cliMemoryDump>:
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80017c0:	8803      	ldrh	r3, [r0, #0]
{
 80017c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c6:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 80017c8:	b92b      	cbnz	r3, 80017d6 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 80017ca:	482d      	ldr	r0, [pc, #180]	; (8001880 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 80017cc:	b005      	add	sp, #20
 80017ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 80017d2:	f7ff bfb5 	b.w	8001740 <cliPrintf>
  if(argc > 1)
 80017d6:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 80017d8:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 80017da:	d048      	beq.n	800186e <cliMemoryDump+0xae>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	4611      	mov	r1, r2
 80017e2:	f007 fdff 	bl	80093e4 <strtoul>
 80017e6:	4607      	mov	r7, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6820      	ldr	r0, [r4, #0]
  for (idx = 0; idx<size; idx++)
 80017ec:	2500      	movs	r5, #0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80017ee:	4611      	mov	r1, r2
 80017f0:	f007 fdf8 	bl	80093e4 <strtoul>
 80017f4:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <cliMemoryDump+0xc4>)
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80017f8:	4626      	mov	r6, r4
  cliPrintf("\n   ");
 80017fa:	f7ff ffa1 	bl	8001740 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80017fe:	42bd      	cmp	r5, r7
 8001800:	da3b      	bge.n	800187a <cliMemoryDump+0xba>
    if((idx%4) == 0)
 8001802:	f015 0803 	ands.w	r8, r5, #3
 8001806:	d103      	bne.n	8001810 <cliMemoryDump+0x50>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001808:	4631      	mov	r1, r6
 800180a:	481f      	ldr	r0, [pc, #124]	; (8001888 <cliMemoryDump+0xc8>)
 800180c:	f7ff ff98 	bl	8001740 <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 8001810:	6831      	ldr	r1, [r6, #0]
 8001812:	481e      	ldr	r0, [pc, #120]	; (800188c <cliMemoryDump+0xcc>)
 8001814:	f7ff ff94 	bl	8001740 <cliPrintf>
    if ((idx%4) == 3)
 8001818:	f1b8 0f03 	cmp.w	r8, #3
 800181c:	d124      	bne.n	8001868 <cliMemoryDump+0xa8>
      cliPrintf ("  |");
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <cliMemoryDump+0xd0>)
 8001820:	f7ff ff8e 	bl	8001740 <cliPrintf>
            cliPrintf(".");
 8001824:	f8df a070 	ldr.w	sl, [pc, #112]	; 8001898 <cliMemoryDump+0xd8>
 8001828:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 800182c:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800189c <cliMemoryDump+0xdc>
 8001830:	9301      	str	r3, [sp, #4]
        memcpy((char *)asc, (char *)ascptr, 4);
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f10d 080c 	add.w	r8, sp, #12
        for (i=0;i<4;i++)
 8001838:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 800183c:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800183e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001842:	f1a1 0220 	sub.w	r2, r1, #32
 8001846:	2a5e      	cmp	r2, #94	; 0x5e
 8001848:	d813      	bhi.n	8001872 <cliMemoryDump+0xb2>
            cliPrintf("%c", asc[i]);
 800184a:	4658      	mov	r0, fp
 800184c:	f7ff ff78 	bl	8001740 <cliPrintf>
        for (i=0;i<4;i++)
 8001850:	f109 0901 	add.w	r9, r9, #1
 8001854:	f1b9 0f04 	cmp.w	r9, #4
 8001858:	d1f1      	bne.n	800183e <cliMemoryDump+0x7e>
        ascptr+=1;
 800185a:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	429c      	cmp	r4, r3
 8001860:	d1e7      	bne.n	8001832 <cliMemoryDump+0x72>
      cliPrintf("|\n   ");
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <cliMemoryDump+0xd4>)
 8001864:	f7ff ff6c 	bl	8001740 <cliPrintf>
    addr++;
 8001868:	3604      	adds	r6, #4
  for (idx = 0; idx<size; idx++)
 800186a:	3501      	adds	r5, #1
 800186c:	e7c7      	b.n	80017fe <cliMemoryDump+0x3e>
  int idx, size = 16;
 800186e:	2710      	movs	r7, #16
 8001870:	e7ba      	b.n	80017e8 <cliMemoryDump+0x28>
            cliPrintf(".");
 8001872:	4650      	mov	r0, sl
 8001874:	f7ff ff64 	bl	8001740 <cliPrintf>
 8001878:	e7ea      	b.n	8001850 <cliMemoryDump+0x90>
}
 800187a:	b005      	add	sp, #20
 800187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001880:	0800b665 	.word	0x0800b665
 8001884:	0800b695 	.word	0x0800b695
 8001888:	0800b679 	.word	0x0800b679
 800188c:	0800b683 	.word	0x0800b683
 8001890:	0800b68b 	.word	0x0800b68b
 8001894:	0800b694 	.word	0x0800b694
 8001898:	0800b692 	.word	0x0800b692
 800189c:	0800b68f 	.word	0x0800b68f

080018a0 <cliMain>:
{
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 80018a4:	4ca6      	ldr	r4, [pc, #664]	; (8001b40 <cliMain+0x2a0>)
{
 80018a6:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 80018a8:	7a27      	ldrb	r7, [r4, #8]
 80018aa:	2f00      	cmp	r7, #0
 80018ac:	f000 8142 	beq.w	8001b34 <cliMain+0x294>
  if (uartAvailable(cli_node.ch) > 0)
 80018b0:	7820      	ldrb	r0, [r4, #0]
 80018b2:	f000 fb0b 	bl	8001ecc <uartAvailable>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f000 813c 	beq.w	8001b34 <cliMain+0x294>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80018bc:	7820      	ldrb	r0, [r4, #0]
 80018be:	f000 fb19 	bl	8001ef4 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 80018c2:	f894 8010 	ldrb.w	r8, [r4, #16]
 80018c6:	f88d 0007 	strb.w	r0, [sp, #7]
 80018ca:	f1b8 0f00 	cmp.w	r8, #0
 80018ce:	f040 80f6 	bne.w	8001abe <cliMain+0x21e>
    switch(rx_data)
 80018d2:	281b      	cmp	r0, #27
 80018d4:	f000 8129 	beq.w	8001b2a <cliMain+0x28a>
 80018d8:	d852      	bhi.n	8001980 <cliMain+0xe0>
 80018da:	2808      	cmp	r0, #8
 80018dc:	f000 80f9 	beq.w	8001ad2 <cliMain+0x232>
 80018e0:	280d      	cmp	r0, #13
 80018e2:	d06a      	beq.n	80019ba <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 80018e4:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80018e8:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 80018ec:	1c59      	adds	r1, r3, #1
 80018ee:	4291      	cmp	r1, r2
 80018f0:	f280 811d 	bge.w	8001b2e <cliMain+0x28e>
          if (line->cursor == line->count)
 80018f4:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d119      	bne.n	8001930 <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f10d 0107 	add.w	r1, sp, #7
 8001902:	7820      	ldrb	r0, [r4, #0]
 8001904:	f000 fb2e 	bl	8001f64 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8001908:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800190c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001910:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8001912:	3201      	adds	r2, #1
            line->buf[line->cursor] = rx_data;
 8001914:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            line->count++;
 8001918:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
            line->cursor++;
 800191c:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 8001920:	2200      	movs	r2, #0
            line->count++;
 8001922:	3301      	adds	r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 800192a:	4423      	add	r3, r4
 800192c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 8001930:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
 8001934:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 8001938:	42ae      	cmp	r6, r5
 800193a:	f080 80c0 	bcs.w	8001abe <cliMain+0x21e>
            mov_len = line->count - line->cursor;
 800193e:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001940:	f505 7109 	add.w	r1, r5, #548	; 0x224
 8001944:	f205 2025 	addw	r0, r5, #549	; 0x225
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	1a89      	subs	r1, r1, r2
 800194c:	1a80      	subs	r0, r0, r2
 800194e:	4421      	add	r1, r4
 8001950:	4420      	add	r0, r4
 8001952:	f006 fd16 	bl	8008382 <memmove>
            line->buf[line->cursor] = rx_data;
 8001956:	19a3      	adds	r3, r4, r6
 8001958:	f89d 2007 	ldrb.w	r2, [sp, #7]
            line->buf[line->count] = 0;
 800195c:	2100      	movs	r1, #0
            line->cursor++;
 800195e:	3601      	adds	r6, #1
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001960:	7820      	ldrb	r0, [r4, #0]
            line->buf[line->cursor] = rx_data;
 8001962:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
            line->count++;
 8001966:	1c6b      	adds	r3, r5, #1
            line->cursor++;
 8001968:	f884 6245 	strb.w	r6, [r4, #581]	; 0x245
            line->count++;
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8001972:	4423      	add	r3, r4
 8001974:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001978:	4972      	ldr	r1, [pc, #456]	; (8001b44 <cliMain+0x2a4>)
 800197a:	f000 fb0b 	bl	8001f94 <uartPrintf>
 800197e:	e09e      	b.n	8001abe <cliMain+0x21e>
    switch(rx_data)
 8001980:	287f      	cmp	r0, #127	; 0x7f
 8001982:	d1af      	bne.n	80018e4 <cliMain+0x44>
        if (line->cursor < line->count)
 8001984:	f894 0245 	ldrb.w	r0, [r4, #581]	; 0x245
 8001988:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 800198c:	42a8      	cmp	r0, r5
 800198e:	f080 80ce 	bcs.w	8001b2e <cliMain+0x28e>
          mov_len = line->count - line->cursor;
 8001992:	1a2a      	subs	r2, r5, r0
          line->count--;
 8001994:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001996:	f200 2125 	addw	r1, r0, #549	; 0x225
 800199a:	f500 7009 	add.w	r0, r0, #548	; 0x224
 800199e:	b2d2      	uxtb	r2, r2
          line->count--;
 80019a0:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80019a2:	4421      	add	r1, r4
 80019a4:	3a01      	subs	r2, #1
 80019a6:	4420      	add	r0, r4
 80019a8:	f006 fceb 	bl	8008382 <memmove>
          line->count--;
 80019ac:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
          line->buf[line->count] = 0;
 80019b0:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P");
 80019b2:	4965      	ldr	r1, [pc, #404]	; (8001b48 <cliMain+0x2a8>)
          line->buf[line->count] = 0;
 80019b4:	f885 8224 	strb.w	r8, [r5, #548]	; 0x224
          uartPrintf(p_cli->ch, "\x1B[1P");
 80019b8:	e07e      	b.n	8001ab8 <cliMain+0x218>
        if (line->count > 0)
 80019ba:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d06e      	beq.n	8001aa0 <cliMain+0x200>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80019c2:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 80019c6:	2323      	movs	r3, #35	; 0x23
 80019c8:	f504 7509 	add.w	r5, r4, #548	; 0x224
 80019cc:	f504 7c11 	add.w	ip, r4, #580	; 0x244
 80019d0:	fb03 4302 	mla	r3, r3, r2, r4
 80019d4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80019d8:	462e      	mov	r6, r5
 80019da:	3308      	adds	r3, #8
 80019dc:	ce03      	ldmia	r6!, {r0, r1}
 80019de:	4566      	cmp	r6, ip
 80019e0:	f843 0c08 	str.w	r0, [r3, #-8]
 80019e4:	f843 1c04 	str.w	r1, [r3, #-4]
 80019e8:	4635      	mov	r5, r6
 80019ea:	d1f5      	bne.n	80019d8 <cliMain+0x138>
 80019ec:	8830      	ldrh	r0, [r6, #0]
 80019ee:	78b1      	ldrb	r1, [r6, #2]
  p_cli->argc = 0;
 80019f0:	2600      	movs	r6, #0
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80019f2:	8018      	strh	r0, [r3, #0]
 80019f4:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80019f6:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_i    = p_cli->hist_line_last;
 80019fa:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80019fe:	3201      	adds	r2, #1
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001a00:	2b03      	cmp	r3, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a02:	4952      	ldr	r1, [pc, #328]	; (8001b4c <cliMain+0x2ac>)
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001a04:	f002 0203 	and.w	r2, r2, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a08:	4851      	ldr	r0, [pc, #324]	; (8001b50 <cliMain+0x2b0>)
    p_cli->hist_line_count++;
 8001a0a:	bf98      	it	ls
 8001a0c:	3301      	addls	r3, #1
  p_cli->argc = 0;
 8001a0e:	f8a4 6112 	strh.w	r6, [r4, #274]	; 0x112
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001a12:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a16:	aa02      	add	r2, sp, #8
    p_cli->hist_line_count++;
 8001a18:	bf98      	it	ls
 8001a1a:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 8001a1e:	2301      	movs	r3, #1
  argv[argc] = NULL;
 8001a20:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
  p_cli->hist_line_new  = true;
 8001a24:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a28:	f007 fc66 	bl	80092f8 <strtok_r>
 8001a2c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8001b4c <cliMain+0x2ac>
 8001a30:	4605      	mov	r5, r0
 8001a32:	4633      	mov	r3, r6
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	1c5e      	adds	r6, r3, #1
 8001a38:	b15d      	cbz	r5, 8001a52 <cliMain+0x1b2>
    argv[argc++] = tok;
 8001a3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a3e:	4641      	mov	r1, r8
 8001a40:	aa02      	add	r2, sp, #8
 8001a42:	2000      	movs	r0, #0
    argv[argc++] = tok;
 8001a44:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001a48:	f007 fc56 	bl	80092f8 <strtok_r>
 8001a4c:	4633      	mov	r3, r6
 8001a4e:	4605      	mov	r5, r0
 8001a50:	e7f0      	b.n	8001a34 <cliMain+0x194>
  p_cli->argc = argc;
 8001a52:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 8001a56:	b31a      	cbz	r2, 8001aa0 <cliMain+0x200>
    cliPrintf("\r\n");
 8001a58:	483e      	ldr	r0, [pc, #248]	; (8001b54 <cliMain+0x2b4>)
 8001a5a:	f7ff fe71 	bl	8001740 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8001a5e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8001a62:	f7ff fd49 	bl	80014f8 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001a66:	4e3c      	ldr	r6, [pc, #240]	; (8001b58 <cliMain+0x2b8>)
 8001a68:	f8b4 8248 	ldrh.w	r8, [r4, #584]	; 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001a6c:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8001a70:	45a8      	cmp	r8, r5
 8001a72:	dd15      	ble.n	8001aa0 <cliMain+0x200>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001a74:	4631      	mov	r1, r6
 8001a76:	4648      	mov	r0, r9
 8001a78:	3614      	adds	r6, #20
 8001a7a:	f7fe fc31 	bl	80002e0 <strcmp>
 8001a7e:	bb30      	cbnz	r0, 8001ace <cliMain+0x22e>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001a80:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001a84:	4835      	ldr	r0, [pc, #212]	; (8001b5c <cliMain+0x2bc>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001a86:	3b01      	subs	r3, #1
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001a88:	f8c4 0390 	str.w	r0, [r4, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001a8c:	f500 701d 	add.w	r0, r0, #628	; 0x274
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001a90:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001a94:	2314      	movs	r3, #20
 8001a96:	fb03 4505 	mla	r5, r3, r5, r4
 8001a9a:	f8d5 325c 	ldr.w	r3, [r5, #604]	; 0x25c
 8001a9e:	4798      	blx	r3
        line->count = 0;
 8001aa0:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <cliMain+0x2c0>)
 8001aa4:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 8001aa6:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
        line->cursor = 0;
 8001aaa:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        line->buf[0] = 0;
 8001aae:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  uartPrintf(p_cli->ch, "\n\r");
 8001ab2:	f000 fa6f 	bl	8001f94 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001ab6:	492b      	ldr	r1, [pc, #172]	; (8001b64 <cliMain+0x2c4>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ab8:	7820      	ldrb	r0, [r4, #0]
 8001aba:	f000 fa6b 	bl	8001f94 <uartPrintf>
  switch(p_cli->state)
 8001abe:	7c23      	ldrb	r3, [r4, #16]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d833      	bhi.n	8001b2e <cliMain+0x28e>
 8001ac6:	e8df f003 	tbb	[pc, r3]
 8001aca:	3930      	.short	0x3930
 8001acc:	cb51      	.short	0xcb51
    for (int i=0; i<p_cli->cmd_count; i++)
 8001ace:	3501      	adds	r5, #1
 8001ad0:	e7ce      	b.n	8001a70 <cliMain+0x1d0>
        if (line->count > 0 && line->cursor > 0)
 8001ad2:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
        if (line->cursor < line->count)
 8001ad6:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
        if (line->count > 0 && line->cursor > 0)
 8001ada:	b92b      	cbnz	r3, 8001ae8 <cliMain+0x248>
        if (line->cursor > 0)
 8001adc:	b33e      	cbz	r6, 8001b2e <cliMain+0x28e>
          line->cursor--;
 8001ade:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ae0:	4921      	ldr	r1, [pc, #132]	; (8001b68 <cliMain+0x2c8>)
          line->cursor--;
 8001ae2:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001ae6:	e7e7      	b.n	8001ab8 <cliMain+0x218>
        if (line->count > 0 && line->cursor > 0)
 8001ae8:	b30e      	cbz	r6, 8001b2e <cliMain+0x28e>
          if (line->cursor == line->count)
 8001aea:	42b3      	cmp	r3, r6
 8001aec:	d106      	bne.n	8001afc <cliMain+0x25c>
            line->count--;
 8001aee:	1e73      	subs	r3, r6, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8001af6:	4423      	add	r3, r4
 8001af8:	f883 8224 	strb.w	r8, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 8001afc:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 8001b00:	42b5      	cmp	r5, r6
 8001b02:	d9ec      	bls.n	8001ade <cliMain+0x23e>
            mov_len = line->count - line->cursor;
 8001b04:	1baa      	subs	r2, r5, r6
            line->count--;
 8001b06:	3d01      	subs	r5, #1
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b08:	f506 7109 	add.w	r1, r6, #548	; 0x224
 8001b0c:	f206 2023 	addw	r0, r6, #547	; 0x223
            line->count--;
 8001b10:	b2ed      	uxtb	r5, r5
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	4421      	add	r1, r4
 8001b16:	4420      	add	r0, r4
 8001b18:	f006 fc33 	bl	8008382 <memmove>
            line->buf[line->count] = 0;
 8001b1c:	2300      	movs	r3, #0
            line->count--;
 8001b1e:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8001b22:	4425      	add	r5, r4
 8001b24:	f885 3224 	strb.w	r3, [r5, #548]	; 0x224
        if (line->cursor > 0)
 8001b28:	e7d9      	b.n	8001ade <cliMain+0x23e>
      p_cli->state = CLI_RX_SP2;
 8001b2a:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 8001b2c:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <cliMain+0x2a0>)
 8001b30:	f7ff fdaa 	bl	8001688 <cliShowLog>
}
 8001b34:	4638      	mov	r0, r7
 8001b36:	b005      	add	sp, #20
 8001b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e7f5      	b.n	8001b2c <cliMain+0x28c>
 8001b40:	2400287c 	.word	0x2400287c
 8001b44:	0800b6b2 	.word	0x0800b6b2
 8001b48:	0800b6ad 	.word	0x0800b6ad
 8001b4c:	0800b69a 	.word	0x0800b69a
 8001b50:	24002aa0 	.word	0x24002aa0
 8001b54:	0800b6e8 	.word	0x0800b6e8
 8001b58:	24002ac8 	.word	0x24002ac8
 8001b5c:	24002994 	.word	0x24002994
 8001b60:	0800b6a1 	.word	0x0800b6a1
 8001b64:	0800b6a4 	.word	0x0800b6a4
 8001b68:	0800b6aa 	.word	0x0800b6aa
      if (rx_data == CLI_KEY_LEFT)
 8001b6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 8001b70:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 8001b72:	2a44      	cmp	r2, #68	; 0x44
      p_cli->state = CLI_RX_IDLE;
 8001b74:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001b76:	d112      	bne.n	8001b9e <cliMain+0x2fe>
        if (line->cursor > 0)
 8001b78:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8001b7c:	b3a3      	cbz	r3, 8001be8 <cliMain+0x348>
          line->cursor--;
 8001b7e:	3b01      	subs	r3, #1
          tx_buf[2] = rx_data;
 8001b80:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001b84:	a902      	add	r1, sp, #8
 8001b86:	2203      	movs	r2, #3
          line->cursor--;
 8001b88:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 8001b8c:	231b      	movs	r3, #27
          uartWrite(p_cli->ch, tx_buf, 3);
 8001b8e:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 8001b90:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 8001b94:	235b      	movs	r3, #91	; 0x5b
 8001b96:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001b9a:	f000 f9e3 	bl	8001f64 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 8001b9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001ba2:	2a43      	cmp	r2, #67	; 0x43
 8001ba4:	d115      	bne.n	8001bd2 <cliMain+0x332>
        if (line->cursor < line->count)
 8001ba6:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8001baa:	f894 1246 	ldrb.w	r1, [r4, #582]	; 0x246
 8001bae:	4299      	cmp	r1, r3
 8001bb0:	d925      	bls.n	8001bfe <cliMain+0x35e>
          line->cursor++;
 8001bb2:	3301      	adds	r3, #1
          tx_buf[2] = rx_data;
 8001bb4:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001bb8:	a902      	add	r1, sp, #8
 8001bba:	2203      	movs	r2, #3
          line->cursor++;
 8001bbc:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 8001bc0:	231b      	movs	r3, #27
          uartWrite(p_cli->ch, tx_buf, 3);
 8001bc2:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 8001bc4:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 8001bc8:	235b      	movs	r3, #91	; 0x5b
 8001bca:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001bce:	f000 f9c9 	bl	8001f64 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8001bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bd6:	2b41      	cmp	r3, #65	; 0x41
 8001bd8:	d106      	bne.n	8001be8 <cliMain+0x348>
        cliLineChange(p_cli, true);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff fcea 	bl	80015b4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001be0:	4920      	ldr	r1, [pc, #128]	; (8001c64 <cliMain+0x3c4>)
 8001be2:	7820      	ldrb	r0, [r4, #0]
 8001be4:	f000 f9d6 	bl	8001f94 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 8001be8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bec:	2b42      	cmp	r3, #66	; 0x42
 8001bee:	d106      	bne.n	8001bfe <cliMain+0x35e>
        cliLineChange(p_cli, false);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fcdf 	bl	80015b4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <cliMain+0x3c4>)
 8001bf8:	7820      	ldrb	r0, [r4, #0]
 8001bfa:	f000 f9cb 	bl	8001f94 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8001bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c02:	2b31      	cmp	r3, #49	; 0x31
 8001c04:	d10a      	bne.n	8001c1c <cliMain+0x37c>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001c06:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8001c0a:	4917      	ldr	r1, [pc, #92]	; (8001c68 <cliMain+0x3c8>)
 8001c0c:	7820      	ldrb	r0, [r4, #0]
 8001c0e:	f000 f9c1 	bl	8001f94 <uartPrintf>
        line->cursor = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8001c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c20:	2b34      	cmp	r3, #52	; 0x34
 8001c22:	d184      	bne.n	8001b2e <cliMain+0x28e>
        if (line->cursor < line->count)
 8001c24:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8001c28:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d205      	bcs.n	8001c3c <cliMain+0x39c>
          mov_len = line->count - line->cursor;
 8001c30:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <cliMain+0x3cc>)
 8001c34:	7820      	ldrb	r0, [r4, #0]
 8001c36:	b292      	uxth	r2, r2
 8001c38:	f000 f9ac 	bl	8001f94 <uartPrintf>
        if (line->cursor > line->count)
 8001c3c:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 8001c40:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d905      	bls.n	8001c54 <cliMain+0x3b4>
          mov_len = line->cursor - line->count;
 8001c48:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001c4a:	4907      	ldr	r1, [pc, #28]	; (8001c68 <cliMain+0x3c8>)
 8001c4c:	7820      	ldrb	r0, [r4, #0]
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f000 f9a0 	bl	8001f94 <uartPrintf>
        line->cursor = line->count;
 8001c54:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001c58:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e765      	b.n	8001b2c <cliMain+0x28c>
      p_cli->state = CLI_RX_IDLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e763      	b.n	8001b2c <cliMain+0x28c>
 8001c64:	24002aa0 	.word	0x24002aa0
 8001c68:	0800b5a8 	.word	0x0800b5a8
 8001c6c:	0800b6bd 	.word	0x0800b6bd

08001c70 <cliAdd>:
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001c72:	4d0e      	ldr	r5, [pc, #56]	; (8001cac <cliAdd+0x3c>)
{
 8001c74:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001c76:	f8b5 4248 	ldrh.w	r4, [r5, #584]	; 0x248
 8001c7a:	2c0f      	cmp	r4, #15
 8001c7c:	d814      	bhi.n	8001ca8 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001c7e:	2314      	movs	r3, #20
 8001c80:	4601      	mov	r1, r0
 8001c82:	435c      	muls	r4, r3
 8001c84:	f504 7313 	add.w	r3, r4, #588	; 0x24c
  p_cli->cmd_list[index].cmd_func = p_func;
 8001c88:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001c8a:	442b      	add	r3, r5
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 fcec 	bl	800866a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001c92:	f8c4 625c 	str.w	r6, [r4, #604]	; 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001c96:	f7ff fc2f 	bl	80014f8 <cliToUpper>
  p_cli->cmd_count++;
 8001c9a:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
  return ret;
 8001c9e:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8a5 3248 	strh.w	r3, [r5, #584]	; 0x248
}
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e7fc      	b.n	8001ca6 <cliAdd+0x36>
 8001cac:	2400287c 	.word	0x2400287c

08001cb0 <cliInit>:
{
 8001cb0:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001cb2:	4911      	ldr	r1, [pc, #68]	; (8001cf8 <cliInit+0x48>)
  cli_node.is_open = false;
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <cliInit+0x4c>)
  cliAdd("help", cliShowList);
 8001cb8:	4811      	ldr	r0, [pc, #68]	; (8001d00 <cliInit+0x50>)
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001cba:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001cbe:	4911      	ldr	r1, [pc, #68]	; (8001d04 <cliInit+0x54>)
  cli_node.is_open = false;
 8001cc0:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001cc2:	f8c3 1398 	str.w	r1, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001cc6:	4910      	ldr	r1, [pc, #64]	; (8001d08 <cliInit+0x58>)
  cli_node.hist_line_new   = false;
 8001cc8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001ccc:	f8c3 139c 	str.w	r1, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <cliInit+0x5c>)
  p_cli->line.buf[0]  = 0;
 8001cd2:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001cd6:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001cda:	211f      	movs	r1, #31
  cli_node.state   = CLI_RX_IDLE;
 8001cdc:	741a      	strb	r2, [r3, #16]
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001cde:	f8a3 1244 	strh.w	r1, [r3, #580]	; 0x244
  cliAdd("help", cliShowList);
 8001ce2:	490b      	ldr	r1, [pc, #44]	; (8001d10 <cliInit+0x60>)
  p_cli->line.count   = 0;
 8001ce4:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  cliAdd("help", cliShowList);
 8001ce8:	f7ff ffc2 	bl	8001c70 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001cec:	4909      	ldr	r1, [pc, #36]	; (8001d14 <cliInit+0x64>)
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <cliInit+0x68>)
 8001cf0:	f7ff ffbe 	bl	8001c70 <cliAdd>
}
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	08001591 	.word	0x08001591
 8001cfc:	2400287c 	.word	0x2400287c
 8001d00:	0800b6c3 	.word	0x0800b6c3
 8001d04:	08001569 	.word	0x08001569
 8001d08:	08001521 	.word	0x08001521
 8001d0c:	0800153d 	.word	0x0800153d
 8001d10:	08001775 	.word	0x08001775
 8001d14:	080017c1 	.word	0x080017c1
 8001d18:	0800b6c8 	.word	0x0800b6c8

08001d1c <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{

	bool ret = true;
	p_node->in = 0;
 8001d1c:	2300      	movs	r3, #0
	p_node->out = 0;
	p_node->len = length;
	p_node->p_buf = p_buf;
 8001d1e:	e9c0 2102 	strd	r2, r1, [r0, #8]
	p_node->out = 0;
 8001d22:	e9c0 3300 	strd	r3, r3, [r0]

	return ret;

}
 8001d26:	2001      	movs	r0, #1
 8001d28:	4770      	bx	lr

08001d2a <qbufferWrite>:


bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool ret = true;
	uint32_t next_in;

	for(int i=0; i< (int)length; i++)
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	42a2      	cmp	r2, r4
 8001d30:	dd10      	ble.n	8001d54 <qbufferWrite+0x2a>
	{
		next_in = (p_node->in+1) % p_node->len;
 8001d32:	6805      	ldr	r5, [r0, #0]
 8001d34:	6886      	ldr	r6, [r0, #8]
 8001d36:	1c6b      	adds	r3, r5, #1
 8001d38:	fbb3 f7f6 	udiv	r7, r3, r6
 8001d3c:	fb06 3317 	mls	r3, r6, r7, r3
		if(next_in != p_node->out)
 8001d40:	6846      	ldr	r6, [r0, #4]
 8001d42:	429e      	cmp	r6, r3
 8001d44:	d008      	beq.n	8001d58 <qbufferWrite+0x2e>
		{
			if(p_node->p_buf != NULL)
 8001d46:	68c6      	ldr	r6, [r0, #12]
 8001d48:	b10e      	cbz	r6, 8001d4e <qbufferWrite+0x24>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 8001d4a:	5d0f      	ldrb	r7, [r1, r4]
 8001d4c:	5577      	strb	r7, [r6, r5]
	for(int i=0; i< (int)length; i++)
 8001d4e:	3401      	adds	r4, #1
			}
			p_node->in = next_in;
 8001d50:	6003      	str	r3, [r0, #0]
	for(int i=0; i< (int)length; i++)
 8001d52:	e7ec      	b.n	8001d2e <qbufferWrite+0x4>
	bool ret = true;
 8001d54:	2001      	movs	r0, #1
			break;
		}
	}
	return ret;

}
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = false;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e7fc      	b.n	8001d56 <qbufferWrite+0x2c>

08001d5c <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = true;

	for(int i = 0; i<length; i++)
 8001d5c:	440a      	add	r2, r1
{
 8001d5e:	b530      	push	{r4, r5, lr}
	for(int i = 0; i<length; i++)
 8001d60:	4291      	cmp	r1, r2
 8001d62:	d011      	beq.n	8001d88 <qbufferRead+0x2c>
	{
		if(p_node->p_buf != NULL)
 8001d64:	68c3      	ldr	r3, [r0, #12]
 8001d66:	b113      	cbz	r3, 8001d6e <qbufferRead+0x12>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8001d68:	6844      	ldr	r4, [r0, #4]
 8001d6a:	5d1b      	ldrb	r3, [r3, r4]
 8001d6c:	700b      	strb	r3, [r1, #0]

		}

		if(p_node->out != p_node->in)
 8001d6e:	6843      	ldr	r3, [r0, #4]
 8001d70:	3101      	adds	r1, #1
 8001d72:	6804      	ldr	r4, [r0, #0]
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	d009      	beq.n	8001d8c <qbufferRead+0x30>
		{
			p_node->out = (p_node->out +1) % p_node->len;
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6884      	ldr	r4, [r0, #8]
 8001d7c:	fbb3 f5f4 	udiv	r5, r3, r4
 8001d80:	fb04 3315 	mls	r3, r4, r5, r3
 8001d84:	6043      	str	r3, [r0, #4]
	for(int i = 0; i<length; i++)
 8001d86:	e7eb      	b.n	8001d60 <qbufferRead+0x4>
	bool ret = true;
 8001d88:	2001      	movs	r0, #1
			break;
		}
	}

	return ret;
}
 8001d8a:	bd30      	pop	{r4, r5, pc}
			ret = false;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e7fc      	b.n	8001d8a <qbufferRead+0x2e>

08001d90 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{

	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001d90:	6882      	ldr	r2, [r0, #8]
 8001d92:	6803      	ldr	r3, [r0, #0]
 8001d94:	6840      	ldr	r0, [r0, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	1a1b      	subs	r3, r3, r0
 8001d9a:	fbb3 f0f2 	udiv	r0, r3, r2


	return ret;
}
 8001d9e:	fb02 3010 	mls	r0, r2, r0, r3
 8001da2:	4770      	bx	lr

08001da4 <_Z9resetInitv>:

bool resetInit(void)
{
	bool ret = true;
//	HAL_PWR_EnableBkUpAccess();
	__HAL_RCC_RTC_ENABLE();
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <_Z9resetInitv+0x68>)
 8001da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
{
 8001dac:	b510      	push	{r4, lr}
	__HAL_RCC_RTC_ENABLE();
 8001dae:	671a      	str	r2, [r3, #112]	; 0x70


//reset pin check...i don't know why it is not working..
///it is not working...
	if(RCC->CSR & (1<<26))
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	4c17      	ldr	r4, [pc, #92]	; (8001e10 <_Z9resetInitv+0x6c>)
 8001db4:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001db8:	d00e      	beq.n	8001dd8 <_Z9resetInitv+0x34>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f83a 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001dc0:	1c41      	adds	r1, r0, #1
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f000 f82e 	bl	8001e24 <_Z17rtcBackupRegWritemm>
		delay(500);
 8001dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dcc:	f7fe fe67 	bl	8000a9e <_Z5delaym>
		reset_count = rtcBackupRegRead(0);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f000 f82f 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001dd6:	6020      	str	r0, [r4, #0]


////////////////////////////////////////////////


	rtcBackupRegWrite(0, rtcBackupRegRead(0)+1);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f82b 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001dde:	1c41      	adds	r1, r0, #1
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f81f 	bl	8001e24 <_Z17rtcBackupRegWritemm>


//	//임시방편
	//(rtcBackupRegRead(0) == 1 -> firmware // (rtcBackupRegRead(0) == 0 -> bootloader
	if(rtcBackupRegRead(0) > 1 || rtcBackupRegRead(0) < 0)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f824 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001dec:	2801      	cmp	r0, #1
 8001dee:	d909      	bls.n	8001e04 <_Z9resetInitv+0x60>
	{
		rtcBackupRegWrite(0, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	4608      	mov	r0, r1
 8001df4:	f000 f816 	bl	8001e24 <_Z17rtcBackupRegWritemm>
	}

	reset_count = rtcBackupRegRead(0);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 f81b 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001dfe:	6020      	str	r0, [r4, #0]



//	HAL_PWR_DisableBkUpAccess();
	return ret;
}
 8001e00:	2001      	movs	r0, #1
 8001e02:	bd10      	pop	{r4, pc}
	if(rtcBackupRegRead(0) > 1 || rtcBackupRegRead(0) < 0)
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 f815 	bl	8001e34 <_Z16rtcBackupRegReadm>
 8001e0a:	e7f5      	b.n	8001df8 <_Z9resetInitv+0x54>
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	24002c20 	.word	0x24002c20

08001e14 <_Z13resetGetCountv>:

uint32_t resetGetCount(void)
{

	return reset_count;
}
 8001e14:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <_Z13resetGetCountv+0x8>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	24002c20 	.word	0x24002c20

08001e20 <_Z7rtcInitv>:
{
	bool ret = true;


	return ret;
}
 8001e20:	2001      	movs	r0, #1
 8001e22:	4770      	bx	lr

08001e24 <_Z17rtcBackupRegWritemm>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8001e24:	460a      	mov	r2, r1
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8001e26:	4601      	mov	r1, r0
 8001e28:	4801      	ldr	r0, [pc, #4]	; (8001e30 <_Z17rtcBackupRegWritemm+0xc>)
 8001e2a:	f003 b8e7 	b.w	8004ffc <HAL_RTCEx_BKUPWrite>
 8001e2e:	bf00      	nop
 8001e30:	240025c8 	.word	0x240025c8

08001e34 <_Z16rtcBackupRegReadm>:

}


uint32_t rtcBackupRegRead(uint32_t index)
{
 8001e34:	4601      	mov	r1, r0
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8001e36:	4801      	ldr	r0, [pc, #4]	; (8001e3c <_Z16rtcBackupRegReadm+0x8>)
 8001e38:	f003 b8e5 	b.w	8005006 <HAL_RTCEx_BKUPRead>
 8001e3c:	240025c8 	.word	0x240025c8

08001e40 <uartInit>:
bool uartInit(void){
	for(int i =0; i<UART_MAX_CH; i++){
		is_open[i] = false;
	}
	return 0;
}
 8001e40:	2000      	movs	r0, #0
 8001e42:	4770      	bx	lr

08001e44 <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud){
 8001e44:	b510      	push	{r4, lr}
	bool ret = false;


	switch(ch)
 8001e46:	b118      	cbz	r0, 8001e50 <uartOpen+0xc>
 8001e48:	2801      	cmp	r0, #1
 8001e4a:	d015      	beq.n	8001e78 <uartOpen+0x34>
		case _DEF_UART1:

			qbufferCreate(&qbuffer[_DEF_UART1], &rx_buf[0], 256);

			if(HAL_UART_Init(&huart5) != HAL_OK){
				ret = false;
 8001e4c:	2000      	movs	r0, #0
			}
			break;
	}

	return ret;
}
 8001e4e:	bd10      	pop	{r4, pc}
			qbufferCreate(&qbuffer[_DEF_UART1], &rx_buf[0], 256);
 8001e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e54:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <uartOpen+0x70>)
 8001e56:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <uartOpen+0x74>)
 8001e58:	f7ff ff60 	bl	8001d1c <qbufferCreate>
			if(HAL_UART_Init(&huart5) != HAL_OK){
 8001e5c:	4817      	ldr	r0, [pc, #92]	; (8001ebc <uartOpen+0x78>)
 8001e5e:	f004 f9f8 	bl	8006252 <HAL_UART_Init>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d1f2      	bne.n	8001e4c <uartOpen+0x8>
				if(HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1) != HAL_OK)
 8001e66:	2201      	movs	r2, #1
 8001e68:	4915      	ldr	r1, [pc, #84]	; (8001ec0 <uartOpen+0x7c>)
 8001e6a:	4814      	ldr	r0, [pc, #80]	; (8001ebc <uartOpen+0x78>)
 8001e6c:	f004 fab4 	bl	80063d8 <HAL_UART_Receive_IT>
 8001e70:	fab0 f080 	clz	r0, r0
 8001e74:	0940      	lsrs	r0, r0, #5
 8001e76:	e7ea      	b.n	8001e4e <uartOpen+0xa>
			qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8001e78:	4c0f      	ldr	r4, [pc, #60]	; (8001eb8 <uartOpen+0x74>)
 8001e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <uartOpen+0x70>)
 8001e80:	f104 0010 	add.w	r0, r4, #16
 8001e84:	f7ff ff4a 	bl	8001d1c <qbufferCreate>
			if(HAL_UART_Init(&huart1) != HAL_OK){
 8001e88:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <uartOpen+0x80>)
 8001e8a:	f004 f9e2 	bl	8006252 <HAL_UART_Init>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d1dc      	bne.n	8001e4c <uartOpen+0x8>
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 8001e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e96:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <uartOpen+0x70>)
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <uartOpen+0x80>)
 8001e9a:	f004 fb1b 	bl	80064d4 <HAL_UART_Receive_DMA>
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <uartOpen+0x84>)
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 8001ea0:	fab0 f080 	clz	r0, r0
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	69a3      	ldr	r3, [r4, #24]
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 8001ea8:	0940      	lsrs	r0, r0, #5
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001eaa:	1a9b      	subs	r3, r3, r2
				qbuffer[ch].out = qbuffer[ch].in;
 8001eac:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8001eb0:	e7cd      	b.n	8001e4e <uartOpen+0xa>
 8001eb2:	bf00      	nop
 8001eb4:	24002c24 	.word	0x24002c24
 8001eb8:	24002d24 	.word	0x24002d24
 8001ebc:	2400267c 	.word	0x2400267c
 8001ec0:	24002d54 	.word	0x24002d54
 8001ec4:	240025ec 	.word	0x240025ec
 8001ec8:	40020000 	.word	0x40020000

08001ecc <uartAvailable>:
uint32_t uartAvailable(uint8_t ch){
	uint32_t ret = 0;

	switch(ch){
 8001ecc:	b118      	cbz	r0, 8001ed6 <uartAvailable+0xa>
 8001ece:	2801      	cmp	r0, #1
 8001ed0:	d004      	beq.n	8001edc <uartAvailable+0x10>
		qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
		ret = qbufferAvailable(&qbuffer[ch]);
		break;
	}
	return ret;
}
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	4770      	bx	lr
		ret = qbufferAvailable(&qbuffer[ch]);
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <uartAvailable+0x20>)
		ret = qbufferAvailable(&qbuffer[ch]);
 8001ed8:	f7ff bf5a 	b.w	8001d90 <qbufferAvailable>
		qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <uartAvailable+0x24>)
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <uartAvailable+0x20>)
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	6983      	ldr	r3, [r0, #24]
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	f840 3f10 	str.w	r3, [r0, #16]!
 8001eea:	e7f5      	b.n	8001ed8 <uartAvailable+0xc>
 8001eec:	24002d24 	.word	0x24002d24
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <uartRead>:
uint8_t uartRead(uint8_t ch){
	uint8_t ret = 0;
 8001ef4:	2300      	movs	r3, #0
uint8_t uartRead(uint8_t ch){
 8001ef6:	b507      	push	{r0, r1, r2, lr}

	switch(ch){
 8001ef8:	4602      	mov	r2, r0
	uint8_t ret = 0;
 8001efa:	f88d 3007 	strb.w	r3, [sp, #7]
	switch(ch){
 8001efe:	b128      	cbz	r0, 8001f0c <uartRead+0x18>
 8001f00:	2801      	cmp	r0, #1
 8001f02:	d00c      	beq.n	8001f1e <uartRead+0x2a>
 8001f04:	4618      	mov	r0, r3
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
			return ret;
			break;
	}
	return ret;
}
 8001f06:	b003      	add	sp, #12
 8001f08:	f85d fb04 	ldr.w	pc, [sp], #4
			qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f10d 0107 	add.w	r1, sp, #7
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <uartRead+0x34>)
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001f14:	f7ff ff22 	bl	8001d5c <qbufferRead>
			return ret;
 8001f18:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001f1c:	e7f3      	b.n	8001f06 <uartRead+0x12>
			qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001f1e:	f10d 0107 	add.w	r1, sp, #7
 8001f22:	4802      	ldr	r0, [pc, #8]	; (8001f2c <uartRead+0x38>)
 8001f24:	e7f6      	b.n	8001f14 <uartRead+0x20>
 8001f26:	bf00      	nop
 8001f28:	24002d24 	.word	0x24002d24
 8001f2c:	24002d34 	.word	0x24002d34

08001f30 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
#ifdef UART5_IT
	if(huart->Instance == UART5){
 8001f30:	6802      	ldr	r2, [r0, #0]
{
 8001f32:	b508      	push	{r3, lr}
	if(huart->Instance == UART5){
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_UART_RxCpltCallback+0x24>)
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d10b      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x22>
		qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_UART_RxCpltCallback+0x28>)
 8001f3e:	4807      	ldr	r0, [pc, #28]	; (8001f5c <HAL_UART_RxCpltCallback+0x2c>)
 8001f40:	f7ff fef3 	bl	8001d2a <qbufferWrite>
		HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	4904      	ldr	r1, [pc, #16]	; (8001f58 <HAL_UART_RxCpltCallback+0x28>)
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_UART_RxCpltCallback+0x30>)
	}
#endif
}
 8001f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1);
 8001f4e:	f004 ba43 	b.w	80063d8 <HAL_UART_Receive_IT>
}
 8001f52:	bd08      	pop	{r3, pc}
 8001f54:	40005000 	.word	0x40005000
 8001f58:	24002d54 	.word	0x24002d54
 8001f5c:	24002d24 	.word	0x24002d24
 8001f60:	2400267c 	.word	0x2400267c

08001f64 <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length){
 8001f64:	b510      	push	{r4, lr}
 8001f66:	4614      	mov	r4, r2
	uint32_t ret = 0;
	HAL_StatusTypeDef status;
	switch(ch){
 8001f68:	b118      	cbz	r0, 8001f72 <uartWrite+0xe>
 8001f6a:	2801      	cmp	r0, #1
 8001f6c:	d00a      	beq.n	8001f84 <uartWrite+0x20>
	uint32_t ret = 0;
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e006      	b.n	8001f80 <uartWrite+0x1c>

		case _DEF_UART1:
			status = HAL_UART_Transmit(&huart5, p_data, length, 100);
 8001f72:	2364      	movs	r3, #100	; 0x64
 8001f74:	b292      	uxth	r2, r2
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <uartWrite+0x28>)
 8001f78:	f004 f8d9 	bl	800612e <HAL_UART_Transmit>
			if(status == HAL_OK){
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d1f6      	bne.n	8001f6e <uartWrite+0xa>
				ret = length;
			}
			break;
	}
	return ret;
}
 8001f80:	4620      	mov	r0, r4
 8001f82:	bd10      	pop	{r4, pc}
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001f84:	2364      	movs	r3, #100	; 0x64
 8001f86:	b292      	uxth	r2, r2
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <uartWrite+0x2c>)
 8001f8a:	e7f5      	b.n	8001f78 <uartWrite+0x14>
 8001f8c:	2400267c 	.word	0x2400267c
 8001f90:	240025ec 	.word	0x240025ec

08001f94 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...){
 8001f94:	b40e      	push	{r1, r2, r3}
 8001f96:	b510      	push	{r4, lr}
 8001f98:	b0c3      	sub	sp, #268	; 0x10c
 8001f9a:	4604      	mov	r4, r0
	char buf[256];
	va_list args;
	int len;

	va_start(args, fmt);
	len = vsnprintf(buf , 256, fmt, args);
 8001f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
uint32_t uartPrintf(uint8_t ch, char *fmt, ...){
 8001fa0:	ab45      	add	r3, sp, #276	; 0x114
	len = vsnprintf(buf , 256, fmt, args);
 8001fa2:	a802      	add	r0, sp, #8
uint32_t uartPrintf(uint8_t ch, char *fmt, ...){
 8001fa4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 8001fa8:	9301      	str	r3, [sp, #4]
	len = vsnprintf(buf , 256, fmt, args);
 8001faa:	f007 fa51 	bl	8009450 <vsniprintf>

	uartWrite(ch, (uint8_t *)buf, len);
 8001fae:	a902      	add	r1, sp, #8
	len = vsnprintf(buf , 256, fmt, args);
 8001fb0:	4602      	mov	r2, r0
	uartWrite(ch, (uint8_t *)buf, len);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ffd6 	bl	8001f64 <uartWrite>

	va_end(args);

	return 0;
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	b043      	add	sp, #268	; 0x10c
 8001fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fc0:	b003      	add	sp, #12
 8001fc2:	4770      	bx	lr

08001fc4 <_Z6hwInitv>:



#include "hw.h"

void hwInit(void){
 8001fc4:	b508      	push	{r3, lr}
	bspInit();
 8001fc6:	f7fe fd69 	bl	8000a9c <_Z7bspInitv>
	uartInit();
//	cliInit();
}
 8001fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uartInit();
 8001fce:	f7ff bf37 	b.w	8001e40 <uartInit>
	...

08001fd4 <DebugTask>:

extern UART_HandleTypeDef huart8;

bool flag = true;

extern "C" void DebugTask(void){
 8001fd4:	b510      	push	{r4, lr}
	if(flag == true){
 8001fd6:	4c0a      	ldr	r4, [pc, #40]	; (8002000 <DebugTask+0x2c>)
 8001fd8:	7823      	ldrb	r3, [r4, #0]
 8001fda:	b17b      	cbz	r3, 8001ffc <DebugTask+0x28>
		hwInit();
 8001fdc:	f7ff fff2 	bl	8001fc4 <_Z6hwInitv>

		apInit();
 8001fe0:	f000 f812 	bl	8002008 <_Z6apInitv>
		cliInit();
 8001fe4:	f7ff fe64 	bl	8001cb0 <cliInit>
		rtcInit();
 8001fe8:	f7ff ff1a 	bl	8001e20 <_Z7rtcInitv>
		resetInit();
 8001fec:	f7ff feda 	bl	8001da4 <_Z9resetInitv>
		apInit();
 8001ff0:	f000 f80a 	bl	8002008 <_Z6apInitv>
		apMain();
 8001ff4:	f000 f820 	bl	8002038 <_Z6apMainv>
		flag = false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	7023      	strb	r3, [r4, #0]
	}


}
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	24000008 	.word	0x24000008

08002004 <MainTask>:


extern "C" void MainTask(void){

}
 8002004:	4770      	bx	lr

08002006 <SensingTask>:
 8002006:	4770      	bx	lr

08002008 <_Z6apInitv>:

#include "ap.h"



void apInit(void){
 8002008:	b508      	push	{r3, lr}


	uartOpen(_DEF_UART1, 115200);
 800200a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff ff18 	bl	8001e44 <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 8002014:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff ff13 	bl	8001e44 <uartOpen>

	cliOpen(_DEF_UART1, 115200);
 800201e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff fb1a 	bl	800165c <cliOpen>
	cliOpenLog(_DEF_UART2, 115200);
 8002028:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800202c:	2001      	movs	r0, #1
}
 800202e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cliOpenLog(_DEF_UART2, 115200);
 8002032:	f7ff bb1d 	b.w	8001670 <cliOpenLog>
	...

08002038 <_Z6apMainv>:


void apMain(void){
 8002038:	b538      	push	{r3, r4, r5, lr}
	uint32_t pre_time;
	pre_time = HAL_GetTick();
 800203a:	f000 f87d 	bl	8002138 <HAL_GetTick>
//			resetInit();
			pre_time = HAL_GetTick();
//			logPrintf("print test %d \r\n", millis());

//			resetInit();
			uartPrintf(_DEF_UART1, " resetCount : %d 	Time :  %d \r\n",resetGetCount(), pre_time);
 800203e:	4d0b      	ldr	r5, [pc, #44]	; (800206c <_Z6apMainv+0x34>)
	pre_time = HAL_GetTick();
 8002040:	4604      	mov	r4, r0
		if(HAL_GetTick()-pre_time >= 500){
 8002042:	f000 f879 	bl	8002138 <HAL_GetTick>
 8002046:	1b00      	subs	r0, r0, r4
 8002048:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800204c:	d30a      	bcc.n	8002064 <_Z6apMainv+0x2c>
			pre_time = HAL_GetTick();
 800204e:	f000 f873 	bl	8002138 <HAL_GetTick>
 8002052:	4604      	mov	r4, r0
			uartPrintf(_DEF_UART1, " resetCount : %d 	Time :  %d \r\n",resetGetCount(), pre_time);
 8002054:	f7ff fede 	bl	8001e14 <_Z13resetGetCountv>
 8002058:	4629      	mov	r1, r5
 800205a:	4602      	mov	r2, r0
 800205c:	4623      	mov	r3, r4
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff ff98 	bl	8001f94 <uartPrintf>
			rx_data = uartRead(_DEF_UART2);
			uartPrintf(_DEF_UART2, "UART1 :  %c %X\r\n", rx_data, rx_data);

		}
#endif //UART
		cliMain();
 8002064:	f7ff fc1c 	bl	80018a0 <cliMain>
		if(HAL_GetTick()-pre_time >= 500){
 8002068:	e7eb      	b.n	8002042 <_Z6apMainv+0xa>
 800206a:	bf00      	nop
 800206c:	0800b6cb 	.word	0x0800b6cb

08002070 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002074:	f7ff f9dc 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800208a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
  ldr  r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209e:	f006 f93b 	bl	8008318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7fe fd69 	bl	8000b78 <main>
  bx  lr    
 80020a6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80020a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80020ac:	0800bba4 	.word	0x0800bba4
  ldr  r0, =_sdata
 80020b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80020b4:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 80020b8:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 80020bc:	24007778 	.word	0x24007778

080020c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC3_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c6:	2003      	movs	r0, #3
 80020c8:	f000 f854 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020cc:	f001 fdb4 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 80020d0:	490f      	ldr	r1, [pc, #60]	; (8002110 <HAL_Init+0x4c>)
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_Init+0x50>)
 80020d4:	698b      	ldr	r3, [r1, #24]
 80020d6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020e2:	698b      	ldr	r3, [r1, #24]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_Init+0x54>)
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	fa20 f303 	lsr.w	r3, r0, r3
 80020f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_Init+0x58>)
 80020f8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fa:	200f      	movs	r0, #15
 80020fc:	f7ff f8c8 	bl	8001290 <HAL_InitTick>
 8002100:	4604      	mov	r4, r0
 8002102:	b918      	cbnz	r0, 800210c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7fe feee 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002108:	4620      	mov	r0, r4
 800210a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800210c:	2401      	movs	r4, #1
 800210e:	e7fb      	b.n	8002108 <HAL_Init+0x44>
 8002110:	58024400 	.word	0x58024400
 8002114:	0800b598 	.word	0x0800b598
 8002118:	24000004 	.word	0x24000004
 800211c:	24000000 	.word	0x24000000

08002120 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002120:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_IncTick+0x10>)
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_IncTick+0x14>)
 8002124:	6811      	ldr	r1, [r2, #0]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	440b      	add	r3, r1
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	24002d58 	.word	0x24002d58
 8002134:	24000009 	.word	0x24000009

08002138 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002138:	4b01      	ldr	r3, [pc, #4]	; (8002140 <HAL_GetTick+0x8>)
 800213a:	6818      	ldr	r0, [r3, #0]
}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	24002d58 	.word	0x24002d58

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff fff6 	bl	8002138 <HAL_GetTick>
 800214c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002150:	bf1e      	ittt	ne
 8002152:	4b04      	ldrne	r3, [pc, #16]	; (8002164 <HAL_Delay+0x20>)
 8002154:	781b      	ldrbne	r3, [r3, #0]
 8002156:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002158:	f7ff ffee 	bl	8002138 <HAL_GetTick>
 800215c:	1b43      	subs	r3, r0, r5
 800215e:	42a3      	cmp	r3, r4
 8002160:	d3fa      	bcc.n	8002158 <HAL_Delay+0x14>
  {
  }
}
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	24000009 	.word	0x24000009

08002168 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_GetREVID+0x8>)
 800216a:	6818      	ldr	r0, [r3, #0]
}
 800216c:	0c00      	lsrs	r0, r0, #16
 800216e:	4770      	bx	lr
 8002170:	5c001000 	.word	0x5c001000

08002174 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002176:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002182:	0412      	lsls	r2, r2, #16
 8002184:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002190:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b530      	push	{r4, r5, lr}
 800219c:	68dc      	ldr	r4, [r3, #12]
 800219e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	2d04      	cmp	r5, #4
 80021aa:	bf28      	it	cs
 80021ac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b4:	bf8c      	ite	hi
 80021b6:	3c03      	subhi	r4, #3
 80021b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ba:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80021be:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	fa01 f104 	lsl.w	r1, r1, r4
 80021d0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80021d8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80021da:	db06      	blt.n	80021ea <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021e4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021e8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	f000 000f 	and.w	r0, r0, #15
 80021ee:	4a02      	ldr	r2, [pc, #8]	; (80021f8 <HAL_NVIC_SetPriority+0x60>)
 80021f0:	5413      	strb	r3, [r2, r0]
 80021f2:	e7f9      	b.n	80021e8 <HAL_NVIC_SetPriority+0x50>
 80021f4:	e000ed00 	.word	0xe000ed00
 80021f8:	e000ed14 	.word	0xe000ed14

080021fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021fc:	2800      	cmp	r0, #0
 80021fe:	db08      	blt.n	8002212 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002200:	2301      	movs	r3, #1
 8002202:	0942      	lsrs	r2, r0, #5
 8002204:	f000 001f 	and.w	r0, r0, #31
 8002208:	fa03 f000 	lsl.w	r0, r3, r0
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <HAL_NVIC_EnableIRQ+0x18>)
 800220e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100

08002218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221a:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8002398 <DMA_SetConfig+0x180>
 800221e:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002220:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002222:	4564      	cmp	r4, ip
 8002224:	d045      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002226:	4d59      	ldr	r5, [pc, #356]	; (800238c <DMA_SetConfig+0x174>)
 8002228:	42ac      	cmp	r4, r5
 800222a:	d042      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800222c:	3518      	adds	r5, #24
 800222e:	42ac      	cmp	r4, r5
 8002230:	d03f      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002232:	3518      	adds	r5, #24
 8002234:	42ac      	cmp	r4, r5
 8002236:	d03c      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002238:	3518      	adds	r5, #24
 800223a:	42ac      	cmp	r4, r5
 800223c:	d039      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800223e:	3518      	adds	r5, #24
 8002240:	42ac      	cmp	r4, r5
 8002242:	d036      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002244:	3518      	adds	r5, #24
 8002246:	42ac      	cmp	r4, r5
 8002248:	d033      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800224a:	3518      	adds	r5, #24
 800224c:	42ac      	cmp	r4, r5
 800224e:	d030      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002250:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8002254:	42ac      	cmp	r4, r5
 8002256:	d02c      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002258:	3518      	adds	r5, #24
 800225a:	42ac      	cmp	r4, r5
 800225c:	d029      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800225e:	3518      	adds	r5, #24
 8002260:	42ac      	cmp	r4, r5
 8002262:	d026      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002264:	3518      	adds	r5, #24
 8002266:	42ac      	cmp	r4, r5
 8002268:	d023      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800226a:	3518      	adds	r5, #24
 800226c:	42ac      	cmp	r4, r5
 800226e:	d020      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002270:	3518      	adds	r5, #24
 8002272:	42ac      	cmp	r4, r5
 8002274:	d01d      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002276:	3518      	adds	r5, #24
 8002278:	42ac      	cmp	r4, r5
 800227a:	d01a      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800227c:	3518      	adds	r5, #24
 800227e:	42ac      	cmp	r4, r5
 8002280:	d017      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002282:	4d43      	ldr	r5, [pc, #268]	; (8002390 <DMA_SetConfig+0x178>)
 8002284:	42ac      	cmp	r4, r5
 8002286:	d014      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002288:	3514      	adds	r5, #20
 800228a:	42ac      	cmp	r4, r5
 800228c:	d011      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800228e:	3514      	adds	r5, #20
 8002290:	42ac      	cmp	r4, r5
 8002292:	d00e      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 8002294:	3514      	adds	r5, #20
 8002296:	42ac      	cmp	r4, r5
 8002298:	d00b      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 800229a:	3514      	adds	r5, #20
 800229c:	42ac      	cmp	r4, r5
 800229e:	d008      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 80022a0:	3514      	adds	r5, #20
 80022a2:	42ac      	cmp	r4, r5
 80022a4:	d005      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 80022a6:	3514      	adds	r5, #20
 80022a8:	42ac      	cmp	r4, r5
 80022aa:	d002      	beq.n	80022b2 <DMA_SetConfig+0x9a>
 80022ac:	3514      	adds	r5, #20
 80022ae:	42ac      	cmp	r4, r5
 80022b0:	d167      	bne.n	8002382 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b2:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 80022b6:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80022b8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 80022ba:	b115      	cbz	r5, 80022c2 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022bc:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 80022c0:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c2:	4564      	cmp	r4, ip
 80022c4:	d037      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022c6:	4d31      	ldr	r5, [pc, #196]	; (800238c <DMA_SetConfig+0x174>)
 80022c8:	42ac      	cmp	r4, r5
 80022ca:	d034      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022cc:	3518      	adds	r5, #24
 80022ce:	42ac      	cmp	r4, r5
 80022d0:	d031      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022d2:	3518      	adds	r5, #24
 80022d4:	42ac      	cmp	r4, r5
 80022d6:	d02e      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022d8:	3518      	adds	r5, #24
 80022da:	42ac      	cmp	r4, r5
 80022dc:	d02b      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022de:	3518      	adds	r5, #24
 80022e0:	42ac      	cmp	r4, r5
 80022e2:	d028      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022e4:	3518      	adds	r5, #24
 80022e6:	42ac      	cmp	r4, r5
 80022e8:	d025      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022ea:	3518      	adds	r5, #24
 80022ec:	42ac      	cmp	r4, r5
 80022ee:	d022      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022f0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80022f4:	42ac      	cmp	r4, r5
 80022f6:	d01e      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022f8:	3518      	adds	r5, #24
 80022fa:	42ac      	cmp	r4, r5
 80022fc:	d01b      	beq.n	8002336 <DMA_SetConfig+0x11e>
 80022fe:	3518      	adds	r5, #24
 8002300:	42ac      	cmp	r4, r5
 8002302:	d018      	beq.n	8002336 <DMA_SetConfig+0x11e>
 8002304:	3518      	adds	r5, #24
 8002306:	42ac      	cmp	r4, r5
 8002308:	d015      	beq.n	8002336 <DMA_SetConfig+0x11e>
 800230a:	3518      	adds	r5, #24
 800230c:	42ac      	cmp	r4, r5
 800230e:	d012      	beq.n	8002336 <DMA_SetConfig+0x11e>
 8002310:	3518      	adds	r5, #24
 8002312:	42ac      	cmp	r4, r5
 8002314:	d00f      	beq.n	8002336 <DMA_SetConfig+0x11e>
 8002316:	3518      	adds	r5, #24
 8002318:	42ac      	cmp	r4, r5
 800231a:	d00c      	beq.n	8002336 <DMA_SetConfig+0x11e>
 800231c:	3518      	adds	r5, #24
 800231e:	42ac      	cmp	r4, r5
 8002320:	d009      	beq.n	8002336 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002322:	4d1b      	ldr	r5, [pc, #108]	; (8002390 <DMA_SetConfig+0x178>)
 8002324:	42ac      	cmp	r4, r5
 8002326:	d117      	bne.n	8002358 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002328:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800232a:	f005 061f 	and.w	r6, r5, #31
 800232e:	2501      	movs	r5, #1
 8002330:	40b5      	lsls	r5, r6
 8002332:	607d      	str	r5, [r7, #4]
 8002334:	e009      	b.n	800234a <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002336:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002338:	f005 061f 	and.w	r6, r5, #31
 800233c:	253f      	movs	r5, #63	; 0x3f
 800233e:	40b5      	lsls	r5, r6
 8002340:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002342:	6825      	ldr	r5, [r4, #0]
 8002344:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002348:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800234a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800234c:	6883      	ldr	r3, [r0, #8]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d118      	bne.n	8002384 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002352:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002354:	60e1      	str	r1, [r4, #12]
 8002356:	e014      	b.n	8002382 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002358:	4d0e      	ldr	r5, [pc, #56]	; (8002394 <DMA_SetConfig+0x17c>)
 800235a:	42ac      	cmp	r4, r5
 800235c:	d0e4      	beq.n	8002328 <DMA_SetConfig+0x110>
 800235e:	3514      	adds	r5, #20
 8002360:	42ac      	cmp	r4, r5
 8002362:	d0e1      	beq.n	8002328 <DMA_SetConfig+0x110>
 8002364:	3514      	adds	r5, #20
 8002366:	42ac      	cmp	r4, r5
 8002368:	d0de      	beq.n	8002328 <DMA_SetConfig+0x110>
 800236a:	3514      	adds	r5, #20
 800236c:	42ac      	cmp	r4, r5
 800236e:	d0db      	beq.n	8002328 <DMA_SetConfig+0x110>
 8002370:	3514      	adds	r5, #20
 8002372:	42ac      	cmp	r4, r5
 8002374:	d0d8      	beq.n	8002328 <DMA_SetConfig+0x110>
 8002376:	3514      	adds	r5, #20
 8002378:	42ac      	cmp	r4, r5
 800237a:	d0d5      	beq.n	8002328 <DMA_SetConfig+0x110>
 800237c:	3514      	adds	r5, #20
 800237e:	42ac      	cmp	r4, r5
 8002380:	d0d2      	beq.n	8002328 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002382:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002384:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002386:	60e2      	str	r2, [r4, #12]
}
 8002388:	e7fb      	b.n	8002382 <DMA_SetConfig+0x16a>
 800238a:	bf00      	nop
 800238c:	40020028 	.word	0x40020028
 8002390:	58025408 	.word	0x58025408
 8002394:	5802541c 	.word	0x5802541c
 8002398:	40020010 	.word	0x40020010

0800239c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	4a24      	ldr	r2, [pc, #144]	; (8002430 <DMA_CalcBaseAndBitshift+0x94>)
 80023a0:	4293      	cmp	r3, r2
{
 80023a2:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a4:	d032      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023a6:	3218      	adds	r2, #24
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02f      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023ac:	3218      	adds	r2, #24
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02c      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023b2:	3218      	adds	r2, #24
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d029      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023b8:	3218      	adds	r2, #24
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d026      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023be:	3218      	adds	r2, #24
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d023      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023c4:	3218      	adds	r2, #24
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d020      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023ca:	3218      	adds	r2, #24
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01d      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023d0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d019      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023d8:	3218      	adds	r2, #24
 80023da:	4293      	cmp	r3, r2
 80023dc:	d016      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023de:	3218      	adds	r2, #24
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023e4:	3218      	adds	r2, #24
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d010      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023ea:	3218      	adds	r2, #24
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023f0:	3218      	adds	r2, #24
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00a      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023f6:	3218      	adds	r2, #24
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
 80023fc:	3218      	adds	r2, #24
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002406:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8002408:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800240a:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800240c:	b2d9      	uxtb	r1, r3
 800240e:	2218      	movs	r2, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002410:	4c08      	ldr	r4, [pc, #32]	; (8002434 <DMA_CalcBaseAndBitshift+0x98>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002416:	3910      	subs	r1, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002418:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 800241c:	295f      	cmp	r1, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800241e:	fbb1 f2f2 	udiv	r2, r1, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002422:	f002 0207 	and.w	r2, r2, #7
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002426:	bf88      	it	hi
 8002428:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800242a:	5ca2      	ldrb	r2, [r4, r2]
 800242c:	65c2      	str	r2, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800242e:	e7ea      	b.n	8002406 <DMA_CalcBaseAndBitshift+0x6a>
 8002430:	40020010 	.word	0x40020010
 8002434:	0800b6eb 	.word	0x0800b6eb

08002438 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002438:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800243a:	491f      	ldr	r1, [pc, #124]	; (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800243c:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800243e:	428a      	cmp	r2, r1
 8002440:	d024      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002442:	3114      	adds	r1, #20
 8002444:	428a      	cmp	r2, r1
 8002446:	d021      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002448:	3114      	adds	r1, #20
 800244a:	428a      	cmp	r2, r1
 800244c:	d01e      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800244e:	3114      	adds	r1, #20
 8002450:	428a      	cmp	r2, r1
 8002452:	d01b      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002454:	3114      	adds	r1, #20
 8002456:	428a      	cmp	r2, r1
 8002458:	d018      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800245a:	3114      	adds	r1, #20
 800245c:	428a      	cmp	r2, r1
 800245e:	d015      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002460:	3114      	adds	r1, #20
 8002462:	428a      	cmp	r2, r1
 8002464:	d012      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002466:	3114      	adds	r1, #20
 8002468:	428a      	cmp	r2, r1
 800246a:	d00f      	beq.n	800248c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800246c:	2118      	movs	r1, #24
 800246e:	3b10      	subs	r3, #16
 8002470:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002474:	4911      	ldr	r1, [pc, #68]	; (80024bc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002476:	4411      	add	r1, r2
 8002478:	29a8      	cmp	r1, #168	; 0xa8
 800247a:	d91a      	bls.n	80024b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800247c:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8002480:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800248a:	e00a      	b.n	80024a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800248c:	2214      	movs	r2, #20
 800248e:	3b08      	subs	r3, #8
 8002490:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002494:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8002498:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024a2:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024a6:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024a8:	2201      	movs	r2, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 80024b0:	4770      	bx	lr
      stream_number += 8U;
 80024b2:	3308      	adds	r3, #8
 80024b4:	e7e2      	b.n	800247c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 80024b6:	bf00      	nop
 80024b8:	58025408 	.word	0x58025408
 80024bc:	bffdfbf0 	.word	0xbffdfbf0
 80024c0:	40020880 	.word	0x40020880
 80024c4:	58025880 	.word	0x58025880

080024c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024c8:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80024ca:	1e51      	subs	r1, r2, #1
 80024cc:	2907      	cmp	r1, #7
{
 80024ce:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80024d0:	d821      	bhi.n	8002516 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	4c13      	ldr	r4, [pc, #76]	; (8002524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	d01e      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024da:	3414      	adds	r4, #20
 80024dc:	42a3      	cmp	r3, r4
 80024de:	d01b      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024e0:	3414      	adds	r4, #20
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	d018      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024e6:	3414      	adds	r4, #20
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	d015      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024ec:	3414      	adds	r4, #20
 80024ee:	42a3      	cmp	r3, r4
 80024f0:	d012      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024f2:	3414      	adds	r4, #20
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d00f      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024f8:	3414      	adds	r4, #20
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	d00c      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80024fe:	3414      	adds	r4, #20
 8002500:	42a3      	cmp	r3, r4
 8002502:	d009      	beq.n	8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800250e:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002510:	2301      	movs	r3, #1
 8002512:	408b      	lsls	r3, r1
 8002514:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8002516:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8002522:	e7f4      	b.n	800250e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8002524:	58025408 	.word	0x58025408
 8002528:	1000823f 	.word	0x1000823f
 800252c:	40020940 	.word	0x40020940
 8002530:	1600963f 	.word	0x1600963f
 8002534:	58025940 	.word	0x58025940

08002538 <HAL_DMA_Init>:
{
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff fdfc 	bl	8002138 <HAL_GetTick>
 8002540:	4606      	mov	r6, r0
  if(hdma == NULL)
 8002542:	2c00      	cmp	r4, #0
 8002544:	f000 80e6 	beq.w	8002714 <HAL_DMA_Init+0x1dc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	4d84      	ldr	r5, [pc, #528]	; (800275c <HAL_DMA_Init+0x224>)
 800254c:	42ab      	cmp	r3, r5
 800254e:	d06a      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002550:	4a83      	ldr	r2, [pc, #524]	; (8002760 <HAL_DMA_Init+0x228>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d067      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002556:	3218      	adds	r2, #24
 8002558:	4293      	cmp	r3, r2
 800255a:	d064      	beq.n	8002626 <HAL_DMA_Init+0xee>
 800255c:	3218      	adds	r2, #24
 800255e:	4293      	cmp	r3, r2
 8002560:	d061      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002562:	3218      	adds	r2, #24
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002568:	3218      	adds	r2, #24
 800256a:	4293      	cmp	r3, r2
 800256c:	d05b      	beq.n	8002626 <HAL_DMA_Init+0xee>
 800256e:	3218      	adds	r2, #24
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002574:	3218      	adds	r2, #24
 8002576:	4293      	cmp	r3, r2
 8002578:	d055      	beq.n	8002626 <HAL_DMA_Init+0xee>
 800257a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800257e:	4293      	cmp	r3, r2
 8002580:	d051      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002582:	3218      	adds	r2, #24
 8002584:	4293      	cmp	r3, r2
 8002586:	d04e      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002588:	3218      	adds	r2, #24
 800258a:	4293      	cmp	r3, r2
 800258c:	d04b      	beq.n	8002626 <HAL_DMA_Init+0xee>
 800258e:	3218      	adds	r2, #24
 8002590:	4293      	cmp	r3, r2
 8002592:	d048      	beq.n	8002626 <HAL_DMA_Init+0xee>
 8002594:	3218      	adds	r2, #24
 8002596:	4293      	cmp	r3, r2
 8002598:	d045      	beq.n	8002626 <HAL_DMA_Init+0xee>
 800259a:	3218      	adds	r2, #24
 800259c:	4293      	cmp	r3, r2
 800259e:	d042      	beq.n	8002626 <HAL_DMA_Init+0xee>
 80025a0:	3218      	adds	r2, #24
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03f      	beq.n	8002626 <HAL_DMA_Init+0xee>
 80025a6:	3218      	adds	r2, #24
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d03c      	beq.n	8002626 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025ac:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_DMA_Init+0x22c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 8159 	bne.w	8002866 <HAL_DMA_Init+0x32e>
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	2202      	movs	r2, #2
 80025b6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80025ba:	2200      	movs	r2, #0
 80025bc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025c0:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025c2:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025c4:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025c6:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 80025ca:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ce:	f000 8168 	beq.w	80028a2 <HAL_DMA_Init+0x36a>
 80025d2:	2a80      	cmp	r2, #128	; 0x80
 80025d4:	bf0c      	ite	eq
 80025d6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 80025da:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025dc:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 80025e0:	08d2      	lsrs	r2, r2, #3
 80025e2:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025e6:	6966      	ldr	r6, [r4, #20]
 80025e8:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025ec:	69a6      	ldr	r6, [r4, #24]
 80025ee:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025f2:	69e6      	ldr	r6, [r4, #28]
 80025f4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025f8:	6a26      	ldr	r6, [r4, #32]
 80025fa:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80025fe:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002600:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002602:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002604:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_DMA_Init+0x230>)
 8002608:	441a      	add	r2, r3
 800260a:	2314      	movs	r3, #20
 800260c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002614:	f7ff fec2 	bl	800239c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002618:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	2301      	movs	r3, #1
 8002620:	4093      	lsls	r3, r2
 8002622:	6043      	str	r3, [r0, #4]
 8002624:	e0b6      	b.n	8002794 <HAL_DMA_Init+0x25c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002626:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8002628:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 800262a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8002636:	d01e      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002638:	4a49      	ldr	r2, [pc, #292]	; (8002760 <HAL_DMA_Init+0x228>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01b      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 800263e:	3218      	adds	r2, #24
 8002640:	4293      	cmp	r3, r2
 8002642:	d018      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002644:	3218      	adds	r2, #24
 8002646:	4293      	cmp	r3, r2
 8002648:	d015      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 800264a:	3218      	adds	r2, #24
 800264c:	4293      	cmp	r3, r2
 800264e:	d012      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002650:	3218      	adds	r2, #24
 8002652:	4293      	cmp	r3, r2
 8002654:	d00f      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002656:	3218      	adds	r2, #24
 8002658:	4293      	cmp	r3, r2
 800265a:	d00c      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 800265c:	3218      	adds	r2, #24
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002662:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002666:	4293      	cmp	r3, r2
 8002668:	d005      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 800266a:	3218      	adds	r2, #24
 800266c:	4293      	cmp	r3, r2
 800266e:	d002      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002670:	3218      	adds	r2, #24
 8002672:	4293      	cmp	r3, r2
 8002674:	d0ff      	beq.n	8002676 <HAL_DMA_Init+0x13e>
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800267e:	6821      	ldr	r1, [r4, #0]
 8002680:	680b      	ldr	r3, [r1, #0]
 8002682:	07db      	lsls	r3, r3, #31
 8002684:	d43c      	bmi.n	8002700 <HAL_DMA_Init+0x1c8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002686:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002688:	4e38      	ldr	r6, [pc, #224]	; (800276c <HAL_DMA_Init+0x234>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800268c:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 800268e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002692:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	6922      	ldr	r2, [r4, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	6962      	ldr	r2, [r4, #20]
 800269a:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	69e2      	ldr	r2, [r4, #28]
 800269e:	4303      	orrs	r3, r0
 80026a0:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 80026a2:	6a22      	ldr	r2, [r4, #32]
 80026a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026a6:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80026aa:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026ac:	bf02      	ittt	eq
 80026ae:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 80026b2:	433a      	orreq	r2, r7
 80026b4:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_DMA_Init+0x238>)
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	0c12      	lsrs	r2, r2, #16
 80026bc:	0412      	lsls	r2, r2, #16
 80026be:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80026c2:	d307      	bcc.n	80026d4 <HAL_DMA_Init+0x19c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026c4:	6862      	ldr	r2, [r4, #4]
 80026c6:	f1a2 0729 	sub.w	r7, r2, #41	; 0x29
 80026ca:	2f1f      	cmp	r7, #31
 80026cc:	d924      	bls.n	8002718 <HAL_DMA_Init+0x1e0>
 80026ce:	3a4f      	subs	r2, #79	; 0x4f
 80026d0:	2a03      	cmp	r2, #3
 80026d2:	d925      	bls.n	8002720 <HAL_DMA_Init+0x1e8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026d4:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d6:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026d8:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026da:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80026de:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e2:	d14d      	bne.n	8002780 <HAL_DMA_Init+0x248>
      registerValue |= hdma->Init.FIFOThreshold;
 80026e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80026e8:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026ea:	2e00      	cmp	r6, #0
 80026ec:	d048      	beq.n	8002780 <HAL_DMA_Init+0x248>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ee:	b9d0      	cbnz	r0, 8002726 <HAL_DMA_Init+0x1ee>
    switch (hdma->Init.FIFOThreshold)
 80026f0:	2a01      	cmp	r2, #1
 80026f2:	d029      	beq.n	8002748 <HAL_DMA_Init+0x210>
 80026f4:	f032 0202 	bics.w	r2, r2, #2
 80026f8:	d142      	bne.n	8002780 <HAL_DMA_Init+0x248>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	01f2      	lsls	r2, r6, #7
 80026fc:	d540      	bpl.n	8002780 <HAL_DMA_Init+0x248>
 80026fe:	e026      	b.n	800274e <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002700:	f7ff fd1a 	bl	8002138 <HAL_GetTick>
 8002704:	1b80      	subs	r0, r0, r6
 8002706:	2805      	cmp	r0, #5
 8002708:	d9b9      	bls.n	800267e <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270a:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800270c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800270e:	2303      	movs	r3, #3
 8002710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e01f      	b.n	8002758 <HAL_DMA_Init+0x220>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_DMA_Init+0x23c>)
 800271a:	40fa      	lsrs	r2, r7
 800271c:	07d7      	lsls	r7, r2, #31
 800271e:	d5d9      	bpl.n	80026d4 <HAL_DMA_Init+0x19c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002724:	e7d6      	b.n	80026d4 <HAL_DMA_Init+0x19c>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002726:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800272a:	d125      	bne.n	8002778 <HAL_DMA_Init+0x240>
    switch (hdma->Init.FIFOThreshold)
 800272c:	2a03      	cmp	r2, #3
 800272e:	d827      	bhi.n	8002780 <HAL_DMA_Init+0x248>
 8002730:	a001      	add	r0, pc, #4	; (adr r0, 8002738 <HAL_DMA_Init+0x200>)
 8002732:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002736:	bf00      	nop
 8002738:	0800274f 	.word	0x0800274f
 800273c:	080026fb 	.word	0x080026fb
 8002740:	0800274f 	.word	0x0800274f
 8002744:	08002749 	.word	0x08002749
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 800274c:	d118      	bne.n	8002780 <HAL_DMA_Init+0x248>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800274e:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002750:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002752:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002754:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800275a:	bf00      	nop
 800275c:	40020010 	.word	0x40020010
 8002760:	40020028 	.word	0x40020028
 8002764:	58025408 	.word	0x58025408
 8002768:	a7fdabf8 	.word	0xa7fdabf8
 800276c:	fe10803f 	.word	0xfe10803f
 8002770:	5c001000 	.word	0x5c001000
 8002774:	c3c0003f 	.word	0xc3c0003f
    switch (hdma->Init.FIFOThreshold)
 8002778:	2a02      	cmp	r2, #2
 800277a:	d9e8      	bls.n	800274e <HAL_DMA_Init+0x216>
 800277c:	2a03      	cmp	r2, #3
 800277e:	d0bc      	beq.n	80026fa <HAL_DMA_Init+0x1c2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002780:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff fe0a 	bl	800239c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002788:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	233f      	movs	r3, #63	; 0x3f
 8002790:	4093      	lsls	r3, r2
 8002792:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	42ab      	cmp	r3, r5
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 800279a:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <HAL_DMA_Init+0x378>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d042      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027a0:	3218      	adds	r2, #24
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03f      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027a6:	3218      	adds	r2, #24
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d03c      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027ac:	3218      	adds	r2, #24
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d039      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027b2:	3218      	adds	r2, #24
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027b8:	3218      	adds	r2, #24
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d033      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027be:	3218      	adds	r2, #24
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027c4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027cc:	3218      	adds	r2, #24
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d029      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027d2:	3218      	adds	r2, #24
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d026      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027d8:	3218      	adds	r2, #24
 80027da:	4293      	cmp	r3, r2
 80027dc:	d023      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027de:	3218      	adds	r2, #24
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d020      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027e4:	3218      	adds	r2, #24
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027ea:	3218      	adds	r2, #24
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d01a      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027f0:	3218      	adds	r2, #24
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d017      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027f6:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <HAL_DMA_Init+0x37c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d014      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 80027fc:	3214      	adds	r2, #20
 80027fe:	4293      	cmp	r3, r2
 8002800:	d011      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 8002802:	3214      	adds	r2, #20
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 8002808:	3214      	adds	r2, #20
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 800280e:	3214      	adds	r2, #20
 8002810:	4293      	cmp	r3, r2
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 8002814:	3214      	adds	r2, #20
 8002816:	4293      	cmp	r3, r2
 8002818:	d005      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 800281a:	3214      	adds	r2, #20
 800281c:	4293      	cmp	r3, r2
 800281e:	d002      	beq.n	8002826 <HAL_DMA_Init+0x2ee>
 8002820:	3214      	adds	r2, #20
 8002822:	4293      	cmp	r3, r2
 8002824:	d119      	bne.n	800285a <HAL_DMA_Init+0x322>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002826:	4620      	mov	r0, r4
 8002828:	2500      	movs	r5, #0
 800282a:	f7ff fe05 	bl	8002438 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800282e:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002830:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002832:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002834:	bf04      	itt	eq
 8002836:	2300      	moveq	r3, #0
 8002838:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800283e:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002840:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002842:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002844:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 8002848:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800284a:	d82c      	bhi.n	80028a6 <HAL_DMA_Init+0x36e>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800284c:	f7ff fe3c 	bl	80024c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002850:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002852:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002854:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002858:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800285c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002860:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002864:	e778      	b.n	8002758 <HAL_DMA_Init+0x220>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_DMA_Init+0x380>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f43f aea3 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 800286e:	3214      	adds	r2, #20
 8002870:	4293      	cmp	r3, r2
 8002872:	f43f ae9f 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 8002876:	3214      	adds	r2, #20
 8002878:	4293      	cmp	r3, r2
 800287a:	f43f ae9b 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 800287e:	3214      	adds	r2, #20
 8002880:	4293      	cmp	r3, r2
 8002882:	f43f ae97 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 8002886:	3214      	adds	r2, #20
 8002888:	4293      	cmp	r3, r2
 800288a:	f43f ae93 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 800288e:	3214      	adds	r2, #20
 8002890:	4293      	cmp	r3, r2
 8002892:	f43f ae8f 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
 8002896:	3214      	adds	r2, #20
 8002898:	4293      	cmp	r3, r2
 800289a:	f43f ae8b 	beq.w	80025b4 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	e734      	b.n	800270c <HAL_DMA_Init+0x1d4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028a2:	2010      	movs	r0, #16
 80028a4:	e69a      	b.n	80025dc <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 80028a6:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028aa:	6765      	str	r5, [r4, #116]	; 0x74
 80028ac:	e7d5      	b.n	800285a <HAL_DMA_Init+0x322>
 80028ae:	bf00      	nop
 80028b0:	40020028 	.word	0x40020028
 80028b4:	58025408 	.word	0x58025408
 80028b8:	5802541c 	.word	0x5802541c

080028bc <HAL_DMA_Start_IT>:
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 80028be:	2800      	cmp	r0, #0
 80028c0:	f000 810b 	beq.w	8002ada <HAL_DMA_Start_IT+0x21e>
  __HAL_LOCK(hdma);
 80028c4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80028c8:	2c01      	cmp	r4, #1
 80028ca:	f000 8108 	beq.w	8002ade <HAL_DMA_Start_IT+0x222>
 80028ce:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d0:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 80028d4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80028d6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80028da:	f04f 0500 	mov.w	r5, #0
 80028de:	f040 80f7 	bne.w	8002ad0 <HAL_DMA_Start_IT+0x214>
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e2:	2402      	movs	r4, #2
 80028e4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80028e8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80028ec:	4d7d      	ldr	r5, [pc, #500]	; (8002ae4 <HAL_DMA_Start_IT+0x228>)
 80028ee:	42ac      	cmp	r4, r5
 80028f0:	d01e      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 80028f2:	4e7d      	ldr	r6, [pc, #500]	; (8002ae8 <HAL_DMA_Start_IT+0x22c>)
 80028f4:	42b4      	cmp	r4, r6
 80028f6:	d01b      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 80028f8:	3618      	adds	r6, #24
 80028fa:	42b4      	cmp	r4, r6
 80028fc:	d018      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 80028fe:	3618      	adds	r6, #24
 8002900:	42b4      	cmp	r4, r6
 8002902:	d015      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 8002904:	3618      	adds	r6, #24
 8002906:	42b4      	cmp	r4, r6
 8002908:	d012      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 800290a:	3618      	adds	r6, #24
 800290c:	42b4      	cmp	r4, r6
 800290e:	d00f      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 8002910:	3618      	adds	r6, #24
 8002912:	42b4      	cmp	r4, r6
 8002914:	d00c      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 8002916:	3618      	adds	r6, #24
 8002918:	42b4      	cmp	r4, r6
 800291a:	d009      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 800291c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002920:	42b4      	cmp	r4, r6
 8002922:	d005      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 8002924:	3618      	adds	r6, #24
 8002926:	42b4      	cmp	r4, r6
 8002928:	d002      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 800292a:	3618      	adds	r6, #24
 800292c:	42b4      	cmp	r4, r6
 800292e:	d0ff      	beq.n	8002930 <HAL_DMA_Start_IT+0x74>
 8002930:	6826      	ldr	r6, [r4, #0]
 8002932:	f026 0601 	bic.w	r6, r6, #1
 8002936:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002938:	f7ff fc6e 	bl	8002218 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002940:	42ab      	cmp	r3, r5
 8002942:	d053      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002944:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_DMA_Start_IT+0x22c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d050      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800294a:	3218      	adds	r2, #24
 800294c:	4293      	cmp	r3, r2
 800294e:	d04d      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002950:	3218      	adds	r2, #24
 8002952:	4293      	cmp	r3, r2
 8002954:	d04a      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002956:	3218      	adds	r2, #24
 8002958:	4293      	cmp	r3, r2
 800295a:	d047      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800295c:	3218      	adds	r2, #24
 800295e:	4293      	cmp	r3, r2
 8002960:	d044      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002962:	3218      	adds	r2, #24
 8002964:	4293      	cmp	r3, r2
 8002966:	d041      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002968:	3218      	adds	r2, #24
 800296a:	4293      	cmp	r3, r2
 800296c:	d03e      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800296e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002972:	4293      	cmp	r3, r2
 8002974:	d03a      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002976:	3218      	adds	r2, #24
 8002978:	4293      	cmp	r3, r2
 800297a:	d037      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800297c:	3218      	adds	r2, #24
 800297e:	4293      	cmp	r3, r2
 8002980:	d034      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002982:	3218      	adds	r2, #24
 8002984:	4293      	cmp	r3, r2
 8002986:	d031      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002988:	3218      	adds	r2, #24
 800298a:	4293      	cmp	r3, r2
 800298c:	d02e      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800298e:	3218      	adds	r2, #24
 8002990:	4293      	cmp	r3, r2
 8002992:	d02b      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 8002994:	3218      	adds	r2, #24
 8002996:	4293      	cmp	r3, r2
 8002998:	d028      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
 800299a:	3218      	adds	r2, #24
 800299c:	4293      	cmp	r3, r2
 800299e:	d025      	beq.n	80029ec <HAL_DMA_Start_IT+0x130>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f022 020e 	bic.w	r2, r2, #14
 80029a6:	f042 020a 	orr.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	2900      	cmp	r1, #0
 80029ae:	d156      	bne.n	8002a5e <HAL_DMA_Start_IT+0x1a2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_DMA_Start_IT+0x230>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d027      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029b6:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_DMA_Start_IT+0x234>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d024      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029bc:	3214      	adds	r2, #20
 80029be:	4293      	cmp	r3, r2
 80029c0:	d021      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029c2:	3214      	adds	r2, #20
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01e      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029c8:	3214      	adds	r2, #20
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01b      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029ce:	3214      	adds	r2, #20
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029d4:	3214      	adds	r2, #20
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d015      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 80029da:	3214      	adds	r2, #20
 80029dc:	4293      	cmp	r3, r2
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
    __HAL_DMA_ENABLE(hdma);
 80029e0:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f022 021e 	bic.w	r2, r2, #30
 80029f2:	f042 0216 	orr.w	r2, r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	b119      	cbz	r1, 8002a02 <HAL_DMA_Start_IT+0x146>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f042 0208 	orr.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a02:	42ab      	cmp	r3, r5
 8002a04:	d130      	bne.n	8002a68 <HAL_DMA_Start_IT+0x1ac>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a06:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	03c9      	lsls	r1, r1, #15
 8002a0c:	d45b      	bmi.n	8002ac6 <HAL_DMA_Start_IT+0x20a>
      if(hdma->DMAmuxRequestGen != 0U)
 8002a0e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002a10:	b11a      	cbz	r2, 8002a1a <HAL_DMA_Start_IT+0x15e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a12:	6811      	ldr	r1, [r2, #0]
 8002a14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002a18:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a1a:	42ab      	cmp	r3, r5
 8002a1c:	d0e0      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a1e:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_DMA_Start_IT+0x22c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d0dd      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a24:	3218      	adds	r2, #24
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d0da      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a2a:	3218      	adds	r2, #24
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d0d7      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a30:	3218      	adds	r2, #24
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d0d4      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a36:	3218      	adds	r2, #24
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d0d1      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a3c:	3218      	adds	r2, #24
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d0ce      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a42:	3218      	adds	r2, #24
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d0cb      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a48:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d0c7      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a50:	3218      	adds	r2, #24
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d0c4      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a56:	3218      	adds	r2, #24
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d0c1      	beq.n	80029e0 <HAL_DMA_Start_IT+0x124>
 8002a5c:	e7c0      	b.n	80029e0 <HAL_DMA_Start_IT+0x124>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f042 0204 	orr.w	r2, r2, #4
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e7a3      	b.n	80029b0 <HAL_DMA_Start_IT+0xf4>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a68:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <HAL_DMA_Start_IT+0x22c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d0cb      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a6e:	3218      	adds	r2, #24
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d0c8      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a74:	3218      	adds	r2, #24
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d0c5      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a7a:	3218      	adds	r2, #24
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d0c2      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a80:	3218      	adds	r2, #24
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d0bf      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a86:	3218      	adds	r2, #24
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d0bc      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a8c:	3218      	adds	r2, #24
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d0b9      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a92:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d0b5      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002a9a:	3218      	adds	r2, #24
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d0b2      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002aa0:	3218      	adds	r2, #24
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d0af      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002aa6:	3218      	adds	r2, #24
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d0ac      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002aac:	3218      	adds	r2, #24
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d0a9      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002ab2:	3218      	adds	r2, #24
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d0a6      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002ab8:	3218      	adds	r2, #24
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d0a3      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002abe:	3218      	adds	r2, #24
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d0a0      	beq.n	8002a06 <HAL_DMA_Start_IT+0x14a>
 8002ac4:	e774      	b.n	80029b0 <HAL_DMA_Start_IT+0xf4>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ac6:	6811      	ldr	r1, [r2, #0]
 8002ac8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	e79e      	b.n	8002a0e <HAL_DMA_Start_IT+0x152>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002ad4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ad8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002ada:	2001      	movs	r0, #1
 8002adc:	e785      	b.n	80029ea <HAL_DMA_Start_IT+0x12e>
  __HAL_LOCK(hdma);
 8002ade:	2002      	movs	r0, #2
 8002ae0:	e783      	b.n	80029ea <HAL_DMA_Start_IT+0x12e>
 8002ae2:	bf00      	nop
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	58025408 	.word	0x58025408
 8002af0:	5802541c 	.word	0x5802541c

08002af4 <HAL_DMA_Abort>:
{
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff fb1e 	bl	8002138 <HAL_GetTick>
 8002afc:	4607      	mov	r7, r0
  if(hdma == NULL)
 8002afe:	b145      	cbz	r5, 8002b12 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b00:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d006      	beq.n	8002b16 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8002b12:	2001      	movs	r0, #1
 8002b14:	e153      	b.n	8002dbe <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b16:	682c      	ldr	r4, [r5, #0]
 8002b18:	4ea9      	ldr	r6, [pc, #676]	; (8002dc0 <HAL_DMA_Abort+0x2cc>)
 8002b1a:	42b4      	cmp	r4, r6
 8002b1c:	d04a      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b1e:	4ba9      	ldr	r3, [pc, #676]	; (8002dc4 <HAL_DMA_Abort+0x2d0>)
 8002b20:	429c      	cmp	r4, r3
 8002b22:	d047      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b24:	3318      	adds	r3, #24
 8002b26:	429c      	cmp	r4, r3
 8002b28:	d044      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	d041      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b30:	3318      	adds	r3, #24
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d03e      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b36:	3318      	adds	r3, #24
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d038      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b42:	3318      	adds	r3, #24
 8002b44:	429c      	cmp	r4, r3
 8002b46:	d035      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	d031      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b50:	3318      	adds	r3, #24
 8002b52:	429c      	cmp	r4, r3
 8002b54:	d02e      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b56:	3318      	adds	r3, #24
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	d02b      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d028      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b62:	3318      	adds	r3, #24
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d025      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b68:	3318      	adds	r3, #24
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b6e:	3318      	adds	r3, #24
 8002b70:	429c      	cmp	r4, r3
 8002b72:	d01f      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
 8002b74:	3318      	adds	r3, #24
 8002b76:	429c      	cmp	r4, r3
 8002b78:	d01c      	beq.n	8002bb4 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	f023 030e 	bic.w	r3, r3, #14
 8002b80:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b82:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <HAL_DMA_Abort+0x2d4>)
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d01f      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002b88:	3314      	adds	r3, #20
 8002b8a:	429c      	cmp	r4, r3
 8002b8c:	d01c      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002b8e:	3314      	adds	r3, #20
 8002b90:	429c      	cmp	r4, r3
 8002b92:	d019      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002b94:	3314      	adds	r3, #20
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d016      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d010      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	429c      	cmp	r4, r3
 8002baa:	d00d      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002bac:	3314      	adds	r3, #20
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	d112      	bne.n	8002bd8 <HAL_DMA_Abort+0xe4>
 8002bb2:	e009      	b.n	8002bc8 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bb4:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bb6:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002bb8:	f023 031e 	bic.w	r3, r3, #30
 8002bbc:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bbe:	6963      	ldr	r3, [r4, #20]
 8002bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc4:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	d176      	bne.n	8002cb6 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bc8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 8002bca:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bcc:	6813      	ldr	r3, [r2, #0]
 8002bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bd4:	f040 80ab 	bne.w	8002d2e <HAL_DMA_Abort+0x23a>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	07db      	lsls	r3, r3, #31
 8002be4:	f100 80cd 	bmi.w	8002d82 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be8:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bec:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	6da8      	ldr	r0, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bf0:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf4:	f000 80d1 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002bf8:	4972      	ldr	r1, [pc, #456]	; (8002dc4 <HAL_DMA_Abort+0x2d0>)
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	f000 80cd 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c00:	3118      	adds	r1, #24
 8002c02:	428b      	cmp	r3, r1
 8002c04:	f000 80c9 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c08:	3118      	adds	r1, #24
 8002c0a:	428b      	cmp	r3, r1
 8002c0c:	f000 80c5 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c10:	3118      	adds	r1, #24
 8002c12:	428b      	cmp	r3, r1
 8002c14:	f000 80c1 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c18:	3118      	adds	r1, #24
 8002c1a:	428b      	cmp	r3, r1
 8002c1c:	f000 80bd 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c20:	3118      	adds	r1, #24
 8002c22:	428b      	cmp	r3, r1
 8002c24:	f000 80b9 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c28:	3118      	adds	r1, #24
 8002c2a:	428b      	cmp	r3, r1
 8002c2c:	f000 80b5 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c30:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002c34:	428b      	cmp	r3, r1
 8002c36:	f000 80b0 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c3a:	3118      	adds	r1, #24
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	f000 80ac 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c42:	3118      	adds	r1, #24
 8002c44:	428b      	cmp	r3, r1
 8002c46:	f000 80a8 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c4a:	3118      	adds	r1, #24
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	f000 80a4 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c52:	3118      	adds	r1, #24
 8002c54:	428b      	cmp	r3, r1
 8002c56:	f000 80a0 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c5a:	3118      	adds	r1, #24
 8002c5c:	428b      	cmp	r3, r1
 8002c5e:	f000 809c 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c62:	3118      	adds	r1, #24
 8002c64:	428b      	cmp	r3, r1
 8002c66:	f000 8098 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
 8002c6a:	3118      	adds	r1, #24
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	f000 8094 	beq.w	8002d9a <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c7a:	4a53      	ldr	r2, [pc, #332]	; (8002dc8 <HAL_DMA_Abort+0x2d4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	f000 8092 	beq.w	8002da6 <HAL_DMA_Abort+0x2b2>
 8002c82:	3214      	adds	r2, #20
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f000 808e 	beq.w	8002da6 <HAL_DMA_Abort+0x2b2>
 8002c8a:	3214      	adds	r2, #20
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	f000 808a 	beq.w	8002da6 <HAL_DMA_Abort+0x2b2>
 8002c92:	3214      	adds	r2, #20
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f000 8086 	beq.w	8002da6 <HAL_DMA_Abort+0x2b2>
 8002c9a:	3214      	adds	r2, #20
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f000 8082 	beq.w	8002da6 <HAL_DMA_Abort+0x2b2>
 8002ca2:	3214      	adds	r2, #20
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d07e      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002ca8:	3214      	adds	r2, #20
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d07b      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002cae:	3214      	adds	r2, #20
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d17e      	bne.n	8002db2 <HAL_DMA_Abort+0x2be>
 8002cb4:	e077      	b.n	8002da6 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <HAL_DMA_Abort+0x2d0>)
 8002cb8:	429c      	cmp	r4, r3
 8002cba:	d085      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	429c      	cmp	r4, r3
 8002cc0:	d082      	beq.n	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	f43f af7f 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cca:	3318      	adds	r3, #24
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	f43f af7b 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cd2:	3318      	adds	r3, #24
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	f43f af77 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cda:	3318      	adds	r3, #24
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	f43f af73 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	429c      	cmp	r4, r3
 8002ce6:	f43f af6f 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	f43f af6a 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	429c      	cmp	r4, r3
 8002cf8:	f43f af66 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002cfc:	3318      	adds	r3, #24
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	f43f af62 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d04:	3318      	adds	r3, #24
 8002d06:	429c      	cmp	r4, r3
 8002d08:	f43f af5e 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	429c      	cmp	r4, r3
 8002d10:	f43f af5a 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d14:	3318      	adds	r3, #24
 8002d16:	429c      	cmp	r4, r3
 8002d18:	f43f af56 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d1c:	3318      	adds	r3, #24
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	f43f af52 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d24:	3318      	adds	r3, #24
 8002d26:	429c      	cmp	r4, r3
 8002d28:	f43f af4e 	beq.w	8002bc8 <HAL_DMA_Abort+0xd4>
 8002d2c:	e729      	b.n	8002b82 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_DMA_Abort+0x2d0>)
 8002d30:	429c      	cmp	r4, r3
 8002d32:	f43f af51 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d36:	3318      	adds	r3, #24
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	f43f af4d 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d3e:	3318      	adds	r3, #24
 8002d40:	429c      	cmp	r4, r3
 8002d42:	f43f af49 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d46:	3318      	adds	r3, #24
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	f43f af45 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d4e:	3318      	adds	r3, #24
 8002d50:	429c      	cmp	r4, r3
 8002d52:	f43f af41 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d56:	3318      	adds	r3, #24
 8002d58:	429c      	cmp	r4, r3
 8002d5a:	f43f af3d 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d5e:	3318      	adds	r3, #24
 8002d60:	429c      	cmp	r4, r3
 8002d62:	f43f af39 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	f43f af34 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d70:	3318      	adds	r3, #24
 8002d72:	429c      	cmp	r4, r3
 8002d74:	f43f af30 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d78:	3318      	adds	r3, #24
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	f43f af2c 	beq.w	8002bd8 <HAL_DMA_Abort+0xe4>
 8002d80:	e72a      	b.n	8002bd8 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d82:	f7ff f9d9 	bl	8002138 <HAL_GetTick>
 8002d86:	1bc0      	subs	r0, r0, r7
 8002d88:	2805      	cmp	r0, #5
 8002d8a:	f67f af29 	bls.w	8002be0 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8002d98:	e6b8      	b.n	8002b0c <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d9a:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d9c:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da4:	d112      	bne.n	8002dcc <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da6:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8002daa:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002dac:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d13b      	bne.n	8002e2a <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8002db2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002db4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002db6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002dba:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc0:	40020010 	.word	0x40020010
 8002dc4:	40020028 	.word	0x40020028
 8002dc8:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_DMA_Abort+0x348>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d0e9      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002dd2:	3218      	adds	r2, #24
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d0e6      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002dd8:	3218      	adds	r2, #24
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d0e3      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002dde:	3218      	adds	r2, #24
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d0e0      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002de4:	3218      	adds	r2, #24
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d0dd      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002dea:	3218      	adds	r2, #24
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d0da      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002df0:	3218      	adds	r2, #24
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d0d7      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002df6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d0d3      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002dfe:	3218      	adds	r2, #24
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d0d0      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e04:	3218      	adds	r2, #24
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d0cd      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e0a:	3218      	adds	r2, #24
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d0ca      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e10:	3218      	adds	r2, #24
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d0c7      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e16:	3218      	adds	r2, #24
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d0c4      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e1c:	3218      	adds	r2, #24
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d0c1      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e22:	3218      	adds	r2, #24
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d0be      	beq.n	8002da6 <HAL_DMA_Abort+0x2b2>
 8002e28:	e727      	b.n	8002c7a <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e32:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e7bb      	b.n	8002db2 <HAL_DMA_Abort+0x2be>
 8002e3a:	bf00      	nop
 8002e3c:	40020028 	.word	0x40020028

08002e40 <HAL_DMA_Abort_IT>:
{
 8002e40:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002e42:	b128      	cbz	r0, 8002e50 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d003      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
 8002e52:	e07f      	b.n	8002f54 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <HAL_DMA_Abort_IT+0x158>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d052      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e5c:	494f      	ldr	r1, [pc, #316]	; (8002f9c <HAL_DMA_Abort_IT+0x15c>)
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d04f      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e62:	3118      	adds	r1, #24
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d04c      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e68:	3118      	adds	r1, #24
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d049      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e6e:	3118      	adds	r1, #24
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d046      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e74:	3118      	adds	r1, #24
 8002e76:	428b      	cmp	r3, r1
 8002e78:	d043      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e7a:	3118      	adds	r1, #24
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d040      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e80:	3118      	adds	r1, #24
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d03d      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e86:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002e8a:	428b      	cmp	r3, r1
 8002e8c:	d039      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e8e:	3118      	adds	r1, #24
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d036      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e94:	3118      	adds	r1, #24
 8002e96:	428b      	cmp	r3, r1
 8002e98:	d033      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002e9a:	3118      	adds	r1, #24
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d030      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002ea0:	3118      	adds	r1, #24
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d02d      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002ea6:	3118      	adds	r1, #24
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d02a      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002eac:	3118      	adds	r1, #24
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d027      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
 8002eb2:	3118      	adds	r1, #24
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d024      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f022 020e 	bic.w	r2, r2, #14
 8002ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ec8:	4a35      	ldr	r2, [pc, #212]	; (8002fa0 <HAL_DMA_Abort_IT+0x160>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d143      	bne.n	8002f56 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ece:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed8:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee6:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8002eea:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002eec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d046      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002efa:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	e03e      	b.n	8002f80 <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f02:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8002f04:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f06:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002f0a:	d01e      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <HAL_DMA_Abort_IT+0x15c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f12:	3218      	adds	r2, #24
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f18:	3218      	adds	r2, #24
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d015      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f1e:	3218      	adds	r2, #24
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d012      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f24:	3218      	adds	r2, #24
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f2a:	3218      	adds	r2, #24
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00c      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f30:	3218      	adds	r2, #24
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f36:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d005      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f3e:	3218      	adds	r2, #24
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d002      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f44:	3218      	adds	r2, #24
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d0ff      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x10a>
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
}
 8002f54:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_DMA_Abort_IT+0x164>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d0b8      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f5c:	3214      	adds	r2, #20
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d0b5      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f62:	3214      	adds	r2, #20
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d0b2      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f68:	3214      	adds	r2, #20
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d0af      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f6e:	3214      	adds	r2, #20
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d0ac      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f74:	3214      	adds	r2, #20
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d0a9      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
 8002f7a:	3214      	adds	r2, #20
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d0a6      	beq.n	8002ece <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8002f80:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002f82:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002f84:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002f88:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8002f8a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8002f8e:	b10b      	cbz	r3, 8002f94 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 8002f90:	4798      	blx	r3
 8002f92:	e7de      	b.n	8002f52 <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8002f94:	4618      	mov	r0, r3
 8002f96:	e7dd      	b.n	8002f54 <HAL_DMA_Abort_IT+0x114>
 8002f98:	40020010 	.word	0x40020010
 8002f9c:	40020028 	.word	0x40020028
 8002fa0:	58025408 	.word	0x58025408
 8002fa4:	5802541c 	.word	0x5802541c

08002fa8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8002fa8:	2300      	movs	r3, #0
{
 8002faa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002fae:	9301      	str	r3, [sp, #4]
{
 8002fb0:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fb4:	4e29      	ldr	r6, [pc, #164]	; (800305c <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb6:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fb8:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fba:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fbc:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8002fbe:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8002fc2:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fc6:	d04f      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <HAL_DMA_IRQHandler+0xb8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d04c      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fce:	3218      	adds	r2, #24
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d049      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fd4:	3218      	adds	r2, #24
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d046      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fda:	3218      	adds	r2, #24
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d043      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fe0:	3218      	adds	r2, #24
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fe6:	3218      	adds	r2, #24
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d03d      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002fec:	3218      	adds	r2, #24
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d03a      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002ff2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8002ffa:	3218      	adds	r2, #24
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d033      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8003000:	3218      	adds	r2, #24
 8003002:	4293      	cmp	r3, r2
 8003004:	d030      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8003006:	3218      	adds	r2, #24
 8003008:	4293      	cmp	r3, r2
 800300a:	d02d      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 800300c:	3218      	adds	r2, #24
 800300e:	4293      	cmp	r3, r2
 8003010:	d02a      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8003012:	3218      	adds	r2, #24
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 8003018:	3218      	adds	r2, #24
 800301a:	4293      	cmp	r3, r2
 800301c:	d024      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
 800301e:	3218      	adds	r2, #24
 8003020:	4293      	cmp	r3, r2
 8003022:	d021      	beq.n	8003068 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_DMA_IRQHandler+0xbc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	f040 820c 	bne.w	8003444 <HAL_DMA_IRQHandler+0x49c>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800302c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800302e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003030:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003032:	f001 011f 	and.w	r1, r1, #31
 8003036:	4088      	lsls	r0, r1
 8003038:	ea10 0f0c 	tst.w	r0, ip
 800303c:	f000 8229 	beq.w	8003492 <HAL_DMA_IRQHandler+0x4ea>
 8003040:	0756      	lsls	r6, r2, #29
 8003042:	f140 8226 	bpl.w	8003492 <HAL_DMA_IRQHandler+0x4ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003046:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003048:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800304a:	f140 821a 	bpl.w	8003482 <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800304e:	03d3      	lsls	r3, r2, #15
 8003050:	f100 821d 	bmi.w	800348e <HAL_DMA_IRQHandler+0x4e6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003054:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003056:	e180      	b.n	800335a <HAL_DMA_IRQHandler+0x3b2>
 8003058:	24000000 	.word	0x24000000
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003068:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800306a:	2008      	movs	r0, #8
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	4090      	lsls	r0, r2
 8003072:	ea10 0f08 	tst.w	r0, r8
 8003076:	d03d      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003078:	42b3      	cmp	r3, r6
 800307a:	d02e      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 800307c:	4985      	ldr	r1, [pc, #532]	; (8003294 <HAL_DMA_IRQHandler+0x2ec>)
 800307e:	428b      	cmp	r3, r1
 8003080:	d02b      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 8003082:	3118      	adds	r1, #24
 8003084:	428b      	cmp	r3, r1
 8003086:	d028      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 8003088:	3118      	adds	r1, #24
 800308a:	428b      	cmp	r3, r1
 800308c:	d025      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 800308e:	3118      	adds	r1, #24
 8003090:	428b      	cmp	r3, r1
 8003092:	d022      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 8003094:	3118      	adds	r1, #24
 8003096:	428b      	cmp	r3, r1
 8003098:	d01f      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 800309a:	3118      	adds	r1, #24
 800309c:	428b      	cmp	r3, r1
 800309e:	d01c      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030a0:	3118      	adds	r1, #24
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d019      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030a6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d015      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030ae:	3118      	adds	r1, #24
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d012      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030b4:	3118      	adds	r1, #24
 80030b6:	428b      	cmp	r3, r1
 80030b8:	d00f      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030ba:	3118      	adds	r1, #24
 80030bc:	428b      	cmp	r3, r1
 80030be:	d00c      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030c0:	3118      	adds	r1, #24
 80030c2:	428b      	cmp	r3, r1
 80030c4:	d009      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030c6:	3118      	adds	r1, #24
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d006      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030cc:	3118      	adds	r1, #24
 80030ce:	428b      	cmp	r3, r1
 80030d0:	d003      	beq.n	80030da <HAL_DMA_IRQHandler+0x132>
 80030d2:	3118      	adds	r1, #24
 80030d4:	428b      	cmp	r3, r1
 80030d6:	f040 80c2 	bne.w	800325e <HAL_DMA_IRQHandler+0x2b6>
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80030e0:	b141      	cbz	r1, 80030f4 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	f021 0104 	bic.w	r1, r1, #4
 80030e8:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030ea:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80030ee:	f041 0101 	orr.w	r1, r1, #1
 80030f2:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f4:	fa28 f102 	lsr.w	r1, r8, r2
 80030f8:	07c8      	lsls	r0, r1, #31
 80030fa:	d534      	bpl.n	8003166 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030fc:	42b3      	cmp	r3, r6
 80030fe:	d02e      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003100:	4964      	ldr	r1, [pc, #400]	; (8003294 <HAL_DMA_IRQHandler+0x2ec>)
 8003102:	428b      	cmp	r3, r1
 8003104:	d02b      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003106:	3118      	adds	r1, #24
 8003108:	428b      	cmp	r3, r1
 800310a:	d028      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 800310c:	3118      	adds	r1, #24
 800310e:	428b      	cmp	r3, r1
 8003110:	d025      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003112:	3118      	adds	r1, #24
 8003114:	428b      	cmp	r3, r1
 8003116:	d022      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003118:	3118      	adds	r1, #24
 800311a:	428b      	cmp	r3, r1
 800311c:	d01f      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 800311e:	3118      	adds	r1, #24
 8003120:	428b      	cmp	r3, r1
 8003122:	d01c      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003124:	3118      	adds	r1, #24
 8003126:	428b      	cmp	r3, r1
 8003128:	d019      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 800312a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800312e:	428b      	cmp	r3, r1
 8003130:	d015      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003132:	3118      	adds	r1, #24
 8003134:	428b      	cmp	r3, r1
 8003136:	d012      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003138:	3118      	adds	r1, #24
 800313a:	428b      	cmp	r3, r1
 800313c:	d00f      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 800313e:	3118      	adds	r1, #24
 8003140:	428b      	cmp	r3, r1
 8003142:	d00c      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003144:	3118      	adds	r1, #24
 8003146:	428b      	cmp	r3, r1
 8003148:	d009      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 800314a:	3118      	adds	r1, #24
 800314c:	428b      	cmp	r3, r1
 800314e:	d006      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003150:	3118      	adds	r1, #24
 8003152:	428b      	cmp	r3, r1
 8003154:	d003      	beq.n	800315e <HAL_DMA_IRQHandler+0x1b6>
 8003156:	3118      	adds	r1, #24
 8003158:	428b      	cmp	r3, r1
 800315a:	f040 8084 	bne.w	8003266 <HAL_DMA_IRQHandler+0x2be>
 800315e:	6959      	ldr	r1, [r3, #20]
 8003160:	0609      	lsls	r1, r1, #24
 8003162:	f100 8082 	bmi.w	800326a <HAL_DMA_IRQHandler+0x2c2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003166:	2104      	movs	r1, #4
 8003168:	4091      	lsls	r1, r2
 800316a:	ea11 0f08 	tst.w	r1, r8
 800316e:	d032      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003170:	42b3      	cmp	r3, r6
 8003172:	d02d      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 8003174:	4847      	ldr	r0, [pc, #284]	; (8003294 <HAL_DMA_IRQHandler+0x2ec>)
 8003176:	4283      	cmp	r3, r0
 8003178:	d02a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 800317a:	3018      	adds	r0, #24
 800317c:	4283      	cmp	r3, r0
 800317e:	d027      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 8003180:	3018      	adds	r0, #24
 8003182:	4283      	cmp	r3, r0
 8003184:	d024      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 8003186:	3018      	adds	r0, #24
 8003188:	4283      	cmp	r3, r0
 800318a:	d021      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 800318c:	3018      	adds	r0, #24
 800318e:	4283      	cmp	r3, r0
 8003190:	d01e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 8003192:	3018      	adds	r0, #24
 8003194:	4283      	cmp	r3, r0
 8003196:	d01b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 8003198:	3018      	adds	r0, #24
 800319a:	4283      	cmp	r3, r0
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 800319e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80031a2:	4283      	cmp	r3, r0
 80031a4:	d014      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031a6:	3018      	adds	r0, #24
 80031a8:	4283      	cmp	r3, r0
 80031aa:	d011      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031ac:	3018      	adds	r0, #24
 80031ae:	4283      	cmp	r3, r0
 80031b0:	d00e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031b2:	3018      	adds	r0, #24
 80031b4:	4283      	cmp	r3, r0
 80031b6:	d00b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031b8:	3018      	adds	r0, #24
 80031ba:	4283      	cmp	r3, r0
 80031bc:	d008      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031be:	3018      	adds	r0, #24
 80031c0:	4283      	cmp	r3, r0
 80031c2:	d005      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031c4:	3018      	adds	r0, #24
 80031c6:	4283      	cmp	r3, r0
 80031c8:	d002      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x228>
 80031ca:	3018      	adds	r0, #24
 80031cc:	4283      	cmp	r3, r0
 80031ce:	d154      	bne.n	800327a <HAL_DMA_IRQHandler+0x2d2>
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	0780      	lsls	r0, r0, #30
 80031d4:	d453      	bmi.n	800327e <HAL_DMA_IRQHandler+0x2d6>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031d6:	2110      	movs	r1, #16
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	ea12 0f08 	tst.w	r2, r8
 80031e0:	d05e      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x2f8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031e2:	42b3      	cmp	r3, r6
 80031e4:	d02d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 80031e6:	492b      	ldr	r1, [pc, #172]	; (8003294 <HAL_DMA_IRQHandler+0x2ec>)
 80031e8:	428b      	cmp	r3, r1
 80031ea:	d02a      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 80031ec:	3118      	adds	r1, #24
 80031ee:	428b      	cmp	r3, r1
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 80031f2:	3118      	adds	r1, #24
 80031f4:	428b      	cmp	r3, r1
 80031f6:	d024      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 80031f8:	3118      	adds	r1, #24
 80031fa:	428b      	cmp	r3, r1
 80031fc:	d021      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 80031fe:	3118      	adds	r1, #24
 8003200:	428b      	cmp	r3, r1
 8003202:	d01e      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003204:	3118      	adds	r1, #24
 8003206:	428b      	cmp	r3, r1
 8003208:	d01b      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 800320a:	3118      	adds	r1, #24
 800320c:	428b      	cmp	r3, r1
 800320e:	d018      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003210:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003214:	428b      	cmp	r3, r1
 8003216:	d014      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003218:	3118      	adds	r1, #24
 800321a:	428b      	cmp	r3, r1
 800321c:	d011      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 800321e:	3118      	adds	r1, #24
 8003220:	428b      	cmp	r3, r1
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003224:	3118      	adds	r1, #24
 8003226:	428b      	cmp	r3, r1
 8003228:	d00b      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 800322a:	3118      	adds	r1, #24
 800322c:	428b      	cmp	r3, r1
 800322e:	d008      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003230:	3118      	adds	r1, #24
 8003232:	428b      	cmp	r3, r1
 8003234:	d005      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 8003236:	3118      	adds	r1, #24
 8003238:	428b      	cmp	r3, r1
 800323a:	d002      	beq.n	8003242 <HAL_DMA_IRQHandler+0x29a>
 800323c:	3118      	adds	r1, #24
 800323e:	428b      	cmp	r3, r1
 8003240:	d123      	bne.n	800328a <HAL_DMA_IRQHandler+0x2e2>
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	f011 0f08 	tst.w	r1, #8
 8003248:	d02a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x2f8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800324a:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	0350      	lsls	r0, r2, #13
 8003250:	f140 808b 	bpl.w	800336a <HAL_DMA_IRQHandler+0x3c2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0319      	lsls	r1, r3, #12
 8003258:	d41e      	bmi.n	8003298 <HAL_DMA_IRQHandler+0x2f0>
          if(hdma->XferHalfCpltCallback != NULL)
 800325a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800325c:	e01d      	b.n	800329a <HAL_DMA_IRQHandler+0x2f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8003264:	e73c      	b.n	80030e0 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	e77d      	b.n	8003166 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800326a:	2101      	movs	r1, #1
 800326c:	4091      	lsls	r1, r2
 800326e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003270:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003272:	f041 0102 	orr.w	r1, r1, #2
 8003276:	6561      	str	r1, [r4, #84]	; 0x54
 8003278:	e775      	b.n	8003166 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	e7ab      	b.n	80031d6 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800327e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003280:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003282:	f041 0104 	orr.w	r1, r1, #4
 8003286:	6561      	str	r1, [r4, #84]	; 0x54
 8003288:	e7a5      	b.n	80031d6 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	f011 0f04 	tst.w	r1, #4
 8003290:	e7da      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
 8003292:	bf00      	nop
 8003294:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003298:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 800329a:	b10b      	cbz	r3, 80032a0 <HAL_DMA_IRQHandler+0x2f8>
            hdma->XferHalfCpltCallback(hdma);
 800329c:	4620      	mov	r0, r4
 800329e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032a2:	2120      	movs	r1, #32
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	4091      	lsls	r1, r2
 80032aa:	ea11 0f08 	tst.w	r1, r8
 80032ae:	d073      	beq.n	8003398 <HAL_DMA_IRQHandler+0x3f0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	42b3      	cmp	r3, r6
 80032b4:	d02d      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032b6:	488d      	ldr	r0, [pc, #564]	; (80034ec <HAL_DMA_IRQHandler+0x544>)
 80032b8:	4283      	cmp	r3, r0
 80032ba:	d02a      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032bc:	3018      	adds	r0, #24
 80032be:	4283      	cmp	r3, r0
 80032c0:	d027      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032c2:	3018      	adds	r0, #24
 80032c4:	4283      	cmp	r3, r0
 80032c6:	d024      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032c8:	3018      	adds	r0, #24
 80032ca:	4283      	cmp	r3, r0
 80032cc:	d021      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032ce:	3018      	adds	r0, #24
 80032d0:	4283      	cmp	r3, r0
 80032d2:	d01e      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032d4:	3018      	adds	r0, #24
 80032d6:	4283      	cmp	r3, r0
 80032d8:	d01b      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032da:	3018      	adds	r0, #24
 80032dc:	4283      	cmp	r3, r0
 80032de:	d018      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032e0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80032e4:	4283      	cmp	r3, r0
 80032e6:	d014      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032e8:	3018      	adds	r0, #24
 80032ea:	4283      	cmp	r3, r0
 80032ec:	d011      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032ee:	3018      	adds	r0, #24
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032f4:	3018      	adds	r0, #24
 80032f6:	4283      	cmp	r3, r0
 80032f8:	d00b      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 80032fa:	3018      	adds	r0, #24
 80032fc:	4283      	cmp	r3, r0
 80032fe:	d008      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 8003300:	3018      	adds	r0, #24
 8003302:	4283      	cmp	r3, r0
 8003304:	d005      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 8003306:	3018      	adds	r0, #24
 8003308:	4283      	cmp	r3, r0
 800330a:	d002      	beq.n	8003312 <HAL_DMA_IRQHandler+0x36a>
 800330c:	3018      	adds	r0, #24
 800330e:	4283      	cmp	r3, r0
 8003310:	d134      	bne.n	800337c <HAL_DMA_IRQHandler+0x3d4>
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	f010 0f10 	tst.w	r0, #16
 8003318:	d03e      	beq.n	8003398 <HAL_DMA_IRQHandler+0x3f0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800331a:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800331c:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8003320:	2904      	cmp	r1, #4
 8003322:	d12f      	bne.n	8003384 <HAL_DMA_IRQHandler+0x3dc>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	f021 0116 	bic.w	r1, r1, #22
 800332a:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800332c:	6959      	ldr	r1, [r3, #20]
 800332e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003332:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003334:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003336:	b909      	cbnz	r1, 800333c <HAL_DMA_IRQHandler+0x394>
 8003338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800333a:	b119      	cbz	r1, 8003344 <HAL_DMA_IRQHandler+0x39c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800333c:	6819      	ldr	r1, [r3, #0]
 800333e:	f021 0108 	bic.w	r1, r1, #8
 8003342:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003344:	233f      	movs	r3, #63	; 0x3f
 8003346:	fa03 f202 	lsl.w	r2, r3, r2
          hdma->State = HAL_DMA_STATE_READY;
 800334a:	2301      	movs	r3, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800334c:	60aa      	str	r2, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800334e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003352:	2300      	movs	r3, #0
 8003354:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003358:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808e 	beq.w	800347c <HAL_DMA_IRQHandler+0x4d4>
        hdma->XferErrorCallback(hdma);
 8003360:	4620      	mov	r0, r4
}
 8003362:	b002      	add	sp, #8
 8003364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003368:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	05d2      	lsls	r2, r2, #23
 800336e:	f53f af74 	bmi.w	800325a <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e76e      	b.n	800325a <HAL_DMA_IRQHandler+0x2b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f010 0f02 	tst.w	r0, #2
 8003382:	e7c9      	b.n	8003318 <HAL_DMA_IRQHandler+0x370>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	0355      	lsls	r5, r2, #13
 8003388:	d54d      	bpl.n	8003426 <HAL_DMA_IRQHandler+0x47e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0318      	lsls	r0, r3, #12
 800338e:	d457      	bmi.n	8003440 <HAL_DMA_IRQHandler+0x498>
            if(hdma->XferM1CpltCallback != NULL)
 8003390:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8003392:	b10b      	cbz	r3, 8003398 <HAL_DMA_IRQHandler+0x3f0>
            hdma->XferCpltCallback(hdma);
 8003394:	4620      	mov	r0, r4
 8003396:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800339a:	2b00      	cmp	r3, #0
 800339c:	d06e      	beq.n	800347c <HAL_DMA_IRQHandler+0x4d4>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800339e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a0:	07d9      	lsls	r1, r3, #31
 80033a2:	d53e      	bpl.n	8003422 <HAL_DMA_IRQHandler+0x47a>
        hdma->State = HAL_DMA_STATE_ABORT;
 80033a4:	2304      	movs	r3, #4
 80033a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	42b3      	cmp	r3, r6
 80033ae:	d01e      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033b0:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <HAL_DMA_IRQHandler+0x544>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01b      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033b6:	3218      	adds	r2, #24
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033bc:	3218      	adds	r2, #24
 80033be:	4293      	cmp	r3, r2
 80033c0:	d015      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033c2:	3218      	adds	r2, #24
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d012      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033c8:	3218      	adds	r2, #24
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033ce:	3218      	adds	r2, #24
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00c      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033d4:	3218      	adds	r2, #24
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033da:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80033de:	4293      	cmp	r3, r2
 80033e0:	d005      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033e2:	3218      	adds	r2, #24
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d002      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033e8:	3218      	adds	r2, #24
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d0ff      	beq.n	80033ee <HAL_DMA_IRQHandler+0x446>
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033f6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033fa:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 80033fe:	9a01      	ldr	r2, [sp, #4]
 8003400:	3201      	adds	r2, #1
 8003402:	42ba      	cmp	r2, r7
 8003404:	9201      	str	r2, [sp, #4]
 8003406:	d802      	bhi.n	800340e <HAL_DMA_IRQHandler+0x466>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	07d2      	lsls	r2, r2, #31
 800340c:	d4f7      	bmi.n	80033fe <HAL_DMA_IRQHandler+0x456>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003412:	bf4c      	ite	mi
 8003414:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003416:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8003418:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800341c:	2300      	movs	r3, #0
 800341e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8003422:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003424:	e799      	b.n	800335a <HAL_DMA_IRQHandler+0x3b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800342c:	d108      	bne.n	8003440 <HAL_DMA_IRQHandler+0x498>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	f021 0110 	bic.w	r1, r1, #16
 8003434:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003436:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003438:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800343c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003440:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003442:	e7a6      	b.n	8003392 <HAL_DMA_IRQHandler+0x3ea>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <HAL_DMA_IRQHandler+0x548>)
 8003446:	4293      	cmp	r3, r2
 8003448:	f43f adf0 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 800344c:	3214      	adds	r2, #20
 800344e:	4293      	cmp	r3, r2
 8003450:	f43f adec 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 8003454:	3214      	adds	r2, #20
 8003456:	4293      	cmp	r3, r2
 8003458:	f43f ade8 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 800345c:	3214      	adds	r2, #20
 800345e:	4293      	cmp	r3, r2
 8003460:	f43f ade4 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 8003464:	3214      	adds	r2, #20
 8003466:	4293      	cmp	r3, r2
 8003468:	f43f ade0 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 800346c:	3214      	adds	r2, #20
 800346e:	4293      	cmp	r3, r2
 8003470:	f43f addc 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
 8003474:	3214      	adds	r2, #20
 8003476:	4293      	cmp	r3, r2
 8003478:	f43f add8 	beq.w	800302c <HAL_DMA_IRQHandler+0x84>
}
 800347c:	b002      	add	sp, #8
 800347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003482:	0697      	lsls	r7, r2, #26
 8003484:	d403      	bmi.n	800348e <HAL_DMA_IRQHandler+0x4e6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	f022 0204 	bic.w	r2, r2, #4
 800348c:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800348e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003490:	e763      	b.n	800335a <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003492:	2002      	movs	r0, #2
 8003494:	4088      	lsls	r0, r1
 8003496:	ea10 0f0c 	tst.w	r0, ip
 800349a:	d016      	beq.n	80034ca <HAL_DMA_IRQHandler+0x522>
 800349c:	0796      	lsls	r6, r2, #30
 800349e:	d514      	bpl.n	80034ca <HAL_DMA_IRQHandler+0x522>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034a0:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034a2:	0410      	lsls	r0, r2, #16
 80034a4:	d503      	bpl.n	80034ae <HAL_DMA_IRQHandler+0x506>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034a6:	03d1      	lsls	r1, r2, #15
 80034a8:	d40d      	bmi.n	80034c6 <HAL_DMA_IRQHandler+0x51e>
          if(hdma->XferM1CpltCallback != NULL)
 80034aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034ac:	e755      	b.n	800335a <HAL_DMA_IRQHandler+0x3b2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034ae:	f012 0220 	ands.w	r2, r2, #32
 80034b2:	d108      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x51e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	f021 010a 	bic.w	r1, r1, #10
 80034ba:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80034bc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80034be:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80034c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80034c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034c8:	e747      	b.n	800335a <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034ca:	2008      	movs	r0, #8
 80034cc:	4088      	lsls	r0, r1
 80034ce:	ea10 0f0c 	tst.w	r0, ip
 80034d2:	d0d3      	beq.n	800347c <HAL_DMA_IRQHandler+0x4d4>
 80034d4:	0712      	lsls	r2, r2, #28
 80034d6:	d5d1      	bpl.n	800347c <HAL_DMA_IRQHandler+0x4d4>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034e0:	2301      	movs	r3, #1
 80034e2:	fa03 f101 	lsl.w	r1, r3, r1
 80034e6:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034e8:	6563      	str	r3, [r4, #84]	; 0x54
 80034ea:	e795      	b.n	8003418 <HAL_DMA_IRQHandler+0x470>
 80034ec:	40020028 	.word	0x40020028
 80034f0:	5802541c 	.word	0x5802541c

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80034f8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80036c8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034fe:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003502:	680a      	ldr	r2, [r1, #0]
 8003504:	fa32 f503 	lsrs.w	r5, r2, r3
 8003508:	d102      	bne.n	8003510 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800350a:	b003      	add	sp, #12
 800350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003510:	f04f 0e01 	mov.w	lr, #1
 8003514:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8003518:	ea1e 0202 	ands.w	r2, lr, r2
 800351c:	f000 80bd 	beq.w	800369a <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	684e      	ldr	r6, [r1, #4]
 8003522:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003526:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800352a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800352e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003532:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003534:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003538:	2f01      	cmp	r7, #1
 800353a:	d834      	bhi.n	80035a6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800353c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003542:	68cf      	ldr	r7, [r1, #12]
 8003544:	fa07 f708 	lsl.w	r7, r7, r8
 8003548:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800354c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800354e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003550:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003554:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003558:	409f      	lsls	r7, r3
 800355a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800355e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003560:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003564:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003568:	688f      	ldr	r7, [r1, #8]
 800356a:	fa07 f708 	lsl.w	r7, r7, r8
 800356e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8003572:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003574:	d119      	bne.n	80035aa <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8003576:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800357a:	f003 0b07 	and.w	fp, r3, #7
 800357e:	f04f 0e0f 	mov.w	lr, #15
 8003582:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003586:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800358a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800358e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003592:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003596:	690f      	ldr	r7, [r1, #16]
 8003598:	fa07 f70b 	lsl.w	r7, r7, fp
 800359c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80035a0:	f8ca 7020 	str.w	r7, [sl, #32]
 80035a4:	e001      	b.n	80035aa <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a6:	2d03      	cmp	r5, #3
 80035a8:	d1da      	bne.n	8003560 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80035aa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ac:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035b4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035b8:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80035bc:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035be:	d06c      	beq.n	800369a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80035c4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035c8:	f003 0c03 	and.w	ip, r3, #3
 80035cc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d0:	f045 0502 	orr.w	r5, r5, #2
 80035d4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035dc:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80035e0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80035e4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80035e8:	f005 0502 	and.w	r5, r5, #2
 80035ec:	9501      	str	r5, [sp, #4]
 80035ee:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80035f4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035fc:	4d31      	ldr	r5, [pc, #196]	; (80036c4 <HAL_GPIO_Init+0x1d0>)
 80035fe:	42a8      	cmp	r0, r5
 8003600:	d04d      	beq.n	800369e <HAL_GPIO_Init+0x1aa>
 8003602:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003606:	42a8      	cmp	r0, r5
 8003608:	d04b      	beq.n	80036a2 <HAL_GPIO_Init+0x1ae>
 800360a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800360e:	42a8      	cmp	r0, r5
 8003610:	d049      	beq.n	80036a6 <HAL_GPIO_Init+0x1b2>
 8003612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003616:	42a8      	cmp	r0, r5
 8003618:	d047      	beq.n	80036aa <HAL_GPIO_Init+0x1b6>
 800361a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800361e:	42a8      	cmp	r0, r5
 8003620:	d045      	beq.n	80036ae <HAL_GPIO_Init+0x1ba>
 8003622:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003626:	42a8      	cmp	r0, r5
 8003628:	d043      	beq.n	80036b2 <HAL_GPIO_Init+0x1be>
 800362a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800362e:	42a8      	cmp	r0, r5
 8003630:	d041      	beq.n	80036b6 <HAL_GPIO_Init+0x1c2>
 8003632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003636:	42a8      	cmp	r0, r5
 8003638:	d03f      	beq.n	80036ba <HAL_GPIO_Init+0x1c6>
 800363a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800363e:	42a8      	cmp	r0, r5
 8003640:	d03d      	beq.n	80036be <HAL_GPIO_Init+0x1ca>
 8003642:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003646:	42a8      	cmp	r0, r5
 8003648:	bf0c      	ite	eq
 800364a:	2509      	moveq	r5, #9
 800364c:	250a      	movne	r5, #10
 800364e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003656:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800365c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8003660:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003662:	bf0c      	ite	eq
 8003664:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003666:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003668:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800366c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800366e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8003670:	bf0c      	ite	eq
 8003672:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003674:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003676:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800367a:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800367c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8003680:	bf0c      	ite	eq
 8003682:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003684:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003686:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003688:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800368c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8003690:	bf54      	ite	pl
 8003692:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003694:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003696:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800369a:	3301      	adds	r3, #1
 800369c:	e731      	b.n	8003502 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800369e:	2500      	movs	r5, #0
 80036a0:	e7d5      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036a2:	2501      	movs	r5, #1
 80036a4:	e7d3      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036a6:	2502      	movs	r5, #2
 80036a8:	e7d1      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036aa:	2503      	movs	r5, #3
 80036ac:	e7cf      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036ae:	2504      	movs	r5, #4
 80036b0:	e7cd      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036b2:	2505      	movs	r5, #5
 80036b4:	e7cb      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036b6:	2506      	movs	r5, #6
 80036b8:	e7c9      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036ba:	2507      	movs	r5, #7
 80036bc:	e7c7      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036be:	2508      	movs	r5, #8
 80036c0:	e7c5      	b.n	800364e <HAL_GPIO_Init+0x15a>
 80036c2:	bf00      	nop
 80036c4:	58020000 	.word	0x58020000
 80036c8:	58024400 	.word	0x58024400

080036cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036ce:	4c10      	ldr	r4, [pc, #64]	; (8003710 <HAL_PWREx_ConfigSupply+0x44>)
 80036d0:	68e3      	ldr	r3, [r4, #12]
 80036d2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036d6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036d8:	d105      	bne.n	80036e6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036da:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036de:	1a18      	subs	r0, r3, r0
 80036e0:	bf18      	it	ne
 80036e2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	4318      	orrs	r0, r3
 80036ec:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80036ee:	f7fe fd23 	bl	8002138 <HAL_GetTick>
 80036f2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036f4:	6863      	ldr	r3, [r4, #4]
 80036f6:	049b      	lsls	r3, r3, #18
 80036f8:	d501      	bpl.n	80036fe <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80036fa:	2000      	movs	r0, #0
 80036fc:	e7f2      	b.n	80036e4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036fe:	f7fe fd1b 	bl	8002138 <HAL_GetTick>
 8003702:	1b40      	subs	r0, r0, r5
 8003704:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003708:	d9f4      	bls.n	80036f4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800370a:	2001      	movs	r0, #1
 800370c:	e7ea      	b.n	80036e4 <HAL_PWREx_ConfigSupply+0x18>
 800370e:	bf00      	nop
 8003710:	58024800 	.word	0x58024800

08003714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003716:	4604      	mov	r4, r0
 8003718:	b908      	cbnz	r0, 800371e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800371a:	2001      	movs	r0, #1
 800371c:	e08b      	b.n	8003836 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	6803      	ldr	r3, [r0, #0]
 8003720:	07df      	lsls	r7, r3, #31
 8003722:	d45e      	bmi.n	80037e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	079e      	lsls	r6, r3, #30
 8003728:	f100 80af 	bmi.w	800388a <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	06da      	lsls	r2, r3, #27
 8003730:	d527      	bpl.n	8003782 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 8003734:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003736:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003738:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800373c:	2a08      	cmp	r2, #8
 800373e:	d007      	beq.n	8003750 <HAL_RCC_OscConfig+0x3c>
 8003740:	2a18      	cmp	r2, #24
 8003742:	f040 8107 	bne.w	8003954 <HAL_RCC_OscConfig+0x240>
 8003746:	f001 0203 	and.w	r2, r1, #3
 800374a:	2a01      	cmp	r2, #1
 800374c:	f040 8102 	bne.w	8003954 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	05db      	lsls	r3, r3, #23
 8003754:	d502      	bpl.n	800375c <HAL_RCC_OscConfig+0x48>
 8003756:	69e3      	ldr	r3, [r4, #28]
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d1de      	bne.n	800371a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800375c:	f7fe fd04 	bl	8002168 <HAL_GetREVID>
 8003760:	f241 0303 	movw	r3, #4099	; 0x1003
 8003764:	6a21      	ldr	r1, [r4, #32]
 8003766:	4298      	cmp	r0, r3
 8003768:	4b90      	ldr	r3, [pc, #576]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 800376a:	f200 80ec 	bhi.w	8003946 <HAL_RCC_OscConfig+0x232>
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	2920      	cmp	r1, #32
 8003772:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8003776:	bf0c      	ite	eq
 8003778:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800377c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003780:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	0719      	lsls	r1, r3, #28
 8003786:	f100 8127 	bmi.w	80039d8 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	069a      	lsls	r2, r3, #26
 800378e:	f100 8148 	bmi.w	8003a22 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	075d      	lsls	r5, r3, #29
 8003796:	d51e      	bpl.n	80037d6 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8003798:	4d85      	ldr	r5, [pc, #532]	; (80039b0 <HAL_RCC_OscConfig+0x29c>)
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80037a2:	f7fe fcc9 	bl	8002138 <HAL_GetTick>
 80037a6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	05da      	lsls	r2, r3, #23
 80037ac:	f140 815e 	bpl.w	8003a6c <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	68a3      	ldr	r3, [r4, #8]
 80037b2:	4d7e      	ldr	r5, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 8160 	bne.w	8003a7a <HAL_RCC_OscConfig+0x366>
 80037ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80037c6:	f7fe fcb7 	bl	8002138 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ca:	4e78      	ldr	r6, [pc, #480]	; (80039ac <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 80037cc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ce:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	f140 8178 	bpl.w	8003ac6 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80037d8:	2800      	cmp	r0, #0
 80037da:	f040 817b 	bne.w	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 80037de:	2000      	movs	r0, #0
 80037e0:	e029      	b.n	8003836 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 80037e4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037ec:	2a10      	cmp	r2, #16
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_OscConfig+0xe8>
 80037f0:	2a18      	cmp	r2, #24
 80037f2:	d10a      	bne.n	800380a <HAL_RCC_OscConfig+0xf6>
 80037f4:	f001 0203 	and.w	r2, r1, #3
 80037f8:	2a02      	cmp	r2, #2
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	039d      	lsls	r5, r3, #14
 8003800:	d590      	bpl.n	8003724 <HAL_RCC_OscConfig+0x10>
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d18d      	bne.n	8003724 <HAL_RCC_OscConfig+0x10>
 8003808:	e787      	b.n	800371a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003810:	d112      	bne.n	8003838 <HAL_RCC_OscConfig+0x124>
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003818:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800381a:	f7fe fc8d 	bl	8002138 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800381e:	4e63      	ldr	r6, [pc, #396]	; (80039ac <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8003820:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	0398      	lsls	r0, r3, #14
 8003826:	f53f af7d 	bmi.w	8003724 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382a:	f7fe fc85 	bl	8002138 <HAL_GetTick>
 800382e:	1b40      	subs	r0, r0, r5
 8003830:	2864      	cmp	r0, #100	; 0x64
 8003832:	d9f6      	bls.n	8003822 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8003834:	2003      	movs	r0, #3
}
 8003836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	4d5c      	ldr	r5, [pc, #368]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	b99a      	cbnz	r2, 8003866 <HAL_RCC_OscConfig+0x152>
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800384c:	f7fe fc74 	bl	8002138 <HAL_GetTick>
 8003850:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	0399      	lsls	r1, r3, #14
 8003856:	f57f af65 	bpl.w	8003724 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385a:	f7fe fc6d 	bl	8002138 <HAL_GetTick>
 800385e:	1b80      	subs	r0, r0, r6
 8003860:	2864      	cmp	r0, #100	; 0x64
 8003862:	d9f6      	bls.n	8003852 <HAL_RCC_OscConfig+0x13e>
 8003864:	e7e6      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x168>
 800386c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	e7ce      	b.n	800381a <HAL_RCC_OscConfig+0x106>
 800387c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	682b      	ldr	r3, [r5, #0]
 8003884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003888:	e7f6      	b.n	8003878 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800388a:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 800388c:	68e1      	ldr	r1, [r4, #12]
 800388e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003890:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003892:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8003896:	d003      	beq.n	80038a0 <HAL_RCC_OscConfig+0x18c>
 8003898:	2a18      	cmp	r2, #24
 800389a:	d12b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e0>
 800389c:	0782      	lsls	r2, r0, #30
 800389e:	d129      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	075b      	lsls	r3, r3, #29
 80038a4:	d502      	bpl.n	80038ac <HAL_RCC_OscConfig+0x198>
 80038a6:	2900      	cmp	r1, #0
 80038a8:	f43f af37 	beq.w	800371a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038ac:	4d3f      	ldr	r5, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x298>)
 80038ae:	682a      	ldr	r2, [r5, #0]
 80038b0:	f022 0219 	bic.w	r2, r2, #25
 80038b4:	430a      	orrs	r2, r1
 80038b6:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80038b8:	f7fe fc3e 	bl	8002138 <HAL_GetTick>
 80038bc:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	075f      	lsls	r7, r3, #29
 80038c2:	d511      	bpl.n	80038e8 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	f7fe fc50 	bl	8002168 <HAL_GetREVID>
 80038c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	4298      	cmp	r0, r3
 80038d0:	686b      	ldr	r3, [r5, #4]
 80038d2:	d822      	bhi.n	800391a <HAL_RCC_OscConfig+0x206>
 80038d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038d8:	2a40      	cmp	r2, #64	; 0x40
 80038da:	bf0c      	ite	eq
 80038dc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80038e0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80038e4:	606b      	str	r3, [r5, #4]
 80038e6:	e721      	b.n	800372c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe fc26 	bl	8002138 <HAL_GetTick>
 80038ec:	1b80      	subs	r0, r0, r6
 80038ee:	2802      	cmp	r0, #2
 80038f0:	d9e5      	bls.n	80038be <HAL_RCC_OscConfig+0x1aa>
 80038f2:	e79f      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038f4:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f6:	b1a9      	cbz	r1, 8003924 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038f8:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038fc:	4d2b      	ldr	r5, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003902:	f7fe fc19 	bl	8002138 <HAL_GetTick>
 8003906:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	0758      	lsls	r0, r3, #29
 800390c:	d4da      	bmi.n	80038c4 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fe fc13 	bl	8002138 <HAL_GetTick>
 8003912:	1b80      	subs	r0, r0, r6
 8003914:	2802      	cmp	r0, #2
 8003916:	d9f7      	bls.n	8003908 <HAL_RCC_OscConfig+0x1f4>
 8003918:	e78c      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800391e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003922:	e7df      	b.n	80038e4 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8003924:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003928:	4e20      	ldr	r6, [pc, #128]	; (80039ac <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800392a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800392c:	f7fe fc04 	bl	8002138 <HAL_GetTick>
 8003930:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003932:	6833      	ldr	r3, [r6, #0]
 8003934:	0759      	lsls	r1, r3, #29
 8003936:	f57f aef9 	bpl.w	800372c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe fbfd 	bl	8002138 <HAL_GetTick>
 800393e:	1b40      	subs	r0, r0, r5
 8003940:	2802      	cmp	r0, #2
 8003942:	d9f6      	bls.n	8003932 <HAL_RCC_OscConfig+0x21e>
 8003944:	e776      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800394c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e716      	b.n	8003782 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003954:	69e2      	ldr	r2, [r4, #28]
 8003956:	b36a      	cbz	r2, 80039b4 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8003958:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800395a:	4d14      	ldr	r5, [pc, #80]	; (80039ac <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 800395c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003960:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003962:	f7fe fbe9 	bl	8002138 <HAL_GetTick>
 8003966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	05df      	lsls	r7, r3, #23
 800396c:	d511      	bpl.n	8003992 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800396e:	f7fe fbfb 	bl	8002168 <HAL_GetREVID>
 8003972:	f241 0303 	movw	r3, #4099	; 0x1003
 8003976:	6a22      	ldr	r2, [r4, #32]
 8003978:	4298      	cmp	r0, r3
 800397a:	d810      	bhi.n	800399e <HAL_RCC_OscConfig+0x28a>
 800397c:	686b      	ldr	r3, [r5, #4]
 800397e:	2a20      	cmp	r2, #32
 8003980:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003984:	bf0c      	ite	eq
 8003986:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800398a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800398e:	606b      	str	r3, [r5, #4]
 8003990:	e6f7      	b.n	8003782 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003992:	f7fe fbd1 	bl	8002138 <HAL_GetTick>
 8003996:	1b80      	subs	r0, r0, r6
 8003998:	2802      	cmp	r0, #2
 800399a:	d9e5      	bls.n	8003968 <HAL_RCC_OscConfig+0x254>
 800399c:	e74a      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800399e:	68eb      	ldr	r3, [r5, #12]
 80039a0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80039a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80039a8:	60eb      	str	r3, [r5, #12]
 80039aa:	e6ea      	b.n	8003782 <HAL_RCC_OscConfig+0x6e>
 80039ac:	58024400 	.word	0x58024400
 80039b0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 80039b4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039b6:	4e9f      	ldr	r6, [pc, #636]	; (8003c34 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 80039b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039be:	f7fe fbbb 	bl	8002138 <HAL_GetTick>
 80039c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039c4:	6833      	ldr	r3, [r6, #0]
 80039c6:	05d8      	lsls	r0, r3, #23
 80039c8:	f57f aedb 	bpl.w	8003782 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039cc:	f7fe fbb4 	bl	8002138 <HAL_GetTick>
 80039d0:	1b40      	subs	r0, r0, r5
 80039d2:	2802      	cmp	r0, #2
 80039d4:	d9f6      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2b0>
 80039d6:	e72d      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039d8:	6963      	ldr	r3, [r4, #20]
 80039da:	4d96      	ldr	r5, [pc, #600]	; (8003c34 <HAL_RCC_OscConfig+0x520>)
 80039dc:	b183      	cbz	r3, 8003a00 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 80039de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80039e6:	f7fe fba7 	bl	8002138 <HAL_GetTick>
 80039ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039ee:	079b      	lsls	r3, r3, #30
 80039f0:	f53f aecb 	bmi.w	800378a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fe fba0 	bl	8002138 <HAL_GetTick>
 80039f8:	1b80      	subs	r0, r0, r6
 80039fa:	2802      	cmp	r0, #2
 80039fc:	d9f6      	bls.n	80039ec <HAL_RCC_OscConfig+0x2d8>
 80039fe:	e719      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8003a00:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003a08:	f7fe fb96 	bl	8002138 <HAL_GetTick>
 8003a0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a0e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a10:	079f      	lsls	r7, r3, #30
 8003a12:	f57f aeba 	bpl.w	800378a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a16:	f7fe fb8f 	bl	8002138 <HAL_GetTick>
 8003a1a:	1b80      	subs	r0, r0, r6
 8003a1c:	2802      	cmp	r0, #2
 8003a1e:	d9f6      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2fa>
 8003a20:	e708      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a22:	69a3      	ldr	r3, [r4, #24]
 8003a24:	4d83      	ldr	r5, [pc, #524]	; (8003c34 <HAL_RCC_OscConfig+0x520>)
 8003a26:	b183      	cbz	r3, 8003a4a <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a30:	f7fe fb82 	bl	8002138 <HAL_GetTick>
 8003a34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	0498      	lsls	r0, r3, #18
 8003a3a:	f53f aeaa 	bmi.w	8003792 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a3e:	f7fe fb7b 	bl	8002138 <HAL_GetTick>
 8003a42:	1b80      	subs	r0, r0, r6
 8003a44:	2802      	cmp	r0, #2
 8003a46:	d9f6      	bls.n	8003a36 <HAL_RCC_OscConfig+0x322>
 8003a48:	e6f4      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a50:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a52:	f7fe fb71 	bl	8002138 <HAL_GetTick>
 8003a56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	0499      	lsls	r1, r3, #18
 8003a5c:	f57f ae99 	bpl.w	8003792 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fe fb6a 	bl	8002138 <HAL_GetTick>
 8003a64:	1b80      	subs	r0, r0, r6
 8003a66:	2802      	cmp	r0, #2
 8003a68:	d9f6      	bls.n	8003a58 <HAL_RCC_OscConfig+0x344>
 8003a6a:	e6e3      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a6c:	f7fe fb64 	bl	8002138 <HAL_GetTick>
 8003a70:	1b80      	subs	r0, r0, r6
 8003a72:	2864      	cmp	r0, #100	; 0x64
 8003a74:	f67f ae98 	bls.w	80037a8 <HAL_RCC_OscConfig+0x94>
 8003a78:	e6dc      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7a:	b9b3      	cbnz	r3, 8003aaa <HAL_RCC_OscConfig+0x396>
 8003a7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	672b      	str	r3, [r5, #112]	; 0x70
 8003a88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a8a:	f023 0304 	bic.w	r3, r3, #4
 8003a8e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a90:	f7fe fb52 	bl	8002138 <HAL_GetTick>
 8003a94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a98:	0798      	lsls	r0, r3, #30
 8003a9a:	f57f ae9c 	bpl.w	80037d6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe fb4b 	bl	8002138 <HAL_GetTick>
 8003aa2:	1b80      	subs	r0, r0, r6
 8003aa4:	42b8      	cmp	r0, r7
 8003aa6:	d9f6      	bls.n	8003a96 <HAL_RCC_OscConfig+0x382>
 8003aa8:	e6c4      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003aae:	d103      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x3a4>
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	672b      	str	r3, [r5, #112]	; 0x70
 8003ab6:	e680      	b.n	80037ba <HAL_RCC_OscConfig+0xa6>
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	672b      	str	r3, [r5, #112]	; 0x70
 8003abe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	e67c      	b.n	80037c0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe fb37 	bl	8002138 <HAL_GetTick>
 8003aca:	1b40      	subs	r0, r0, r5
 8003acc:	42b8      	cmp	r0, r7
 8003ace:	f67f ae7e 	bls.w	80037ce <HAL_RCC_OscConfig+0xba>
 8003ad2:	e6af      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ad4:	4d57      	ldr	r5, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x520>)
 8003ad6:	692b      	ldr	r3, [r5, #16]
 8003ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003adc:	2b18      	cmp	r3, #24
 8003ade:	d07a      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aea:	d167      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 8003aec:	f7fe fb24 	bl	8002138 <HAL_GetTick>
 8003af0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	0199      	lsls	r1, r3, #6
 8003af6:	d45b      	bmi.n	8003bb0 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003afc:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8003b00:	f023 0303 	bic.w	r3, r3, #3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b08:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b0c:	62ab      	str	r3, [r5, #40]	; 0x28
 8003b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b12:	3b01      	subs	r3, #1
 8003b14:	3a01      	subs	r2, #1
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	0412      	lsls	r2, r2, #16
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003b20:	4313      	orrs	r3, r2
 8003b22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b24:	3a01      	subs	r2, #1
 8003b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0612      	lsls	r2, r2, #24
 8003b32:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003b36:	4313      	orrs	r3, r2
 8003b38:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003b44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003b52:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b58:	f023 030c 	bic.w	r3, r3, #12
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003b64:	f023 0302 	bic.w	r3, r3, #2
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b82:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b94:	f7fe fad0 	bl	8002138 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b98:	4d26      	ldr	r5, [pc, #152]	; (8003c34 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 8003b9a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	f53f ae1d 	bmi.w	80037de <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe fac8 	bl	8002138 <HAL_GetTick>
 8003ba8:	1b00      	subs	r0, r0, r4
 8003baa:	2802      	cmp	r0, #2
 8003bac:	d9f6      	bls.n	8003b9c <HAL_RCC_OscConfig+0x488>
 8003bae:	e641      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fac2 	bl	8002138 <HAL_GetTick>
 8003bb4:	1b80      	subs	r0, r0, r6
 8003bb6:	2802      	cmp	r0, #2
 8003bb8:	d99b      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3de>
 8003bba:	e63b      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fabc 	bl	8002138 <HAL_GetTick>
 8003bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	f57f ae0a 	bpl.w	80037de <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fe fab5 	bl	8002138 <HAL_GetTick>
 8003bce:	1b00      	subs	r0, r0, r4
 8003bd0:	2802      	cmp	r0, #2
 8003bd2:	d9f6      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x4ae>
 8003bd4:	e62e      	b.n	8003834 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003bd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bdc:	f43f ae2b 	beq.w	8003836 <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be0:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003be6:	4281      	cmp	r1, r0
 8003be8:	f47f ad97 	bne.w	800371a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bec:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003bf2:	428a      	cmp	r2, r1
 8003bf4:	f47f ad91 	bne.w	800371a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003bfa:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003bfe:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c00:	4291      	cmp	r1, r2
 8003c02:	f47f ad8a 	bne.w	800371a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c08:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003c0c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c0e:	4291      	cmp	r1, r2
 8003c10:	f47f ad83 	bne.w	800371a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c16:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003c1a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c1c:	4291      	cmp	r1, r2
 8003c1e:	f47f ad7c 	bne.w	800371a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c24:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003c28:	3801      	subs	r0, #1
  return HAL_OK;
 8003c2a:	1a18      	subs	r0, r3, r0
 8003c2c:	bf18      	it	ne
 8003c2e:	2001      	movne	r0, #1
 8003c30:	e601      	b.n	8003836 <HAL_RCC_OscConfig+0x122>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400

08003c38 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c38:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x124>)
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003c40:	2a10      	cmp	r2, #16
{
 8003c42:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	f000 8086 	beq.w	8003d54 <HAL_RCC_GetSysClockFreq+0x11c>
 8003c48:	2a18      	cmp	r2, #24
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x2e>
 8003c4c:	2a00      	cmp	r2, #0
 8003c4e:	f040 8083 	bne.w	8003d58 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4842      	ldr	r0, [pc, #264]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x128>)
 8003c56:	f012 0f20 	tst.w	r2, #32
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003c62:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003c64:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c66:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c68:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8003c6c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c70:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8003c76:	d0f5      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c78:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c7c:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c80:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c84:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c88:	4362      	muls	r2, r4
 8003c8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c92:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c94:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c98:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8003c9c:	d04c      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x100>
 8003c9e:	2902      	cmp	r1, #2
 8003ca0:	d03c      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0xe4>
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d148      	bne.n	8003d38 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d527      	bpl.n	8003cfc <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x128>)
 8003cb0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cb6:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	ee07 2a10 	vmov	s14, r2
 8003cc0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003cc4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003cc8:	ee06 3a90 	vmov	s13, r3
 8003ccc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd4:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cda:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003ce4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ce6:	ee07 3a10 	vmov	s14, r3
 8003cea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003cee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003cf2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003cf6:	ee17 0a90 	vmov	r0, s15
 8003cfa:	e7b3      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	ee07 3a10 	vmov	s14, r3
 8003d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003d12:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003d64 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d16:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003d1a:	e7dd      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d22:	ee07 3a10 	vmov	s14, r3
 8003d26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003d32:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8003d68 <HAL_RCC_GetSysClockFreq+0x130>
 8003d36:	e7ee      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a10 	vmov	s14, r3
 8003d42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003d4e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8003d6c <HAL_RCC_GetSysClockFreq+0x134>
 8003d52:	e7e0      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d54:	4806      	ldr	r0, [pc, #24]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d56:	e785      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8003d58:	4806      	ldr	r0, [pc, #24]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d5a:	e783      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x2c>
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	03d09000 	.word	0x03d09000
 8003d64:	4c742400 	.word	0x4c742400
 8003d68:	4bbebc20 	.word	0x4bbebc20
 8003d6c:	4a742400 	.word	0x4a742400
 8003d70:	017d7840 	.word	0x017d7840
 8003d74:	003d0900 	.word	0x003d0900

08003d78 <HAL_RCC_ClockConfig>:
{
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	4604      	mov	r4, r0
 8003d80:	b910      	cbnz	r0, 8003d88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
}
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4a88      	ldr	r2, [pc, #544]	; (8003fac <HAL_RCC_ClockConfig+0x234>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	428b      	cmp	r3, r1
 8003d92:	f0c0 8093 	bcc.w	8003ebc <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	075f      	lsls	r7, r3, #29
 8003d9a:	f100 809b 	bmi.w	8003ed4 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	071e      	lsls	r6, r3, #28
 8003da0:	d50b      	bpl.n	8003dba <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003da2:	4983      	ldr	r1, [pc, #524]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003da4:	6966      	ldr	r6, [r4, #20]
 8003da6:	69c8      	ldr	r0, [r1, #28]
 8003da8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8003dac:	4286      	cmp	r6, r0
 8003dae:	d904      	bls.n	8003dba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003db0:	69ca      	ldr	r2, [r1, #28]
 8003db2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003db6:	4332      	orrs	r2, r6
 8003db8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	06d8      	lsls	r0, r3, #27
 8003dbc:	d50b      	bpl.n	8003dd6 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dbe:	497c      	ldr	r1, [pc, #496]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003dc0:	69a6      	ldr	r6, [r4, #24]
 8003dc2:	69c8      	ldr	r0, [r1, #28]
 8003dc4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003dc8:	4286      	cmp	r6, r0
 8003dca:	d904      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dcc:	69ca      	ldr	r2, [r1, #28]
 8003dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd2:	4332      	orrs	r2, r6
 8003dd4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dd6:	0699      	lsls	r1, r3, #26
 8003dd8:	d50b      	bpl.n	8003df2 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dda:	4975      	ldr	r1, [pc, #468]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003ddc:	69e6      	ldr	r6, [r4, #28]
 8003dde:	6a08      	ldr	r0, [r1, #32]
 8003de0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8003de4:	4286      	cmp	r6, r0
 8003de6:	d904      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003de8:	6a0a      	ldr	r2, [r1, #32]
 8003dea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dee:	4332      	orrs	r2, r6
 8003df0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df2:	079a      	lsls	r2, r3, #30
 8003df4:	d50b      	bpl.n	8003e0e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003df6:	496e      	ldr	r1, [pc, #440]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003df8:	68e6      	ldr	r6, [r4, #12]
 8003dfa:	6988      	ldr	r0, [r1, #24]
 8003dfc:	f000 000f 	and.w	r0, r0, #15
 8003e00:	4286      	cmp	r6, r0
 8003e02:	d904      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	698a      	ldr	r2, [r1, #24]
 8003e06:	f022 020f 	bic.w	r2, r2, #15
 8003e0a:	4332      	orrs	r2, r6
 8003e0c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	07df      	lsls	r7, r3, #31
 8003e10:	d46e      	bmi.n	8003ef0 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	079e      	lsls	r6, r3, #30
 8003e16:	f100 80a1 	bmi.w	8003f5c <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1a:	4964      	ldr	r1, [pc, #400]	; (8003fac <HAL_RCC_ClockConfig+0x234>)
 8003e1c:	680a      	ldr	r2, [r1, #0]
 8003e1e:	f002 020f 	and.w	r2, r2, #15
 8003e22:	42aa      	cmp	r2, r5
 8003e24:	f200 80a8 	bhi.w	8003f78 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e28:	0758      	lsls	r0, r3, #29
 8003e2a:	f100 80b1 	bmi.w	8003f90 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2e:	0719      	lsls	r1, r3, #28
 8003e30:	d50b      	bpl.n	8003e4a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e32:	495f      	ldr	r1, [pc, #380]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003e34:	6965      	ldr	r5, [r4, #20]
 8003e36:	69c8      	ldr	r0, [r1, #28]
 8003e38:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8003e3c:	4285      	cmp	r5, r0
 8003e3e:	d204      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e40:	69ca      	ldr	r2, [r1, #28]
 8003e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e46:	432a      	orrs	r2, r5
 8003e48:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	06da      	lsls	r2, r3, #27
 8003e4c:	d50b      	bpl.n	8003e66 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e4e:	4958      	ldr	r1, [pc, #352]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003e50:	69a5      	ldr	r5, [r4, #24]
 8003e52:	69c8      	ldr	r0, [r1, #28]
 8003e54:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003e58:	4285      	cmp	r5, r0
 8003e5a:	d204      	bcs.n	8003e66 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e5c:	69ca      	ldr	r2, [r1, #28]
 8003e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e62:	432a      	orrs	r2, r5
 8003e64:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	d50b      	bpl.n	8003e82 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003e6c:	69e0      	ldr	r0, [r4, #28]
 8003e6e:	6a11      	ldr	r1, [r2, #32]
 8003e70:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8003e74:	4288      	cmp	r0, r1
 8003e76:	d204      	bcs.n	8003e82 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e78:	6a13      	ldr	r3, [r2, #32]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	4303      	orrs	r3, r0
 8003e80:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e82:	f7ff fed9 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003e86:	494a      	ldr	r1, [pc, #296]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003e88:	4a4a      	ldr	r2, [pc, #296]	; (8003fb4 <HAL_RCC_ClockConfig+0x23c>)
 8003e8a:	698b      	ldr	r3, [r1, #24]
 8003e8c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e98:	698b      	ldr	r3, [r1, #24]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	fa20 f303 	lsr.w	r3, r0, r3
 8003eaa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003eac:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003eae:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8003eb0:	4b43      	ldr	r3, [pc, #268]	; (8003fc0 <HAL_RCC_ClockConfig+0x248>)
}
 8003eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f7fd b9ea 	b.w	8001290 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebc:	6813      	ldr	r3, [r2, #0]
 8003ebe:	f023 030f 	bic.w	r3, r3, #15
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	f47f af58 	bne.w	8003d82 <HAL_RCC_ClockConfig+0xa>
 8003ed2:	e760      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ed4:	4936      	ldr	r1, [pc, #216]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003ed6:	6926      	ldr	r6, [r4, #16]
 8003ed8:	6988      	ldr	r0, [r1, #24]
 8003eda:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8003ede:	4286      	cmp	r6, r0
 8003ee0:	f67f af5d 	bls.w	8003d9e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ee4:	698a      	ldr	r2, [r1, #24]
 8003ee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003eea:	4332      	orrs	r2, r6
 8003eec:	618a      	str	r2, [r1, #24]
 8003eee:	e756      	b.n	8003d9e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003ef2:	68a1      	ldr	r1, [r4, #8]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003efa:	430a      	orrs	r2, r1
 8003efc:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f00:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f02:	2a02      	cmp	r2, #2
 8003f04:	d11d      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0a:	f43f af3a 	beq.w	8003d82 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4e28      	ldr	r6, [pc, #160]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f14:	6933      	ldr	r3, [r6, #16]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8003f1e:	f7fe f90b 	bl	8002138 <HAL_GetTick>
 8003f22:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f24:	6933      	ldr	r3, [r6, #16]
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003f30:	f43f af6f 	beq.w	8003e12 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f34:	f7fe f900 	bl	8002138 <HAL_GetTick>
 8003f38:	1bc0      	subs	r0, r0, r7
 8003f3a:	4540      	cmp	r0, r8
 8003f3c:	d9f2      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8003f3e:	2003      	movs	r0, #3
 8003f40:	e720      	b.n	8003d84 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f42:	2a03      	cmp	r2, #3
 8003f44:	d102      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f4a:	e7de      	b.n	8003f0a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f4c:	2a01      	cmp	r2, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f54:	e7d9      	b.n	8003f0a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f56:	f013 0f04 	tst.w	r3, #4
 8003f5a:	e7d6      	b.n	8003f0a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f5c:	4914      	ldr	r1, [pc, #80]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003f5e:	68e6      	ldr	r6, [r4, #12]
 8003f60:	6988      	ldr	r0, [r1, #24]
 8003f62:	f000 000f 	and.w	r0, r0, #15
 8003f66:	4286      	cmp	r6, r0
 8003f68:	f4bf af57 	bcs.w	8003e1a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	698a      	ldr	r2, [r1, #24]
 8003f6e:	f022 020f 	bic.w	r2, r2, #15
 8003f72:	4332      	orrs	r2, r6
 8003f74:	618a      	str	r2, [r1, #24]
 8003f76:	e750      	b.n	8003e1a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f78:	680a      	ldr	r2, [r1, #0]
 8003f7a:	f022 020f 	bic.w	r2, r2, #15
 8003f7e:	432a      	orrs	r2, r5
 8003f80:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	680a      	ldr	r2, [r1, #0]
 8003f84:	f002 020f 	and.w	r2, r2, #15
 8003f88:	42aa      	cmp	r2, r5
 8003f8a:	f47f aefa 	bne.w	8003d82 <HAL_RCC_ClockConfig+0xa>
 8003f8e:	e74b      	b.n	8003e28 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <HAL_RCC_ClockConfig+0x238>)
 8003f92:	6925      	ldr	r5, [r4, #16]
 8003f94:	6988      	ldr	r0, [r1, #24]
 8003f96:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8003f9a:	4285      	cmp	r5, r0
 8003f9c:	f4bf af47 	bcs.w	8003e2e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fa0:	698a      	ldr	r2, [r1, #24]
 8003fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fa6:	432a      	orrs	r2, r5
 8003fa8:	618a      	str	r2, [r1, #24]
 8003faa:	e740      	b.n	8003e2e <HAL_RCC_ClockConfig+0xb6>
 8003fac:	52002000 	.word	0x52002000
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	0800b598 	.word	0x0800b598
 8003fb8:	24000004 	.word	0x24000004
 8003fbc:	24000000 	.word	0x24000000
 8003fc0:	2400000c 	.word	0x2400000c

08003fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003fc8:	f7ff fe36 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003fcc:	490b      	ldr	r1, [pc, #44]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x38>)
 8003fce:	69a3      	ldr	r3, [r4, #24]
 8003fd0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003fd4:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fd6:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fd8:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fdc:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fe0:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	fa22 f003 	lsr.w	r0, r2, r3
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003ff0:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_RCC_GetHCLKFreq+0x40>)
 8003ff4:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	0800b598 	.word	0x0800b598
 8004000:	24000004 	.word	0x24000004
 8004004:	24000000 	.word	0x24000000

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800400a:	f7ff ffdb 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004010:	4a05      	ldr	r2, [pc, #20]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800401e:	40d8      	lsrs	r0, r3
 8004020:	bd08      	pop	{r3, pc}
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
 8004028:	0800b598 	.word	0x0800b598

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800402e:	f7ff ffc9 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004034:	4a05      	ldr	r2, [pc, #20]	; (800404c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004042:	40d8      	lsrs	r0, r3
 8004044:	bd08      	pop	{r3, pc}
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400
 800404c:	0800b598 	.word	0x0800b598

08004050 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004050:	233f      	movs	r3, #63	; 0x3f
 8004052:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_RCC_GetClockConfig+0x4c>)
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	f002 0207 	and.w	r2, r2, #7
 800405c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004064:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	f002 020f 	and.w	r2, r2, #15
 800406c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004074:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800407c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004084:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCC_GetClockConfig+0x50>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	600b      	str	r3, [r1, #0]
}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	52002000 	.word	0x52002000

080040a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040a6:	4c3a      	ldr	r4, [pc, #232]	; (8004190 <RCCEx_PLL2_Config+0xec>)
{
 80040a8:	4606      	mov	r6, r0
 80040aa:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d069      	beq.n	800418a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fe f83b 	bl	8002138 <HAL_GetTick>
 80040c2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	011a      	lsls	r2, r3, #4
 80040c8:	d44b      	bmi.n	8004162 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040cc:	6832      	ldr	r2, [r6, #0]
 80040ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80040d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80040d8:	68b3      	ldr	r3, [r6, #8]
 80040da:	68f2      	ldr	r2, [r6, #12]
 80040dc:	3b01      	subs	r3, #1
 80040de:	3a01      	subs	r2, #1
 80040e0:	025b      	lsls	r3, r3, #9
 80040e2:	0412      	lsls	r2, r2, #16
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80040ea:	4313      	orrs	r3, r2
 80040ec:	6872      	ldr	r2, [r6, #4]
 80040ee:	3a01      	subs	r2, #1
 80040f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f4:	4313      	orrs	r3, r2
 80040f6:	6932      	ldr	r2, [r6, #16]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0612      	lsls	r2, r2, #24
 80040fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004100:	4313      	orrs	r3, r2
 8004102:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004106:	6972      	ldr	r2, [r6, #20]
 8004108:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800410c:	4313      	orrs	r3, r2
 800410e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004112:	69b2      	ldr	r2, [r6, #24]
 8004114:	f023 0320 	bic.w	r3, r3, #32
 8004118:	4313      	orrs	r3, r2
 800411a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800411c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004124:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004126:	69f2      	ldr	r2, [r6, #28]
 8004128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004130:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004134:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800413e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004140:	b9b5      	cbnz	r5, 8004170 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004146:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004148:	4c11      	ldr	r4, [pc, #68]	; (8004190 <RCCEx_PLL2_Config+0xec>)
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004150:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004152:	f7fd fff1 	bl	8002138 <HAL_GetTick>
 8004156:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	d50f      	bpl.n	800417e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800415e:	2000      	movs	r0, #0
 8004160:	e005      	b.n	800416e <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004162:	f7fd ffe9 	bl	8002138 <HAL_GetTick>
 8004166:	1bc0      	subs	r0, r0, r7
 8004168:	2802      	cmp	r0, #2
 800416a:	d9ab      	bls.n	80040c4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800416c:	2003      	movs	r0, #3
}
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004170:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004172:	bf0c      	ite	eq
 8004174:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004178:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800417c:	e7e3      	b.n	8004146 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800417e:	f7fd ffdb 	bl	8002138 <HAL_GetTick>
 8004182:	1b40      	subs	r0, r0, r5
 8004184:	2802      	cmp	r0, #2
 8004186:	d9e7      	bls.n	8004158 <RCCEx_PLL2_Config+0xb4>
 8004188:	e7f0      	b.n	800416c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800418a:	2001      	movs	r0, #1
 800418c:	e7ef      	b.n	800416e <RCCEx_PLL2_Config+0xca>
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400

08004194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004196:	4c3a      	ldr	r4, [pc, #232]	; (8004280 <RCCEx_PLL3_Config+0xec>)
{
 8004198:	4606      	mov	r6, r0
 800419a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800419c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d069      	beq.n	800427a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ae:	f7fd ffc3 	bl	8002138 <HAL_GetTick>
 80041b2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	009a      	lsls	r2, r3, #2
 80041b8:	d44b      	bmi.n	8004252 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041bc:	6832      	ldr	r2, [r6, #0]
 80041be:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80041c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80041c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80041c8:	68b3      	ldr	r3, [r6, #8]
 80041ca:	68f2      	ldr	r2, [r6, #12]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	3a01      	subs	r2, #1
 80041d0:	025b      	lsls	r3, r3, #9
 80041d2:	0412      	lsls	r2, r2, #16
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80041da:	4313      	orrs	r3, r2
 80041dc:	6872      	ldr	r2, [r6, #4]
 80041de:	3a01      	subs	r2, #1
 80041e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e4:	4313      	orrs	r3, r2
 80041e6:	6932      	ldr	r2, [r6, #16]
 80041e8:	3a01      	subs	r2, #1
 80041ea:	0612      	lsls	r2, r2, #24
 80041ec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80041f0:	4313      	orrs	r3, r2
 80041f2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041f6:	6972      	ldr	r2, [r6, #20]
 80041f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041fc:	4313      	orrs	r3, r2
 80041fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004200:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004202:	69b2      	ldr	r2, [r6, #24]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	4313      	orrs	r3, r2
 800420a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800420c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800420e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004212:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004216:	69f2      	ldr	r2, [r6, #28]
 8004218:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004220:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004224:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800422e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004230:	b9b5      	cbnz	r5, 8004260 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004236:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004238:	4c11      	ldr	r4, [pc, #68]	; (8004280 <RCCEx_PLL3_Config+0xec>)
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fd ff79 	bl	8002138 <HAL_GetTick>
 8004246:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	d50f      	bpl.n	800426e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800424e:	2000      	movs	r0, #0
 8004250:	e005      	b.n	800425e <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004252:	f7fd ff71 	bl	8002138 <HAL_GetTick>
 8004256:	1bc0      	subs	r0, r0, r7
 8004258:	2802      	cmp	r0, #2
 800425a:	d9ab      	bls.n	80041b4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800425c:	2003      	movs	r0, #3
}
 800425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004260:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004262:	bf0c      	ite	eq
 8004264:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004268:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800426c:	e7e3      	b.n	8004236 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800426e:	f7fd ff63 	bl	8002138 <HAL_GetTick>
 8004272:	1b40      	subs	r0, r0, r5
 8004274:	2802      	cmp	r0, #2
 8004276:	d9e7      	bls.n	8004248 <RCCEx_PLL3_Config+0xb4>
 8004278:	e7f0      	b.n	800425c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800427a:	2001      	movs	r0, #1
 800427c:	e7ef      	b.n	800425e <RCCEx_PLL3_Config+0xca>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400

08004284 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004288:	6806      	ldr	r6, [r0, #0]
{
 800428a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800428c:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8004290:	d009      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004292:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004298:	d02e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800429a:	d813      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800429c:	b1f3      	cbz	r3, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x58>
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a2:	d021      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042a4:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042a6:	682b      	ldr	r3, [r5, #0]
 80042a8:	05dc      	lsls	r4, r3, #23
 80042aa:	f140 80ea 	bpl.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 80042ae:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	f200 80e5 	bhi.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80042b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042ba:	0024      	.short	0x0024
 80042bc:	00dd002b 	.word	0x00dd002b
 80042c0:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 80042c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042c8:	d1ec      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042ca:	4aa6      	ldr	r2, [pc, #664]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042cc:	2600      	movs	r6, #0
 80042ce:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80042d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80042d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6513      	str	r3, [r2, #80]	; 0x50
 80042da:	e7e4      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4aa1      	ldr	r2, [pc, #644]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042e6:	e7f0      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042e8:	2102      	movs	r1, #2
 80042ea:	3004      	adds	r0, #4
 80042ec:	f7ff feda 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042f0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1d7      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80042f6:	e7e8      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042f8:	2102      	movs	r1, #2
 80042fa:	3024      	adds	r0, #36	; 0x24
 80042fc:	f7ff ff4a 	bl	8004194 <RCCEx_PLL3_Config>
 8004300:	e7f6      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004302:	4a98      	ldr	r2, [pc, #608]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004304:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800430c:	4634      	mov	r4, r6
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004310:	2100      	movs	r1, #0
 8004312:	1d28      	adds	r0, r5, #4
 8004314:	f7ff fec6 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004318:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800431a:	2c00      	cmp	r4, #0
 800431c:	f040 80b3 	bne.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004320:	4a90      	ldr	r2, [pc, #576]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004322:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8004324:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	430b      	orrs	r3, r1
 800432c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	0598      	lsls	r0, r3, #22
 8004332:	d50d      	bpl.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004334:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	f000 80c2 	beq.w	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800433c:	f200 80a5 	bhi.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80b1 	beq.w	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	f000 80b4 	beq.w	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800434c:	2601      	movs	r6, #1
 800434e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	0559      	lsls	r1, r3, #21
 8004354:	d510      	bpl.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004356:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435e:	f000 80d4 	beq.w	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004362:	f200 80b5 	bhi.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80c3 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800436c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004370:	f000 80c5 	beq.w	80044fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004374:	2601      	movs	r6, #1
 8004376:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	051a      	lsls	r2, r3, #20
 800437c:	d510      	bpl.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 800437e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8004382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004386:	f000 80e5 	beq.w	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800438a:	f200 80c6 	bhi.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80d4 	beq.w	800453c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004398:	f000 80d6 	beq.w	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800439c:	2601      	movs	r6, #1
 800439e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	d50d      	bpl.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 80043a6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	f000 80ef 	beq.w	800458c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80043ae:	f200 80db 	bhi.w	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80db 	beq.w	800456e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	f000 80e1 	beq.w	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80043be:	2601      	movs	r6, #1
 80043c0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	04df      	lsls	r7, r3, #19
 80043c6:	d50f      	bpl.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 80043c8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ce:	f000 8101 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80043d2:	f200 80e3 	bhi.w	800459c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80f0 	beq.w	80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	f000 80f2 	beq.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043e4:	2601      	movs	r6, #1
 80043e6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	0498      	lsls	r0, r3, #18
 80043ec:	d50f      	bpl.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 80043ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80043f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f4:	f000 810e 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80043f8:	f200 80f4 	bhi.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80fa 	beq.w	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004406:	f000 80ff 	beq.w	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800440a:	2601      	movs	r6, #1
 800440c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	0459      	lsls	r1, r3, #17
 8004412:	d510      	bpl.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004414:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441c:	f000 811b 	beq.w	8004656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004420:	f200 8100 	bhi.w	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8106 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442e:	f000 810c 	beq.w	800464a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004432:	2601      	movs	r6, #1
 8004434:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	041a      	lsls	r2, r3, #16
 800443a:	d50d      	bpl.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 800443c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800443e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004442:	f000 8110 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444a:	f000 811a 	beq.w	8004682 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 810e 	beq.w	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004454:	2601      	movs	r6, #1
 8004456:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	f140 8127 	bpl.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8004460:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004462:	2b03      	cmp	r3, #3
 8004464:	f200 8167 	bhi.w	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004468:	e8df f013 	tbh	[pc, r3, lsl #1]
 800446c:	01130118 	.word	0x01130118
 8004470:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004474:	2100      	movs	r1, #0
 8004476:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800447a:	f7ff fe8b 	bl	8004194 <RCCEx_PLL3_Config>
 800447e:	e74b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004480:	2601      	movs	r6, #1
 8004482:	4634      	mov	r4, r6
 8004484:	e753      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8004486:	4626      	mov	r6, r4
 8004488:	e751      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 800448a:	2bc0      	cmp	r3, #192	; 0xc0
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	f47f af5b 	bne.w	800434c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8004496:	b9cc      	cbnz	r4, 80044cc <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004498:	4a32      	ldr	r2, [pc, #200]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800449a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800449c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800449e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6513      	str	r3, [r2, #80]	; 0x50
 80044a6:	e753      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4a2e      	ldr	r2, [pc, #184]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80044b2:	e7f0      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044b4:	2100      	movs	r1, #0
 80044b6:	1d28      	adds	r0, r5, #4
 80044b8:	f7ff fdf4 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044bc:	4604      	mov	r4, r0
      break;
 80044be:	e7ea      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044c0:	2100      	movs	r1, #0
 80044c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80044c6:	f7ff fe65 	bl	8004194 <RCCEx_PLL3_Config>
 80044ca:	e7f7      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80044cc:	4626      	mov	r6, r4
 80044ce:	e73f      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 80044d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80044d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044da:	f47f af4b 	bne.w	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 80044de:	b9d4      	cbnz	r4, 8004516 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044e2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80044e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044e8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
 80044f0:	e742      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80044fc:	e7ef      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fe:	2100      	movs	r1, #0
 8004500:	1d28      	adds	r0, r5, #4
 8004502:	f7ff fdcf 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004506:	4604      	mov	r4, r0
      break;
 8004508:	e7e9      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800450a:	2100      	movs	r1, #0
 800450c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004510:	f7ff fe40 	bl	8004194 <RCCEx_PLL3_Config>
 8004514:	e7f7      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8004516:	4626      	mov	r6, r4
 8004518:	e72e      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 800451a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800451e:	d003      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	f47f af3a 	bne.w	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8004528:	b9d4      	cbnz	r4, 8004560 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800452c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8004530:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004536:	430b      	orrs	r3, r1
 8004538:	6593      	str	r3, [r2, #88]	; 0x58
 800453a:	e731      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453c:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800453e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004546:	e7ef      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004548:	2100      	movs	r1, #0
 800454a:	1d28      	adds	r0, r5, #4
 800454c:	f7ff fdaa 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004550:	4604      	mov	r4, r0
      break;
 8004552:	e7e9      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004554:	2100      	movs	r1, #0
 8004556:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800455a:	f7ff fe1b 	bl	8004194 <RCCEx_PLL3_Config>
 800455e:	e7f7      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004560:	4626      	mov	r6, r4
 8004562:	e71d      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004564:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 8004568:	2b30      	cmp	r3, #48	; 0x30
 800456a:	f47f af28 	bne.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 800456e:	b99c      	cbnz	r4, 8004598 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004570:	4a9d      	ldr	r2, [pc, #628]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004572:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004574:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004576:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800457a:	430b      	orrs	r3, r1
 800457c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800457e:	e720      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	4a99      	ldr	r2, [pc, #612]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004582:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004588:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800458a:	e7f0      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800458c:	2102      	movs	r1, #2
 800458e:	1d28      	adds	r0, r5, #4
 8004590:	f7ff fd88 	bl	80040a4 <RCCEx_PLL2_Config>
 8004594:	4604      	mov	r4, r0
      break;
 8004596:	e7ea      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8004598:	4626      	mov	r6, r4
 800459a:	e712      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 800459c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045a0:	d003      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x326>
 80045a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a6:	f47f af1d 	bne.w	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80045aa:	b9cc      	cbnz	r4, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045ac:	4a8e      	ldr	r2, [pc, #568]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045ae:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80045b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6513      	str	r3, [r2, #80]	; 0x50
 80045ba:	e715      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045bc:	4a8a      	ldr	r2, [pc, #552]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80045c6:	e7f0      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045c8:	2100      	movs	r1, #0
 80045ca:	1d28      	adds	r0, r5, #4
 80045cc:	f7ff fd6a 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045d0:	4604      	mov	r4, r0
      break;
 80045d2:	e7ea      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045d4:	2100      	movs	r1, #0
 80045d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80045da:	f7ff fddb 	bl	8004194 <RCCEx_PLL3_Config>
 80045de:	e7f7      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80045e0:	4626      	mov	r6, r4
 80045e2:	e701      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 80045e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80045ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045f2:	f47f af0a 	bne.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 80045f6:	b99c      	cbnz	r4, 8004620 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045f8:	4a7b      	ldr	r2, [pc, #492]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045fa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80045fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80045fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004602:	430b      	orrs	r3, r1
 8004604:	6513      	str	r3, [r2, #80]	; 0x50
 8004606:	e702      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004608:	2101      	movs	r1, #1
 800460a:	1d28      	adds	r0, r5, #4
 800460c:	f7ff fd4a 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004610:	4604      	mov	r4, r0
      break;
 8004612:	e7f0      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004614:	2101      	movs	r1, #1
 8004616:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800461a:	f7ff fdbb 	bl	8004194 <RCCEx_PLL3_Config>
 800461e:	e7f7      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004620:	4626      	mov	r6, r4
 8004622:	e6f4      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004624:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004628:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800462c:	d003      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800462e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004632:	f47f aefe 	bne.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8004636:	b9a4      	cbnz	r4, 8004662 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004638:	4a6b      	ldr	r2, [pc, #428]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800463a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800463e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004640:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004644:	430b      	orrs	r3, r1
 8004646:	6593      	str	r3, [r2, #88]	; 0x58
 8004648:	e6f5      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800464a:	2101      	movs	r1, #1
 800464c:	1d28      	adds	r0, r5, #4
 800464e:	f7ff fd29 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004652:	4604      	mov	r4, r0
      break;
 8004654:	e7ef      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004656:	2101      	movs	r1, #1
 8004658:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800465c:	f7ff fd9a 	bl	8004194 <RCCEx_PLL3_Config>
 8004660:	e7f7      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004662:	4626      	mov	r6, r4
 8004664:	e6e7      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004666:	4a60      	ldr	r2, [pc, #384]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004668:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004670:	b96c      	cbnz	r4, 800468e <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004672:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004674:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8004676:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004678:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800467c:	430b      	orrs	r3, r1
 800467e:	6513      	str	r3, [r2, #80]	; 0x50
 8004680:	e6ea      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004682:	2101      	movs	r1, #1
 8004684:	1d28      	adds	r0, r5, #4
 8004686:	f7ff fd0d 	bl	80040a4 <RCCEx_PLL2_Config>
 800468a:	4604      	mov	r4, r0
      break;
 800468c:	e7f0      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800468e:	4626      	mov	r6, r4
 8004690:	e6e2      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004692:	4a55      	ldr	r2, [pc, #340]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004694:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800469c:	2c00      	cmp	r4, #0
 800469e:	d14d      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046a0:	4a51      	ldr	r2, [pc, #324]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80046a2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80046a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	430b      	orrs	r3, r1
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	025f      	lsls	r7, r3, #9
 80046b2:	d54d      	bpl.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b4:	4f4d      	ldr	r7, [pc, #308]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80046be:	f7fd fd3b 	bl	8002138 <HAL_GetTick>
 80046c2:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	05d8      	lsls	r0, r3, #23
 80046c8:	d53a      	bpl.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d16c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046ce:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80046d0:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80046d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046d6:	4042      	eors	r2, r0
 80046d8:	f412 7f40 	tst.w	r2, #768	; 0x300
 80046dc:	d00b      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80046ea:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80046ee:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80046f2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80046f4:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046f6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80046fa:	d040      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004700:	4939      	ldr	r1, [pc, #228]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004702:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004706:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800470a:	d149      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800470c:	6908      	ldr	r0, [r1, #16]
 800470e:	4a38      	ldr	r2, [pc, #224]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004710:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8004714:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004718:	4302      	orrs	r2, r0
 800471a:	610a      	str	r2, [r1, #16]
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004722:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004724:	430b      	orrs	r3, r1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	e012      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800472a:	2102      	movs	r1, #2
 800472c:	1d28      	adds	r0, r5, #4
 800472e:	f7ff fcb9 	bl	80040a4 <RCCEx_PLL2_Config>
 8004732:	4604      	mov	r4, r0
      break;
 8004734:	e7b2      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8004736:	2601      	movs	r6, #1
 8004738:	4634      	mov	r4, r6
 800473a:	e7b8      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800473c:	4626      	mov	r6, r4
 800473e:	e7b6      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004740:	f7fd fcfa 	bl	8002138 <HAL_GetTick>
 8004744:	eba0 0008 	sub.w	r0, r0, r8
 8004748:	2864      	cmp	r0, #100	; 0x64
 800474a:	d9bb      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 800474c:	2603      	movs	r6, #3
 800474e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	07da      	lsls	r2, r3, #31
 8004754:	d508      	bpl.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004756:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8004758:	2b10      	cmp	r3, #16
 800475a:	d03c      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
 800475c:	d826      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 800475e:	b35b      	cbz	r3, 80047b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004760:	2b08      	cmp	r3, #8
 8004762:	d032      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x546>
 8004764:	2601      	movs	r6, #1
 8004766:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	079b      	lsls	r3, r3, #30
 800476c:	d54f      	bpl.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800476e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004770:	2b05      	cmp	r3, #5
 8004772:	d862      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8004774:	e8df f003 	tbb	[pc, r3]
 8004778:	435b3e43 	.word	0x435b3e43
 800477c:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 800477e:	f7fd fcdb 	bl	8002138 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004782:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8004786:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800478c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8004790:	0799      	lsls	r1, r3, #30
 8004792:	d4b3      	bmi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd fcd0 	bl	8002138 <HAL_GetTick>
 8004798:	1bc0      	subs	r0, r0, r7
 800479a:	4548      	cmp	r0, r9
 800479c:	d9f6      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800479e:	e7d5      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a0:	690a      	ldr	r2, [r1, #16]
 80047a2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80047a6:	e7b8      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80047a8:	4626      	mov	r6, r4
 80047aa:	e7d1      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 80047ac:	f023 0208 	bic.w	r2, r3, #8
 80047b0:	2a20      	cmp	r2, #32
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80047b4:	2b18      	cmp	r3, #24
 80047b6:	d1d5      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 80047b8:	b99c      	cbnz	r4, 80047e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047ba:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80047bc:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80047be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047c0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6553      	str	r3, [r2, #84]	; 0x54
 80047c8:	e7ce      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047ca:	2101      	movs	r1, #1
 80047cc:	1d28      	adds	r0, r5, #4
 80047ce:	f7ff fc69 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047d2:	4604      	mov	r4, r0
      break;
 80047d4:	e7f0      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047d6:	2101      	movs	r1, #1
 80047d8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80047dc:	f7ff fcda 	bl	8004194 <RCCEx_PLL3_Config>
 80047e0:	e7f7      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80047e2:	4626      	mov	r6, r4
 80047e4:	e7c0      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047e6:	bf00      	nop
 80047e8:	58024400 	.word	0x58024400
 80047ec:	58024800 	.word	0x58024800
 80047f0:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047f4:	2101      	movs	r1, #1
 80047f6:	1d28      	adds	r0, r5, #4
 80047f8:	f7ff fc54 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047fc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80047fe:	b9fc      	cbnz	r4, 8004840 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004800:	4aa6      	ldr	r2, [pc, #664]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004802:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8004804:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	430b      	orrs	r3, r1
 800480c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	075f      	lsls	r7, r3, #29
 8004812:	d527      	bpl.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004814:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004818:	2b05      	cmp	r3, #5
 800481a:	f200 8139 	bhi.w	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800481e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004822:	0016      	.short	0x0016
 8004824:	01310011 	.word	0x01310011
 8004828:	00160016 	.word	0x00160016
 800482c:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800482e:	2101      	movs	r1, #1
 8004830:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004834:	f7ff fcae 	bl	8004194 <RCCEx_PLL3_Config>
 8004838:	e7e0      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800483a:	2601      	movs	r6, #1
 800483c:	4634      	mov	r4, r6
 800483e:	e7e6      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004840:	4626      	mov	r6, r4
 8004842:	e7e4      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004844:	2101      	movs	r1, #1
 8004846:	1d28      	adds	r0, r5, #4
 8004848:	f7ff fc2c 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800484c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800484e:	2c00      	cmp	r4, #0
 8004850:	f040 8121 	bne.w	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004854:	4a91      	ldr	r2, [pc, #580]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004856:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800485a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	430b      	orrs	r3, r1
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	0698      	lsls	r0, r3, #26
 8004868:	d510      	bpl.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800486a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800486e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004872:	f000 812e 	beq.w	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004876:	f200 8113 	bhi.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8119 	beq.w	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004884:	f000 811f 	beq.w	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004888:	2601      	movs	r6, #1
 800488a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	0659      	lsls	r1, r3, #25
 8004890:	d510      	bpl.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004892:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	f000 813b 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800489e:	f200 8120 	bhi.w	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8126 	beq.w	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x870>
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	f000 812c 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x884>
 80048b0:	2601      	movs	r6, #1
 80048b2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	061a      	lsls	r2, r3, #24
 80048b8:	d510      	bpl.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80048ba:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80048be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c2:	f000 8148 	beq.w	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 80048c6:	f200 812d 	bhi.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8133 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	f000 8139 	beq.w	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80048d8:	2601      	movs	r6, #1
 80048da:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	d514      	bpl.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80048e2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ea:	d107      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048ec:	2102      	movs	r1, #2
 80048ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80048f2:	f7ff fc4f 	bl	8004194 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80048f6:	2800      	cmp	r0, #0
 80048f8:	bf18      	it	ne
 80048fa:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048fc:	4a67      	ldr	r2, [pc, #412]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80048fe:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8004902:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004908:	430b      	orrs	r3, r1
 800490a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	06df      	lsls	r7, r3, #27
 8004910:	d514      	bpl.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004912:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491a:	d107      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800491c:	2102      	movs	r1, #2
 800491e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004922:	f7ff fc37 	bl	8004194 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004926:	2800      	cmp	r0, #0
 8004928:	bf18      	it	ne
 800492a:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800492c:	4a5b      	ldr	r2, [pc, #364]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800492e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8004932:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	430b      	orrs	r3, r1
 800493a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	0318      	lsls	r0, r3, #12
 8004940:	d51a      	bpl.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8004942:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8004946:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800494a:	f000 810c 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800494e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004952:	d006      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8004954:	2900      	cmp	r1, #0
 8004956:	f040 810c 	bne.w	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800495a:	1d28      	adds	r0, r5, #4
 800495c:	f7ff fba2 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004960:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8004962:	2c00      	cmp	r4, #0
 8004964:	f040 8108 	bne.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004968:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800496a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800496e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004970:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004974:	430b      	orrs	r3, r1
 8004976:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	0359      	lsls	r1, r3, #13
 800497c:	d51c      	bpl.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 800497e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8004982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004986:	f000 80f9 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800498a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	f040 80f9 	bne.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004998:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800499a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	f040 80f4 	bne.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a8:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80049aa:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80049ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80049b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	03da      	lsls	r2, r3, #15
 80049bc:	d509      	bpl.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 80049be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80e7 	beq.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80049c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ca:	f000 80f1 	beq.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80049ce:	2601      	movs	r6, #1
 80049d0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	d507      	bpl.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049d8:	2102      	movs	r1, #2
 80049da:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80049de:	f7ff fbd9 	bl	8004194 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80049e2:	2800      	cmp	r0, #0
 80049e4:	bf18      	it	ne
 80049e6:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	039f      	lsls	r7, r3, #14
 80049ec:	d50a      	bpl.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 80049ee:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80049f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80049f4:	f000 80f2 	beq.w	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x958>
 80049f8:	f200 80e2 	bhi.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	f000 80e5 	beq.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004a02:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a04:	02dc      	lsls	r4, r3, #11
 8004a06:	d506      	bpl.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a08:	4924      	ldr	r1, [pc, #144]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a0a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8004a0c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a12:	4302      	orrs	r2, r0
 8004a14:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a16:	00d8      	lsls	r0, r3, #3
 8004a18:	d507      	bpl.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a1a:	4920      	ldr	r1, [pc, #128]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a1c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8004a20:	690a      	ldr	r2, [r1, #16]
 8004a22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a26:	4302      	orrs	r2, r0
 8004a28:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a2a:	0299      	lsls	r1, r3, #10
 8004a2c:	d506      	bpl.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2e:	491b      	ldr	r1, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a30:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004a32:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004a34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a38:	4302      	orrs	r2, r0
 8004a3a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a3c:	005a      	lsls	r2, r3, #1
 8004a3e:	d509      	bpl.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a42:	6911      	ldr	r1, [r2, #16]
 8004a44:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004a48:	6111      	str	r1, [r2, #16]
 8004a4a:	6911      	ldr	r1, [r2, #16]
 8004a4c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8004a50:	4301      	orrs	r1, r0
 8004a52:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da06      	bge.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a58:	4910      	ldr	r1, [pc, #64]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a5a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004a5c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a62:	4302      	orrs	r2, r0
 8004a64:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	d507      	bpl.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8004a6c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8004a70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004a72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6553      	str	r3, [r2, #84]	; 0x54
}
 8004a7a:	1e30      	subs	r0, r6, #0
 8004a7c:	bf18      	it	ne
 8004a7e:	2001      	movne	r0, #1
 8004a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a84:	2101      	movs	r1, #1
 8004a86:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004a8a:	f7ff fb83 	bl	8004194 <RCCEx_PLL3_Config>
 8004a8e:	e6dd      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a90:	2601      	movs	r6, #1
 8004a92:	4634      	mov	r4, r6
 8004a94:	e6e6      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8004a96:	4626      	mov	r6, r4
 8004a98:	e6e4      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004aa0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004aa4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aae:	f47f aeeb 	bne.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8004ab2:	b9a4      	cbnz	r4, 8004ade <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab4:	4a4d      	ldr	r2, [pc, #308]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004ab6:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8004aba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004abc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac4:	e6e2      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	1d28      	adds	r0, r5, #4
 8004aca:	f7ff faeb 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ace:	4604      	mov	r4, r0
      break;
 8004ad0:	e7ef      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004ad8:	f7ff fb5c 	bl	8004194 <RCCEx_PLL3_Config>
 8004adc:	e7f7      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8004ade:	4626      	mov	r6, r4
 8004ae0:	e6d4      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ae6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004aea:	d003      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8004aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af0:	f47f aede 	bne.w	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8004af4:	b9a4      	cbnz	r4, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004af6:	4a3d      	ldr	r2, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004af8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8004afc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004afe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
 8004b06:	e6d5      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b08:	2100      	movs	r1, #0
 8004b0a:	1d28      	adds	r0, r5, #4
 8004b0c:	f7ff faca 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b10:	4604      	mov	r4, r0
      break;
 8004b12:	e7ef      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b14:	2102      	movs	r1, #2
 8004b16:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004b1a:	f7ff fb3b 	bl	8004194 <RCCEx_PLL3_Config>
 8004b1e:	e7f7      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004b20:	4626      	mov	r6, r4
 8004b22:	e6c7      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004b2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b32:	f47f aed1 	bne.w	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 8004b36:	b9a4      	cbnz	r4, 8004b62 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b38:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004b3a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8004b3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6593      	str	r3, [r2, #88]	; 0x58
 8004b48:	e6c8      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	1d28      	adds	r0, r5, #4
 8004b4e:	f7ff faa9 	bl	80040a4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b52:	4604      	mov	r4, r0
      break;
 8004b54:	e7ef      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b56:	2102      	movs	r1, #2
 8004b58:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004b5c:	f7ff fb1a 	bl	8004194 <RCCEx_PLL3_Config>
 8004b60:	e7f7      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8004b62:	4626      	mov	r6, r4
 8004b64:	e6ba      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b66:	2102      	movs	r1, #2
 8004b68:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004b6c:	f7ff fb12 	bl	8004194 <RCCEx_PLL3_Config>
 8004b70:	e6f6      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 8004b72:	2601      	movs	r6, #1
 8004b74:	4634      	mov	r4, r6
 8004b76:	e6ff      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004b78:	4626      	mov	r6, r4
 8004b7a:	e6fd      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004b82:	f7ff fb07 	bl	8004194 <RCCEx_PLL3_Config>
 8004b86:	4604      	mov	r4, r0
      break;
 8004b88:	e70b      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 8004b8a:	2601      	movs	r6, #1
 8004b8c:	4634      	mov	r4, r6
 8004b8e:	e713      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8004b90:	4626      	mov	r6, r4
 8004b92:	e711      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004b96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b9e:	b96c      	cbnz	r4, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004ba2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004ba4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004baa:	430b      	orrs	r3, r1
 8004bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bae:	e710      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	1d28      	adds	r0, r5, #4
 8004bb4:	f7ff fa76 	bl	80040a4 <RCCEx_PLL2_Config>
 8004bb8:	4604      	mov	r4, r0
      break;
 8004bba:	e7f0      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8004bbc:	4626      	mov	r6, r4
 8004bbe:	e708      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 8004bc0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004bc4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004bc8:	f47f af1b 	bne.w	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 8004bcc:	b964      	cbnz	r4, 8004be8 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bce:	4807      	ldr	r0, [pc, #28]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004bd0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	6542      	str	r2, [r0, #84]	; 0x54
 8004bda:	e713      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4803      	ldr	r0, [pc, #12]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8004bde:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004be0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004be4:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8004be6:	e7f1      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004be8:	4626      	mov	r6, r4
 8004bea:	e70b      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8004bec:	58024400 	.word	0x58024400

08004bf0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004bf0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bf2:	f7ff f9e7 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004bf8:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004c00:	5cd3      	ldrb	r3, [r2, r3]
 8004c02:	f003 031f 	and.w	r3, r3, #31
}
 8004c06:	40d8      	lsrs	r0, r3
 8004c08:	bd08      	pop	{r3, pc}
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	0800b598 	.word	0x0800b598

08004c14 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c14:	4a4e      	ldr	r2, [pc, #312]	; (8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8004c16:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c18:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c1a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c1c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8004c1e:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c22:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c26:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004c28:	f000 808d 	beq.w	8004d46 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c2c:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c30:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c34:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c38:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c40:	434b      	muls	r3, r1
    switch (pllsource)
 8004c42:	2c01      	cmp	r4, #1
 8004c44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c48:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c4c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8004c50:	d06b      	beq.n	8004d2a <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8004c52:	2c02      	cmp	r4, #2
 8004c54:	d05b      	beq.n	8004d0e <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8004c56:	2c00      	cmp	r4, #0
 8004c58:	d167      	bne.n	8004d2a <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	069b      	lsls	r3, r3, #26
 8004c5e:	d546      	bpl.n	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c60:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c62:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c64:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004c68:	4a3a      	ldr	r2, [pc, #232]	; (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c6e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c70:	ee07 2a10 	vmov	s14, r2
 8004c74:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004c78:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004c7c:	ee06 3a90 	vmov	s13, r3
 8004c80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c88:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c8c:	4a30      	ldr	r2, [pc, #192]	; (8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c92:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c94:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c98:	ee07 3a10 	vmov	s14, r3
 8004c9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ca0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ca4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ca8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004cac:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004cb0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004cb2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004cb6:	ee07 3a10 	vmov	s14, r3
 8004cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004cc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cc6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004cca:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004cd0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004cd4:	ee07 3a10 	vmov	s14, r3
 8004cd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cdc:	ee37 6a06 	vadd.f32	s12, s14, s12
 8004ce0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8004ce4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004ce8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004cf0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	ee07 3a10 	vmov	s14, r3
 8004cfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d04:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d08:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004d0c:	e7be      	b.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d10:	eddf 5a12 	vldr	s11, [pc, #72]	; 8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	ee07 3a10 	vmov	s14, r3
 8004d1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004d28:	e7ee      	b.n	8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d2c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d34:	ee07 3a10 	vmov	s14, r3
 8004d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d40:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004d44:	e7e0      	b.n	8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d46:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d4a:	6081      	str	r1, [r0, #8]
}
 8004d4c:	e7ce      	b.n	8004cec <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004d4e:	bf00      	nop
 8004d50:	58024400 	.word	0x58024400
 8004d54:	03d09000 	.word	0x03d09000
 8004d58:	4c742400 	.word	0x4c742400
 8004d5c:	4bbebc20 	.word	0x4bbebc20
 8004d60:	4a742400 	.word	0x4a742400

08004d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d64:	4a4e      	ldr	r2, [pc, #312]	; (8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8004d66:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d68:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d6a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d6c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8004d6e:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d72:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d76:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8004d78:	f000 808d 	beq.w	8004e96 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d7c:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d80:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d84:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d88:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d90:	434b      	muls	r3, r1
    switch (pllsource)
 8004d92:	2c01      	cmp	r4, #1
 8004d94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d98:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d9c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8004da0:	d06b      	beq.n	8004e7a <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8004da2:	2c02      	cmp	r4, #2
 8004da4:	d05b      	beq.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8004da6:	2c00      	cmp	r4, #0
 8004da8:	d167      	bne.n	8004e7a <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	069b      	lsls	r3, r3, #26
 8004dae:	d546      	bpl.n	8004e3e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db0:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004db2:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004db8:	4a3a      	ldr	r2, [pc, #232]	; (8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dbe:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dc0:	ee07 2a10 	vmov	s14, r2
 8004dc4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004dc8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004dcc:	ee06 3a90 	vmov	s13, r3
 8004dd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd8:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ddc:	4a30      	ldr	r2, [pc, #192]	; (8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dde:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004de2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004de4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004de8:	ee07 3a10 	vmov	s14, r3
 8004dec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004df0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004df4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004df8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004dfc:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e02:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004e06:	ee07 3a10 	vmov	s14, r3
 8004e0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004e12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e16:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004e1a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e20:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004e24:	ee07 3a10 	vmov	s14, r3
 8004e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e2c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8004e30:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8004e34:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004e38:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e40:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8004e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e48:	ee07 3a10 	vmov	s14, r3
 8004e4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e54:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e58:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004e5c:	e7be      	b.n	8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e60:	eddf 5a12 	vldr	s11, [pc, #72]	; 8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8004e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e68:	ee07 3a10 	vmov	s14, r3
 8004e6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004e78:	e7ee      	b.n	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e7c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	ee07 3a10 	vmov	s14, r3
 8004e88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e90:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004e94:	e7e0      	b.n	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e96:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e9a:	6081      	str	r1, [r0, #8]
}
 8004e9c:	e7ce      	b.n	8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004e9e:	bf00      	nop
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	03d09000 	.word	0x03d09000
 8004ea8:	4c742400 	.word	0x4c742400
 8004eac:	4bbebc20 	.word	0x4bbebc20
 8004eb0:	4a742400 	.word	0x4a742400

08004eb4 <HAL_RTC_WaitForSynchro>:
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004eb4:	6802      	ldr	r2, [r0, #0]
{
 8004eb6:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004eb8:	68d3      	ldr	r3, [r2, #12]
{
 8004eba:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec0:	60d3      	str	r3, [r2, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8004ec2:	f7fd f939 	bl	8002138 <HAL_GetTick>
 8004ec6:	4605      	mov	r5, r0
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	069b      	lsls	r3, r3, #26
 8004ece:	d501      	bpl.n	8004ed4 <HAL_RTC_WaitForSynchro+0x20>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 8004ed0:	2000      	movs	r0, #0
}
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ed4:	f7fd f930 	bl	8002138 <HAL_GetTick>
 8004ed8:	1b40      	subs	r0, r0, r5
 8004eda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ede:	d9f3      	bls.n	8004ec8 <HAL_RTC_WaitForSynchro+0x14>
        return HAL_TIMEOUT;
 8004ee0:	2003      	movs	r0, #3
 8004ee2:	e7f6      	b.n	8004ed2 <HAL_RTC_WaitForSynchro+0x1e>

08004ee4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ee6:	6803      	ldr	r3, [r0, #0]
{
 8004ee8:	4605      	mov	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004eea:	68dc      	ldr	r4, [r3, #12]
 8004eec:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8004ef0:	d118      	bne.n	8004f24 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ef2:	f04f 32ff 	mov.w	r2, #4294967295
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef6:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ef8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004efa:	f7fd f91d 	bl	8002138 <HAL_GetTick>
 8004efe:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	065b      	lsls	r3, r3, #25
 8004f06:	d401      	bmi.n	8004f0c <RTC_EnterInitMode+0x28>
 8004f08:	2c03      	cmp	r4, #3
 8004f0a:	d101      	bne.n	8004f10 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
}
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f10:	f7fd f912 	bl	8002138 <HAL_GetTick>
 8004f14:	1b80      	subs	r0, r0, r6
 8004f16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f1a:	d9f1      	bls.n	8004f00 <RTC_EnterInitMode+0x1c>
        status = HAL_TIMEOUT;
 8004f1c:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f1e:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 8004f22:	e7ed      	b.n	8004f00 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2400      	movs	r4, #0
 8004f26:	e7f1      	b.n	8004f0c <RTC_EnterInitMode+0x28>

08004f28 <RTC_ExitInitMode>:
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <RTC_ExitInitMode+0x44>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
{
 8004f30:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004f32:	60da      	str	r2, [r3, #12]
{
 8004f34:	4604      	mov	r4, r0

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d406      	bmi.n	8004f4a <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f3c:	f7ff ffba 	bl	8004eb4 <HAL_RTC_WaitForSynchro>
 8004f40:	b110      	cbz	r0, 8004f48 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f42:	2003      	movs	r0, #3
 8004f44:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8004f48:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	f022 0220 	bic.w	r2, r2, #32
 8004f50:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f52:	f7ff ffaf 	bl	8004eb4 <HAL_RTC_WaitForSynchro>
 8004f56:	b110      	cbz	r0, 8004f5e <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f58:	2003      	movs	r0, #3
 8004f5a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <RTC_ExitInitMode+0x44>)
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	f043 0320 	orr.w	r3, r3, #32
 8004f66:	6093      	str	r3, [r2, #8]
  return status;
 8004f68:	e7ee      	b.n	8004f48 <RTC_ExitInitMode+0x20>
 8004f6a:	bf00      	nop
 8004f6c:	58004000 	.word	0x58004000

08004f70 <HAL_RTC_Init>:
{
 8004f70:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8004f72:	4604      	mov	r4, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d03f      	beq.n	8004ff8 <HAL_RTC_Init+0x88>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f78:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004f7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f80:	b91b      	cbnz	r3, 8004f8a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004f82:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004f86:	f7fc f95f 	bl	8001248 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f8a:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f8c:	22ca      	movs	r2, #202	; 0xca
    status = RTC_EnterInitMode(hrtc);
 8004f8e:	4620      	mov	r0, r4
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f90:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
 8004f98:	2253      	movs	r2, #83	; 0x53
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004f9c:	f7ff ffa2 	bl	8004ee4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004fa0:	bb10      	cbnz	r0, 8004fe8 <HAL_RTC_Init+0x78>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fa2:	6822      	ldr	r2, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fa4:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fa6:	6893      	ldr	r3, [r2, #8]
 8004fa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fb2:	6863      	ldr	r3, [r4, #4]
 8004fb4:	6891      	ldr	r1, [r2, #8]
 8004fb6:	4303      	orrs	r3, r0
 8004fb8:	69a0      	ldr	r0, [r4, #24]
 8004fba:	4303      	orrs	r3, r0
      status = RTC_ExitInitMode(hrtc);
 8004fbc:	4620      	mov	r0, r4
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004fc2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8004fc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004fca:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8004fcc:	f7ff ffac 	bl	8004f28 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8004fd0:	b950      	cbnz	r0, 8004fe8 <HAL_RTC_Init+0x78>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fd2:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fd4:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004fd8:	f023 0303 	bic.w	r3, r3, #3
 8004fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fde:	69e3      	ldr	r3, [r4, #28]
 8004fe0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004fe2:	432b      	orrs	r3, r5
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004fee:	b910      	cbnz	r0, 8004ff6 <HAL_RTC_Init+0x86>
      hrtc->State = HAL_RTC_STATE_READY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	e7fc      	b.n	8004ff6 <HAL_RTC_Init+0x86>

08004ffc <HAL_RTCEx_BKUPWrite>:
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004ffc:	6803      	ldr	r3, [r0, #0]
 8004ffe:	3350      	adds	r3, #80	; 0x50
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005000:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8005004:	4770      	bx	lr

08005006 <HAL_RTCEx_BKUPRead>:
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005006:	6803      	ldr	r3, [r0, #0]
 8005008:	3350      	adds	r3, #80	; 0x50
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800500a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005010:	4770      	bx	lr
	...

08005014 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005014:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005018:	2b01      	cmp	r3, #1
 800501a:	d133      	bne.n	8005084 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	2302      	movs	r3, #2
 800501e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005022:	6803      	ldr	r3, [r0, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_TIM_Base_Start_IT+0x74>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01a      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d017      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005038:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005048:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005050:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005058:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x54>
 8005060:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005064:	4293      	cmp	r3, r2
 8005066:	d107      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	6899      	ldr	r1, [r3, #8]
 800506a:	4a08      	ldr	r2, [pc, #32]	; (800508c <HAL_TIM_Base_Start_IT+0x78>)
 800506c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506e:	2a06      	cmp	r2, #6
 8005070:	d006      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x6c>
 8005072:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005076:	d003      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005080:	2000      	movs	r0, #0
}
 8005082:	4770      	bx	lr
    return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
 8005086:	4770      	bx	lr
 8005088:	40010000 	.word	0x40010000
 800508c:	00010007 	.word	0x00010007

08005090 <HAL_TIM_OC_DelayElapsedCallback>:
 8005090:	4770      	bx	lr

08005092 <HAL_TIM_IC_CaptureCallback>:
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005098:	6803      	ldr	r3, [r0, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	0791      	lsls	r1, r2, #30
{
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a2:	d50f      	bpl.n	80050c4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	0792      	lsls	r2, r2, #30
 80050a8:	d50c      	bpl.n	80050c4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050aa:	f06f 0202 	mvn.w	r2, #2
 80050ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b0:	2201      	movs	r2, #1
 80050b2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	0799      	lsls	r1, r3, #30
 80050b8:	f000 8085 	beq.w	80051c6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050bc:	f7ff ffe9 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c0:	2300      	movs	r3, #0
 80050c2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	0752      	lsls	r2, r2, #29
 80050ca:	d510      	bpl.n	80050ee <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	0750      	lsls	r0, r2, #29
 80050d0:	d50d      	bpl.n	80050ee <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	2202      	movs	r2, #2
 80050dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80050e4:	d075      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	f7ff ffd4 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	2300      	movs	r3, #0
 80050ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	0711      	lsls	r1, r2, #28
 80050f4:	d50f      	bpl.n	8005116 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	0712      	lsls	r2, r2, #28
 80050fa:	d50c      	bpl.n	8005116 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fc:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005100:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005104:	2204      	movs	r2, #4
 8005106:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	d067      	beq.n	80051de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	f7ff ffc0 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	2300      	movs	r3, #0
 8005114:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	06d0      	lsls	r0, r2, #27
 800511c:	d510      	bpl.n	8005140 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	06d1      	lsls	r1, r2, #27
 8005122:	d50d      	bpl.n	8005140 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005124:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005128:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512c:	2208      	movs	r2, #8
 800512e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005136:	d058      	beq.n	80051ea <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	f7ff ffab 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513c:	2300      	movs	r3, #0
 800513e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	07d2      	lsls	r2, r2, #31
 8005146:	d508      	bpl.n	800515a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	07d0      	lsls	r0, r2, #31
 800514c:	d505      	bpl.n	800515a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800514e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005152:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005154:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005156:	f7fb feb9 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	0611      	lsls	r1, r2, #24
 8005160:	d508      	bpl.n	8005174 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	0612      	lsls	r2, r2, #24
 8005166:	d505      	bpl.n	8005174 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005168:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800516c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800516e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005170:	f000 f8d9 	bl	8005326 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	05d0      	lsls	r0, r2, #23
 800517a:	d508      	bpl.n	800518e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	0611      	lsls	r1, r2, #24
 8005180:	d505      	bpl.n	800518e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005182:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005186:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005188:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800518a:	f000 f8cd 	bl	8005328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	0652      	lsls	r2, r2, #25
 8005194:	d508      	bpl.n	80051a8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	0650      	lsls	r0, r2, #25
 800519a:	d505      	bpl.n	80051a8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80051a4:	f7ff ff77 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	0691      	lsls	r1, r2, #26
 80051ae:	d522      	bpl.n	80051f6 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	0692      	lsls	r2, r2, #26
 80051b4:	d51f      	bpl.n	80051f6 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051bc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80051c2:	f000 b8af 	b.w	8005324 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	f7ff ff63 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ca:	4620      	mov	r0, r4
 80051cc:	f7ff ff62 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
 80051d0:	e776      	b.n	80050c0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	f7ff ff5d 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff ff5c 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
 80051dc:	e785      	b.n	80050ea <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	f7ff ff57 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7ff ff56 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
 80051e8:	e793      	b.n	8005112 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	f7ff ff51 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff ff50 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
 80051f4:	e7a2      	b.n	800513c <HAL_TIM_IRQHandler+0xa4>
}
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f8:	4a30      	ldr	r2, [pc, #192]	; (80052bc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80051fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	4290      	cmp	r0, r2
 80051fe:	d012      	beq.n	8005226 <TIM_Base_SetConfig+0x2e>
 8005200:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005204:	d00f      	beq.n	8005226 <TIM_Base_SetConfig+0x2e>
 8005206:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800520a:	4290      	cmp	r0, r2
 800520c:	d00b      	beq.n	8005226 <TIM_Base_SetConfig+0x2e>
 800520e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005212:	4290      	cmp	r0, r2
 8005214:	d007      	beq.n	8005226 <TIM_Base_SetConfig+0x2e>
 8005216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800521a:	4290      	cmp	r0, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0x2e>
 800521e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005222:	4290      	cmp	r0, r2
 8005224:	d119      	bne.n	800525a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005226:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800522c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522e:	4a23      	ldr	r2, [pc, #140]	; (80052bc <TIM_Base_SetConfig+0xc4>)
 8005230:	4290      	cmp	r0, r2
 8005232:	d01d      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 8005234:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005238:	d01a      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 800523a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800523e:	4290      	cmp	r0, r2
 8005240:	d016      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 8005242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005246:	4290      	cmp	r0, r2
 8005248:	d012      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 800524a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524e:	4290      	cmp	r0, r2
 8005250:	d00e      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 8005252:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005256:	4290      	cmp	r0, r2
 8005258:	d00a      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 800525a:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <TIM_Base_SetConfig+0xc8>)
 800525c:	4290      	cmp	r0, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 8005260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005264:	4290      	cmp	r0, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x78>
 8005268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800526c:	4290      	cmp	r0, r2
 800526e:	d103      	bne.n	8005278 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005274:	68ca      	ldr	r2, [r1, #12]
 8005276:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	694a      	ldr	r2, [r1, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005282:	688b      	ldr	r3, [r1, #8]
 8005284:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005286:	680b      	ldr	r3, [r1, #0]
 8005288:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <TIM_Base_SetConfig+0xc4>)
 800528c:	4298      	cmp	r0, r3
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0xb8>
 8005290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005294:	4298      	cmp	r0, r3
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0xb8>
 8005298:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800529c:	4298      	cmp	r0, r3
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xb8>
 80052a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a4:	4298      	cmp	r0, r3
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xb8>
 80052a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ac:	4298      	cmp	r0, r3
 80052ae:	d101      	bne.n	80052b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	690b      	ldr	r3, [r1, #16]
 80052b2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	2301      	movs	r3, #1
 80052b6:	6143      	str	r3, [r0, #20]
}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40014000 	.word	0x40014000

080052c4 <HAL_TIM_Base_Init>:
{
 80052c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80052c6:	4604      	mov	r4, r0
 80052c8:	b350      	cbz	r0, 8005320 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052d2:	b91b      	cbnz	r3, 80052dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80052d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052d8:	f7ff fe9a 	bl	8005010 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80052e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e6:	f7ff ff87 	bl	80051f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ea:	2301      	movs	r3, #1
  return HAL_OK;
 80052ec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80052f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80052fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80052fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800530e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005312:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005316:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800531a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800531e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005320:	2001      	movs	r0, #1
 8005322:	e7fc      	b.n	800531e <HAL_TIM_Base_Init+0x5a>

08005324 <HAL_TIMEx_CommutCallback>:
 8005324:	4770      	bx	lr

08005326 <HAL_TIMEx_BreakCallback>:
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_Break2Callback>:
 8005328:	4770      	bx	lr

0800532a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800532a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	e852 3f00 	ldrex	r3, [r2]
 8005330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005338:	6802      	ldr	r2, [r0, #0]
 800533a:	2900      	cmp	r1, #0
 800533c:	d1f5      	bne.n	800532a <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	f102 0308 	add.w	r3, r2, #8
 8005342:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	f102 0c08 	add.w	ip, r2, #8
 800534e:	e84c 3100 	strex	r1, r3, [ip]
 8005352:	2900      	cmp	r1, #0
 8005354:	d1f3      	bne.n	800533e <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005356:	2320      	movs	r3, #32
 8005358:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800535c:	4770      	bx	lr
	...

08005360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005362:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	e852 3f00 	ldrex	r3, [r2]
 8005368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	2900      	cmp	r1, #0
 8005374:	d1f5      	bne.n	8005362 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005376:	4c0f      	ldr	r4, [pc, #60]	; (80053b4 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f102 0308 	add.w	r3, r2, #8
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	f102 0c08 	add.w	ip, r2, #8
 8005386:	e84c 3100 	strex	r1, r3, [ip]
 800538a:	2900      	cmp	r1, #0
 800538c:	d1f4      	bne.n	8005378 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	e842 3100 	strex	r1, r3, [r2]
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d1f7      	bne.n	8005394 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	2320      	movs	r3, #32
 80053a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	2300      	movs	r3, #0
 80053ac:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ae:	6703      	str	r3, [r0, #112]	; 0x70
}
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	effffffe 	.word	0xeffffffe

080053b8 <HAL_UART_TxCpltCallback>:
 80053b8:	4770      	bx	lr

080053ba <HAL_UART_RxHalfCpltCallback>:
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_ErrorCallback>:
 80053bc:	4770      	bx	lr

080053be <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053be:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053c0:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053c2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80053c6:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053c8:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	0612      	lsls	r2, r2, #24
 80053d0:	d506      	bpl.n	80053e0 <UART_DMAError+0x22>
 80053d2:	2b21      	cmp	r3, #33	; 0x21
 80053d4:	d104      	bne.n	80053e0 <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80053dc:	f7ff ffa5 	bl	800532a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053e0:	6803      	ldr	r3, [r0, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	065b      	lsls	r3, r3, #25
 80053e6:	d506      	bpl.n	80053f6 <UART_DMAError+0x38>
 80053e8:	2c22      	cmp	r4, #34	; 0x22
 80053ea:	d104      	bne.n	80053f6 <UART_DMAError+0x38>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80053f2:	f7ff ffb5 	bl	8005360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80053fa:	f043 0310 	orr.w	r3, r3, #16
 80053fe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005402:	f7ff ffdb 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005406:	bd10      	pop	{r4, pc}

08005408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005408:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800540a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005412:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005416:	f7ff ffd1 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541a:	bd08      	pop	{r3, pc}

0800541c <HAL_UARTEx_RxEventCallback>:
}
 800541c:	4770      	bx	lr
	...

08005420 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005420:	6803      	ldr	r3, [r0, #0]
{
 8005422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005426:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8005428:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800542c:	6819      	ldr	r1, [r3, #0]
{
 800542e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005430:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005432:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8005434:	d110      	bne.n	8005458 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005436:	0696      	lsls	r6, r2, #26
 8005438:	f140 8096 	bpl.w	8005568 <HAL_UART_IRQHandler+0x148>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800543c:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005440:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8005444:	433e      	orrs	r6, r7
 8005446:	f000 808f 	beq.w	8005568 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 800544a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8084 	beq.w	800555a <HAL_UART_IRQHandler+0x13a>
}
 8005452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005456:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005458:	4ea6      	ldr	r6, [pc, #664]	; (80056f4 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800545a:	48a7      	ldr	r0, [pc, #668]	; (80056f8 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800545c:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800545e:	4008      	ands	r0, r1
 8005460:	4330      	orrs	r0, r6
 8005462:	f000 8081 	beq.w	8005568 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005466:	07d7      	lsls	r7, r2, #31
 8005468:	d509      	bpl.n	800547e <HAL_UART_IRQHandler+0x5e>
 800546a:	05c8      	lsls	r0, r1, #23
 800546c:	d507      	bpl.n	800547e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800546e:	2001      	movs	r0, #1
 8005470:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005472:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005476:	f040 0001 	orr.w	r0, r0, #1
 800547a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800547e:	0797      	lsls	r7, r2, #30
 8005480:	d509      	bpl.n	8005496 <HAL_UART_IRQHandler+0x76>
 8005482:	07e8      	lsls	r0, r5, #31
 8005484:	d507      	bpl.n	8005496 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005486:	2002      	movs	r0, #2
 8005488:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800548e:	f040 0004 	orr.w	r0, r0, #4
 8005492:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005496:	0757      	lsls	r7, r2, #29
 8005498:	d509      	bpl.n	80054ae <HAL_UART_IRQHandler+0x8e>
 800549a:	07e8      	lsls	r0, r5, #31
 800549c:	d507      	bpl.n	80054ae <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800549e:	2004      	movs	r0, #4
 80054a0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80054a6:	f040 0002 	orr.w	r0, r0, #2
 80054aa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054ae:	0717      	lsls	r7, r2, #28
 80054b0:	d50b      	bpl.n	80054ca <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054b2:	f001 0020 	and.w	r0, r1, #32
 80054b6:	4330      	orrs	r0, r6
 80054b8:	d007      	beq.n	80054ca <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054ba:	2008      	movs	r0, #8
 80054bc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054be:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80054c2:	f040 0008 	orr.w	r0, r0, #8
 80054c6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054ca:	0516      	lsls	r6, r2, #20
 80054cc:	d50a      	bpl.n	80054e4 <HAL_UART_IRQHandler+0xc4>
 80054ce:	0148      	lsls	r0, r1, #5
 80054d0:	d508      	bpl.n	80054e4 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054d6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054dc:	f043 0320 	orr.w	r3, r3, #32
 80054e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d036      	beq.n	800555a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054ec:	0693      	lsls	r3, r2, #26
 80054ee:	d50a      	bpl.n	8005506 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054f0:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054f4:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 80054f8:	ea51 0305 	orrs.w	r3, r1, r5
 80054fc:	d003      	beq.n	8005506 <HAL_UART_IRQHandler+0xe6>
        if (huart->RxISR != NULL)
 80054fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005500:	b10b      	cbz	r3, 8005506 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 8005502:	4620      	mov	r0, r4
 8005504:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005506:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8005508:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800550a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800550e:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005510:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	431d      	orrs	r5, r3
 800551a:	d020      	beq.n	800555e <HAL_UART_IRQHandler+0x13e>
        UART_EndRxTransfer(huart);
 800551c:	f7ff ff20 	bl	8005360 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	6893      	ldr	r3, [r2, #8]
 8005524:	065f      	lsls	r7, r3, #25
 8005526:	d515      	bpl.n	8005554 <HAL_UART_IRQHandler+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	f102 0308 	add.w	r3, r2, #8
 800552c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	f102 0008 	add.w	r0, r2, #8
 8005538:	e840 3100 	strex	r1, r3, [r0]
 800553c:	2900      	cmp	r1, #0
 800553e:	d1f3      	bne.n	8005528 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 8005540:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005542:	b138      	cbz	r0, 8005554 <HAL_UART_IRQHandler+0x134>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005544:	4b6d      	ldr	r3, [pc, #436]	; (80056fc <HAL_UART_IRQHandler+0x2dc>)
 8005546:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005548:	f7fd fc7a 	bl	8002e40 <HAL_DMA_Abort_IT>
 800554c:	b128      	cbz	r0, 800555a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005550:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005552:	e77e      	b.n	8005452 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff ff31 	bl	80053bc <HAL_UART_ErrorCallback>
}
 800555a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800555e:	f7ff ff2d 	bl	80053bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005562:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8005566:	e7f8      	b.n	800555a <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800556a:	2801      	cmp	r0, #1
 800556c:	f040 80a8 	bne.w	80056c0 <HAL_UART_IRQHandler+0x2a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005570:	06d6      	lsls	r6, r2, #27
 8005572:	f140 80a5 	bpl.w	80056c0 <HAL_UART_IRQHandler+0x2a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005576:	06c8      	lsls	r0, r1, #27
 8005578:	f140 80a2 	bpl.w	80056c0 <HAL_UART_IRQHandler+0x2a0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800557c:	2210      	movs	r2, #16
 800557e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	0652      	lsls	r2, r2, #25
 8005584:	d56a      	bpl.n	800565c <HAL_UART_IRQHandler+0x23c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005586:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005588:	485d      	ldr	r0, [pc, #372]	; (8005700 <HAL_UART_IRQHandler+0x2e0>)
 800558a:	680a      	ldr	r2, [r1, #0]
 800558c:	4282      	cmp	r2, r0
 800558e:	d01e      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 8005590:	3018      	adds	r0, #24
 8005592:	4282      	cmp	r2, r0
 8005594:	d01b      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 8005596:	3018      	adds	r0, #24
 8005598:	4282      	cmp	r2, r0
 800559a:	d018      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 800559c:	3018      	adds	r0, #24
 800559e:	4282      	cmp	r2, r0
 80055a0:	d015      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055a2:	3018      	adds	r0, #24
 80055a4:	4282      	cmp	r2, r0
 80055a6:	d012      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055a8:	3018      	adds	r0, #24
 80055aa:	4282      	cmp	r2, r0
 80055ac:	d00f      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055ae:	3018      	adds	r0, #24
 80055b0:	4282      	cmp	r2, r0
 80055b2:	d00c      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055b4:	3018      	adds	r0, #24
 80055b6:	4282      	cmp	r2, r0
 80055b8:	d009      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055ba:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80055be:	4282      	cmp	r2, r0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055c2:	3018      	adds	r0, #24
 80055c4:	4282      	cmp	r2, r0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055c8:	3018      	adds	r0, #24
 80055ca:	4282      	cmp	r2, r0
 80055cc:	d0ff      	beq.n	80055ce <HAL_UART_IRQHandler+0x1ae>
 80055ce:	6852      	ldr	r2, [r2, #4]
 80055d0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d0c1      	beq.n	800555a <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055d6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80055da:	4290      	cmp	r0, r2
 80055dc:	d9bd      	bls.n	800555a <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 80055de:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055e2:	69ca      	ldr	r2, [r1, #28]
 80055e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80055e8:	d02e      	beq.n	8005648 <HAL_UART_IRQHandler+0x228>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	e843 2100 	strex	r1, r2, [r3]
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d1f7      	bne.n	80055ea <HAL_UART_IRQHandler+0x1ca>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	f103 0208 	add.w	r2, r3, #8
 80055fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f103 0008 	add.w	r0, r3, #8
 800560a:	e840 2100 	strex	r1, r2, [r0]
 800560e:	2900      	cmp	r1, #0
 8005610:	d1f3      	bne.n	80055fa <HAL_UART_IRQHandler+0x1da>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	f103 0208 	add.w	r2, r3, #8
 8005616:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	f103 0008 	add.w	r0, r3, #8
 8005622:	e840 2100 	strex	r1, r2, [r0]
 8005626:	2900      	cmp	r1, #0
 8005628:	d1f3      	bne.n	8005612 <HAL_UART_IRQHandler+0x1f2>
          huart->RxState = HAL_UART_STATE_READY;
 800562a:	2220      	movs	r2, #32
 800562c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005630:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	e843 2100 	strex	r1, r2, [r3]
 800563e:	2900      	cmp	r1, #0
 8005640:	d1f7      	bne.n	8005632 <HAL_UART_IRQHandler+0x212>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005642:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005644:	f7fd fa56 	bl	8002af4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005648:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800564c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005650:	1ac9      	subs	r1, r1, r3
 8005652:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fee1 	bl	800541c <HAL_UARTEx_RxEventCallback>
 800565a:	e77e      	b.n	800555a <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800565c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8005660:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8005662:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8005666:	b289      	uxth	r1, r1
 8005668:	2900      	cmp	r1, #0
 800566a:	f43f af76 	beq.w	800555a <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800566e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005672:	1a89      	subs	r1, r1, r2
 8005674:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005676:	2900      	cmp	r1, #0
 8005678:	f43f af6f 	beq.w	800555a <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	e843 2000 	strex	r0, r2, [r3]
 8005688:	2800      	cmp	r0, #0
 800568a:	d1f7      	bne.n	800567c <HAL_UART_IRQHandler+0x25c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800568c:	4d1d      	ldr	r5, [pc, #116]	; (8005704 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	f103 0208 	add.w	r2, r3, #8
 8005692:	e852 2f00 	ldrex	r2, [r2]
 8005696:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	f103 0608 	add.w	r6, r3, #8
 800569c:	e846 2000 	strex	r0, r2, [r6]
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d1f4      	bne.n	800568e <HAL_UART_IRQHandler+0x26e>
        huart->RxState = HAL_UART_STATE_READY;
 80056a4:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80056a6:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80056a8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	e843 2000 	strex	r0, r2, [r3]
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d1f7      	bne.n	80056ae <HAL_UART_IRQHandler+0x28e>
 80056be:	e7c9      	b.n	8005654 <HAL_UART_IRQHandler+0x234>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056c0:	02d7      	lsls	r7, r2, #11
 80056c2:	d509      	bpl.n	80056d8 <HAL_UART_IRQHandler+0x2b8>
 80056c4:	026e      	lsls	r6, r5, #9
 80056c6:	d507      	bpl.n	80056d8 <HAL_UART_IRQHandler+0x2b8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80056cc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80056d4:	f000 bf4a 	b.w	800656c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056d8:	0610      	lsls	r0, r2, #24
 80056da:	d515      	bpl.n	8005708 <HAL_UART_IRQHandler+0x2e8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056dc:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056e0:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 80056e4:	4328      	orrs	r0, r5
 80056e6:	d00f      	beq.n	8005708 <HAL_UART_IRQHandler+0x2e8>
    if (huart->TxISR != NULL)
 80056e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f af35 	beq.w	800555a <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 80056f0:	4620      	mov	r0, r4
 80056f2:	e6ae      	b.n	8005452 <HAL_UART_IRQHandler+0x32>
 80056f4:	10000001 	.word	0x10000001
 80056f8:	04000120 	.word	0x04000120
 80056fc:	08005409 	.word	0x08005409
 8005700:	40020010 	.word	0x40020010
 8005704:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005708:	0657      	lsls	r7, r2, #25
 800570a:	d511      	bpl.n	8005730 <HAL_UART_IRQHandler+0x310>
 800570c:	064e      	lsls	r6, r1, #25
 800570e:	d50f      	bpl.n	8005730 <HAL_UART_IRQHandler+0x310>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	e843 2100 	strex	r1, r2, [r3]
 800571c:	2900      	cmp	r1, #0
 800571e:	d1f7      	bne.n	8005710 <HAL_UART_IRQHandler+0x2f0>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005720:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005722:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8005724:	6761      	str	r1, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8005726:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  HAL_UART_TxCpltCallback(huart);
 800572a:	f7ff fe45 	bl	80053b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572e:	e714      	b.n	800555a <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005730:	0215      	lsls	r5, r2, #8
 8005732:	d506      	bpl.n	8005742 <HAL_UART_IRQHandler+0x322>
 8005734:	0048      	lsls	r0, r1, #1
 8005736:	d504      	bpl.n	8005742 <HAL_UART_IRQHandler+0x322>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005738:	4620      	mov	r0, r4
}
 800573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800573e:	f000 bf17 	b.w	8006570 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005742:	01d3      	lsls	r3, r2, #7
 8005744:	f57f af09 	bpl.w	800555a <HAL_UART_IRQHandler+0x13a>
 8005748:	2900      	cmp	r1, #0
 800574a:	f6bf af06 	bge.w	800555a <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800574e:	4620      	mov	r0, r4
}
 8005750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005754:	f000 bf0b 	b.w	800656e <HAL_UARTEx_RxFifoFullCallback>

08005758 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005758:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800575c:	2a22      	cmp	r2, #34	; 0x22
{
 800575e:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005760:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005762:	d145      	bne.n	80057f0 <UART_RxISR_8BIT+0x98>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005766:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800576a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800576c:	400b      	ands	r3, r1
 800576e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005770:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005772:	3301      	adds	r3, #1
 8005774:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005776:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005782:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005786:	b29b      	uxth	r3, r3
 8005788:	bb73      	cbnz	r3, 80057e8 <UART_RxISR_8BIT+0x90>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800578a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	e852 3f00 	ldrex	r3, [r2]
 8005790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	2900      	cmp	r1, #0
 800579c:	d1f5      	bne.n	800578a <UART_RxISR_8BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	f103 0208 	add.w	r2, r3, #8
 80057a2:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	f103 0c08 	add.w	ip, r3, #8
 80057ae:	e84c 2100 	strex	r1, r2, [ip]
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d1f3      	bne.n	800579e <UART_RxISR_8BIT+0x46>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b6:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057b8:	6701      	str	r1, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 80057ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80057c0:	2a01      	cmp	r2, #1
 80057c2:	d112      	bne.n	80057ea <UART_RxISR_8BIT+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c4:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	e843 2100 	strex	r1, r2, [r3]
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d1f7      	bne.n	80057c6 <UART_RxISR_8BIT+0x6e>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	06d2      	lsls	r2, r2, #27
 80057da:	d501      	bpl.n	80057e0 <UART_RxISR_8BIT+0x88>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057dc:	2210      	movs	r2, #16
 80057de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80057e4:	f7ff fe1a 	bl	800541c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057e8:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80057ea:	f7fc fba1 	bl	8001f30 <HAL_UART_RxCpltCallback>
 80057ee:	e7fb      	b.n	80057e8 <UART_RxISR_8BIT+0x90>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	619a      	str	r2, [r3, #24]
}
 80057f8:	e7f6      	b.n	80057e8 <UART_RxISR_8BIT+0x90>

080057fa <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057fa:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80057fe:	2a22      	cmp	r2, #34	; 0x22
{
 8005800:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005802:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005804:	d142      	bne.n	800588c <UART_RxISR_16BIT+0x92>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005806:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005808:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800580c:	4011      	ands	r1, r2
 800580e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005810:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8005814:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005816:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800581a:	3a01      	subs	r2, #1
 800581c:	b292      	uxth	r2, r2
 800581e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005822:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8005826:	b292      	uxth	r2, r2
 8005828:	bb62      	cbnz	r2, 8005884 <UART_RxISR_16BIT+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800582e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	e843 2100 	strex	r1, r2, [r3]
 8005836:	2900      	cmp	r1, #0
 8005838:	d1f7      	bne.n	800582a <UART_RxISR_16BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	f103 0208 	add.w	r2, r3, #8
 800583e:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	f103 0c08 	add.w	ip, r3, #8
 800584a:	e84c 2100 	strex	r1, r2, [ip]
 800584e:	2900      	cmp	r1, #0
 8005850:	d1f3      	bne.n	800583a <UART_RxISR_16BIT+0x40>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005852:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005854:	6701      	str	r1, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 8005856:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800585c:	2a01      	cmp	r2, #1
 800585e:	d112      	bne.n	8005886 <UART_RxISR_16BIT+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005866:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	e843 2100 	strex	r1, r2, [r3]
 800586e:	2900      	cmp	r1, #0
 8005870:	d1f7      	bne.n	8005862 <UART_RxISR_16BIT+0x68>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	06d2      	lsls	r2, r2, #27
 8005876:	d501      	bpl.n	800587c <UART_RxISR_16BIT+0x82>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005878:	2210      	movs	r2, #16
 800587a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005880:	f7ff fdcc 	bl	800541c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005884:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005886:	f7fc fb53 	bl	8001f30 <HAL_UART_RxCpltCallback>
 800588a:	e7fb      	b.n	8005884 <UART_RxISR_16BIT+0x8a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	619a      	str	r2, [r3, #24]
}
 8005894:	e7f6      	b.n	8005884 <UART_RxISR_16BIT+0x8a>
	...

08005898 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800589c:	6803      	ldr	r3, [r0, #0]
{
 800589e:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80058a0:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80058a2:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80058a6:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80058ac:	2a22      	cmp	r2, #34	; 0x22
 80058ae:	f040 80a7 	bne.w	8005a00 <UART_RxISR_8BIT_FIFOEN+0x168>
  uint16_t  uhMask = huart->Mask;
 80058b2:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b6:	f04f 0a00 	mov.w	sl, #0
    nb_rx_data = huart->NbRxDataToProcess;
 80058ba:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058be:	f006 0601 	and.w	r6, r6, #1
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058c2:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8005a10 <UART_RxISR_8BIT_FIFOEN+0x178>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058c6:	f1b9 0f00 	cmp.w	r9, #0
 80058ca:	d001      	beq.n	80058d0 <UART_RxISR_8BIT_FIFOEN+0x38>
 80058cc:	06ab      	lsls	r3, r5, #26
 80058ce:	d420      	bmi.n	8005912 <UART_RxISR_8BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80058d4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058d6:	b1d3      	cbz	r3, 800590e <UART_RxISR_8BIT_FIFOEN+0x76>
 80058d8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80058dc:	429a      	cmp	r2, r3
 80058de:	d916      	bls.n	800590e <UART_RxISR_8BIT_FIFOEN+0x76>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	f102 0308 	add.w	r3, r2, #8
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	3208      	adds	r2, #8
 80058f0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	2900      	cmp	r1, #0
 80058f8:	d1f2      	bne.n	80058e0 <UART_RxISR_8BIT_FIFOEN+0x48>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <UART_RxISR_8BIT_FIFOEN+0x174>)
 80058fc:	6723      	str	r3, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005902:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	e842 3100 	strex	r1, r3, [r2]
 800590a:	2900      	cmp	r1, #0
 800590c:	d1f7      	bne.n	80058fe <UART_RxISR_8BIT_FIFOEN+0x66>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800590e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005912:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005914:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005918:	403b      	ands	r3, r7
 800591a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800591c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800591e:	3301      	adds	r3, #1
 8005920:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005922:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005926:	3b01      	subs	r3, #1
 8005928:	b29b      	uxth	r3, r3
 800592a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005932:	0769      	lsls	r1, r5, #29
 8005934:	d02a      	beq.n	800598c <UART_RxISR_8BIT_FIFOEN+0xf4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005936:	07ea      	lsls	r2, r5, #31
 8005938:	d50a      	bpl.n	8005950 <UART_RxISR_8BIT_FIFOEN+0xb8>
 800593a:	f418 7f80 	tst.w	r8, #256	; 0x100
 800593e:	d007      	beq.n	8005950 <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005940:	2201      	movs	r2, #1
 8005942:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005944:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005950:	07a8      	lsls	r0, r5, #30
 8005952:	d508      	bpl.n	8005966 <UART_RxISR_8BIT_FIFOEN+0xce>
 8005954:	b13e      	cbz	r6, 8005966 <UART_RxISR_8BIT_FIFOEN+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005956:	2202      	movs	r2, #2
 8005958:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800595e:	f042 0204 	orr.w	r2, r2, #4
 8005962:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005966:	0769      	lsls	r1, r5, #29
 8005968:	d508      	bpl.n	800597c <UART_RxISR_8BIT_FIFOEN+0xe4>
 800596a:	b13e      	cbz	r6, 800597c <UART_RxISR_8BIT_FIFOEN+0xe4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800596c:	2204      	movs	r2, #4
 800596e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005970:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800597c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005980:	b123      	cbz	r3, 800598c <UART_RxISR_8BIT_FIFOEN+0xf4>
          HAL_UART_ErrorCallback(huart);
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff fd1a 	bl	80053bc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800598c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d197      	bne.n	80058c6 <UART_RxISR_8BIT_FIFOEN+0x2e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005996:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	e852 3f00 	ldrex	r3, [r2]
 800599c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d1f5      	bne.n	8005996 <UART_RxISR_8BIT_FIFOEN+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	f103 0208 	add.w	r2, r3, #8
 80059ae:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059b2:	ea02 020b 	and.w	r2, r2, fp
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	f103 0008 	add.w	r0, r3, #8
 80059ba:	e840 2100 	strex	r1, r2, [r0]
 80059be:	2900      	cmp	r1, #0
 80059c0:	d1f3      	bne.n	80059aa <UART_RxISR_8BIT_FIFOEN+0x112>
        huart->RxState = HAL_UART_STATE_READY;
 80059c2:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80059c4:	6721      	str	r1, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80059c6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	d113      	bne.n	80059f8 <UART_RxISR_8BIT_FIFOEN+0x160>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	e843 2100 	strex	r1, r2, [r3]
 80059de:	2900      	cmp	r1, #0
 80059e0:	d1f7      	bne.n	80059d2 <UART_RxISR_8BIT_FIFOEN+0x13a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	06d2      	lsls	r2, r2, #27
 80059e6:	d501      	bpl.n	80059ec <UART_RxISR_8BIT_FIFOEN+0x154>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059e8:	2210      	movs	r2, #16
 80059ea:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff fd13 	bl	800541c <HAL_UARTEx_RxEventCallback>
 80059f6:	e766      	b.n	80058c6 <UART_RxISR_8BIT_FIFOEN+0x2e>
          HAL_UART_RxCpltCallback(huart);
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7fc fa99 	bl	8001f30 <HAL_UART_RxCpltCallback>
 80059fe:	e762      	b.n	80058c6 <UART_RxISR_8BIT_FIFOEN+0x2e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	f042 0208 	orr.w	r2, r2, #8
 8005a06:	619a      	str	r2, [r3, #24]
}
 8005a08:	e781      	b.n	800590e <UART_RxISR_8BIT_FIFOEN+0x76>
 8005a0a:	bf00      	nop
 8005a0c:	08005759 	.word	0x08005759
 8005a10:	effffffe 	.word	0xeffffffe

08005a14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a18:	6803      	ldr	r3, [r0, #0]
{
 8005a1a:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a1c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a1e:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a22:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a24:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005a28:	2a22      	cmp	r2, #34	; 0x22
 8005a2a:	f040 80a5 	bne.w	8005b78 <UART_RxISR_16BIT_FIFOEN+0x164>
  uint16_t  uhMask = huart->Mask;
 8005a2e:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a32:	f04f 0a00 	mov.w	sl, #0
    nb_rx_data = huart->NbRxDataToProcess;
 8005a36:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a3a:	f006 0601 	and.w	r6, r6, #1
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a3e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8005b88 <UART_RxISR_16BIT_FIFOEN+0x174>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a42:	f1b9 0f00 	cmp.w	r9, #0
 8005a46:	d001      	beq.n	8005a4c <UART_RxISR_16BIT_FIFOEN+0x38>
 8005a48:	06ab      	lsls	r3, r5, #26
 8005a4a:	d420      	bmi.n	8005a8e <UART_RxISR_16BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005a50:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a52:	b1d3      	cbz	r3, 8005a8a <UART_RxISR_16BIT_FIFOEN+0x76>
 8005a54:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d916      	bls.n	8005a8a <UART_RxISR_16BIT_FIFOEN+0x76>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	f102 0308 	add.w	r3, r2, #8
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d1f2      	bne.n	8005a5c <UART_RxISR_16BIT_FIFOEN+0x48>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005a76:	4b43      	ldr	r3, [pc, #268]	; (8005b84 <UART_RxISR_16BIT_FIFOEN+0x170>)
 8005a78:	6723      	str	r3, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a7e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	e842 3100 	strex	r1, r3, [r2]
 8005a86:	2900      	cmp	r1, #0
 8005a88:	d1f7      	bne.n	8005a7a <UART_RxISR_16BIT_FIFOEN+0x66>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a8e:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a90:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a92:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a94:	4039      	ands	r1, r7
 8005a96:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8005a9a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005a9c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005aa8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005aaa:	0769      	lsls	r1, r5, #29
 8005aac:	d02a      	beq.n	8005b04 <UART_RxISR_16BIT_FIFOEN+0xf0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aae:	07ea      	lsls	r2, r5, #31
 8005ab0:	d50a      	bpl.n	8005ac8 <UART_RxISR_16BIT_FIFOEN+0xb4>
 8005ab2:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005ab6:	d007      	beq.n	8005ac8 <UART_RxISR_16BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ab8:	2201      	movs	r2, #1
 8005aba:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005abc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac8:	07a8      	lsls	r0, r5, #30
 8005aca:	d508      	bpl.n	8005ade <UART_RxISR_16BIT_FIFOEN+0xca>
 8005acc:	b13e      	cbz	r6, 8005ade <UART_RxISR_16BIT_FIFOEN+0xca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ace:	2202      	movs	r2, #2
 8005ad0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005ad6:	f042 0204 	orr.w	r2, r2, #4
 8005ada:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ade:	0769      	lsls	r1, r5, #29
 8005ae0:	d508      	bpl.n	8005af4 <UART_RxISR_16BIT_FIFOEN+0xe0>
 8005ae2:	b13e      	cbz	r6, 8005af4 <UART_RxISR_16BIT_FIFOEN+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005af8:	b123      	cbz	r3, 8005b04 <UART_RxISR_16BIT_FIFOEN+0xf0>
          HAL_UART_ErrorCallback(huart);
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff fc5e 	bl	80053bc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8005b04:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d199      	bne.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	e852 3f00 	ldrex	r3, [r2]
 8005b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d1f5      	bne.n	8005b0e <UART_RxISR_16BIT_FIFOEN+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	f103 0208 	add.w	r2, r3, #8
 8005b26:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b2a:	ea02 020b 	and.w	r2, r2, fp
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	f103 0008 	add.w	r0, r3, #8
 8005b32:	e840 2100 	strex	r1, r2, [r0]
 8005b36:	2900      	cmp	r1, #0
 8005b38:	d1f3      	bne.n	8005b22 <UART_RxISR_16BIT_FIFOEN+0x10e>
        huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005b3c:	6721      	str	r1, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b42:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005b44:	2a01      	cmp	r2, #1
 8005b46:	d113      	bne.n	8005b70 <UART_RxISR_16BIT_FIFOEN+0x15c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	e843 2100 	strex	r1, r2, [r3]
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d1f7      	bne.n	8005b4a <UART_RxISR_16BIT_FIFOEN+0x136>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	06d2      	lsls	r2, r2, #27
 8005b5e:	d501      	bpl.n	8005b64 <UART_RxISR_16BIT_FIFOEN+0x150>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b60:	2210      	movs	r2, #16
 8005b62:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b64:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff fc57 	bl	800541c <HAL_UARTEx_RxEventCallback>
 8005b6e:	e768      	b.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2e>
          HAL_UART_RxCpltCallback(huart);
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7fc f9dd 	bl	8001f30 <HAL_UART_RxCpltCallback>
 8005b76:	e764      	b.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	619a      	str	r2, [r3, #24]
}
 8005b80:	e783      	b.n	8005a8a <UART_RxISR_16BIT_FIFOEN+0x76>
 8005b82:	bf00      	nop
 8005b84:	080057fb 	.word	0x080057fb
 8005b88:	effffffe 	.word	0xeffffffe

08005b8c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005b8e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b96:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005b9a:	0849      	lsrs	r1, r1, #1
 8005b9c:	f7ff fc3e 	bl	800541c <HAL_UARTEx_RxEventCallback>
}
 8005ba0:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8005ba2:	f7ff fc0a 	bl	80053ba <HAL_UART_RxHalfCpltCallback>
}
 8005ba6:	e7fb      	b.n	8005ba0 <UART_DMARxHalfCplt+0x14>

08005ba8 <UART_DMAReceiveCplt>:
{
 8005ba8:	b508      	push	{r3, lr}
 8005baa:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb4:	d032      	beq.n	8005c1c <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bbc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	e852 3f00 	ldrex	r3, [r2]
 8005bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d1f5      	bne.n	8005bbc <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	f103 0c08 	add.w	ip, r3, #8
 8005be0:	e84c 2100 	strex	r1, r2, [ip]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d1f3      	bne.n	8005bd0 <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f103 0208 	add.w	r2, r3, #8
 8005bec:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	f103 0c08 	add.w	ip, r3, #8
 8005bf8:	e84c 2100 	strex	r1, r2, [ip]
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d1f3      	bne.n	8005be8 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005c08:	2a01      	cmp	r2, #1
 8005c0a:	d107      	bne.n	8005c1c <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	e843 2100 	strex	r1, r2, [r3]
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	d1f7      	bne.n	8005c0c <UART_DMAReceiveCplt+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d104      	bne.n	8005c2c <UART_DMAReceiveCplt+0x84>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c22:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005c26:	f7ff fbf9 	bl	800541c <HAL_UARTEx_RxEventCallback>
}
 8005c2a:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005c2c:	f7fc f980 	bl	8001f30 <HAL_UART_RxCpltCallback>
}
 8005c30:	e7fb      	b.n	8005c2a <UART_DMAReceiveCplt+0x82>
	...

08005c34 <UART_SetConfig>:
{
 8005c34:	b530      	push	{r4, r5, lr}
 8005c36:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c38:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c3a:	69c0      	ldr	r0, [r0, #28]
{
 8005c3c:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c3e:	6921      	ldr	r1, [r4, #16]
 8005c40:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c42:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c44:	430a      	orrs	r2, r1
 8005c46:	6961      	ldr	r1, [r4, #20]
 8005c48:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4a:	4997      	ldr	r1, [pc, #604]	; (8005ea8 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c4c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4e:	4029      	ands	r1, r5
 8005c50:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c52:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c54:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005c5c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c62:	4a92      	ldr	r2, [pc, #584]	; (8005eac <UART_SetConfig+0x278>)
 8005c64:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005c66:	bf1c      	itt	ne
 8005c68:	6a22      	ldrne	r2, [r4, #32]
 8005c6a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8005c72:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8005c76:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c78:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c7a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	f022 020f 	bic.w	r2, r2, #15
 8005c82:	430a      	orrs	r2, r1
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c86:	4a8a      	ldr	r2, [pc, #552]	; (8005eb0 <UART_SetConfig+0x27c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d11b      	bne.n	8005cc4 <UART_SetConfig+0x90>
 8005c8c:	4b89      	ldr	r3, [pc, #548]	; (8005eb4 <UART_SetConfig+0x280>)
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c94:	2b28      	cmp	r3, #40	; 0x28
 8005c96:	d86c      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005c98:	4a87      	ldr	r2, [pc, #540]	; (8005eb8 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	f040 8132 	bne.w	8005f08 <UART_SetConfig+0x2d4>
    switch (clocksource)
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	f200 80c0 	bhi.w	8005e2a <UART_SetConfig+0x1f6>
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d861      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005cae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005cb2:	00e7      	.short	0x00e7
 8005cb4:	006000ec 	.word	0x006000ec
 8005cb8:	00ef0060 	.word	0x00ef0060
 8005cbc:	00600060 	.word	0x00600060
 8005cc0:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc4:	4a7d      	ldr	r2, [pc, #500]	; (8005ebc <UART_SetConfig+0x288>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d107      	bne.n	8005cda <UART_SetConfig+0xa6>
 8005cca:	4b7a      	ldr	r3, [pc, #488]	; (8005eb4 <UART_SetConfig+0x280>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d84d      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005cd6:	4a7a      	ldr	r2, [pc, #488]	; (8005ec0 <UART_SetConfig+0x28c>)
 8005cd8:	e7df      	b.n	8005c9a <UART_SetConfig+0x66>
 8005cda:	4a7a      	ldr	r2, [pc, #488]	; (8005ec4 <UART_SetConfig+0x290>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d107      	bne.n	8005cf0 <UART_SetConfig+0xbc>
 8005ce0:	4b74      	ldr	r3, [pc, #464]	; (8005eb4 <UART_SetConfig+0x280>)
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d842      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005cec:	4a76      	ldr	r2, [pc, #472]	; (8005ec8 <UART_SetConfig+0x294>)
 8005cee:	e7d4      	b.n	8005c9a <UART_SetConfig+0x66>
 8005cf0:	4a76      	ldr	r2, [pc, #472]	; (8005ecc <UART_SetConfig+0x298>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d107      	bne.n	8005d06 <UART_SetConfig+0xd2>
 8005cf6:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <UART_SetConfig+0x280>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d837      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005d02:	4a73      	ldr	r2, [pc, #460]	; (8005ed0 <UART_SetConfig+0x29c>)
 8005d04:	e7c9      	b.n	8005c9a <UART_SetConfig+0x66>
 8005d06:	4a73      	ldr	r2, [pc, #460]	; (8005ed4 <UART_SetConfig+0x2a0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d107      	bne.n	8005d1c <UART_SetConfig+0xe8>
 8005d0c:	4b69      	ldr	r3, [pc, #420]	; (8005eb4 <UART_SetConfig+0x280>)
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d82c      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005d18:	4a6f      	ldr	r2, [pc, #444]	; (8005ed8 <UART_SetConfig+0x2a4>)
 8005d1a:	e7be      	b.n	8005c9a <UART_SetConfig+0x66>
 8005d1c:	4a6f      	ldr	r2, [pc, #444]	; (8005edc <UART_SetConfig+0x2a8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d107      	bne.n	8005d32 <UART_SetConfig+0xfe>
 8005d22:	4b64      	ldr	r3, [pc, #400]	; (8005eb4 <UART_SetConfig+0x280>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2a:	2b28      	cmp	r3, #40	; 0x28
 8005d2c:	d821      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005d2e:	4a6c      	ldr	r2, [pc, #432]	; (8005ee0 <UART_SetConfig+0x2ac>)
 8005d30:	e7b3      	b.n	8005c9a <UART_SetConfig+0x66>
 8005d32:	4a6c      	ldr	r2, [pc, #432]	; (8005ee4 <UART_SetConfig+0x2b0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d107      	bne.n	8005d48 <UART_SetConfig+0x114>
 8005d38:	4b5e      	ldr	r3, [pc, #376]	; (8005eb4 <UART_SetConfig+0x280>)
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d816      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005d44:	4a68      	ldr	r2, [pc, #416]	; (8005ee8 <UART_SetConfig+0x2b4>)
 8005d46:	e7a8      	b.n	8005c9a <UART_SetConfig+0x66>
 8005d48:	4a68      	ldr	r2, [pc, #416]	; (8005eec <UART_SetConfig+0x2b8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d107      	bne.n	8005d5e <UART_SetConfig+0x12a>
 8005d4e:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <UART_SetConfig+0x280>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d80b      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005d5a:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <UART_SetConfig+0x2bc>)
 8005d5c:	e79d      	b.n	8005c9a <UART_SetConfig+0x66>
 8005d5e:	4a53      	ldr	r2, [pc, #332]	; (8005eac <UART_SetConfig+0x278>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d106      	bne.n	8005d72 <UART_SetConfig+0x13e>
 8005d64:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8005d68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d901      	bls.n	8005d76 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d72:	2001      	movs	r0, #1
 8005d74:	e00e      	b.n	8005d94 <UART_SetConfig+0x160>
 8005d76:	495f      	ldr	r1, [pc, #380]	; (8005ef4 <UART_SetConfig+0x2c0>)
 8005d78:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d023      	beq.n	8005dc6 <UART_SetConfig+0x192>
 8005d7e:	d811      	bhi.n	8005da4 <UART_SetConfig+0x170>
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d016      	beq.n	8005db2 <UART_SetConfig+0x17e>
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d019      	beq.n	8005dbc <UART_SetConfig+0x188>
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d1f2      	bne.n	8005d72 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d8c:	f7fe ff30 	bl	8004bf0 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8005d90:	bb10      	cbnz	r0, 8005dd8 <UART_SetConfig+0x1a4>
 8005d92:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8005d94:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005d98:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005d9a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005d9c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8005da0:	b007      	add	sp, #28
 8005da2:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d03e      	beq.n	8005e26 <UART_SetConfig+0x1f2>
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d1e2      	bne.n	8005d72 <UART_SetConfig+0x13e>
 8005dac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005db0:	e012      	b.n	8005dd8 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db2:	4668      	mov	r0, sp
 8005db4:	f7fe ff2e 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005db8:	9801      	ldr	r0, [sp, #4]
        break;
 8005dba:	e7e9      	b.n	8005d90 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dbc:	a803      	add	r0, sp, #12
 8005dbe:	f7fe ffd1 	bl	8004d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dc2:	9804      	ldr	r0, [sp, #16]
        break;
 8005dc4:	e7e4      	b.n	8005d90 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	484b      	ldr	r0, [pc, #300]	; (8005ef8 <UART_SetConfig+0x2c4>)
 8005dca:	f013 0f20 	tst.w	r3, #32
 8005dce:	d003      	beq.n	8005dd8 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005dd6:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dd8:	4b48      	ldr	r3, [pc, #288]	; (8005efc <UART_SetConfig+0x2c8>)
 8005dda:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ddc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dde:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005de2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005de6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dea:	4299      	cmp	r1, r3
 8005dec:	d8c1      	bhi.n	8005d72 <UART_SetConfig+0x13e>
 8005dee:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005df2:	d8be      	bhi.n	8005d72 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df4:	2300      	movs	r3, #0
 8005df6:	4619      	mov	r1, r3
 8005df8:	f7fa fc96 	bl	8000728 <__aeabi_uldivmod>
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	0209      	lsls	r1, r1, #8
 8005e00:	086b      	lsrs	r3, r5, #1
 8005e02:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005e06:	0200      	lsls	r0, r0, #8
 8005e08:	18c0      	adds	r0, r0, r3
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	f141 0100 	adc.w	r1, r1, #0
 8005e12:	f7fa fc89 	bl	8000728 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e16:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <UART_SetConfig+0x2cc>)
 8005e18:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d8a8      	bhi.n	8005d72 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	60d8      	str	r0, [r3, #12]
 8005e24:	e7b5      	b.n	8005d92 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8005e26:	4837      	ldr	r0, [pc, #220]	; (8005f04 <UART_SetConfig+0x2d0>)
 8005e28:	e7d6      	b.n	8005dd8 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d03a      	beq.n	8005ea4 <UART_SetConfig+0x270>
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d00b      	beq.n	8005e4a <UART_SetConfig+0x216>
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d19d      	bne.n	8005d72 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e36:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <UART_SetConfig+0x280>)
 8005e38:	482f      	ldr	r0, [pc, #188]	; (8005ef8 <UART_SetConfig+0x2c4>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f012 0f20 	tst.w	r2, #32
 8005e40:	d003      	beq.n	8005e4a <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005e48:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <UART_SetConfig+0x2c8>)
 8005e4e:	6862      	ldr	r2, [r4, #4]
 8005e50:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e58:	0850      	lsrs	r0, r2, #1
 8005e5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e62:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e66:	f1a0 0210 	sub.w	r2, r0, #16
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d881      	bhi.n	8005d72 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e6e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e72:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8005e76:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e78:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8005e7a:	4318      	orrs	r0, r3
 8005e7c:	60d0      	str	r0, [r2, #12]
 8005e7e:	e788      	b.n	8005d92 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e80:	f7fe f8c2 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d084      	beq.n	8005d92 <UART_SetConfig+0x15e>
 8005e88:	e7df      	b.n	8005e4a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e8a:	f7fe f8cf 	bl	800402c <HAL_RCC_GetPCLK2Freq>
        break;
 8005e8e:	e7f9      	b.n	8005e84 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e90:	4668      	mov	r0, sp
 8005e92:	f7fe febf 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e96:	9801      	ldr	r0, [sp, #4]
        break;
 8005e98:	e7f4      	b.n	8005e84 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e9a:	a803      	add	r0, sp, #12
 8005e9c:	f7fe ff62 	bl	8004d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ea0:	9804      	ldr	r0, [sp, #16]
        break;
 8005ea2:	e7ef      	b.n	8005e84 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8005ea4:	4817      	ldr	r0, [pc, #92]	; (8005f04 <UART_SetConfig+0x2d0>)
 8005ea6:	e7d0      	b.n	8005e4a <UART_SetConfig+0x216>
 8005ea8:	cfff69f3 	.word	0xcfff69f3
 8005eac:	58000c00 	.word	0x58000c00
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	0800b6f3 	.word	0x0800b6f3
 8005ebc:	40004400 	.word	0x40004400
 8005ec0:	0800b71c 	.word	0x0800b71c
 8005ec4:	40004800 	.word	0x40004800
 8005ec8:	0800b71c 	.word	0x0800b71c
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	0800b71c 	.word	0x0800b71c
 8005ed4:	40005000 	.word	0x40005000
 8005ed8:	0800b71c 	.word	0x0800b71c
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	0800b6f3 	.word	0x0800b6f3
 8005ee4:	40007800 	.word	0x40007800
 8005ee8:	0800b71c 	.word	0x0800b71c
 8005eec:	40007c00 	.word	0x40007c00
 8005ef0:	0800b71c 	.word	0x0800b71c
 8005ef4:	0800b722 	.word	0x0800b722
 8005ef8:	03d09000 	.word	0x03d09000
 8005efc:	0800b728 	.word	0x0800b728
 8005f00:	000ffcff 	.word	0x000ffcff
 8005f04:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d817      	bhi.n	8005f3c <UART_SetConfig+0x308>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	f63f af30 	bhi.w	8005d72 <UART_SetConfig+0x13e>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x2e4>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f7f 	.word	0x08005f7f
 8005f1c:	08005f8b 	.word	0x08005f8b
 8005f20:	08005d73 	.word	0x08005d73
 8005f24:	08005d73 	.word	0x08005d73
 8005f28:	08005f91 	.word	0x08005f91
 8005f2c:	08005d73 	.word	0x08005d73
 8005f30:	08005d73 	.word	0x08005d73
 8005f34:	08005d73 	.word	0x08005d73
 8005f38:	08005f9b 	.word	0x08005f9b
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d031      	beq.n	8005fa4 <UART_SetConfig+0x370>
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d031      	beq.n	8005fa8 <UART_SetConfig+0x374>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	f47f af14 	bne.w	8005d72 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4a:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <UART_SetConfig+0x37c>)
 8005f4c:	4819      	ldr	r0, [pc, #100]	; (8005fb4 <UART_SetConfig+0x380>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	f012 0f20 	tst.w	r2, #32
 8005f54:	d003      	beq.n	8005f5e <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f5c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f60:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <UART_SetConfig+0x384>)
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005f68:	fbb0 f0f2 	udiv	r0, r0, r2
 8005f6c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005f70:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f74:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005f78:	f1a0 0210 	sub.w	r2, r0, #16
 8005f7c:	e74e      	b.n	8005e1c <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7fe f843 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f43f af05 	beq.w	8005d92 <UART_SetConfig+0x15e>
 8005f88:	e7e9      	b.n	8005f5e <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f8a:	f7fe f84f 	bl	800402c <HAL_RCC_GetPCLK2Freq>
        break;
 8005f8e:	e7f8      	b.n	8005f82 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f90:	4668      	mov	r0, sp
 8005f92:	f7fe fe3f 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f96:	9801      	ldr	r0, [sp, #4]
        break;
 8005f98:	e7f3      	b.n	8005f82 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f9a:	a803      	add	r0, sp, #12
 8005f9c:	f7fe fee2 	bl	8004d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fa0:	9804      	ldr	r0, [sp, #16]
        break;
 8005fa2:	e7ee      	b.n	8005f82 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8005fa4:	4805      	ldr	r0, [pc, #20]	; (8005fbc <UART_SetConfig+0x388>)
 8005fa6:	e7da      	b.n	8005f5e <UART_SetConfig+0x32a>
    switch (clocksource)
 8005fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005fac:	e7d7      	b.n	8005f5e <UART_SetConfig+0x32a>
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	0800b728 	.word	0x0800b728
 8005fbc:	003d0900 	.word	0x003d0900

08005fc0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fc2:	07da      	lsls	r2, r3, #31
{
 8005fc4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fc6:	d506      	bpl.n	8005fd6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc8:	6801      	ldr	r1, [r0, #0]
 8005fca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005fcc:	684a      	ldr	r2, [r1, #4]
 8005fce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005fd2:	4322      	orrs	r2, r4
 8005fd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fd6:	079c      	lsls	r4, r3, #30
 8005fd8:	d506      	bpl.n	8005fe8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fda:	6801      	ldr	r1, [r0, #0]
 8005fdc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005fde:	684a      	ldr	r2, [r1, #4]
 8005fe0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fe4:	4322      	orrs	r2, r4
 8005fe6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe8:	0759      	lsls	r1, r3, #29
 8005fea:	d506      	bpl.n	8005ffa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fec:	6801      	ldr	r1, [r0, #0]
 8005fee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005ff0:	684a      	ldr	r2, [r1, #4]
 8005ff2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ff6:	4322      	orrs	r2, r4
 8005ff8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ffa:	071a      	lsls	r2, r3, #28
 8005ffc:	d506      	bpl.n	800600c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ffe:	6801      	ldr	r1, [r0, #0]
 8006000:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006002:	684a      	ldr	r2, [r1, #4]
 8006004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006008:	4322      	orrs	r2, r4
 800600a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800600c:	06dc      	lsls	r4, r3, #27
 800600e:	d506      	bpl.n	800601e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006010:	6801      	ldr	r1, [r0, #0]
 8006012:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006014:	688a      	ldr	r2, [r1, #8]
 8006016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800601a:	4322      	orrs	r2, r4
 800601c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800601e:	0699      	lsls	r1, r3, #26
 8006020:	d506      	bpl.n	8006030 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006022:	6801      	ldr	r1, [r0, #0]
 8006024:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006026:	688a      	ldr	r2, [r1, #8]
 8006028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800602c:	4322      	orrs	r2, r4
 800602e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006030:	065a      	lsls	r2, r3, #25
 8006032:	d510      	bpl.n	8006056 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	6801      	ldr	r1, [r0, #0]
 8006036:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006038:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800603a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800603e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006042:	ea42 0204 	orr.w	r2, r2, r4
 8006046:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006048:	d105      	bne.n	8006056 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604a:	684a      	ldr	r2, [r1, #4]
 800604c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800604e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006052:	4322      	orrs	r2, r4
 8006054:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	d506      	bpl.n	8006068 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605a:	6802      	ldr	r2, [r0, #0]
 800605c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800605e:	6853      	ldr	r3, [r2, #4]
 8006060:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006064:	430b      	orrs	r3, r1
 8006066:	6053      	str	r3, [r2, #4]
}
 8006068:	bd10      	pop	{r4, pc}

0800606a <UART_WaitOnFlagUntilTimeout>:
{
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006072:	4604      	mov	r4, r0
 8006074:	460e      	mov	r6, r1
 8006076:	4615      	mov	r5, r2
 8006078:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	69d3      	ldr	r3, [r2, #28]
 800607e:	ea36 0303 	bics.w	r3, r6, r3
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	42ab      	cmp	r3, r5
 800608a:	d001      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800608c:	2000      	movs	r0, #0
 800608e:	e027      	b.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8006090:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006094:	d0f2      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fc f84f 	bl	8002138 <HAL_GetTick>
 800609a:	1bc0      	subs	r0, r0, r7
 800609c:	4540      	cmp	r0, r8
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	d802      	bhi.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x3e>
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	d11d      	bne.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	e840 3200 	strex	r2, r3, [r0]
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d1f7      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	f100 0308 	add.w	r3, r0, #8
 80060bc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	f100 0108 	add.w	r1, r0, #8
 80060c8:	e841 3200 	strex	r2, r3, [r1]
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d1f3      	bne.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80060d0:	2320      	movs	r3, #32
 80060d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 80060da:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80060dc:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80060e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	075a      	lsls	r2, r3, #29
 80060e8:	d5c7      	bpl.n	800607a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ea:	69c3      	ldr	r3, [r0, #28]
 80060ec:	051b      	lsls	r3, r3, #20
 80060ee:	d5c4      	bpl.n	800607a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060f4:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	e840 3200 	strex	r2, r3, [r0]
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1f7      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	f100 0308 	add.w	r3, r0, #8
 800610a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f100 0108 	add.w	r1, r0, #8
 8006116:	e841 3200 	strex	r2, r3, [r1]
 800611a:	2a00      	cmp	r2, #0
 800611c:	d1f3      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 800611e:	2320      	movs	r3, #32
 8006120:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006124:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006128:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800612c:	e7d5      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0x70>

0800612e <HAL_UART_Transmit>:
{
 800612e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006132:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006134:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8006138:	4604      	mov	r4, r0
 800613a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800613c:	2b20      	cmp	r3, #32
{
 800613e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006140:	d150      	bne.n	80061e4 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8006142:	2900      	cmp	r1, #0
 8006144:	d04c      	beq.n	80061e0 <HAL_UART_Transmit+0xb2>
 8006146:	2a00      	cmp	r2, #0
 8006148:	d04a      	beq.n	80061e0 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 800614a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800614e:	2b01      	cmp	r3, #1
 8006150:	d048      	beq.n	80061e4 <HAL_UART_Transmit+0xb6>
 8006152:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8006156:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800615a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006160:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8006164:	f7fb ffe8 	bl	8002138 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006168:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800616a:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800616c:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006174:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	d103      	bne.n	8006182 <HAL_UART_Transmit+0x54>
 800617a:	6922      	ldr	r2, [r4, #16]
 800617c:	b90a      	cbnz	r2, 8006182 <HAL_UART_Transmit+0x54>
 800617e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006180:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8006182:	2200      	movs	r2, #0
 8006184:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8006188:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800618c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8006190:	b292      	uxth	r2, r2
 8006192:	b942      	cbnz	r2, 80061a6 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	4620      	mov	r0, r4
 8006198:	f7ff ff67 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 800619c:	b958      	cbnz	r0, 80061b6 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800619e:	2320      	movs	r3, #32
 80061a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80061a4:	e008      	b.n	80061b8 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	4620      	mov	r0, r4
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	f7ff ff5c 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	b118      	cbz	r0, 80061be <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 80061b6:	2003      	movs	r0, #3
}
 80061b8:	b004      	add	sp, #16
 80061ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061be:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80061c0:	b95e      	cbnz	r6, 80061da <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80061c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ca:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80061cc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 80061d0:	3a01      	subs	r2, #1
 80061d2:	b292      	uxth	r2, r2
 80061d4:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 80061d8:	e7d6      	b.n	8006188 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061da:	f816 2b01 	ldrb.w	r2, [r6], #1
 80061de:	e7f4      	b.n	80061ca <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 80061e0:	2001      	movs	r0, #1
 80061e2:	e7e9      	b.n	80061b8 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80061e4:	2002      	movs	r0, #2
 80061e6:	e7e7      	b.n	80061b8 <HAL_UART_Transmit+0x8a>

080061e8 <UART_CheckIdleState>:
{
 80061e8:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ea:	2500      	movs	r5, #0
{
 80061ec:	4604      	mov	r4, r0
 80061ee:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80061f4:	f7fb ffa0 	bl	8002138 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f8:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80061fa:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	0711      	lsls	r1, r2, #28
 8006200:	d417      	bmi.n	8006232 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	0752      	lsls	r2, r2, #29
 8006208:	d509      	bpl.n	800621e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800620e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006212:	4620      	mov	r0, r4
 8006214:	9200      	str	r2, [sp, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	f7ff ff27 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 800621c:	b9b0      	cbnz	r0, 800624c <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800621e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006222:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006226:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800622a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8006230:	e00d      	b.n	800624e <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006232:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006236:	9003      	str	r0, [sp, #12]
 8006238:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800623c:	4620      	mov	r0, r4
 800623e:	9200      	str	r2, [sp, #0]
 8006240:	462a      	mov	r2, r5
 8006242:	f7ff ff12 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	2800      	cmp	r0, #0
 800624a:	d0da      	beq.n	8006202 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800624c:	2003      	movs	r0, #3
}
 800624e:	b005      	add	sp, #20
 8006250:	bd30      	pop	{r4, r5, pc}

08006252 <HAL_UART_Init>:
{
 8006252:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006254:	4604      	mov	r4, r0
 8006256:	b350      	cbz	r0, 80062ae <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006258:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800625c:	b91b      	cbnz	r3, 8006266 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800625e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006262:	f7fa fe57 	bl	8000f14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006266:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006268:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800626a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006278:	f7ff fcdc 	bl	8005c34 <UART_SetConfig>
 800627c:	2801      	cmp	r0, #1
 800627e:	d016      	beq.n	80062ae <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006282:	b113      	cbz	r3, 800628a <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8006284:	4620      	mov	r0, r4
 8006286:	f7ff fe9b 	bl	8005fc0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800628c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006294:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
}
 80062a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80062a8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80062aa:	f7ff bf9d 	b.w	80061e8 <UART_CheckIdleState>
}
 80062ae:	2001      	movs	r0, #1
 80062b0:	bd10      	pop	{r4, pc}
	...

080062b4 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80062b4:	6883      	ldr	r3, [r0, #8]
{
 80062b6:	b530      	push	{r4, r5, lr}
  UART_MASK_COMPUTATION(huart);
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->pRxBuffPtr  = pData;
 80062bc:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 80062be:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 80062c2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80062c6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80062ca:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80062cc:	d139      	bne.n	8006342 <UART_Start_Receive_IT+0x8e>
 80062ce:	6903      	ldr	r3, [r0, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d134      	bne.n	800633e <UART_Start_Receive_IT+0x8a>
 80062d4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80062d8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	2300      	movs	r3, #0
 80062de:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062e2:	2322      	movs	r3, #34	; 0x22
 80062e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e8:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	f101 0308 	add.w	r3, r1, #8
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	3108      	adds	r1, #8
 80062f8:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 80062fc:	6803      	ldr	r3, [r0, #0]
 80062fe:	2c00      	cmp	r4, #0
 8006300:	d1f2      	bne.n	80062e8 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006302:	6e45      	ldr	r5, [r0, #100]	; 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006306:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630a:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800630c:	d13a      	bne.n	8006384 <UART_Start_Receive_IT+0xd0>
 800630e:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8006312:	4295      	cmp	r5, r2
 8006314:	d836      	bhi.n	8006384 <UART_Start_Receive_IT+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006316:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800631a:	d123      	bne.n	8006364 <UART_Start_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800631c:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <UART_Start_Receive_IT+0x114>)
 800631e:	4c2b      	ldr	r4, [pc, #172]	; (80063cc <UART_Start_Receive_IT+0x118>)
 8006320:	2900      	cmp	r1, #0
 8006322:	bf18      	it	ne
 8006324:	4622      	movne	r2, r4
 8006326:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006328:	2200      	movs	r2, #0
 800632a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800632e:	b1d9      	cbz	r1, 8006368 <UART_Start_Receive_IT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 800633c:	e7f7      	b.n	800632e <UART_Start_Receive_IT+0x7a>
  UART_MASK_COMPUTATION(huart);
 800633e:	23ff      	movs	r3, #255	; 0xff
 8006340:	e7ca      	b.n	80062d8 <UART_Start_Receive_IT+0x24>
 8006342:	b923      	cbnz	r3, 800634e <UART_Start_Receive_IT+0x9a>
 8006344:	6903      	ldr	r3, [r0, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f9      	beq.n	800633e <UART_Start_Receive_IT+0x8a>
 800634a:	237f      	movs	r3, #127	; 0x7f
 800634c:	e7c4      	b.n	80062d8 <UART_Start_Receive_IT+0x24>
 800634e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006352:	d104      	bne.n	800635e <UART_Start_Receive_IT+0xaa>
 8006354:	6903      	ldr	r3, [r0, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f7      	beq.n	800634a <UART_Start_Receive_IT+0x96>
 800635a:	233f      	movs	r3, #63	; 0x3f
 800635c:	e7bc      	b.n	80062d8 <UART_Start_Receive_IT+0x24>
 800635e:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8006362:	e7bb      	b.n	80062dc <UART_Start_Receive_IT+0x28>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006364:	4a19      	ldr	r2, [pc, #100]	; (80063cc <UART_Start_Receive_IT+0x118>)
 8006366:	e7de      	b.n	8006326 <UART_Start_Receive_IT+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f103 0208 	add.w	r2, r3, #8
 800636c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	f103 0008 	add.w	r0, r3, #8
 8006378:	e840 2100 	strex	r1, r2, [r0]
 800637c:	2900      	cmp	r1, #0
 800637e:	d1f3      	bne.n	8006368 <UART_Start_Receive_IT+0xb4>
}
 8006380:	2000      	movs	r0, #0
 8006382:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006388:	d112      	bne.n	80063b0 <UART_Start_Receive_IT+0xfc>
      huart->RxISR = UART_RxISR_8BIT;
 800638a:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <UART_Start_Receive_IT+0x11c>)
 800638c:	4c11      	ldr	r4, [pc, #68]	; (80063d4 <UART_Start_Receive_IT+0x120>)
 800638e:	2900      	cmp	r1, #0
 8006390:	bf18      	it	ne
 8006392:	4622      	movne	r2, r4
 8006394:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006396:	2200      	movs	r2, #0
 8006398:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800639c:	b151      	cbz	r1, 80063b4 <UART_Start_Receive_IT+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80063a2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	e843 2100 	strex	r1, r2, [r3]
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d1f7      	bne.n	800639e <UART_Start_Receive_IT+0xea>
 80063ae:	e7e7      	b.n	8006380 <UART_Start_Receive_IT+0xcc>
      huart->RxISR = UART_RxISR_8BIT;
 80063b0:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <UART_Start_Receive_IT+0x120>)
 80063b2:	e7ef      	b.n	8006394 <UART_Start_Receive_IT+0xe0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063b8:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	e843 2100 	strex	r1, r2, [r3]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d1f7      	bne.n	80063b4 <UART_Start_Receive_IT+0x100>
 80063c4:	e7dc      	b.n	8006380 <UART_Start_Receive_IT+0xcc>
 80063c6:	bf00      	nop
 80063c8:	08005a15 	.word	0x08005a15
 80063cc:	08005899 	.word	0x08005899
 80063d0:	080057fb 	.word	0x080057fb
 80063d4:	08005759 	.word	0x08005759

080063d8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80063dc:	2b20      	cmp	r3, #32
{
 80063de:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80063e0:	d11f      	bne.n	8006422 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80063e2:	b1d9      	cbz	r1, 800641c <HAL_UART_Receive_IT+0x44>
 80063e4:	b1d2      	cbz	r2, 800641c <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 80063e6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d019      	beq.n	8006422 <HAL_UART_Receive_IT+0x4a>
 80063ee:	2301      	movs	r3, #1
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063f0:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 80063f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	2300      	movs	r3, #0
 80063f8:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_UART_Receive_IT+0x50>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d00a      	beq.n	8006416 <HAL_UART_Receive_IT+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	d507      	bpl.n	8006416 <HAL_UART_Receive_IT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800640a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	e844 3500 	strex	r5, r3, [r4]
 8006412:	2d00      	cmp	r5, #0
 8006414:	d1f7      	bne.n	8006406 <HAL_UART_Receive_IT+0x2e>
}
 8006416:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006418:	f7ff bf4c 	b.w	80062b4 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800641c:	2001      	movs	r0, #1
}
 800641e:	bc30      	pop	{r4, r5}
 8006420:	4770      	bx	lr
    return HAL_BUSY;
 8006422:	2002      	movs	r0, #2
 8006424:	e7fb      	b.n	800641e <HAL_UART_Receive_IT+0x46>
 8006426:	bf00      	nop
 8006428:	58000c00 	.word	0x58000c00

0800642c <UART_Start_Receive_DMA>:
{
 800642c:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800642e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	2500      	movs	r5, #0
{
 8006432:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8006434:	6581      	str	r1, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  huart->RxXferSize = Size;
 800643a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800643e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8006442:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006444:	b1c0      	cbz	r0, 8006478 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006446:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006448:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800644a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800644c:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <UART_Start_Receive_DMA+0xa0>)
 800644e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <UART_Start_Receive_DMA+0xa4>)
    huart->hdmarx->XferAbortCallback = NULL;
 8006452:	e9c0 3513 	strd	r3, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006456:	4613      	mov	r3, r2
 8006458:	460a      	mov	r2, r1
 800645a:	f106 0124 	add.w	r1, r6, #36	; 0x24
 800645e:	f7fc fa2d 	bl	80028bc <HAL_DMA_Start_IT>
 8006462:	b148      	cbz	r0, 8006478 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006464:	2310      	movs	r3, #16
      return HAL_ERROR;
 8006466:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8006468:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800646c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->RxState = HAL_UART_STATE_READY;
 8006470:	2320      	movs	r3, #32
 8006472:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8006476:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(huart);
 8006478:	2300      	movs	r3, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 800647a:	6922      	ldr	r2, [r4, #16]
  __HAL_UNLOCK(huart);
 800647c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	b13a      	cbz	r2, 8006494 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	e843 2100 	strex	r1, r2, [r3]
 8006490:	2900      	cmp	r1, #0
 8006492:	d1f7      	bne.n	8006484 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	f103 0208 	add.w	r2, r3, #8
 8006498:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	f103 0008 	add.w	r0, r3, #8
 80064a4:	e840 2100 	strex	r1, r2, [r0]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d1f3      	bne.n	8006494 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f103 0208 	add.w	r2, r3, #8
 80064b0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	f103 0108 	add.w	r1, r3, #8
 80064bc:	e841 2000 	strex	r0, r2, [r1]
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d1f3      	bne.n	80064ac <UART_Start_Receive_DMA+0x80>
 80064c4:	e7d7      	b.n	8006476 <UART_Start_Receive_DMA+0x4a>
 80064c6:	bf00      	nop
 80064c8:	08005ba9 	.word	0x08005ba9
 80064cc:	08005b8d 	.word	0x08005b8d
 80064d0:	080053bf 	.word	0x080053bf

080064d4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064d8:	2b20      	cmp	r3, #32
{
 80064da:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80064dc:	d11f      	bne.n	800651e <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80064de:	b1d9      	cbz	r1, 8006518 <HAL_UART_Receive_DMA+0x44>
 80064e0:	b1d2      	cbz	r2, 8006518 <HAL_UART_Receive_DMA+0x44>
    __HAL_LOCK(huart);
 80064e2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d019      	beq.n	800651e <HAL_UART_Receive_DMA+0x4a>
 80064ea:	2301      	movs	r3, #1
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064ec:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 80064ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	2300      	movs	r3, #0
 80064f4:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_UART_Receive_DMA+0x50>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d00a      	beq.n	8006512 <HAL_UART_Receive_DMA+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	d507      	bpl.n	8006512 <HAL_UART_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	e844 3500 	strex	r5, r3, [r4]
 800650e:	2d00      	cmp	r5, #0
 8006510:	d1f7      	bne.n	8006502 <HAL_UART_Receive_DMA+0x2e>
}
 8006512:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006514:	f7ff bf8a 	b.w	800642c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8006518:	2001      	movs	r0, #1
}
 800651a:	bc30      	pop	{r4, r5}
 800651c:	4770      	bx	lr
    return HAL_BUSY;
 800651e:	2002      	movs	r0, #2
 8006520:	e7fb      	b.n	800651a <HAL_UART_Receive_DMA+0x46>
 8006522:	bf00      	nop
 8006524:	58000c00 	.word	0x58000c00

08006528 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006528:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800652a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800652c:	b91b      	cbnz	r3, 8006536 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800652e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006532:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006534:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006536:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006538:	4d0a      	ldr	r5, [pc, #40]	; (8006564 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800653a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800653c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800653e:	4c0a      	ldr	r4, [pc, #40]	; (8006568 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006540:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006544:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006546:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006548:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006550:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006554:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006556:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	fbb3 f3f2 	udiv	r3, r3, r2
 800655e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8006562:	e7e7      	b.n	8006534 <UARTEx_SetNbDataToProcess+0xc>
 8006564:	0800b748 	.word	0x0800b748
 8006568:	0800b740 	.word	0x0800b740

0800656c <HAL_UARTEx_WakeupCallback>:
}
 800656c:	4770      	bx	lr

0800656e <HAL_UARTEx_RxFifoFullCallback>:
 800656e:	4770      	bx	lr

08006570 <HAL_UARTEx_TxFifoEmptyCallback>:
 8006570:	4770      	bx	lr

08006572 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006572:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006576:	2b01      	cmp	r3, #1
 8006578:	d014      	beq.n	80065a4 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800657a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	2324      	movs	r3, #36	; 0x24
 800657e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006582:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006584:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006586:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006590:	2300      	movs	r3, #0
 8006592:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006594:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006596:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8006598:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800659c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 80065a0:	4618      	mov	r0, r3
 80065a2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80065a4:	2002      	movs	r0, #2
}
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80065a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80065aa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80065ae:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d01b      	beq.n	80065ec <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80065b4:	2301      	movs	r3, #1
 80065b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80065ba:	2324      	movs	r3, #36	; 0x24
 80065bc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c0:	6803      	ldr	r3, [r0, #0]
 80065c2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f022 0201 	bic.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80065d2:	4311      	orrs	r1, r2
 80065d4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80065d6:	f7ff ffa7 	bl	8006528 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065da:	6803      	ldr	r3, [r0, #0]
 80065dc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80065de:	2320      	movs	r3, #32
 80065e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80065e4:	2000      	movs	r0, #0
 80065e6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80065ec:	2002      	movs	r0, #2
 80065ee:	e7fc      	b.n	80065ea <HAL_UARTEx_SetTxFifoThreshold+0x42>

080065f0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80065f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80065f2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80065f6:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d01b      	beq.n	8006634 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80065fc:	2301      	movs	r3, #1
 80065fe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006602:	2324      	movs	r3, #36	; 0x24
 8006604:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006608:	6803      	ldr	r3, [r0, #0]
 800660a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800661a:	4311      	orrs	r1, r2
 800661c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800661e:	f7ff ff83 	bl	8006528 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006622:	6803      	ldr	r3, [r0, #0]
 8006624:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006626:	2320      	movs	r3, #32
 8006628:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800662c:	2000      	movs	r0, #0
 800662e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006632:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006634:	2002      	movs	r0, #2
 8006636:	e7fc      	b.n	8006632 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08006638 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006638:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800663a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800663e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006640:	f001 f88a 	bl	8007758 <xTaskGetSchedulerState>
 8006644:	2801      	cmp	r0, #1
 8006646:	d003      	beq.n	8006650 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800664c:	f001 bb92 	b.w	8007d74 <xPortSysTickHandler>
}
 8006650:	bd08      	pop	{r3, pc}
	...

08006654 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006654:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006658:	b92b      	cbnz	r3, 8006666 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <osKernelInitialize+0x20>)
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	b928      	cbnz	r0, 800666c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006664:	4770      	bx	lr
    stat = osErrorISR;
 8006666:	f06f 0005 	mvn.w	r0, #5
 800666a:	4770      	bx	lr
    } else {
      stat = osError;
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	24003018 	.word	0x24003018

08006678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006678:	b510      	push	{r4, lr}
 800667a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800667e:	b95c      	cbnz	r4, 8006698 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <osKernelStart+0x2c>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	2a01      	cmp	r2, #1
 8006686:	d10a      	bne.n	800669e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006688:	4a07      	ldr	r2, [pc, #28]	; (80066a8 <osKernelStart+0x30>)
 800668a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800668c:	2202      	movs	r2, #2
 800668e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006690:	f000 fdf0 	bl	8007274 <vTaskStartScheduler>
      stat = osOK;
 8006694:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006696:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006698:	f06f 0005 	mvn.w	r0, #5
 800669c:	e7fb      	b.n	8006696 <osKernelStart+0x1e>
      stat = osError;
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80066a2:	e7f8      	b.n	8006696 <osKernelStart+0x1e>
 80066a4:	24003018 	.word	0x24003018
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ae:	4614      	mov	r4, r2
 80066b0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066b2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066b4:	460b      	mov	r3, r1
  hTask = NULL;
 80066b6:	9205      	str	r2, [sp, #20]
 80066b8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80066bc:	b9d2      	cbnz	r2, 80066f4 <osThreadNew+0x48>
 80066be:	b1c8      	cbz	r0, 80066f4 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	d02f      	beq.n	8006724 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80066c4:	69a5      	ldr	r5, [r4, #24]
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	bf08      	it	eq
 80066ca:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066cc:	1e69      	subs	r1, r5, #1
 80066ce:	46ac      	mov	ip, r5
 80066d0:	2937      	cmp	r1, #55	; 0x37
 80066d2:	d82b      	bhi.n	800672c <osThreadNew+0x80>
 80066d4:	6861      	ldr	r1, [r4, #4]
 80066d6:	07c9      	lsls	r1, r1, #31
 80066d8:	d428      	bmi.n	800672c <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80066da:	6966      	ldr	r6, [r4, #20]
 80066dc:	b16e      	cbz	r6, 80066fa <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066de:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80066e0:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066e2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80066e6:	b157      	cbz	r7, 80066fe <osThreadNew+0x52>
 80066e8:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
 80066ec:	d902      	bls.n	80066f4 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066ee:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066f0:	b104      	cbz	r4, 80066f4 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066f2:	b9ee      	cbnz	r6, 8006730 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066f4:	9805      	ldr	r0, [sp, #20]
}
 80066f6:	b007      	add	sp, #28
 80066f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80066fa:	2280      	movs	r2, #128	; 0x80
 80066fc:	e7f0      	b.n	80066e0 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066fe:	f1be 0f00 	cmp.w	lr, #0
 8006702:	d1f7      	bne.n	80066f4 <osThreadNew+0x48>
      if (mem == 0) {
 8006704:	6924      	ldr	r4, [r4, #16]
 8006706:	2c00      	cmp	r4, #0
 8006708:	d1f4      	bne.n	80066f4 <osThreadNew+0x48>
 800670a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800670c:	a905      	add	r1, sp, #20
 800670e:	b292      	uxth	r2, r2
 8006710:	e9cd c100 	strd	ip, r1, [sp]
 8006714:	4621      	mov	r1, r4
 8006716:	f000 fd7f 	bl	8007218 <xTaskCreate>
 800671a:	2801      	cmp	r0, #1
            hTask = NULL;
 800671c:	bf1c      	itt	ne
 800671e:	2300      	movne	r3, #0
 8006720:	9305      	strne	r3, [sp, #20]
 8006722:	e7e7      	b.n	80066f4 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8006724:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006728:	2280      	movs	r2, #128	; 0x80
 800672a:	e7ef      	b.n	800670c <osThreadNew+0x60>
        return (NULL);
 800672c:	4610      	mov	r0, r2
 800672e:	e7e2      	b.n	80066f6 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006730:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006734:	9500      	str	r5, [sp, #0]
 8006736:	f000 fd37 	bl	80071a8 <xTaskCreateStatic>
 800673a:	9005      	str	r0, [sp, #20]
 800673c:	e7da      	b.n	80066f4 <osThreadNew+0x48>

0800673e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800673e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006740:	4605      	mov	r5, r0
 8006742:	460e      	mov	r6, r1
 8006744:	4614      	mov	r4, r2
 8006746:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800674a:	b11f      	cbz	r7, 8006754 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800674c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800674e:	4628      	mov	r0, r5
 8006750:	b003      	add	sp, #12
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006754:	2800      	cmp	r0, #0
 8006756:	d0f9      	beq.n	800674c <osMessageQueueNew+0xe>
 8006758:	2900      	cmp	r1, #0
 800675a:	d0f7      	beq.n	800674c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800675c:	b1da      	cbz	r2, 8006796 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800675e:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006762:	b183      	cbz	r3, 8006786 <osMessageQueueNew+0x48>
 8006764:	2a4f      	cmp	r2, #79	; 0x4f
 8006766:	d9f1      	bls.n	800674c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006768:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800676a:	2a00      	cmp	r2, #0
 800676c:	d0ee      	beq.n	800674c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800676e:	434d      	muls	r5, r1
 8006770:	6966      	ldr	r6, [r4, #20]
 8006772:	42ae      	cmp	r6, r5
 8006774:	d3ea      	bcc.n	800674c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006776:	9700      	str	r7, [sp, #0]
 8006778:	f000 f941 	bl	80069fe <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800677c:	4605      	mov	r5, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	d0e4      	beq.n	800674c <osMessageQueueNew+0xe>
        name = attr->name;
 8006782:	6824      	ldr	r4, [r4, #0]
 8006784:	e011      	b.n	80067aa <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006786:	2a00      	cmp	r2, #0
 8006788:	d1e0      	bne.n	800674c <osMessageQueueNew+0xe>
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1dd      	bne.n	800674c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006790:	6963      	ldr	r3, [r4, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1da      	bne.n	800674c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8006796:	4628      	mov	r0, r5
 8006798:	2200      	movs	r2, #0
 800679a:	4631      	mov	r1, r6
 800679c:	f000 f97d 	bl	8006a9a <xQueueGenericCreate>
    if (hQueue != NULL) {
 80067a0:	4605      	mov	r5, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d0d2      	beq.n	800674c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d1eb      	bne.n	8006782 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 fb4f 	bl	8006e50 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80067b2:	e7cc      	b.n	800674e <osMessageQueueNew+0x10>

080067b4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067b4:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <vApplicationGetIdleTaskMemory+0x10>)
 80067b6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <vApplicationGetIdleTaskMemory+0x14>)
 80067ba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	6013      	str	r3, [r2, #0]
}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	24002f5c 	.word	0x24002f5c
 80067c8:	24002d5c 	.word	0x24002d5c

080067cc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067cc:	4b03      	ldr	r3, [pc, #12]	; (80067dc <vApplicationGetTimerTaskMemory+0x10>)
 80067ce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <vApplicationGetTimerTaskMemory+0x14>)
 80067d2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d8:	6013      	str	r3, [r2, #0]
}
 80067da:	4770      	bx	lr
 80067dc:	2400341c 	.word	0x2400341c
 80067e0:	2400301c 	.word	0x2400301c

080067e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ee:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067f8:	4770      	bx	lr

080067fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067fe:	4770      	bx	lr

08006800 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006800:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006802:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006804:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006806:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800680c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800680e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006810:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006812:	3301      	adds	r3, #1
 8006814:	6003      	str	r3, [r0, #0]
}
 8006816:	4770      	bx	lr

08006818 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006818:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800681a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800681c:	1c63      	adds	r3, r4, #1
 800681e:	d10a      	bne.n	8006836 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006820:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006826:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006828:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800682a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800682c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800682e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006830:	3301      	adds	r3, #1
 8006832:	6003      	str	r3, [r0, #0]
}
 8006834:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006836:	f100 0208 	add.w	r2, r0, #8
 800683a:	4613      	mov	r3, r2
 800683c:	6852      	ldr	r2, [r2, #4]
 800683e:	6815      	ldr	r5, [r2, #0]
 8006840:	42a5      	cmp	r5, r4
 8006842:	d9fa      	bls.n	800683a <vListInsert+0x22>
 8006844:	e7ed      	b.n	8006822 <vListInsert+0xa>

08006846 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006846:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006848:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800684c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800684e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006850:	6859      	ldr	r1, [r3, #4]
 8006852:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006854:	bf08      	it	eq
 8006856:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006858:	2200      	movs	r2, #0
 800685a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	3a01      	subs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006862:	6818      	ldr	r0, [r3, #0]
}
 8006864:	4770      	bx	lr

08006866 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800686a:	f001 fa1b 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800686e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006870:	f001 fa38 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
}
 8006874:	fab4 f084 	clz	r0, r4
 8006878:	0940      	lsrs	r0, r0, #5
 800687a:	bd10      	pop	{r4, pc}

0800687c <prvCopyDataToQueue>:
{
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006880:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8006882:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006884:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006886:	b952      	cbnz	r2, 800689e <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006888:	6807      	ldr	r7, [r0, #0]
 800688a:	bb47      	cbnz	r7, 80068de <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688c:	6880      	ldr	r0, [r0, #8]
 800688e:	f000 ff73 	bl	8007778 <xTaskPriorityDisinherit>
 8006892:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006894:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006896:	3601      	adds	r6, #1
}
 8006898:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800689a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800689c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800689e:	b965      	cbnz	r5, 80068ba <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a0:	6840      	ldr	r0, [r0, #4]
 80068a2:	f001 fd60 	bl	8008366 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068a6:	6863      	ldr	r3, [r4, #4]
 80068a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068aa:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ac:	68a2      	ldr	r2, [r4, #8]
 80068ae:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b2:	d3f0      	bcc.n	8006896 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	e7ed      	b.n	8006896 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068ba:	68c0      	ldr	r0, [r0, #12]
 80068bc:	f001 fd53 	bl	8008366 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	4251      	negs	r1, r2
 80068c6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068cc:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068ce:	bf3e      	ittt	cc
 80068d0:	68a3      	ldrcc	r3, [r4, #8]
 80068d2:	185b      	addcc	r3, r3, r1
 80068d4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80068d6:	2d02      	cmp	r5, #2
 80068d8:	d101      	bne.n	80068de <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068da:	b116      	cbz	r6, 80068e2 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80068dc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80068de:	2500      	movs	r5, #0
 80068e0:	e7d9      	b.n	8006896 <prvCopyDataToQueue+0x1a>
 80068e2:	4635      	mov	r5, r6
 80068e4:	e7d7      	b.n	8006896 <prvCopyDataToQueue+0x1a>

080068e6 <prvCopyDataFromQueue>:
{
 80068e6:	4603      	mov	r3, r0
 80068e8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80068ec:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ee:	b162      	cbz	r2, 800690a <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f0:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f2:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f4:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f6:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f8:	60dc      	str	r4, [r3, #12]
}
 80068fa:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068fe:	bf24      	itt	cs
 8006900:	6819      	ldrcs	r1, [r3, #0]
 8006902:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006904:	68d9      	ldr	r1, [r3, #12]
 8006906:	f001 bd2e 	b.w	8008366 <memcpy>
}
 800690a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690e:	4770      	bx	lr

08006910 <prvUnlockQueue>:
{
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006914:	f001 f9c6 	bl	8007ca4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006918:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800691c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006920:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006922:	2d00      	cmp	r5, #0
 8006924:	dc14      	bgt.n	8006950 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8006926:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006928:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800692c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006930:	f001 f9d8 	bl	8007ce4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006934:	f001 f9b6 	bl	8007ca4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006938:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800693c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800693e:	2d00      	cmp	r5, #0
 8006940:	dc12      	bgt.n	8006968 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8006942:	23ff      	movs	r3, #255	; 0xff
 8006944:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8006948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800694c:	f001 b9ca 	b.w	8007ce4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0e7      	beq.n	8006926 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006956:	4630      	mov	r0, r6
 8006958:	f000 fe6c 	bl	8007634 <xTaskRemoveFromEventList>
 800695c:	b108      	cbz	r0, 8006962 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800695e:	f000 fef5 	bl	800774c <vTaskMissedYield>
			--cTxLock;
 8006962:	3d01      	subs	r5, #1
 8006964:	b26d      	sxtb	r5, r5
 8006966:	e7dc      	b.n	8006922 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0e9      	beq.n	8006942 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800696e:	4630      	mov	r0, r6
 8006970:	f000 fe60 	bl	8007634 <xTaskRemoveFromEventList>
 8006974:	b108      	cbz	r0, 800697a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006976:	f000 fee9 	bl	800774c <vTaskMissedYield>
				--cRxLock;
 800697a:	3d01      	subs	r5, #1
 800697c:	b26d      	sxtb	r5, r5
 800697e:	e7de      	b.n	800693e <prvUnlockQueue+0x2e>

08006980 <xQueueGenericReset>:
{
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006984:	4604      	mov	r4, r0
 8006986:	b940      	cbnz	r0, 800699a <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	e7fe      	b.n	8006998 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800699a:	f001 f983 	bl	8007ca4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069a4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a6:	434b      	muls	r3, r1
 80069a8:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ae:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069b0:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069b4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069b6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80069b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80069c0:	b9a5      	cbnz	r5, 80069ec <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	b173      	cbz	r3, 80069e4 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c6:	f104 0010 	add.w	r0, r4, #16
 80069ca:	f000 fe33 	bl	8007634 <xTaskRemoveFromEventList>
 80069ce:	b148      	cbz	r0, 80069e4 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80069d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80069e4:	f001 f97e 	bl	8007ce4 <vPortExitCritical>
}
 80069e8:	2001      	movs	r0, #1
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069ec:	f104 0010 	add.w	r0, r4, #16
 80069f0:	f7ff fef8 	bl	80067e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80069f8:	f7ff fef4 	bl	80067e4 <vListInitialise>
 80069fc:	e7f2      	b.n	80069e4 <xQueueGenericReset+0x64>

080069fe <xQueueGenericCreateStatic>:
	{
 80069fe:	b513      	push	{r0, r1, r4, lr}
 8006a00:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a02:	b940      	cbnz	r0, 8006a16 <xQueueGenericCreateStatic+0x18>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8006a16:	b943      	cbnz	r3, 8006a2a <xQueueGenericCreateStatic+0x2c>
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	e7fe      	b.n	8006a28 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a2a:	b14a      	cbz	r2, 8006a40 <xQueueGenericCreateStatic+0x42>
 8006a2c:	b991      	cbnz	r1, 8006a54 <xQueueGenericCreateStatic+0x56>
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	e7fe      	b.n	8006a3e <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a40:	b141      	cbz	r1, 8006a54 <xQueueGenericCreateStatic+0x56>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	e7fe      	b.n	8006a52 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a54:	2350      	movs	r3, #80	; 0x50
 8006a56:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	2b50      	cmp	r3, #80	; 0x50
 8006a5c:	d008      	beq.n	8006a70 <xQueueGenericCreateStatic+0x72>
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	e7fe      	b.n	8006a6e <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a70:	2900      	cmp	r1, #0
 8006a72:	bf08      	it	eq
 8006a74:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a76:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	6022      	str	r2, [r4, #0]
 8006a7c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8006a80:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a84:	4619      	mov	r1, r3
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff ff7a 	bl	8006980 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006a8c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8006a90:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006a92:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8006a96:	b002      	add	sp, #8
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <xQueueGenericCreate>:
	{
 8006a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	b940      	cbnz	r0, 8006ab6 <xQueueGenericCreate+0x1c>
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	e7fe      	b.n	8006ab4 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ab8:	3050      	adds	r0, #80	; 0x50
 8006aba:	f001 fa5b 	bl	8007f74 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006abe:	4604      	mov	r4, r0
 8006ac0:	b170      	cbz	r0, 8006ae0 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ac8:	b165      	cbz	r5, 8006ae4 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aca:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad4:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ad8:	f7ff ff52 	bl	8006980 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006adc:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	e7f2      	b.n	8006ace <xQueueGenericCreate+0x34>

08006ae8 <xQueueGenericSend>:
{
 8006ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006aec:	b085      	sub	sp, #20
 8006aee:	4688      	mov	r8, r1
 8006af0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006af2:	4604      	mov	r4, r0
{
 8006af4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006af6:	b940      	cbnz	r0, 8006b0a <xQueueGenericSend+0x22>
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0a:	b951      	cbnz	r1, 8006b22 <xQueueGenericSend+0x3a>
 8006b0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b0e:	b143      	cbz	r3, 8006b22 <xQueueGenericSend+0x3a>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	e7fe      	b.n	8006b20 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b22:	2f02      	cmp	r7, #2
 8006b24:	d10b      	bne.n	8006b3e <xQueueGenericSend+0x56>
 8006b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d008      	beq.n	8006b3e <xQueueGenericSend+0x56>
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b3e:	f000 fe0b 	bl	8007758 <xTaskGetSchedulerState>
 8006b42:	4606      	mov	r6, r0
 8006b44:	b950      	cbnz	r0, 8006b5c <xQueueGenericSend+0x74>
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	b14b      	cbz	r3, 8006b5e <xQueueGenericSend+0x76>
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	e7fe      	b.n	8006b5a <xQueueGenericSend+0x72>
 8006b5c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006b5e:	f04f 0900 	mov.w	r9, #0
 8006b62:	e037      	b.n	8006bd4 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b64:	9d01      	ldr	r5, [sp, #4]
 8006b66:	b91d      	cbnz	r5, 8006b70 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8006b68:	f001 f8bc 	bl	8007ce4 <vPortExitCritical>
			return errQUEUE_FULL;
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e052      	b.n	8006c16 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8006b70:	b916      	cbnz	r6, 8006b78 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b72:	a802      	add	r0, sp, #8
 8006b74:	f000 fda2 	bl	80076bc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006b78:	f001 f8b4 	bl	8007ce4 <vPortExitCritical>
		vTaskSuspendAll();
 8006b7c:	f000 fbca 	bl	8007314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b80:	f001 f890 	bl	8007ca4 <vPortEnterCritical>
 8006b84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006b88:	2bff      	cmp	r3, #255	; 0xff
 8006b8a:	d101      	bne.n	8006b90 <xQueueGenericSend+0xa8>
 8006b8c:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006b90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006b94:	2bff      	cmp	r3, #255	; 0xff
 8006b96:	d101      	bne.n	8006b9c <xQueueGenericSend+0xb4>
 8006b98:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8006b9c:	f001 f8a2 	bl	8007ce4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ba0:	a901      	add	r1, sp, #4
 8006ba2:	a802      	add	r0, sp, #8
 8006ba4:	f000 fd96 	bl	80076d4 <xTaskCheckForTimeOut>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d14a      	bne.n	8006c42 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bac:	f001 f87a 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d131      	bne.n	8006c1c <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006bb8:	f001 f894 	bl	8007ce4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	f104 0010 	add.w	r0, r4, #16
 8006bc2:	f000 fcff 	bl	80075c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff fea2 	bl	8006910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bcc:	f000 fc46 	bl	800745c <xTaskResumeAll>
 8006bd0:	b360      	cbz	r0, 8006c2c <xQueueGenericSend+0x144>
 8006bd2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006bd4:	f001 f866 	bl	8007ca4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d301      	bcc.n	8006be4 <xQueueGenericSend+0xfc>
 8006be0:	2f02      	cmp	r7, #2
 8006be2:	d1bf      	bne.n	8006b64 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006be4:	463a      	mov	r2, r7
 8006be6:	4641      	mov	r1, r8
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7ff fe47 	bl	800687c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf0:	b11b      	cbz	r3, 8006bfa <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006bf6:	f000 fd1d 	bl	8007634 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006bfa:	b148      	cbz	r0, 8006c10 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8006bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006c10:	f001 f868 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8006c14:	2001      	movs	r0, #1
}
 8006c16:	b005      	add	sp, #20
 8006c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8006c1c:	f001 f862 	bl	8007ce4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff fe75 	bl	8006910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c26:	f000 fc19 	bl	800745c <xTaskResumeAll>
 8006c2a:	e7d2      	b.n	8006bd2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8006c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	e7c7      	b.n	8006bd2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff fe64 	bl	8006910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c48:	f000 fc08 	bl	800745c <xTaskResumeAll>
 8006c4c:	e78e      	b.n	8006b6c <xQueueGenericSend+0x84>

08006c4e <xQueueGenericSendFromISR>:
{
 8006c4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c52:	4689      	mov	r9, r1
 8006c54:	4690      	mov	r8, r2
 8006c56:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006c58:	4604      	mov	r4, r0
 8006c5a:	b940      	cbnz	r0, 8006c6e <xQueueGenericSendFromISR+0x20>
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	e7fe      	b.n	8006c6c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6e:	b951      	cbnz	r1, 8006c86 <xQueueGenericSendFromISR+0x38>
 8006c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c72:	b143      	cbz	r3, 8006c86 <xQueueGenericSendFromISR+0x38>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c86:	2f02      	cmp	r7, #2
 8006c88:	d10b      	bne.n	8006ca2 <xQueueGenericSendFromISR+0x54>
 8006c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d008      	beq.n	8006ca2 <xQueueGenericSendFromISR+0x54>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ca2:	f001 f915 	bl	8007ed0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ca6:	f3ef 8611 	mrs	r6, BASEPRI
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006cbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d301      	bcc.n	8006cc6 <xQueueGenericSendFromISR+0x78>
 8006cc2:	2f02      	cmp	r7, #2
 8006cc4:	d123      	bne.n	8006d0e <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cc6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd0:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd4:	f7ff fdd2 	bl	800687c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006cd8:	1c6b      	adds	r3, r5, #1
 8006cda:	d113      	bne.n	8006d04 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cde:	b90b      	cbnz	r3, 8006ce4 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	e00b      	b.n	8006cfc <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ce8:	f000 fca4 	bl	8007634 <xTaskRemoveFromEventList>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d0f7      	beq.n	8006ce0 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf0:	f1b8 0f00 	cmp.w	r8, #0
 8006cf4:	d0f4      	beq.n	8006ce0 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cfc:	f386 8811 	msr	BASEPRI, r6
}
 8006d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d04:	3501      	adds	r5, #1
 8006d06:	b26d      	sxtb	r5, r5
 8006d08:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006d0c:	e7e8      	b.n	8006ce0 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e7f4      	b.n	8006cfc <xQueueGenericSendFromISR+0xae>

08006d12 <xQueueReceive>:
{
 8006d12:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006d16:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8006d18:	4604      	mov	r4, r0
{
 8006d1a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006d1c:	b940      	cbnz	r0, 8006d30 <xQueueReceive+0x1e>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	e7fe      	b.n	8006d2e <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d30:	b951      	cbnz	r1, 8006d48 <xQueueReceive+0x36>
 8006d32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d34:	b143      	cbz	r3, 8006d48 <xQueueReceive+0x36>
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	e7fe      	b.n	8006d46 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d48:	f000 fd06 	bl	8007758 <xTaskGetSchedulerState>
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	b950      	cbnz	r0, 8006d66 <xQueueReceive+0x54>
 8006d50:	9b01      	ldr	r3, [sp, #4]
 8006d52:	b14b      	cbz	r3, 8006d68 <xQueueReceive+0x56>
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	e7fe      	b.n	8006d64 <xQueueReceive+0x52>
 8006d66:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006d68:	f04f 0800 	mov.w	r8, #0
 8006d6c:	e03d      	b.n	8006dea <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d6e:	9d01      	ldr	r5, [sp, #4]
 8006d70:	b91d      	cbnz	r5, 8006d7a <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8006d72:	f000 ffb7 	bl	8007ce4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006d76:	2000      	movs	r0, #0
 8006d78:	e056      	b.n	8006e28 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8006d7a:	b916      	cbnz	r6, 8006d82 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d7c:	a802      	add	r0, sp, #8
 8006d7e:	f000 fc9d 	bl	80076bc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006d82:	f000 ffaf 	bl	8007ce4 <vPortExitCritical>
		vTaskSuspendAll();
 8006d86:	f000 fac5 	bl	8007314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d8a:	f000 ff8b 	bl	8007ca4 <vPortEnterCritical>
 8006d8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d101      	bne.n	8006d9a <xQueueReceive+0x88>
 8006d96:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006d9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d9e:	2bff      	cmp	r3, #255	; 0xff
 8006da0:	d101      	bne.n	8006da6 <xQueueReceive+0x94>
 8006da2:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006da6:	f000 ff9d 	bl	8007ce4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006daa:	a901      	add	r1, sp, #4
 8006dac:	a802      	add	r0, sp, #8
 8006dae:	f000 fc91 	bl	80076d4 <xTaskCheckForTimeOut>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d141      	bne.n	8006e3a <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff fd55 	bl	8006866 <prvIsQueueEmpty>
 8006dbc:	b3b8      	cbz	r0, 8006e2e <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dbe:	9901      	ldr	r1, [sp, #4]
 8006dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dc4:	f000 fbfe 	bl	80075c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff fda1 	bl	8006910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dce:	f000 fb45 	bl	800745c <xTaskResumeAll>
 8006dd2:	b948      	cbnz	r0, 8006de8 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8006dd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006dea:	f000 ff5b 	bl	8007ca4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	d0bc      	beq.n	8006d6e <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006df4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006df6:	4639      	mov	r1, r7
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff fd74 	bl	80068e6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dfe:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	b173      	cbz	r3, 8006e22 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e04:	f104 0010 	add.w	r0, r4, #16
 8006e08:	f000 fc14 	bl	8007634 <xTaskRemoveFromEventList>
 8006e0c:	b148      	cbz	r0, 8006e22 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8006e0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006e22:	f000 ff5f 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8006e26:	2001      	movs	r0, #1
}
 8006e28:	b004      	add	sp, #16
 8006e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff fd6e 	bl	8006910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e34:	f000 fb12 	bl	800745c <xTaskResumeAll>
 8006e38:	e7d6      	b.n	8006de8 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff fd68 	bl	8006910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e40:	f000 fb0c 	bl	800745c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7ff fd0e 	bl	8006866 <prvIsQueueEmpty>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d0cc      	beq.n	8006de8 <xQueueReceive+0xd6>
 8006e4e:	e792      	b.n	8006d76 <xQueueReceive+0x64>

08006e50 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e50:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e52:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <vQueueAddToRegistry+0x20>)
	{
 8006e54:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e56:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8006e5a:	b92c      	cbnz	r4, 8006e68 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e64:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e66:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d1f3      	bne.n	8006e56 <vQueueAddToRegistry+0x6>
 8006e6e:	e7fa      	b.n	8006e66 <vQueueAddToRegistry+0x16>
 8006e70:	240034d8 	.word	0x240034d8

08006e74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e7c:	f000 ff12 	bl	8007ca4 <vPortEnterCritical>
 8006e80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e84:	2bff      	cmp	r3, #255	; 0xff
 8006e86:	d102      	bne.n	8006e8e <vQueueWaitForMessageRestricted+0x1a>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006e8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e92:	2bff      	cmp	r3, #255	; 0xff
 8006e94:	d102      	bne.n	8006e9c <vQueueWaitForMessageRestricted+0x28>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e9c:	f000 ff22 	bl	8007ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ea2:	b92b      	cbnz	r3, 8006eb0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006eac:	f000 fba4 	bl	80075f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006eb0:	4620      	mov	r0, r4
	}
 8006eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006eb6:	f7ff bd2b 	b.w	8006910 <prvUnlockQueue>
	...

08006ebc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ec2:	f000 feef 	bl	8007ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ec6:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8006ec8:	4e2f      	ldr	r6, [pc, #188]	; (8006f88 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	4f2f      	ldr	r7, [pc, #188]	; (8006f8c <prvAddNewTaskToReadyList+0xd0>)
 8006ece:	3201      	adds	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006ed2:	6835      	ldr	r5, [r6, #0]
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	d14a      	bne.n	8006f6e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ed8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d11f      	bne.n	8006f20 <prvAddNewTaskToReadyList+0x64>
 8006ee0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ee2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	f7ff fc7d 	bl	80067e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eea:	f108 0814 	add.w	r8, r8, #20
 8006eee:	2d38      	cmp	r5, #56	; 0x38
 8006ef0:	d1f7      	bne.n	8006ee2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ef2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006fb4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8006ef6:	4d26      	ldr	r5, [pc, #152]	; (8006f90 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8006ef8:	4640      	mov	r0, r8
 8006efa:	f7ff fc73 	bl	80067e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006efe:	4628      	mov	r0, r5
 8006f00:	f7ff fc70 	bl	80067e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f04:	4823      	ldr	r0, [pc, #140]	; (8006f94 <prvAddNewTaskToReadyList+0xd8>)
 8006f06:	f7ff fc6d 	bl	80067e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f0a:	4823      	ldr	r0, [pc, #140]	; (8006f98 <prvAddNewTaskToReadyList+0xdc>)
 8006f0c:	f7ff fc6a 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f10:	4822      	ldr	r0, [pc, #136]	; (8006f9c <prvAddNewTaskToReadyList+0xe0>)
 8006f12:	f7ff fc67 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f16:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <prvAddNewTaskToReadyList+0xe4>)
 8006f18:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f1c:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <prvAddNewTaskToReadyList+0xe8>)
 8006f1e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006f20:	4a21      	ldr	r2, [pc, #132]	; (8006fa8 <prvAddNewTaskToReadyList+0xec>)
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006f28:	4a20      	ldr	r2, [pc, #128]	; (8006fac <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f2a:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006f2c:	6811      	ldr	r1, [r2, #0]
 8006f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d900      	bls.n	8006f36 <prvAddNewTaskToReadyList+0x7a>
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	2014      	movs	r0, #20
 8006f38:	1d21      	adds	r1, r4, #4
 8006f3a:	fb00 7003 	mla	r0, r0, r3, r7
 8006f3e:	f7ff fc5f 	bl	8006800 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006f42:	f000 fecf 	bl	8007ce4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <prvAddNewTaskToReadyList+0xf4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	b173      	cbz	r3, 8006f6a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f4c:	6833      	ldr	r3, [r6, #0]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d209      	bcs.n	8006f6a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8006f56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	f3bf 8f6f 	isb	sy
}
 8006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <prvAddNewTaskToReadyList+0xf4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d4      	bne.n	8006f20 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f76:	6833      	ldr	r3, [r6, #0]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d8cf      	bhi.n	8006f20 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8006f80:	6034      	str	r4, [r6, #0]
 8006f82:	e7cd      	b.n	8006f20 <prvAddNewTaskToReadyList+0x64>
 8006f84:	24003984 	.word	0x24003984
 8006f88:	24003518 	.word	0x24003518
 8006f8c:	24003524 	.word	0x24003524
 8006f90:	240039ac 	.word	0x240039ac
 8006f94:	240039cc 	.word	0x240039cc
 8006f98:	240039f8 	.word	0x240039f8
 8006f9c:	240039e4 	.word	0x240039e4
 8006fa0:	2400351c 	.word	0x2400351c
 8006fa4:	24003520 	.word	0x24003520
 8006fa8:	24003990 	.word	0x24003990
 8006fac:	24003994 	.word	0x24003994
 8006fb0:	240039e0 	.word	0x240039e0
 8006fb4:	24003998 	.word	0x24003998

08006fb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fba:	4b15      	ldr	r3, [pc, #84]	; (8007010 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8006fbc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fbe:	4e15      	ldr	r6, [pc, #84]	; (8007014 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8006fc0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8006fc2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fc4:	6830      	ldr	r0, [r6, #0]
 8006fc6:	3004      	adds	r0, #4
 8006fc8:	f7ff fc3d 	bl	8006846 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fcc:	1c63      	adds	r3, r4, #1
 8006fce:	d107      	bne.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x28>
 8006fd0:	b137      	cbz	r7, 8006fe0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd2:	6831      	ldr	r1, [r6, #0]
 8006fd4:	4810      	ldr	r0, [pc, #64]	; (8007018 <prvAddCurrentTaskToDelayedList+0x60>)
 8006fd6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fdc:	f7ff bc10 	b.w	8006800 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fe0:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fe2:	6833      	ldr	r3, [r6, #0]
 8006fe4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe6:	d307      	bcc.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <prvAddCurrentTaskToDelayedList+0x64>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	6831      	ldr	r1, [r6, #0]
}
 8006fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff2:	3104      	adds	r1, #4
 8006ff4:	f7ff bc10 	b.w	8006818 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	6831      	ldr	r1, [r6, #0]
 8006ffe:	3104      	adds	r1, #4
 8007000:	f7ff fc0a 	bl	8006818 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	42a2      	cmp	r2, r4
 800700a:	d900      	bls.n	800700e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800700c:	601c      	str	r4, [r3, #0]
}
 800700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007010:	24003a0c 	.word	0x24003a0c
 8007014:	24003518 	.word	0x24003518
 8007018:	240039e4 	.word	0x240039e4
 800701c:	24003520 	.word	0x24003520
 8007020:	2400351c 	.word	0x2400351c
 8007024:	240039c0 	.word	0x240039c0

08007028 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007028:	4a06      	ldr	r2, [pc, #24]	; (8007044 <prvResetNextTaskUnblockTime+0x1c>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <prvResetNextTaskUnblockTime+0x20>)
 8007030:	b919      	cbnz	r1, 800703a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007036:	601a      	str	r2, [r3, #0]
}
 8007038:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800703e:	68d2      	ldr	r2, [r2, #12]
 8007040:	6852      	ldr	r2, [r2, #4]
 8007042:	e7f8      	b.n	8007036 <prvResetNextTaskUnblockTime+0xe>
 8007044:	2400351c 	.word	0x2400351c
 8007048:	240039c0 	.word	0x240039c0

0800704c <prvDeleteTCB>:
	{
 800704c:	b510      	push	{r4, lr}
 800704e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007050:	3054      	adds	r0, #84	; 0x54
 8007052:	f001 fa5b 	bl	800850c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007056:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800705a:	b93b      	cbnz	r3, 800706c <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800705c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800705e:	f001 f821 	bl	80080a4 <vPortFree>
				vPortFree( pxTCB );
 8007062:	4620      	mov	r0, r4
	}
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007068:	f001 b81c 	b.w	80080a4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800706c:	2b01      	cmp	r3, #1
 800706e:	d0f8      	beq.n	8007062 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007070:	2b02      	cmp	r3, #2
 8007072:	d008      	beq.n	8007086 <prvDeleteTCB+0x3a>
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	e7fe      	b.n	8007084 <prvDeleteTCB+0x38>
	}
 8007086:	bd10      	pop	{r4, pc}

08007088 <prvIdleTask>:
{
 8007088:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800708a:	4c13      	ldr	r4, [pc, #76]	; (80070d8 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708c:	4f13      	ldr	r7, [pc, #76]	; (80070dc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800708e:	4d14      	ldr	r5, [pc, #80]	; (80070e0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	b973      	cbnz	r3, 80070b2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007094:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <prvIdleTask+0x5c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d9f8      	bls.n	800708e <prvIdleTask+0x6>
				taskYIELD();
 800709c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e7ed      	b.n	800708e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80070b2:	f000 fdf7 	bl	8007ca4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ba:	1d30      	adds	r0, r6, #4
 80070bc:	f7ff fbc3 	bl	8006846 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80070cc:	f000 fe0a 	bl	8007ce4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff ffbb 	bl	800704c <prvDeleteTCB>
 80070d6:	e7db      	b.n	8007090 <prvIdleTask+0x8>
 80070d8:	24003988 	.word	0x24003988
 80070dc:	240039f8 	.word	0x240039f8
 80070e0:	24003984 	.word	0x24003984
 80070e4:	24003524 	.word	0x24003524

080070e8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070ec:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80070f0:	4606      	mov	r6, r0
 80070f2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070f4:	21a5      	movs	r1, #165	; 0xa5
 80070f6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80070f8:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070fa:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80070fe:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007102:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007104:	f001 f957 	bl	80083b6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007108:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800710a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800710c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8007110:	2d00      	cmp	r5, #0
 8007112:	d040      	beq.n	8007196 <prvInitialiseNewTask.constprop.0+0xae>
 8007114:	1e6b      	subs	r3, r5, #1
 8007116:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800711a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800711c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007120:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8007124:	b108      	cbz	r0, 800712a <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007126:	42ab      	cmp	r3, r5
 8007128:	d1f8      	bne.n	800711c <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800712a:	2300      	movs	r3, #0
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007130:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007132:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007136:	1d20      	adds	r0, r4, #4
 8007138:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800713a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800713e:	bf28      	it	cs
 8007140:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007142:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007144:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007146:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800714a:	f7ff fb56 	bl	80067fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800714e:	f104 0018 	add.w	r0, r4, #24
 8007152:	f7ff fb52 	bl	80067fa <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007156:	2260      	movs	r2, #96	; 0x60
 8007158:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800715a:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800715e:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007162:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007164:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007166:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007168:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800716c:	f001 f923 	bl	80083b6 <memset>
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <prvInitialiseNewTask.constprop.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007172:	463a      	mov	r2, r7
 8007174:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007176:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007178:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <prvInitialiseNewTask.constprop.0+0xb8>)
 800717c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvInitialiseNewTask.constprop.0+0xbc>)
 8007180:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007182:	f000 fd65 	bl	8007c50 <pxPortInitialiseStack>
 8007186:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007188:	f1b8 0f00 	cmp.w	r8, #0
 800718c:	d001      	beq.n	8007192 <prvInitialiseNewTask.constprop.0+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800718e:	f8c8 4000 	str.w	r4, [r8]
}
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007196:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800719a:	e7c9      	b.n	8007130 <prvInitialiseNewTask.constprop.0+0x48>
 800719c:	0800b784 	.word	0x0800b784
 80071a0:	0800b7a4 	.word	0x0800b7a4
 80071a4:	0800b764 	.word	0x0800b764

080071a8 <xTaskCreateStatic>:
	{
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80071b0:	b945      	cbnz	r5, 80071c4 <xTaskCreateStatic+0x1c>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	e7fe      	b.n	80071c2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80071c4:	b944      	cbnz	r4, 80071d8 <xTaskCreateStatic+0x30>
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	e7fe      	b.n	80071d6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80071d8:	26bc      	movs	r6, #188	; 0xbc
 80071da:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071dc:	9e05      	ldr	r6, [sp, #20]
 80071de:	2ebc      	cmp	r6, #188	; 0xbc
 80071e0:	d008      	beq.n	80071f4 <xTaskCreateStatic+0x4c>
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	e7fe      	b.n	80071f2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071f4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071f6:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071f8:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071fa:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071fe:	ad04      	add	r5, sp, #16
 8007200:	9402      	str	r4, [sp, #8]
 8007202:	9501      	str	r5, [sp, #4]
 8007204:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007206:	9500      	str	r5, [sp, #0]
 8007208:	f7ff ff6e 	bl	80070e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800720c:	4620      	mov	r0, r4
 800720e:	f7ff fe55 	bl	8006ebc <prvAddNewTaskToReadyList>
	}
 8007212:	9804      	ldr	r0, [sp, #16]
 8007214:	b006      	add	sp, #24
 8007216:	bd70      	pop	{r4, r5, r6, pc}

08007218 <xTaskCreate>:
	{
 8007218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800721c:	4607      	mov	r7, r0
 800721e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007220:	0090      	lsls	r0, r2, #2
	{
 8007222:	4688      	mov	r8, r1
 8007224:	4616      	mov	r6, r2
 8007226:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007228:	f000 fea4 	bl	8007f74 <pvPortMalloc>
			if( pxStack != NULL )
 800722c:	4605      	mov	r5, r0
 800722e:	b1e8      	cbz	r0, 800726c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007230:	20bc      	movs	r0, #188	; 0xbc
 8007232:	f000 fe9f 	bl	8007f74 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007236:	4604      	mov	r4, r0
 8007238:	b1a8      	cbz	r0, 8007266 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800723a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800723c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723e:	4632      	mov	r2, r6
 8007240:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007242:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007248:	9002      	str	r0, [sp, #8]
 800724a:	4638      	mov	r0, r7
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	464b      	mov	r3, r9
 8007254:	f7ff ff48 	bl	80070e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007258:	4620      	mov	r0, r4
 800725a:	f7ff fe2f 	bl	8006ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725e:	2001      	movs	r0, #1
	}
 8007260:	b005      	add	sp, #20
 8007262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007266:	4628      	mov	r0, r5
 8007268:	f000 ff1c 	bl	80080a4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8007270:	e7f6      	b.n	8007260 <xTaskCreate+0x48>
	...

08007274 <vTaskStartScheduler>:
{
 8007274:	b510      	push	{r4, lr}
 8007276:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007278:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800727a:	aa07      	add	r2, sp, #28
 800727c:	a906      	add	r1, sp, #24
 800727e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007280:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007284:	f7ff fa96 	bl	80067b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	9a07      	ldr	r2, [sp, #28]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	9b06      	ldr	r3, [sp, #24]
 8007290:	4919      	ldr	r1, [pc, #100]	; (80072f8 <vTaskStartScheduler+0x84>)
 8007292:	481a      	ldr	r0, [pc, #104]	; (80072fc <vTaskStartScheduler+0x88>)
 8007294:	e9cd 4300 	strd	r4, r3, [sp]
 8007298:	4623      	mov	r3, r4
 800729a:	f7ff ff85 	bl	80071a8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800729e:	b340      	cbz	r0, 80072f2 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80072a0:	f000 fb00 	bl	80078a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80072a4:	2801      	cmp	r0, #1
 80072a6:	d119      	bne.n	80072dc <vTaskStartScheduler+0x68>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <vTaskStartScheduler+0x8c>)
 80072ba:	4a12      	ldr	r2, [pc, #72]	; (8007304 <vTaskStartScheduler+0x90>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3354      	adds	r3, #84	; 0x54
 80072c0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80072c2:	f04f 32ff 	mov.w	r2, #4294967295
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <vTaskStartScheduler+0x94>)
 80072c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <vTaskStartScheduler+0x98>)
 80072cc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072ce:	4b10      	ldr	r3, [pc, #64]	; (8007310 <vTaskStartScheduler+0x9c>)
 80072d0:	601c      	str	r4, [r3, #0]
}
 80072d2:	b008      	add	sp, #32
 80072d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80072d8:	f000 bd74 	b.w	8007dc4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072dc:	3001      	adds	r0, #1
 80072de:	d108      	bne.n	80072f2 <vTaskStartScheduler+0x7e>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	e7fe      	b.n	80072f0 <vTaskStartScheduler+0x7c>
}
 80072f2:	b008      	add	sp, #32
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	0800b750 	.word	0x0800b750
 80072fc:	08007089 	.word	0x08007089
 8007300:	24003518 	.word	0x24003518
 8007304:	24000014 	.word	0x24000014
 8007308:	240039c0 	.word	0x240039c0
 800730c:	240039e0 	.word	0x240039e0
 8007310:	24003a0c 	.word	0x24003a0c

08007314 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007314:	4a02      	ldr	r2, [pc, #8]	; (8007320 <vTaskSuspendAll+0xc>)
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	6013      	str	r3, [r2, #0]
}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	2400398c 	.word	0x2400398c

08007324 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007324:	4b01      	ldr	r3, [pc, #4]	; (800732c <xTaskGetTickCount+0x8>)
 8007326:	6818      	ldr	r0, [r3, #0]
}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	24003a0c 	.word	0x24003a0c

08007330 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007330:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <xTaskIncrementTick+0x100>)
 8007332:	681b      	ldr	r3, [r3, #0]
{
 8007334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007338:	2b00      	cmp	r3, #0
 800733a:	d172      	bne.n	8007422 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800733c:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <xTaskIncrementTick+0x104>)
 800733e:	681d      	ldr	r5, [r3, #0]
 8007340:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007342:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007344:	b9bd      	cbnz	r5, 8007376 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007346:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <xTaskIncrementTick+0x108>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	b142      	cbz	r2, 8007360 <xTaskIncrementTick+0x30>
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	e7fe      	b.n	800735e <xTaskIncrementTick+0x2e>
 8007360:	4a36      	ldr	r2, [pc, #216]	; (800743c <xTaskIncrementTick+0x10c>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6810      	ldr	r0, [r2, #0]
 8007366:	6018      	str	r0, [r3, #0]
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	4a35      	ldr	r2, [pc, #212]	; (8007440 <xTaskIncrementTick+0x110>)
 800736c:	6813      	ldr	r3, [r2, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	f7ff fe59 	bl	8007028 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007376:	4e33      	ldr	r6, [pc, #204]	; (8007444 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8007378:	2400      	movs	r4, #0
 800737a:	4f33      	ldr	r7, [pc, #204]	; (8007448 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8007454 <xTaskIncrementTick+0x124>
 8007382:	429d      	cmp	r5, r3
 8007384:	d211      	bcs.n	80073aa <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007386:	f8d8 3000 	ldr.w	r3, [r8]
 800738a:	2214      	movs	r2, #20
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	4353      	muls	r3, r2
 8007390:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8007392:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8007394:	4b2d      	ldr	r3, [pc, #180]	; (800744c <xTaskIncrementTick+0x11c>)
 8007396:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8007398:	bf28      	it	cs
 800739a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf18      	it	ne
 80073a0:	2401      	movne	r4, #1
}
 80073a2:	4620      	mov	r0, r4
 80073a4:	b003      	add	sp, #12
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007438 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80073ae:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8007458 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b2:	f8d9 3000 	ldr.w	r3, [r9]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	b91b      	cbnz	r3, 80073c2 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ba:	f04f 33ff 	mov.w	r3, #4294967295
 80073be:	6033      	str	r3, [r6, #0]
					break;
 80073c0:	e7e1      	b.n	8007386 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c2:	f8d9 3000 	ldr.w	r3, [r9]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073cc:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80073d0:	4295      	cmp	r5, r2
 80073d2:	d201      	bcs.n	80073d8 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80073d4:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073d6:	e7d6      	b.n	8007386 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d8:	f10b 0104 	add.w	r1, fp, #4
 80073dc:	4608      	mov	r0, r1
 80073de:	9101      	str	r1, [sp, #4]
 80073e0:	f7ff fa31 	bl	8006846 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073e4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80073e8:	9901      	ldr	r1, [sp, #4]
 80073ea:	b122      	cbz	r2, 80073f6 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ec:	f10b 0018 	add.w	r0, fp, #24
 80073f0:	f7ff fa29 	bl	8006846 <uxListRemove>
 80073f4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80073f6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80073fa:	f8da 2000 	ldr.w	r2, [sl]
 80073fe:	4290      	cmp	r0, r2
 8007400:	d901      	bls.n	8007406 <xTaskIncrementTick+0xd6>
 8007402:	f8ca 0000 	str.w	r0, [sl]
 8007406:	2314      	movs	r3, #20
 8007408:	fb03 7000 	mla	r0, r3, r0, r7
 800740c:	f7ff f9f8 	bl	8006800 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007410:	f8d8 1000 	ldr.w	r1, [r8]
 8007414:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007418:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800741a:	429a      	cmp	r2, r3
 800741c:	bf28      	it	cs
 800741e:	2401      	movcs	r4, #1
 8007420:	e7c7      	b.n	80073b2 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8007422:	4a0b      	ldr	r2, [pc, #44]	; (8007450 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8007424:	2400      	movs	r4, #0
		++xPendedTicks;
 8007426:	6813      	ldr	r3, [r2, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800742c:	e7b9      	b.n	80073a2 <xTaskIncrementTick+0x72>
 800742e:	bf00      	nop
 8007430:	2400398c 	.word	0x2400398c
 8007434:	24003a0c 	.word	0x24003a0c
 8007438:	2400351c 	.word	0x2400351c
 800743c:	24003520 	.word	0x24003520
 8007440:	240039c4 	.word	0x240039c4
 8007444:	240039c0 	.word	0x240039c0
 8007448:	24003524 	.word	0x24003524
 800744c:	24003a10 	.word	0x24003a10
 8007450:	240039c8 	.word	0x240039c8
 8007454:	24003518 	.word	0x24003518
 8007458:	24003994 	.word	0x24003994

0800745c <xTaskResumeAll>:
{
 800745c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800745e:	4c31      	ldr	r4, [pc, #196]	; (8007524 <xTaskResumeAll+0xc8>)
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	b943      	cbnz	r3, 8007476 <xTaskResumeAll+0x1a>
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	e7fe      	b.n	8007474 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8007476:	f000 fc15 	bl	8007ca4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	3b01      	subs	r3, #1
 800747e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007480:	6824      	ldr	r4, [r4, #0]
 8007482:	b12c      	cbz	r4, 8007490 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8007484:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007486:	f000 fc2d 	bl	8007ce4 <vPortExitCritical>
}
 800748a:	4620      	mov	r0, r4
 800748c:	b003      	add	sp, #12
 800748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007490:	4b25      	ldr	r3, [pc, #148]	; (8007528 <xTaskResumeAll+0xcc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f5      	beq.n	8007484 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007498:	4d24      	ldr	r5, [pc, #144]	; (800752c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800749a:	4e25      	ldr	r6, [pc, #148]	; (8007530 <xTaskResumeAll+0xd4>)
 800749c:	4f25      	ldr	r7, [pc, #148]	; (8007534 <xTaskResumeAll+0xd8>)
 800749e:	e01e      	b.n	80074de <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a0:	68eb      	ldr	r3, [r5, #12]
 80074a2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074a4:	f104 0018 	add.w	r0, r4, #24
 80074a8:	f7ff f9cd 	bl	8006846 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ac:	1d21      	adds	r1, r4, #4
 80074ae:	4608      	mov	r0, r1
 80074b0:	9101      	str	r1, [sp, #4]
 80074b2:	f7ff f9c8 	bl	8006846 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074b8:	6832      	ldr	r2, [r6, #0]
 80074ba:	9901      	ldr	r1, [sp, #4]
 80074bc:	4293      	cmp	r3, r2
 80074be:	d900      	bls.n	80074c2 <xTaskResumeAll+0x66>
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	2014      	movs	r0, #20
 80074c4:	fb00 7003 	mla	r0, r0, r3, r7
 80074c8:	f7ff f99a 	bl	8006800 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074cc:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <xTaskResumeAll+0xdc>)
 80074ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d302      	bcc.n	80074de <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 80074d8:	4b18      	ldr	r3, [pc, #96]	; (800753c <xTaskResumeAll+0xe0>)
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1dd      	bne.n	80074a0 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 80074e4:	b10c      	cbz	r4, 80074ea <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 80074e6:	f7ff fd9f 	bl	8007028 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074ea:	4d15      	ldr	r5, [pc, #84]	; (8007540 <xTaskResumeAll+0xe4>)
 80074ec:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80074ee:	b144      	cbz	r4, 8007502 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80074f0:	4e12      	ldr	r6, [pc, #72]	; (800753c <xTaskResumeAll+0xe0>)
 80074f2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80074f4:	f7ff ff1c 	bl	8007330 <xTaskIncrementTick>
 80074f8:	b100      	cbz	r0, 80074fc <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 80074fa:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074fc:	3c01      	subs	r4, #1
 80074fe:	d1f9      	bne.n	80074f4 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8007500:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <xTaskResumeAll+0xe0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0bc      	beq.n	8007484 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800750a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800750e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007512:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800751e:	2401      	movs	r4, #1
 8007520:	e7b1      	b.n	8007486 <xTaskResumeAll+0x2a>
 8007522:	bf00      	nop
 8007524:	2400398c 	.word	0x2400398c
 8007528:	24003984 	.word	0x24003984
 800752c:	240039cc 	.word	0x240039cc
 8007530:	24003994 	.word	0x24003994
 8007534:	24003524 	.word	0x24003524
 8007538:	24003518 	.word	0x24003518
 800753c:	24003a10 	.word	0x24003a10
 8007540:	240039c8 	.word	0x240039c8

08007544 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <vTaskSwitchContext+0x68>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <vTaskSwitchContext+0x6c>)
{
 800754a:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800754c:	b112      	cbz	r2, 8007554 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800754e:	2201      	movs	r2, #1
 8007550:	601a      	str	r2, [r3, #0]
}
 8007552:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007554:	4d17      	ldr	r5, [pc, #92]	; (80075b4 <vTaskSwitchContext+0x70>)
 8007556:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 8007558:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755a:	4917      	ldr	r1, [pc, #92]	; (80075b8 <vTaskSwitchContext+0x74>)
 800755c:	682a      	ldr	r2, [r5, #0]
 800755e:	fb06 f302 	mul.w	r3, r6, r2
 8007562:	58cc      	ldr	r4, [r1, r3]
 8007564:	18c8      	adds	r0, r1, r3
 8007566:	b1ac      	cbz	r4, 8007594 <vTaskSwitchContext+0x50>
 8007568:	6844      	ldr	r4, [r0, #4]
 800756a:	3308      	adds	r3, #8
 800756c:	6864      	ldr	r4, [r4, #4]
 800756e:	440b      	add	r3, r1
 8007570:	429c      	cmp	r4, r3
 8007572:	6044      	str	r4, [r0, #4]
 8007574:	bf04      	itt	eq
 8007576:	6863      	ldreq	r3, [r4, #4]
 8007578:	6043      	streq	r3, [r0, #4]
 800757a:	2314      	movs	r3, #20
 800757c:	fb03 1102 	mla	r1, r3, r2, r1
 8007580:	684b      	ldr	r3, [r1, #4]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <vTaskSwitchContext+0x78>)
 8007586:	6019      	str	r1, [r3, #0]
 8007588:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <vTaskSwitchContext+0x7c>)
 800758e:	3354      	adds	r3, #84	; 0x54
 8007590:	6013      	str	r3, [r2, #0]
}
 8007592:	e7de      	b.n	8007552 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007594:	b942      	cbnz	r2, 80075a8 <vTaskSwitchContext+0x64>
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	e7fe      	b.n	80075a6 <vTaskSwitchContext+0x62>
 80075a8:	3a01      	subs	r2, #1
 80075aa:	e7d8      	b.n	800755e <vTaskSwitchContext+0x1a>
 80075ac:	2400398c 	.word	0x2400398c
 80075b0:	24003a10 	.word	0x24003a10
 80075b4:	24003994 	.word	0x24003994
 80075b8:	24003524 	.word	0x24003524
 80075bc:	24003518 	.word	0x24003518
 80075c0:	24000014 	.word	0x24000014

080075c4 <vTaskPlaceOnEventList>:
{
 80075c4:	b510      	push	{r4, lr}
 80075c6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80075c8:	b940      	cbnz	r0, 80075dc <vTaskPlaceOnEventList+0x18>
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	e7fe      	b.n	80075da <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <vTaskPlaceOnEventList+0x30>)
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	3118      	adds	r1, #24
 80075e2:	f7ff f919 	bl	8006818 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075e6:	4620      	mov	r0, r4
 80075e8:	2101      	movs	r1, #1
}
 80075ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075ee:	f7ff bce3 	b.w	8006fb8 <prvAddCurrentTaskToDelayedList>
 80075f2:	bf00      	nop
 80075f4:	24003518 	.word	0x24003518

080075f8 <vTaskPlaceOnEventListRestricted>:
	{
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	460d      	mov	r5, r1
 80075fc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80075fe:	b940      	cbnz	r0, 8007612 <vTaskPlaceOnEventListRestricted+0x1a>
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	e7fe      	b.n	8007610 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007612:	4b07      	ldr	r3, [pc, #28]	; (8007630 <vTaskPlaceOnEventListRestricted+0x38>)
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	3118      	adds	r1, #24
 8007618:	f7ff f8f2 	bl	8006800 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800761c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800761e:	4621      	mov	r1, r4
 8007620:	bf0c      	ite	eq
 8007622:	4628      	moveq	r0, r5
 8007624:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800762c:	f7ff bcc4 	b.w	8006fb8 <prvAddCurrentTaskToDelayedList>
 8007630:	24003518 	.word	0x24003518

08007634 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	68c3      	ldr	r3, [r0, #12]
{
 8007636:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007638:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800763a:	b944      	cbnz	r4, 800764e <xTaskRemoveFromEventList+0x1a>
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	e7fe      	b.n	800764c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800764e:	f104 0118 	add.w	r1, r4, #24
 8007652:	4608      	mov	r0, r1
 8007654:	9101      	str	r1, [sp, #4]
 8007656:	f7ff f8f6 	bl	8006846 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <xTaskRemoveFromEventList+0x70>)
 800765c:	9901      	ldr	r1, [sp, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	b9e3      	cbnz	r3, 800769c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007662:	1d21      	adds	r1, r4, #4
 8007664:	4608      	mov	r0, r1
 8007666:	9101      	str	r1, [sp, #4]
 8007668:	f7ff f8ed 	bl	8006846 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800766c:	4a0e      	ldr	r2, [pc, #56]	; (80076a8 <xTaskRemoveFromEventList+0x74>)
 800766e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007670:	6810      	ldr	r0, [r2, #0]
 8007672:	9901      	ldr	r1, [sp, #4]
 8007674:	4283      	cmp	r3, r0
 8007676:	d900      	bls.n	800767a <xTaskRemoveFromEventList+0x46>
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <xTaskRemoveFromEventList+0x78>)
 800767c:	2014      	movs	r0, #20
 800767e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007682:	f7ff f8bd 	bl	8006800 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007686:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <xTaskRemoveFromEventList+0x7c>)
 8007688:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d906      	bls.n	80076a0 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8007692:	2001      	movs	r0, #1
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <xTaskRemoveFromEventList+0x80>)
 8007696:	6018      	str	r0, [r3, #0]
}
 8007698:	b002      	add	sp, #8
 800769a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800769c:	4806      	ldr	r0, [pc, #24]	; (80076b8 <xTaskRemoveFromEventList+0x84>)
 800769e:	e7f0      	b.n	8007682 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80076a0:	2000      	movs	r0, #0
	return xReturn;
 80076a2:	e7f9      	b.n	8007698 <xTaskRemoveFromEventList+0x64>
 80076a4:	2400398c 	.word	0x2400398c
 80076a8:	24003994 	.word	0x24003994
 80076ac:	24003524 	.word	0x24003524
 80076b0:	24003518 	.word	0x24003518
 80076b4:	24003a10 	.word	0x24003a10
 80076b8:	240039cc 	.word	0x240039cc

080076bc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076bc:	4b03      	ldr	r3, [pc, #12]	; (80076cc <vTaskInternalSetTimeOutState+0x10>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076c2:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <vTaskInternalSetTimeOutState+0x14>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6043      	str	r3, [r0, #4]
}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	240039c4 	.word	0x240039c4
 80076d0:	24003a0c 	.word	0x24003a0c

080076d4 <xTaskCheckForTimeOut>:
{
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80076d8:	4605      	mov	r5, r0
 80076da:	b940      	cbnz	r0, 80076ee <xTaskCheckForTimeOut+0x1a>
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	e7fe      	b.n	80076ec <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80076ee:	b941      	cbnz	r1, 8007702 <xTaskCheckForTimeOut+0x2e>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	e7fe      	b.n	8007700 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8007702:	f000 facf 	bl	8007ca4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <xTaskCheckForTimeOut+0x70>)
 8007708:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	d010      	beq.n	8007732 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007710:	480d      	ldr	r0, [pc, #52]	; (8007748 <xTaskCheckForTimeOut+0x74>)
 8007712:	682e      	ldr	r6, [r5, #0]
 8007714:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007716:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007718:	4286      	cmp	r6, r0
 800771a:	d001      	beq.n	8007720 <xTaskCheckForTimeOut+0x4c>
 800771c:	428a      	cmp	r2, r1
 800771e:	d90f      	bls.n	8007740 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007720:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007722:	4283      	cmp	r3, r0
 8007724:	d90a      	bls.n	800773c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007726:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007728:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800772a:	4413      	add	r3, r2
 800772c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800772e:	f7ff ffc5 	bl	80076bc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007732:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007734:	f000 fad6 	bl	8007ce4 <vPortExitCritical>
}
 8007738:	4620      	mov	r0, r4
 800773a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007740:	2401      	movs	r4, #1
 8007742:	e7f7      	b.n	8007734 <xTaskCheckForTimeOut+0x60>
 8007744:	24003a0c 	.word	0x24003a0c
 8007748:	240039c4 	.word	0x240039c4

0800774c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800774c:	4b01      	ldr	r3, [pc, #4]	; (8007754 <vTaskMissedYield+0x8>)
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
}
 8007752:	4770      	bx	lr
 8007754:	24003a10 	.word	0x24003a10

08007758 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <xTaskGetSchedulerState+0x18>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	b133      	cbz	r3, 800776c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <xTaskGetSchedulerState+0x1c>)
 8007760:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf0c      	ite	eq
 8007766:	2002      	moveq	r0, #2
 8007768:	2000      	movne	r0, #0
 800776a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800776c:	2001      	movs	r0, #1
	}
 800776e:	4770      	bx	lr
 8007770:	240039e0 	.word	0x240039e0
 8007774:	2400398c 	.word	0x2400398c

08007778 <xTaskPriorityDisinherit>:
	{
 8007778:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800777a:	b910      	cbnz	r0, 8007782 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800777c:	2000      	movs	r0, #0
	}
 800777e:	b002      	add	sp, #8
 8007780:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xTaskPriorityDisinherit+0x7c>)
 8007784:	681c      	ldr	r4, [r3, #0]
 8007786:	4284      	cmp	r4, r0
 8007788:	d008      	beq.n	800779c <xTaskPriorityDisinherit+0x24>
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	e7fe      	b.n	800779a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800779c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800779e:	b943      	cbnz	r3, 80077b2 <xTaskPriorityDisinherit+0x3a>
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	e7fe      	b.n	80077b0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80077b4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80077b8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ba:	4291      	cmp	r1, r2
 80077bc:	d0de      	beq.n	800777c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1dc      	bne.n	800777c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c2:	1d21      	adds	r1, r4, #4
 80077c4:	4608      	mov	r0, r1
 80077c6:	9101      	str	r1, [sp, #4]
 80077c8:	f7ff f83d 	bl	8006846 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80077ce:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80077d8:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <xTaskPriorityDisinherit+0x80>)
 80077da:	6810      	ldr	r0, [r2, #0]
 80077dc:	4283      	cmp	r3, r0
 80077de:	d900      	bls.n	80077e2 <xTaskPriorityDisinherit+0x6a>
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4a06      	ldr	r2, [pc, #24]	; (80077fc <xTaskPriorityDisinherit+0x84>)
 80077e4:	2014      	movs	r0, #20
 80077e6:	fb00 2003 	mla	r0, r0, r3, r2
 80077ea:	f7ff f809 	bl	8006800 <vListInsertEnd>
					xReturn = pdTRUE;
 80077ee:	2001      	movs	r0, #1
		return xReturn;
 80077f0:	e7c5      	b.n	800777e <xTaskPriorityDisinherit+0x6>
 80077f2:	bf00      	nop
 80077f4:	24003518 	.word	0x24003518
 80077f8:	24003994 	.word	0x24003994
 80077fc:	24003524 	.word	0x24003524

08007800 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007802:	4c11      	ldr	r4, [pc, #68]	; (8007848 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007804:	f000 fa4e 	bl	8007ca4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	b9bd      	cbnz	r5, 800783c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800780c:	4f0f      	ldr	r7, [pc, #60]	; (800784c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800780e:	4e10      	ldr	r6, [pc, #64]	; (8007850 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007810:	4638      	mov	r0, r7
 8007812:	f7fe ffe7 	bl	80067e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007816:	4630      	mov	r0, r6
 8007818:	f7fe ffe4 	bl	80067e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800781e:	4a0e      	ldr	r2, [pc, #56]	; (8007858 <prvCheckForValidListAndQueue+0x58>)
 8007820:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8007822:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007824:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8007826:	4b0d      	ldr	r3, [pc, #52]	; (800785c <prvCheckForValidListAndQueue+0x5c>)
 8007828:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <prvCheckForValidListAndQueue+0x60>)
 800782c:	9500      	str	r5, [sp, #0]
 800782e:	f7ff f8e6 	bl	80069fe <xQueueGenericCreateStatic>
 8007832:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007834:	b110      	cbz	r0, 800783c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007836:	490b      	ldr	r1, [pc, #44]	; (8007864 <prvCheckForValidListAndQueue+0x64>)
 8007838:	f7ff fb0a 	bl	8006e50 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800783c:	b003      	add	sp, #12
 800783e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007842:	f000 ba4f 	b.w	8007ce4 <vPortExitCritical>
 8007846:	bf00      	nop
 8007848:	24003b38 	.word	0x24003b38
 800784c:	24003abc 	.word	0x24003abc
 8007850:	24003ad0 	.word	0x24003ad0
 8007854:	24003a14 	.word	0x24003a14
 8007858:	24003a1c 	.word	0x24003a1c
 800785c:	24003a18 	.word	0x24003a18
 8007860:	24003ae8 	.word	0x24003ae8
 8007864:	0800b755 	.word	0x0800b755

08007868 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8007868:	4291      	cmp	r1, r2
{
 800786a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800786c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800786e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007870:	d80a      	bhi.n	8007888 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	6983      	ldr	r3, [r0, #24]
 8007876:	429a      	cmp	r2, r3
 8007878:	d20d      	bcs.n	8007896 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800787a:	1d01      	adds	r1, r0, #4
 800787c:	4b07      	ldr	r3, [pc, #28]	; (800789c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	f7fe ffca 	bl	8006818 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007884:	2000      	movs	r0, #0
}
 8007886:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007888:	429a      	cmp	r2, r3
 800788a:	d201      	bcs.n	8007890 <prvInsertTimerInActiveList+0x28>
 800788c:	4299      	cmp	r1, r3
 800788e:	d202      	bcs.n	8007896 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007890:	1d01      	adds	r1, r0, #4
 8007892:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <prvInsertTimerInActiveList+0x38>)
 8007894:	e7f3      	b.n	800787e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007896:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007898:	e7f5      	b.n	8007886 <prvInsertTimerInActiveList+0x1e>
 800789a:	bf00      	nop
 800789c:	24003a18 	.word	0x24003a18
 80078a0:	24003a14 	.word	0x24003a14

080078a4 <xTimerCreateTimerTask>:
{
 80078a4:	b510      	push	{r4, lr}
 80078a6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80078a8:	f7ff ffaa 	bl	8007800 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80078ac:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <xTimerCreateTimerTask+0x54>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	b1b3      	cbz	r3, 80078e0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078b2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078b4:	aa07      	add	r2, sp, #28
 80078b6:	a906      	add	r1, sp, #24
 80078b8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078be:	f7fe ff85 	bl	80067cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078c2:	9b05      	ldr	r3, [sp, #20]
 80078c4:	9a07      	ldr	r2, [sp, #28]
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	9b06      	ldr	r3, [sp, #24]
 80078ca:	490c      	ldr	r1, [pc, #48]	; (80078fc <xTimerCreateTimerTask+0x58>)
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	2302      	movs	r3, #2
 80078d0:	480b      	ldr	r0, [pc, #44]	; (8007900 <xTimerCreateTimerTask+0x5c>)
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4623      	mov	r3, r4
 80078d6:	f7ff fc67 	bl	80071a8 <xTaskCreateStatic>
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <xTimerCreateTimerTask+0x60>)
 80078dc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80078de:	b940      	cbnz	r0, 80078f2 <xTimerCreateTimerTask+0x4e>
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80078f0:	e7fe      	b.n	80078f0 <xTimerCreateTimerTask+0x4c>
}
 80078f2:	2001      	movs	r0, #1
 80078f4:	b008      	add	sp, #32
 80078f6:	bd10      	pop	{r4, pc}
 80078f8:	24003b38 	.word	0x24003b38
 80078fc:	0800b75a 	.word	0x0800b75a
 8007900:	08007a09 	.word	0x08007a09
 8007904:	24003b3c 	.word	0x24003b3c

08007908 <xTimerGenericCommand>:
{
 8007908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800790a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800790c:	4604      	mov	r4, r0
{
 800790e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007910:	b940      	cbnz	r0, 8007924 <xTimerGenericCommand+0x1c>
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	e7fe      	b.n	8007922 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8007924:	4d0c      	ldr	r5, [pc, #48]	; (8007958 <xTimerGenericCommand+0x50>)
 8007926:	6828      	ldr	r0, [r5, #0]
 8007928:	b178      	cbz	r0, 800794a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800792a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800792c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800792e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007932:	dc0c      	bgt.n	800794e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007934:	f7ff ff10 	bl	8007758 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007938:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800793a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800793c:	4669      	mov	r1, sp
 800793e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007940:	bf0c      	ite	eq
 8007942:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007944:	461a      	movne	r2, r3
 8007946:	f7ff f8cf 	bl	8006ae8 <xQueueGenericSend>
}
 800794a:	b004      	add	sp, #16
 800794c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800794e:	2300      	movs	r3, #0
 8007950:	4669      	mov	r1, sp
 8007952:	f7ff f97c 	bl	8006c4e <xQueueGenericSendFromISR>
 8007956:	e7f8      	b.n	800794a <xTimerGenericCommand+0x42>
 8007958:	24003b38 	.word	0x24003b38

0800795c <prvSampleTimeNow>:
{
 800795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8007960:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007a04 <prvSampleTimeNow+0xa8>
{
 8007964:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007966:	f7ff fcdd 	bl	8007324 <xTaskGetTickCount>
 800796a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800796c:	f8d8 3000 	ldr.w	r3, [r8]
 8007970:	4283      	cmp	r3, r0
 8007972:	d940      	bls.n	80079f6 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007974:	4f21      	ldr	r7, [pc, #132]	; (80079fc <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007976:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	b95a      	cbnz	r2, 8007998 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8007980:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <prvSampleTimeNow+0xa4>)
 8007982:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007984:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007986:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8007988:	6039      	str	r1, [r7, #0]
}
 800798a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800798c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800798e:	f8c8 5000 	str.w	r5, [r8]
}
 8007992:	b004      	add	sp, #16
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007998:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800799a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800799c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079a0:	1d21      	adds	r1, r4, #4
 80079a2:	4608      	mov	r0, r1
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	f7fe ff4e 	bl	8006846 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079aa:	6a23      	ldr	r3, [r4, #32]
 80079ac:	4620      	mov	r0, r4
 80079ae:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	f013 0f04 	tst.w	r3, #4
 80079ba:	d0de      	beq.n	800797a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079bc:	69a3      	ldr	r3, [r4, #24]
 80079be:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80079c0:	459a      	cmp	sl, r3
 80079c2:	d205      	bcs.n	80079d0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079c4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ca:	f7fe ff25 	bl	8006818 <vListInsert>
 80079ce:	e7d4      	b.n	800797a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079d0:	2300      	movs	r3, #0
 80079d2:	4652      	mov	r2, sl
 80079d4:	4620      	mov	r0, r4
 80079d6:	f8cd 9000 	str.w	r9, [sp]
 80079da:	4619      	mov	r1, r3
 80079dc:	f7ff ff94 	bl	8007908 <xTimerGenericCommand>
				configASSERT( xResult );
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1ca      	bne.n	800797a <prvSampleTimeNow+0x1e>
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	e7fe      	b.n	80079f4 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e7c7      	b.n	800798a <prvSampleTimeNow+0x2e>
 80079fa:	bf00      	nop
 80079fc:	24003a14 	.word	0x24003a14
 8007a00:	24003a18 	.word	0x24003a18
 8007a04:	24003ae4 	.word	0x24003ae4

08007a08 <prvTimerTask>:
{
 8007a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a0c:	4d6e      	ldr	r5, [pc, #440]	; (8007bc8 <prvTimerTask+0x1c0>)
{
 8007a0e:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a10:	4e6e      	ldr	r6, [pc, #440]	; (8007bcc <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	f8d3 8000 	ldr.w	r8, [r3]
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	d035      	beq.n	8007a8a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a1e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a20:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a22:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8007a26:	f7ff fc75 	bl	8007314 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a2a:	a804      	add	r0, sp, #16
 8007a2c:	f7ff ff96 	bl	800795c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007a30:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a32:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d169      	bne.n	8007b0c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	d14c      	bne.n	8007ad6 <prvTimerTask+0xce>
 8007a3c:	4540      	cmp	r0, r8
 8007a3e:	d350      	bcc.n	8007ae2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8007a40:	f7ff fd0c 	bl	800745c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4a:	1d38      	adds	r0, r7, #4
 8007a4c:	f7fe fefb 	bl	8006846 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a54:	0758      	lsls	r0, r3, #29
 8007a56:	d51a      	bpl.n	8007a8e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	4643      	mov	r3, r8
 8007a5c:	464a      	mov	r2, r9
 8007a5e:	4638      	mov	r0, r7
 8007a60:	4441      	add	r1, r8
 8007a62:	f7ff ff01 	bl	8007868 <prvInsertTimerInActiveList>
 8007a66:	b1b0      	cbz	r0, 8007a96 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a68:	4623      	mov	r3, r4
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4638      	mov	r0, r7
 8007a70:	9400      	str	r4, [sp, #0]
 8007a72:	f7ff ff49 	bl	8007908 <xTimerGenericCommand>
			configASSERT( xResult );
 8007a76:	b970      	cbnz	r0, 8007a96 <prvTimerTask+0x8e>
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	e7fe      	b.n	8007a88 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a8a:	2401      	movs	r4, #1
 8007a8c:	e7cb      	b.n	8007a26 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	4638      	mov	r0, r7
 8007a9a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	6830      	ldr	r0, [r6, #0]
 8007aa2:	f7ff f936 	bl	8006d12 <xQueueReceive>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d0b3      	beq.n	8007a12 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aaa:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007aac:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db2f      	blt.n	8007b12 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ab2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ab4:	6963      	ldr	r3, [r4, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d132      	bne.n	8007b20 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aba:	a803      	add	r0, sp, #12
 8007abc:	f7ff ff4e 	bl	800795c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007ac0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ac2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d8e9      	bhi.n	8007a9c <prvTimerTask+0x94>
 8007ac8:	e8df f003 	tbb	[pc, r3]
 8007acc:	572e2e2e 	.word	0x572e2e2e
 8007ad0:	2e2e765e 	.word	0x2e2e765e
 8007ad4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ad6:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <prvTimerTask+0x1c8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681c      	ldr	r4, [r3, #0]
 8007adc:	fab4 f484 	clz	r4, r4
 8007ae0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	eba8 0109 	sub.w	r1, r8, r9
 8007ae8:	6830      	ldr	r0, [r6, #0]
 8007aea:	f7ff f9c3 	bl	8006e74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aee:	f7ff fcb5 	bl	800745c <xTaskResumeAll>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d1d2      	bne.n	8007a9c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8007af6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	e7c7      	b.n	8007a9c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8007b0c:	f7ff fca6 	bl	800745c <xTaskResumeAll>
}
 8007b10:	e7c4      	b.n	8007a9c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b12:	9b05      	ldr	r3, [sp, #20]
 8007b14:	9907      	ldr	r1, [sp, #28]
 8007b16:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dbbe      	blt.n	8007a9c <prvTimerTask+0x94>
 8007b1e:	e7c8      	b.n	8007ab2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b20:	1d20      	adds	r0, r4, #4
 8007b22:	f7fe fe90 	bl	8006846 <uxListRemove>
 8007b26:	e7c8      	b.n	8007aba <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b28:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	4419      	add	r1, r3
 8007b3c:	f7ff fe94 	bl	8007868 <prvInsertTimerInActiveList>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d0ab      	beq.n	8007a9c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b44:	6a23      	ldr	r3, [r4, #32]
 8007b46:	4620      	mov	r0, r4
 8007b48:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007b4e:	0759      	lsls	r1, r3, #29
 8007b50:	d5a4      	bpl.n	8007a9c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b52:	69a2      	ldr	r2, [r4, #24]
 8007b54:	2300      	movs	r3, #0
 8007b56:	9905      	ldr	r1, [sp, #20]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	4619      	mov	r1, r3
 8007b60:	f7ff fed2 	bl	8007908 <xTimerGenericCommand>
							configASSERT( xResult );
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d199      	bne.n	8007a9c <prvTimerTask+0x94>
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	e7fe      	b.n	8007b78 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b7e:	f023 0301 	bic.w	r3, r3, #1
 8007b82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007b86:	e789      	b.n	8007a9c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b88:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b94:	9905      	ldr	r1, [sp, #20]
 8007b96:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b98:	b941      	cbnz	r1, 8007bac <prvTimerTask+0x1a4>
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	e7fe      	b.n	8007baa <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bac:	4603      	mov	r3, r0
 8007bae:	4401      	add	r1, r0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7ff fe59 	bl	8007868 <prvInsertTimerInActiveList>
					break;
 8007bb6:	e771      	b.n	8007a9c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bb8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007bbc:	079a      	lsls	r2, r3, #30
 8007bbe:	d4de      	bmi.n	8007b7e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fa6f 	bl	80080a4 <vPortFree>
 8007bc6:	e769      	b.n	8007a9c <prvTimerTask+0x94>
 8007bc8:	24003a14 	.word	0x24003a14
 8007bcc:	24003b38 	.word	0x24003b38
 8007bd0:	24003a18 	.word	0x24003a18

08007bd4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bd4:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <prvPortStartFirstTask+0x24>)
 8007bd6:	6800      	ldr	r0, [r0, #0]
 8007bd8:	6800      	ldr	r0, [r0, #0]
 8007bda:	f380 8808 	msr	MSP, r0
 8007bde:	f04f 0000 	mov.w	r0, #0
 8007be2:	f380 8814 	msr	CONTROL, r0
 8007be6:	b662      	cpsie	i
 8007be8:	b661      	cpsie	f
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	df00      	svc	0
 8007bf4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bf6:	0000      	.short	0x0000
 8007bf8:	e000ed08 	.word	0xe000ed08

08007bfc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bfc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c0c <vPortEnableVFP+0x10>
 8007c00:	6801      	ldr	r1, [r0, #0]
 8007c02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c06:	6001      	str	r1, [r0, #0]
 8007c08:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c0a:	0000      	.short	0x0000
 8007c0c:	e000ed88 	.word	0xe000ed88

08007c10 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007c10:	2300      	movs	r3, #0
{
 8007c12:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007c14:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <prvTaskExitError+0x3c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	d008      	beq.n	8007c30 <prvTaskExitError+0x20>
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	e7fe      	b.n	8007c2e <prvTaskExitError+0x1e>
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0fc      	beq.n	8007c40 <prvTaskExitError+0x30>
}
 8007c46:	b002      	add	sp, #8
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	24000010 	.word	0x24000010

08007c50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c54:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c58:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007c5c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c5e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c60:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c62:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c64:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c66:	f06f 0302 	mvn.w	r3, #2
 8007c6a:	6203      	str	r3, [r0, #32]
}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	08007c11 	.word	0x08007c11
	...

08007c80 <SVC_Handler>:
	__asm volatile (
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <pxCurrentTCBConst2>)
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	6808      	ldr	r0, [r1, #0]
 8007c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	f380 8809 	msr	PSP, r0
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	4770      	bx	lr
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst2>:
 8007ca0:	24003518 	.word	0x24003518

08007ca4 <vPortEnterCritical>:
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007cb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <vPortEnterCritical+0x3c>)
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007cba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007cbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007cbe:	d10e      	bne.n	8007cde <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007cc4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	b143      	cbz	r3, 8007cde <vPortEnterCritical+0x3a>
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	e7fe      	b.n	8007cdc <vPortEnterCritical+0x38>
}
 8007cde:	4770      	bx	lr
 8007ce0:	24000010 	.word	0x24000010

08007ce4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007ce4:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <vPortExitCritical+0x24>)
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	b943      	cbnz	r3, 8007cfc <vPortExitCritical+0x18>
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	e7fe      	b.n	8007cfa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d00:	b90b      	cbnz	r3, 8007d06 <vPortExitCritical+0x22>
	__asm volatile
 8007d02:	f383 8811 	msr	BASEPRI, r3
}
 8007d06:	4770      	bx	lr
 8007d08:	24000010 	.word	0x24000010
 8007d0c:	00000000 	.word	0x00000000

08007d10 <PendSV_Handler>:
	__asm volatile
 8007d10:	f3ef 8009 	mrs	r0, PSP
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <pxCurrentTCBConst>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f01e 0f10 	tst.w	lr, #16
 8007d20:	bf08      	it	eq
 8007d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	6010      	str	r0, [r2, #0]
 8007d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d34:	f380 8811 	msr	BASEPRI, r0
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f7ff fc00 	bl	8007544 <vTaskSwitchContext>
 8007d44:	f04f 0000 	mov.w	r0, #0
 8007d48:	f380 8811 	msr	BASEPRI, r0
 8007d4c:	bc09      	pop	{r0, r3}
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d56:	f01e 0f10 	tst.w	lr, #16
 8007d5a:	bf08      	it	eq
 8007d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d60:	f380 8809 	msr	PSP, r0
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst>:
 8007d70:	24003518 	.word	0x24003518

08007d74 <xPortSysTickHandler>:
{
 8007d74:	b508      	push	{r3, lr}
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007d86:	f7ff fad3 	bl	8007330 <xTaskIncrementTick>
 8007d8a:	b128      	cbz	r0, 8007d98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bd08      	pop	{r3, pc}

08007da0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007da0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007da4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007da6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007daa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dae:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <vPortSetupTimerInterrupt+0x20>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007db6:	3b01      	subs	r3, #1
 8007db8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dba:	2307      	movs	r3, #7
 8007dbc:	6113      	str	r3, [r2, #16]
}
 8007dbe:	4770      	bx	lr
 8007dc0:	24000000 	.word	0x24000000

08007dc4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dca:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8007dce:	4a3a      	ldr	r2, [pc, #232]	; (8007eb8 <xPortStartScheduler+0xf4>)
 8007dd0:	4291      	cmp	r1, r2
 8007dd2:	d108      	bne.n	8007de6 <xPortStartScheduler+0x22>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	e7fe      	b.n	8007de4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007de6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007dea:	4b34      	ldr	r3, [pc, #208]	; (8007ebc <xPortStartScheduler+0xf8>)
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d108      	bne.n	8007e02 <xPortStartScheduler+0x3e>
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	e7fe      	b.n	8007e00 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e02:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e04:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e10:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e12:	4a2c      	ldr	r2, [pc, #176]	; (8007ec4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e22:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e24:	2307      	movs	r3, #7
 8007e26:	4a28      	ldr	r2, [pc, #160]	; (8007ec8 <xPortStartScheduler+0x104>)
 8007e28:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e2a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007e2e:	1e5c      	subs	r4, r3, #1
 8007e30:	0600      	lsls	r0, r0, #24
 8007e32:	d40c      	bmi.n	8007e4e <xPortStartScheduler+0x8a>
 8007e34:	b111      	cbz	r1, 8007e3c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	d011      	beq.n	8007e60 <xPortStartScheduler+0x9c>
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	e7fe      	b.n	8007e4c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e52:	2101      	movs	r1, #1
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f88d 3003 	strb.w	r3, [sp, #3]
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	e7e4      	b.n	8007e2a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e60:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e64:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007e68:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	4a14      	ldr	r2, [pc, #80]	; (8007ec0 <xPortStartScheduler+0xfc>)
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e74:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e7c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e80:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007e84:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e88:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007e8c:	f7ff ff88 	bl	8007da0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007e90:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <xPortStartScheduler+0x108>)
 8007e92:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007e94:	f7ff feb2 	bl	8007bfc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e98:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ea0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007ea4:	f7ff fe96 	bl	8007bd4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007ea8:	f7ff fb4c 	bl	8007544 <vTaskSwitchContext>
}
 8007eac:	4628      	mov	r0, r5
	prvTaskExitError();
 8007eae:	f7ff feaf 	bl	8007c10 <prvTaskExitError>
}
 8007eb2:	b003      	add	sp, #12
 8007eb4:	bd30      	pop	{r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	410fc271 	.word	0x410fc271
 8007ebc:	410fc270 	.word	0x410fc270
 8007ec0:	e000e400 	.word	0xe000e400
 8007ec4:	24003b40 	.word	0x24003b40
 8007ec8:	24003b44 	.word	0x24003b44
 8007ecc:	24000010 	.word	0x24000010

08007ed0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ed0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	2b0f      	cmp	r3, #15
 8007ed6:	d90e      	bls.n	8007ef6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ed8:	4a11      	ldr	r2, [pc, #68]	; (8007f20 <vPortValidateInterruptPriority+0x50>)
 8007eda:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007edc:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <vPortValidateInterruptPriority+0x54>)
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d908      	bls.n	8007ef6 <vPortValidateInterruptPriority+0x26>
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	e7fe      	b.n	8007ef4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007efa:	4a0b      	ldr	r2, [pc, #44]	; (8007f28 <vPortValidateInterruptPriority+0x58>)
 8007efc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d908      	bls.n	8007f1c <vPortValidateInterruptPriority+0x4c>
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	e7fe      	b.n	8007f1a <vPortValidateInterruptPriority+0x4a>
	}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e3f0 	.word	0xe000e3f0
 8007f24:	24003b40 	.word	0x24003b40
 8007f28:	24003b44 	.word	0x24003b44

08007f2c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <prvInsertBlockIntoFreeList+0x40>)
{
 8007f2e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f30:	461a      	mov	r2, r3
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4283      	cmp	r3, r0
 8007f36:	d3fb      	bcc.n	8007f30 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f38:	6854      	ldr	r4, [r2, #4]
 8007f3a:	1911      	adds	r1, r2, r4
 8007f3c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f3e:	bf01      	itttt	eq
 8007f40:	6841      	ldreq	r1, [r0, #4]
 8007f42:	4610      	moveq	r0, r2
 8007f44:	1909      	addeq	r1, r1, r4
 8007f46:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f48:	6844      	ldr	r4, [r0, #4]
 8007f4a:	1901      	adds	r1, r0, r4
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	d107      	bne.n	8007f60 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f50:	4907      	ldr	r1, [pc, #28]	; (8007f70 <prvInsertBlockIntoFreeList+0x44>)
 8007f52:	6809      	ldr	r1, [r1, #0]
 8007f54:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f56:	bf1f      	itttt	ne
 8007f58:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f5a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f5c:	1909      	addne	r1, r1, r4
 8007f5e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f60:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f62:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f64:	bf18      	it	ne
 8007f66:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	24007760 	.word	0x24007760
 8007f70:	24003b48 	.word	0x24003b48

08007f74 <pvPortMalloc>:
{
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007f7a:	f7ff f9cb 	bl	8007314 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007f7e:	4842      	ldr	r0, [pc, #264]	; (8008088 <pvPortMalloc+0x114>)
 8007f80:	4d42      	ldr	r5, [pc, #264]	; (800808c <pvPortMalloc+0x118>)
 8007f82:	6803      	ldr	r3, [r0, #0]
 8007f84:	bb0b      	cbnz	r3, 8007fca <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8007f86:	4942      	ldr	r1, [pc, #264]	; (8008090 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f88:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f8a:	4e42      	ldr	r6, [pc, #264]	; (8008094 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f8c:	bf1b      	ittet	ne
 8007f8e:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f90:	f501 5270 	addne.w	r2, r1, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f94:	f44f 5270 	moveq.w	r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f98:	f023 0307 	bicne.w	r3, r3, #7
 8007f9c:	bf1c      	itt	ne
 8007f9e:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fa0:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8007fa2:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fa4:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fa6:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fa8:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8007faa:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fac:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007fb0:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fb4:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8007fb6:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fb8:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fbc:	4a36      	ldr	r2, [pc, #216]	; (8008098 <pvPortMalloc+0x124>)
 8007fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc0:	4a36      	ldr	r2, [pc, #216]	; (800809c <pvPortMalloc+0x128>)
 8007fc2:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fc8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fca:	682f      	ldr	r7, [r5, #0]
 8007fcc:	4227      	tst	r7, r4
 8007fce:	d155      	bne.n	800807c <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d046      	beq.n	8008062 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8007fd4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd8:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fda:	bf1c      	itt	ne
 8007fdc:	f023 0307 	bicne.w	r3, r3, #7
 8007fe0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d04a      	beq.n	800807c <pvPortMalloc+0x108>
 8007fe6:	4c2d      	ldr	r4, [pc, #180]	; (800809c <pvPortMalloc+0x128>)
 8007fe8:	6826      	ldr	r6, [r4, #0]
 8007fea:	429e      	cmp	r6, r3
 8007fec:	d346      	bcc.n	800807c <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8007fee:	4a29      	ldr	r2, [pc, #164]	; (8008094 <pvPortMalloc+0x120>)
 8007ff0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ff2:	6869      	ldr	r1, [r5, #4]
 8007ff4:	4299      	cmp	r1, r3
 8007ff6:	d204      	bcs.n	8008002 <pvPortMalloc+0x8e>
 8007ff8:	f8d5 c000 	ldr.w	ip, [r5]
 8007ffc:	f1bc 0f00 	cmp.w	ip, #0
 8008000:	d115      	bne.n	800802e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	42a8      	cmp	r0, r5
 8008006:	d039      	beq.n	800807c <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008008:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800800a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800800c:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008010:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008012:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008014:	d912      	bls.n	800803c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008016:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008018:	0742      	lsls	r2, r0, #29
 800801a:	d00b      	beq.n	8008034 <pvPortMalloc+0xc0>
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	e7fe      	b.n	800802c <pvPortMalloc+0xb8>
 800802e:	462a      	mov	r2, r5
 8008030:	4665      	mov	r5, ip
 8008032:	e7de      	b.n	8007ff2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008034:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008036:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008038:	f7ff ff78 	bl	8007f2c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800803c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800803e:	4916      	ldr	r1, [pc, #88]	; (8008098 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008040:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008042:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8008044:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 8008046:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008048:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800804a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800804c:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800804e:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008050:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008052:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 8008056:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800805a:	bf38      	it	cc
 800805c:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800805e:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8008060:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8008062:	f7ff f9fb 	bl	800745c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008066:	0763      	lsls	r3, r4, #29
 8008068:	d00a      	beq.n	8008080 <pvPortMalloc+0x10c>
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	e7fe      	b.n	800807a <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800807c:	2400      	movs	r4, #0
 800807e:	e7f0      	b.n	8008062 <pvPortMalloc+0xee>
}
 8008080:	4620      	mov	r0, r4
 8008082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008086:	bf00      	nop
 8008088:	24003b48 	.word	0x24003b48
 800808c:	2400774c 	.word	0x2400774c
 8008090:	24003b4c 	.word	0x24003b4c
 8008094:	24007760 	.word	0x24007760
 8008098:	24007754 	.word	0x24007754
 800809c:	24007750 	.word	0x24007750
 80080a0:	24007758 	.word	0x24007758

080080a4 <vPortFree>:
{
 80080a4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80080a6:	4604      	mov	r4, r0
 80080a8:	b390      	cbz	r0, 8008110 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <vPortFree+0x70>)
 80080ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	4213      	tst	r3, r2
 80080b4:	d108      	bne.n	80080c8 <vPortFree+0x24>
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	e7fe      	b.n	80080c6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80080cc:	b141      	cbz	r1, 80080e0 <vPortFree+0x3c>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	e7fe      	b.n	80080de <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e0:	ea23 0302 	bic.w	r3, r3, r2
 80080e4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80080e8:	f7ff f914 	bl	8007314 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ec:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <vPortFree+0x74>)
 80080ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080f2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080f6:	6811      	ldr	r1, [r2, #0]
 80080f8:	440b      	add	r3, r1
 80080fa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080fc:	f7ff ff16 	bl	8007f2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008100:	4a06      	ldr	r2, [pc, #24]	; (800811c <vPortFree+0x78>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	3301      	adds	r3, #1
}
 8008106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800810a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800810c:	f7ff b9a6 	b.w	800745c <xTaskResumeAll>
}
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	2400774c 	.word	0x2400774c
 8008118:	24007750 	.word	0x24007750
 800811c:	2400775c 	.word	0x2400775c

08008120 <__errno>:
 8008120:	4b01      	ldr	r3, [pc, #4]	; (8008128 <__errno+0x8>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	24000014 	.word	0x24000014

0800812c <std>:
 800812c:	2300      	movs	r3, #0
 800812e:	b510      	push	{r4, lr}
 8008130:	4604      	mov	r4, r0
 8008132:	e9c0 3300 	strd	r3, r3, [r0]
 8008136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813a:	6083      	str	r3, [r0, #8]
 800813c:	8181      	strh	r1, [r0, #12]
 800813e:	6643      	str	r3, [r0, #100]	; 0x64
 8008140:	81c2      	strh	r2, [r0, #14]
 8008142:	6183      	str	r3, [r0, #24]
 8008144:	4619      	mov	r1, r3
 8008146:	2208      	movs	r2, #8
 8008148:	305c      	adds	r0, #92	; 0x5c
 800814a:	f000 f934 	bl	80083b6 <memset>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <std+0x38>)
 8008150:	6263      	str	r3, [r4, #36]	; 0x24
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x3c>)
 8008154:	62a3      	str	r3, [r4, #40]	; 0x28
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x40>)
 8008158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x44>)
 800815c:	6224      	str	r4, [r4, #32]
 800815e:	6323      	str	r3, [r4, #48]	; 0x30
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	080085e5 	.word	0x080085e5
 8008168:	08008607 	.word	0x08008607
 800816c:	0800863f 	.word	0x0800863f
 8008170:	08008663 	.word	0x08008663

08008174 <_cleanup_r>:
 8008174:	4901      	ldr	r1, [pc, #4]	; (800817c <_cleanup_r+0x8>)
 8008176:	f000 b8af 	b.w	80082d8 <_fwalk_reent>
 800817a:	bf00      	nop
 800817c:	080095bd 	.word	0x080095bd

08008180 <__sfmoreglue>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	2268      	movs	r2, #104	; 0x68
 8008184:	1e4d      	subs	r5, r1, #1
 8008186:	4355      	muls	r5, r2
 8008188:	460e      	mov	r6, r1
 800818a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800818e:	f000 f93b 	bl	8008408 <_malloc_r>
 8008192:	4604      	mov	r4, r0
 8008194:	b140      	cbz	r0, 80081a8 <__sfmoreglue+0x28>
 8008196:	2100      	movs	r1, #0
 8008198:	e9c0 1600 	strd	r1, r6, [r0]
 800819c:	300c      	adds	r0, #12
 800819e:	60a0      	str	r0, [r4, #8]
 80081a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a4:	f000 f907 	bl	80083b6 <memset>
 80081a8:	4620      	mov	r0, r4
 80081aa:	bd70      	pop	{r4, r5, r6, pc}

080081ac <__sfp_lock_acquire>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__sfp_lock_acquire+0x8>)
 80081ae:	f000 b8d8 	b.w	8008362 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	24007769 	.word	0x24007769

080081b8 <__sfp_lock_release>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__sfp_lock_release+0x8>)
 80081ba:	f000 b8d3 	b.w	8008364 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	24007769 	.word	0x24007769

080081c4 <__sinit_lock_acquire>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__sinit_lock_acquire+0x8>)
 80081c6:	f000 b8cc 	b.w	8008362 <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	2400776a 	.word	0x2400776a

080081d0 <__sinit_lock_release>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sinit_lock_release+0x8>)
 80081d2:	f000 b8c7 	b.w	8008364 <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	2400776a 	.word	0x2400776a

080081dc <__sinit>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	f7ff fff0 	bl	80081c4 <__sinit_lock_acquire>
 80081e4:	69a3      	ldr	r3, [r4, #24]
 80081e6:	b11b      	cbz	r3, 80081f0 <__sinit+0x14>
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f7ff bff0 	b.w	80081d0 <__sinit_lock_release>
 80081f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f4:	6523      	str	r3, [r4, #80]	; 0x50
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <__sinit+0x68>)
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <__sinit+0x6c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80081fe:	42a3      	cmp	r3, r4
 8008200:	bf04      	itt	eq
 8008202:	2301      	moveq	r3, #1
 8008204:	61a3      	streq	r3, [r4, #24]
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f820 	bl	800824c <__sfp>
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f81c 	bl	800824c <__sfp>
 8008214:	60a0      	str	r0, [r4, #8]
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f818 	bl	800824c <__sfp>
 800821c:	2200      	movs	r2, #0
 800821e:	60e0      	str	r0, [r4, #12]
 8008220:	2104      	movs	r1, #4
 8008222:	6860      	ldr	r0, [r4, #4]
 8008224:	f7ff ff82 	bl	800812c <std>
 8008228:	68a0      	ldr	r0, [r4, #8]
 800822a:	2201      	movs	r2, #1
 800822c:	2109      	movs	r1, #9
 800822e:	f7ff ff7d 	bl	800812c <std>
 8008232:	68e0      	ldr	r0, [r4, #12]
 8008234:	2202      	movs	r2, #2
 8008236:	2112      	movs	r1, #18
 8008238:	f7ff ff78 	bl	800812c <std>
 800823c:	2301      	movs	r3, #1
 800823e:	61a3      	str	r3, [r4, #24]
 8008240:	e7d2      	b.n	80081e8 <__sinit+0xc>
 8008242:	bf00      	nop
 8008244:	0800b7c4 	.word	0x0800b7c4
 8008248:	08008175 	.word	0x08008175

0800824c <__sfp>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	4607      	mov	r7, r0
 8008250:	f7ff ffac 	bl	80081ac <__sfp_lock_acquire>
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <__sfp+0x84>)
 8008256:	681e      	ldr	r6, [r3, #0]
 8008258:	69b3      	ldr	r3, [r6, #24]
 800825a:	b913      	cbnz	r3, 8008262 <__sfp+0x16>
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff ffbd 	bl	80081dc <__sinit>
 8008262:	3648      	adds	r6, #72	; 0x48
 8008264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008268:	3b01      	subs	r3, #1
 800826a:	d503      	bpl.n	8008274 <__sfp+0x28>
 800826c:	6833      	ldr	r3, [r6, #0]
 800826e:	b30b      	cbz	r3, 80082b4 <__sfp+0x68>
 8008270:	6836      	ldr	r6, [r6, #0]
 8008272:	e7f7      	b.n	8008264 <__sfp+0x18>
 8008274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008278:	b9d5      	cbnz	r5, 80082b0 <__sfp+0x64>
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <__sfp+0x88>)
 800827c:	60e3      	str	r3, [r4, #12]
 800827e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008282:	6665      	str	r5, [r4, #100]	; 0x64
 8008284:	f000 f86c 	bl	8008360 <__retarget_lock_init_recursive>
 8008288:	f7ff ff96 	bl	80081b8 <__sfp_lock_release>
 800828c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008294:	6025      	str	r5, [r4, #0]
 8008296:	61a5      	str	r5, [r4, #24]
 8008298:	2208      	movs	r2, #8
 800829a:	4629      	mov	r1, r5
 800829c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a0:	f000 f889 	bl	80083b6 <memset>
 80082a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082ac:	4620      	mov	r0, r4
 80082ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b0:	3468      	adds	r4, #104	; 0x68
 80082b2:	e7d9      	b.n	8008268 <__sfp+0x1c>
 80082b4:	2104      	movs	r1, #4
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ff62 	bl	8008180 <__sfmoreglue>
 80082bc:	4604      	mov	r4, r0
 80082be:	6030      	str	r0, [r6, #0]
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1d5      	bne.n	8008270 <__sfp+0x24>
 80082c4:	f7ff ff78 	bl	80081b8 <__sfp_lock_release>
 80082c8:	230c      	movs	r3, #12
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	e7ee      	b.n	80082ac <__sfp+0x60>
 80082ce:	bf00      	nop
 80082d0:	0800b7c4 	.word	0x0800b7c4
 80082d4:	ffff0001 	.word	0xffff0001

080082d8 <_fwalk_reent>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	4606      	mov	r6, r0
 80082de:	4688      	mov	r8, r1
 80082e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e4:	2700      	movs	r7, #0
 80082e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ea:	f1b9 0901 	subs.w	r9, r9, #1
 80082ee:	d505      	bpl.n	80082fc <_fwalk_reent+0x24>
 80082f0:	6824      	ldr	r4, [r4, #0]
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d1f7      	bne.n	80082e6 <_fwalk_reent+0xe>
 80082f6:	4638      	mov	r0, r7
 80082f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fc:	89ab      	ldrh	r3, [r5, #12]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d907      	bls.n	8008312 <_fwalk_reent+0x3a>
 8008302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008306:	3301      	adds	r3, #1
 8008308:	d003      	beq.n	8008312 <_fwalk_reent+0x3a>
 800830a:	4629      	mov	r1, r5
 800830c:	4630      	mov	r0, r6
 800830e:	47c0      	blx	r8
 8008310:	4307      	orrs	r7, r0
 8008312:	3568      	adds	r5, #104	; 0x68
 8008314:	e7e9      	b.n	80082ea <_fwalk_reent+0x12>
	...

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4d0d      	ldr	r5, [pc, #52]	; (8008350 <__libc_init_array+0x38>)
 800831c:	4c0d      	ldr	r4, [pc, #52]	; (8008354 <__libc_init_array+0x3c>)
 800831e:	1b64      	subs	r4, r4, r5
 8008320:	10a4      	asrs	r4, r4, #2
 8008322:	2600      	movs	r6, #0
 8008324:	42a6      	cmp	r6, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	4d0b      	ldr	r5, [pc, #44]	; (8008358 <__libc_init_array+0x40>)
 800832a:	4c0c      	ldr	r4, [pc, #48]	; (800835c <__libc_init_array+0x44>)
 800832c:	f003 f8ce 	bl	800b4cc <_init>
 8008330:	1b64      	subs	r4, r4, r5
 8008332:	10a4      	asrs	r4, r4, #2
 8008334:	2600      	movs	r6, #0
 8008336:	42a6      	cmp	r6, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008340:	4798      	blx	r3
 8008342:	3601      	adds	r6, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	f855 3b04 	ldr.w	r3, [r5], #4
 800834a:	4798      	blx	r3
 800834c:	3601      	adds	r6, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	0800bb9c 	.word	0x0800bb9c
 8008354:	0800bb9c 	.word	0x0800bb9c
 8008358:	0800bb9c 	.word	0x0800bb9c
 800835c:	0800bba0 	.word	0x0800bba0

08008360 <__retarget_lock_init_recursive>:
 8008360:	4770      	bx	lr

08008362 <__retarget_lock_acquire_recursive>:
 8008362:	4770      	bx	lr

08008364 <__retarget_lock_release_recursive>:
 8008364:	4770      	bx	lr

08008366 <memcpy>:
 8008366:	440a      	add	r2, r1
 8008368:	4291      	cmp	r1, r2
 800836a:	f100 33ff 	add.w	r3, r0, #4294967295
 800836e:	d100      	bne.n	8008372 <memcpy+0xc>
 8008370:	4770      	bx	lr
 8008372:	b510      	push	{r4, lr}
 8008374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800837c:	4291      	cmp	r1, r2
 800837e:	d1f9      	bne.n	8008374 <memcpy+0xe>
 8008380:	bd10      	pop	{r4, pc}

08008382 <memmove>:
 8008382:	4288      	cmp	r0, r1
 8008384:	b510      	push	{r4, lr}
 8008386:	eb01 0402 	add.w	r4, r1, r2
 800838a:	d902      	bls.n	8008392 <memmove+0x10>
 800838c:	4284      	cmp	r4, r0
 800838e:	4623      	mov	r3, r4
 8008390:	d807      	bhi.n	80083a2 <memmove+0x20>
 8008392:	1e43      	subs	r3, r0, #1
 8008394:	42a1      	cmp	r1, r4
 8008396:	d008      	beq.n	80083aa <memmove+0x28>
 8008398:	f811 2b01 	ldrb.w	r2, [r1], #1
 800839c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083a0:	e7f8      	b.n	8008394 <memmove+0x12>
 80083a2:	4402      	add	r2, r0
 80083a4:	4601      	mov	r1, r0
 80083a6:	428a      	cmp	r2, r1
 80083a8:	d100      	bne.n	80083ac <memmove+0x2a>
 80083aa:	bd10      	pop	{r4, pc}
 80083ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083b4:	e7f7      	b.n	80083a6 <memmove+0x24>

080083b6 <memset>:
 80083b6:	4402      	add	r2, r0
 80083b8:	4603      	mov	r3, r0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d100      	bne.n	80083c0 <memset+0xa>
 80083be:	4770      	bx	lr
 80083c0:	f803 1b01 	strb.w	r1, [r3], #1
 80083c4:	e7f9      	b.n	80083ba <memset+0x4>
	...

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0e      	ldr	r6, [pc, #56]	; (8008404 <sbrk_aligned+0x3c>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f000 f8f6 	bl	80085c4 <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 f8f1 	bl	80085c4 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <sbrk_aligned+0x34>
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d007      	beq.n	8008400 <sbrk_aligned+0x38>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f8e6 	bl	80085c4 <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d101      	bne.n	8008400 <sbrk_aligned+0x38>
 80083fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008400:	4620      	mov	r0, r4
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	24007770 	.word	0x24007770

08008408 <_malloc_r>:
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	1ccd      	adds	r5, r1, #3
 800840e:	f025 0503 	bic.w	r5, r5, #3
 8008412:	3508      	adds	r5, #8
 8008414:	2d0c      	cmp	r5, #12
 8008416:	bf38      	it	cc
 8008418:	250c      	movcc	r5, #12
 800841a:	2d00      	cmp	r5, #0
 800841c:	4607      	mov	r7, r0
 800841e:	db01      	blt.n	8008424 <_malloc_r+0x1c>
 8008420:	42a9      	cmp	r1, r5
 8008422:	d905      	bls.n	8008430 <_malloc_r+0x28>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	2600      	movs	r6, #0
 800842a:	4630      	mov	r0, r6
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	4e2e      	ldr	r6, [pc, #184]	; (80084ec <_malloc_r+0xe4>)
 8008432:	f001 fc93 	bl	8009d5c <__malloc_lock>
 8008436:	6833      	ldr	r3, [r6, #0]
 8008438:	461c      	mov	r4, r3
 800843a:	bb34      	cbnz	r4, 800848a <_malloc_r+0x82>
 800843c:	4629      	mov	r1, r5
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff ffc2 	bl	80083c8 <sbrk_aligned>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	4604      	mov	r4, r0
 8008448:	d14d      	bne.n	80084e6 <_malloc_r+0xde>
 800844a:	6834      	ldr	r4, [r6, #0]
 800844c:	4626      	mov	r6, r4
 800844e:	2e00      	cmp	r6, #0
 8008450:	d140      	bne.n	80084d4 <_malloc_r+0xcc>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	4631      	mov	r1, r6
 8008456:	4638      	mov	r0, r7
 8008458:	eb04 0803 	add.w	r8, r4, r3
 800845c:	f000 f8b2 	bl	80085c4 <_sbrk_r>
 8008460:	4580      	cmp	r8, r0
 8008462:	d13a      	bne.n	80084da <_malloc_r+0xd2>
 8008464:	6821      	ldr	r1, [r4, #0]
 8008466:	3503      	adds	r5, #3
 8008468:	1a6d      	subs	r5, r5, r1
 800846a:	f025 0503 	bic.w	r5, r5, #3
 800846e:	3508      	adds	r5, #8
 8008470:	2d0c      	cmp	r5, #12
 8008472:	bf38      	it	cc
 8008474:	250c      	movcc	r5, #12
 8008476:	4629      	mov	r1, r5
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ffa5 	bl	80083c8 <sbrk_aligned>
 800847e:	3001      	adds	r0, #1
 8008480:	d02b      	beq.n	80084da <_malloc_r+0xd2>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	442b      	add	r3, r5
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	e00e      	b.n	80084a8 <_malloc_r+0xa0>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	1b52      	subs	r2, r2, r5
 800848e:	d41e      	bmi.n	80084ce <_malloc_r+0xc6>
 8008490:	2a0b      	cmp	r2, #11
 8008492:	d916      	bls.n	80084c2 <_malloc_r+0xba>
 8008494:	1961      	adds	r1, r4, r5
 8008496:	42a3      	cmp	r3, r4
 8008498:	6025      	str	r5, [r4, #0]
 800849a:	bf18      	it	ne
 800849c:	6059      	strne	r1, [r3, #4]
 800849e:	6863      	ldr	r3, [r4, #4]
 80084a0:	bf08      	it	eq
 80084a2:	6031      	streq	r1, [r6, #0]
 80084a4:	5162      	str	r2, [r4, r5]
 80084a6:	604b      	str	r3, [r1, #4]
 80084a8:	4638      	mov	r0, r7
 80084aa:	f104 060b 	add.w	r6, r4, #11
 80084ae:	f001 fc5b 	bl	8009d68 <__malloc_unlock>
 80084b2:	f026 0607 	bic.w	r6, r6, #7
 80084b6:	1d23      	adds	r3, r4, #4
 80084b8:	1af2      	subs	r2, r6, r3
 80084ba:	d0b6      	beq.n	800842a <_malloc_r+0x22>
 80084bc:	1b9b      	subs	r3, r3, r6
 80084be:	50a3      	str	r3, [r4, r2]
 80084c0:	e7b3      	b.n	800842a <_malloc_r+0x22>
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	bf0c      	ite	eq
 80084c8:	6032      	streq	r2, [r6, #0]
 80084ca:	605a      	strne	r2, [r3, #4]
 80084cc:	e7ec      	b.n	80084a8 <_malloc_r+0xa0>
 80084ce:	4623      	mov	r3, r4
 80084d0:	6864      	ldr	r4, [r4, #4]
 80084d2:	e7b2      	b.n	800843a <_malloc_r+0x32>
 80084d4:	4634      	mov	r4, r6
 80084d6:	6876      	ldr	r6, [r6, #4]
 80084d8:	e7b9      	b.n	800844e <_malloc_r+0x46>
 80084da:	230c      	movs	r3, #12
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4638      	mov	r0, r7
 80084e0:	f001 fc42 	bl	8009d68 <__malloc_unlock>
 80084e4:	e7a1      	b.n	800842a <_malloc_r+0x22>
 80084e6:	6025      	str	r5, [r4, #0]
 80084e8:	e7de      	b.n	80084a8 <_malloc_r+0xa0>
 80084ea:	bf00      	nop
 80084ec:	2400776c 	.word	0x2400776c

080084f0 <cleanup_glue>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	6809      	ldr	r1, [r1, #0]
 80084f6:	4605      	mov	r5, r0
 80084f8:	b109      	cbz	r1, 80084fe <cleanup_glue+0xe>
 80084fa:	f7ff fff9 	bl	80084f0 <cleanup_glue>
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008506:	f002 b909 	b.w	800a71c <_free_r>
	...

0800850c <_reclaim_reent>:
 800850c:	4b2c      	ldr	r3, [pc, #176]	; (80085c0 <_reclaim_reent+0xb4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4283      	cmp	r3, r0
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	d051      	beq.n	80085bc <_reclaim_reent+0xb0>
 8008518:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800851a:	b143      	cbz	r3, 800852e <_reclaim_reent+0x22>
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d14a      	bne.n	80085b8 <_reclaim_reent+0xac>
 8008522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	b111      	cbz	r1, 800852e <_reclaim_reent+0x22>
 8008528:	4620      	mov	r0, r4
 800852a:	f002 f8f7 	bl	800a71c <_free_r>
 800852e:	6961      	ldr	r1, [r4, #20]
 8008530:	b111      	cbz	r1, 8008538 <_reclaim_reent+0x2c>
 8008532:	4620      	mov	r0, r4
 8008534:	f002 f8f2 	bl	800a71c <_free_r>
 8008538:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800853a:	b111      	cbz	r1, 8008542 <_reclaim_reent+0x36>
 800853c:	4620      	mov	r0, r4
 800853e:	f002 f8ed 	bl	800a71c <_free_r>
 8008542:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008544:	b111      	cbz	r1, 800854c <_reclaim_reent+0x40>
 8008546:	4620      	mov	r0, r4
 8008548:	f002 f8e8 	bl	800a71c <_free_r>
 800854c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800854e:	b111      	cbz	r1, 8008556 <_reclaim_reent+0x4a>
 8008550:	4620      	mov	r0, r4
 8008552:	f002 f8e3 	bl	800a71c <_free_r>
 8008556:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008558:	b111      	cbz	r1, 8008560 <_reclaim_reent+0x54>
 800855a:	4620      	mov	r0, r4
 800855c:	f002 f8de 	bl	800a71c <_free_r>
 8008560:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008562:	b111      	cbz	r1, 800856a <_reclaim_reent+0x5e>
 8008564:	4620      	mov	r0, r4
 8008566:	f002 f8d9 	bl	800a71c <_free_r>
 800856a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800856c:	b111      	cbz	r1, 8008574 <_reclaim_reent+0x68>
 800856e:	4620      	mov	r0, r4
 8008570:	f002 f8d4 	bl	800a71c <_free_r>
 8008574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008576:	b111      	cbz	r1, 800857e <_reclaim_reent+0x72>
 8008578:	4620      	mov	r0, r4
 800857a:	f002 f8cf 	bl	800a71c <_free_r>
 800857e:	69a3      	ldr	r3, [r4, #24]
 8008580:	b1e3      	cbz	r3, 80085bc <_reclaim_reent+0xb0>
 8008582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008584:	4620      	mov	r0, r4
 8008586:	4798      	blx	r3
 8008588:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800858a:	b1b9      	cbz	r1, 80085bc <_reclaim_reent+0xb0>
 800858c:	4620      	mov	r0, r4
 800858e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008592:	f7ff bfad 	b.w	80084f0 <cleanup_glue>
 8008596:	5949      	ldr	r1, [r1, r5]
 8008598:	b941      	cbnz	r1, 80085ac <_reclaim_reent+0xa0>
 800859a:	3504      	adds	r5, #4
 800859c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859e:	2d80      	cmp	r5, #128	; 0x80
 80085a0:	68d9      	ldr	r1, [r3, #12]
 80085a2:	d1f8      	bne.n	8008596 <_reclaim_reent+0x8a>
 80085a4:	4620      	mov	r0, r4
 80085a6:	f002 f8b9 	bl	800a71c <_free_r>
 80085aa:	e7ba      	b.n	8008522 <_reclaim_reent+0x16>
 80085ac:	680e      	ldr	r6, [r1, #0]
 80085ae:	4620      	mov	r0, r4
 80085b0:	f002 f8b4 	bl	800a71c <_free_r>
 80085b4:	4631      	mov	r1, r6
 80085b6:	e7ef      	b.n	8008598 <_reclaim_reent+0x8c>
 80085b8:	2500      	movs	r5, #0
 80085ba:	e7ef      	b.n	800859c <_reclaim_reent+0x90>
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	bf00      	nop
 80085c0:	24000014 	.word	0x24000014

080085c4 <_sbrk_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d06      	ldr	r5, [pc, #24]	; (80085e0 <_sbrk_r+0x1c>)
 80085c8:	2300      	movs	r3, #0
 80085ca:	4604      	mov	r4, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	f7f8 ff0e 	bl	80013f0 <_sbrk>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_sbrk_r+0x1a>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_sbrk_r+0x1a>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	24007774 	.word	0x24007774

080085e4 <__sread>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	460c      	mov	r4, r1
 80085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ec:	f002 fbd2 	bl	800ad94 <_read_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	bfab      	itete	ge
 80085f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085f6:	89a3      	ldrhlt	r3, [r4, #12]
 80085f8:	181b      	addge	r3, r3, r0
 80085fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085fe:	bfac      	ite	ge
 8008600:	6563      	strge	r3, [r4, #84]	; 0x54
 8008602:	81a3      	strhlt	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__swrite>:
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	461f      	mov	r7, r3
 800860c:	898b      	ldrh	r3, [r1, #12]
 800860e:	05db      	lsls	r3, r3, #23
 8008610:	4605      	mov	r5, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4616      	mov	r6, r2
 8008616:	d505      	bpl.n	8008624 <__swrite+0x1e>
 8008618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861c:	2302      	movs	r3, #2
 800861e:	2200      	movs	r2, #0
 8008620:	f001 fb78 	bl	8009d14 <_lseek_r>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	f000 bf17 	b.w	800946c <_write_r>

0800863e <__sseek>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008646:	f001 fb65 	bl	8009d14 <_lseek_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	bf15      	itete	ne
 8008650:	6560      	strne	r0, [r4, #84]	; 0x54
 8008652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800865a:	81a3      	strheq	r3, [r4, #12]
 800865c:	bf18      	it	ne
 800865e:	81a3      	strhne	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__sclose>:
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	f000 bf13 	b.w	8009490 <_close_r>

0800866a <strcpy>:
 800866a:	4603      	mov	r3, r0
 800866c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008670:	f803 2b01 	strb.w	r2, [r3], #1
 8008674:	2a00      	cmp	r2, #0
 8008676:	d1f9      	bne.n	800866c <strcpy+0x2>
 8008678:	4770      	bx	lr

0800867a <sulp>:
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	4616      	mov	r6, r2
 8008682:	ec45 4b10 	vmov	d0, r4, r5
 8008686:	f001 fee7 	bl	800a458 <__ulp>
 800868a:	b17e      	cbz	r6, 80086ac <sulp+0x32>
 800868c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008690:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008694:	2b00      	cmp	r3, #0
 8008696:	dd09      	ble.n	80086ac <sulp+0x32>
 8008698:	051b      	lsls	r3, r3, #20
 800869a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800869e:	2000      	movs	r0, #0
 80086a0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80086a4:	ec41 0b17 	vmov	d7, r0, r1
 80086a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080086b0 <_strtod_l>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ed2d 8b0e 	vpush	{d8-d14}
 80086b8:	b097      	sub	sp, #92	; 0x5c
 80086ba:	461f      	mov	r7, r3
 80086bc:	2300      	movs	r3, #0
 80086be:	9312      	str	r3, [sp, #72]	; 0x48
 80086c0:	4ba1      	ldr	r3, [pc, #644]	; (8008948 <_strtod_l+0x298>)
 80086c2:	920d      	str	r2, [sp, #52]	; 0x34
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	4604      	mov	r4, r0
 80086ca:	4618      	mov	r0, r3
 80086cc:	468b      	mov	fp, r1
 80086ce:	f7f7 fe11 	bl	80002f4 <strlen>
 80086d2:	f04f 0800 	mov.w	r8, #0
 80086d6:	4605      	mov	r5, r0
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80086e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086e2:	7813      	ldrb	r3, [r2, #0]
 80086e4:	2b2b      	cmp	r3, #43	; 0x2b
 80086e6:	d04d      	beq.n	8008784 <_strtod_l+0xd4>
 80086e8:	d83a      	bhi.n	8008760 <_strtod_l+0xb0>
 80086ea:	2b0d      	cmp	r3, #13
 80086ec:	d833      	bhi.n	8008756 <_strtod_l+0xa6>
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	d833      	bhi.n	800875a <_strtod_l+0xaa>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d03d      	beq.n	8008772 <_strtod_l+0xc2>
 80086f6:	2300      	movs	r3, #0
 80086f8:	9308      	str	r3, [sp, #32]
 80086fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80086fc:	7833      	ldrb	r3, [r6, #0]
 80086fe:	2b30      	cmp	r3, #48	; 0x30
 8008700:	f040 80b0 	bne.w	8008864 <_strtod_l+0x1b4>
 8008704:	7873      	ldrb	r3, [r6, #1]
 8008706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800870a:	2b58      	cmp	r3, #88	; 0x58
 800870c:	d167      	bne.n	80087de <_strtod_l+0x12e>
 800870e:	9b08      	ldr	r3, [sp, #32]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	ab12      	add	r3, sp, #72	; 0x48
 8008714:	9702      	str	r7, [sp, #8]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4a8c      	ldr	r2, [pc, #560]	; (800894c <_strtod_l+0x29c>)
 800871a:	ab13      	add	r3, sp, #76	; 0x4c
 800871c:	a911      	add	r1, sp, #68	; 0x44
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fff0 	bl	8009704 <__gethex>
 8008724:	f010 0507 	ands.w	r5, r0, #7
 8008728:	4607      	mov	r7, r0
 800872a:	d005      	beq.n	8008738 <_strtod_l+0x88>
 800872c:	2d06      	cmp	r5, #6
 800872e:	d12b      	bne.n	8008788 <_strtod_l+0xd8>
 8008730:	3601      	adds	r6, #1
 8008732:	2300      	movs	r3, #0
 8008734:	9611      	str	r6, [sp, #68]	; 0x44
 8008736:	9308      	str	r3, [sp, #32]
 8008738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 854e 	bne.w	80091dc <_strtod_l+0xb2c>
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	b1e3      	cbz	r3, 800877e <_strtod_l+0xce>
 8008744:	ec49 8b17 	vmov	d7, r8, r9
 8008748:	eeb1 0b47 	vneg.f64	d0, d7
 800874c:	b017      	add	sp, #92	; 0x5c
 800874e:	ecbd 8b0e 	vpop	{d8-d14}
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	2b20      	cmp	r3, #32
 8008758:	d1cd      	bne.n	80086f6 <_strtod_l+0x46>
 800875a:	3201      	adds	r2, #1
 800875c:	9211      	str	r2, [sp, #68]	; 0x44
 800875e:	e7bf      	b.n	80086e0 <_strtod_l+0x30>
 8008760:	2b2d      	cmp	r3, #45	; 0x2d
 8008762:	d1c8      	bne.n	80086f6 <_strtod_l+0x46>
 8008764:	2301      	movs	r3, #1
 8008766:	9308      	str	r3, [sp, #32]
 8008768:	1c53      	adds	r3, r2, #1
 800876a:	9311      	str	r3, [sp, #68]	; 0x44
 800876c:	7853      	ldrb	r3, [r2, #1]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1c3      	bne.n	80086fa <_strtod_l+0x4a>
 8008772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008774:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008778:	2b00      	cmp	r3, #0
 800877a:	f040 852d 	bne.w	80091d8 <_strtod_l+0xb28>
 800877e:	ec49 8b10 	vmov	d0, r8, r9
 8008782:	e7e3      	b.n	800874c <_strtod_l+0x9c>
 8008784:	2300      	movs	r3, #0
 8008786:	e7ee      	b.n	8008766 <_strtod_l+0xb6>
 8008788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800878a:	b13a      	cbz	r2, 800879c <_strtod_l+0xec>
 800878c:	2135      	movs	r1, #53	; 0x35
 800878e:	a814      	add	r0, sp, #80	; 0x50
 8008790:	f001 ff6a 	bl	800a668 <__copybits>
 8008794:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008796:	4620      	mov	r0, r4
 8008798:	f001 fb2c 	bl	8009df4 <_Bfree>
 800879c:	3d01      	subs	r5, #1
 800879e:	2d04      	cmp	r5, #4
 80087a0:	d806      	bhi.n	80087b0 <_strtod_l+0x100>
 80087a2:	e8df f005 	tbb	[pc, r5]
 80087a6:	030a      	.short	0x030a
 80087a8:	1714      	.short	0x1714
 80087aa:	0a          	.byte	0x0a
 80087ab:	00          	.byte	0x00
 80087ac:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80087b0:	073f      	lsls	r7, r7, #28
 80087b2:	d5c1      	bpl.n	8008738 <_strtod_l+0x88>
 80087b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80087b8:	e7be      	b.n	8008738 <_strtod_l+0x88>
 80087ba:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80087be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80087cc:	e7f0      	b.n	80087b0 <_strtod_l+0x100>
 80087ce:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008950 <_strtod_l+0x2a0>
 80087d2:	e7ed      	b.n	80087b0 <_strtod_l+0x100>
 80087d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80087d8:	f04f 38ff 	mov.w	r8, #4294967295
 80087dc:	e7e8      	b.n	80087b0 <_strtod_l+0x100>
 80087de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	9211      	str	r2, [sp, #68]	; 0x44
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b30      	cmp	r3, #48	; 0x30
 80087e8:	d0f9      	beq.n	80087de <_strtod_l+0x12e>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0a4      	beq.n	8008738 <_strtod_l+0x88>
 80087ee:	2301      	movs	r3, #1
 80087f0:	f04f 0a00 	mov.w	sl, #0
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087f8:	930a      	str	r3, [sp, #40]	; 0x28
 80087fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80087fe:	f8cd a018 	str.w	sl, [sp, #24]
 8008802:	220a      	movs	r2, #10
 8008804:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008806:	7807      	ldrb	r7, [r0, #0]
 8008808:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800880c:	b2d9      	uxtb	r1, r3
 800880e:	2909      	cmp	r1, #9
 8008810:	d92a      	bls.n	8008868 <_strtod_l+0x1b8>
 8008812:	9907      	ldr	r1, [sp, #28]
 8008814:	462a      	mov	r2, r5
 8008816:	f002 fadd 	bl	800add4 <strncmp>
 800881a:	2800      	cmp	r0, #0
 800881c:	d033      	beq.n	8008886 <_strtod_l+0x1d6>
 800881e:	2000      	movs	r0, #0
 8008820:	9b06      	ldr	r3, [sp, #24]
 8008822:	463a      	mov	r2, r7
 8008824:	4601      	mov	r1, r0
 8008826:	4607      	mov	r7, r0
 8008828:	2a65      	cmp	r2, #101	; 0x65
 800882a:	d001      	beq.n	8008830 <_strtod_l+0x180>
 800882c:	2a45      	cmp	r2, #69	; 0x45
 800882e:	d117      	bne.n	8008860 <_strtod_l+0x1b0>
 8008830:	b91b      	cbnz	r3, 800883a <_strtod_l+0x18a>
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	4303      	orrs	r3, r0
 8008836:	d09c      	beq.n	8008772 <_strtod_l+0xc2>
 8008838:	2300      	movs	r3, #0
 800883a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800883e:	f10b 0201 	add.w	r2, fp, #1
 8008842:	9211      	str	r2, [sp, #68]	; 0x44
 8008844:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008848:	2a2b      	cmp	r2, #43	; 0x2b
 800884a:	d071      	beq.n	8008930 <_strtod_l+0x280>
 800884c:	2a2d      	cmp	r2, #45	; 0x2d
 800884e:	d077      	beq.n	8008940 <_strtod_l+0x290>
 8008850:	f04f 0e00 	mov.w	lr, #0
 8008854:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008858:	2d09      	cmp	r5, #9
 800885a:	d97f      	bls.n	800895c <_strtod_l+0x2ac>
 800885c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008860:	2500      	movs	r5, #0
 8008862:	e09b      	b.n	800899c <_strtod_l+0x2ec>
 8008864:	2300      	movs	r3, #0
 8008866:	e7c3      	b.n	80087f0 <_strtod_l+0x140>
 8008868:	9906      	ldr	r1, [sp, #24]
 800886a:	2908      	cmp	r1, #8
 800886c:	bfdd      	ittte	le
 800886e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008870:	fb02 3301 	mlale	r3, r2, r1, r3
 8008874:	9309      	strle	r3, [sp, #36]	; 0x24
 8008876:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	3001      	adds	r0, #1
 800887e:	3301      	adds	r3, #1
 8008880:	9306      	str	r3, [sp, #24]
 8008882:	9011      	str	r0, [sp, #68]	; 0x44
 8008884:	e7be      	b.n	8008804 <_strtod_l+0x154>
 8008886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008888:	195a      	adds	r2, r3, r5
 800888a:	9211      	str	r2, [sp, #68]	; 0x44
 800888c:	5d5a      	ldrb	r2, [r3, r5]
 800888e:	9b06      	ldr	r3, [sp, #24]
 8008890:	b3a3      	cbz	r3, 80088fc <_strtod_l+0x24c>
 8008892:	4607      	mov	r7, r0
 8008894:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008898:	2909      	cmp	r1, #9
 800889a:	d912      	bls.n	80088c2 <_strtod_l+0x212>
 800889c:	2101      	movs	r1, #1
 800889e:	e7c3      	b.n	8008828 <_strtod_l+0x178>
 80088a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	9211      	str	r2, [sp, #68]	; 0x44
 80088a6:	785a      	ldrb	r2, [r3, #1]
 80088a8:	3001      	adds	r0, #1
 80088aa:	2a30      	cmp	r2, #48	; 0x30
 80088ac:	d0f8      	beq.n	80088a0 <_strtod_l+0x1f0>
 80088ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	f200 8497 	bhi.w	80091e6 <_strtod_l+0xb36>
 80088b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ba:	930a      	str	r3, [sp, #40]	; 0x28
 80088bc:	4607      	mov	r7, r0
 80088be:	2000      	movs	r0, #0
 80088c0:	4603      	mov	r3, r0
 80088c2:	3a30      	subs	r2, #48	; 0x30
 80088c4:	f100 0101 	add.w	r1, r0, #1
 80088c8:	d012      	beq.n	80088f0 <_strtod_l+0x240>
 80088ca:	440f      	add	r7, r1
 80088cc:	eb00 0c03 	add.w	ip, r0, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	250a      	movs	r5, #10
 80088d4:	4561      	cmp	r1, ip
 80088d6:	d113      	bne.n	8008900 <_strtod_l+0x250>
 80088d8:	1819      	adds	r1, r3, r0
 80088da:	2908      	cmp	r1, #8
 80088dc:	f103 0301 	add.w	r3, r3, #1
 80088e0:	4403      	add	r3, r0
 80088e2:	dc1c      	bgt.n	800891e <_strtod_l+0x26e>
 80088e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088e6:	210a      	movs	r1, #10
 80088e8:	fb01 2200 	mla	r2, r1, r0, r2
 80088ec:	9209      	str	r2, [sp, #36]	; 0x24
 80088ee:	2100      	movs	r1, #0
 80088f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088f2:	1c50      	adds	r0, r2, #1
 80088f4:	9011      	str	r0, [sp, #68]	; 0x44
 80088f6:	7852      	ldrb	r2, [r2, #1]
 80088f8:	4608      	mov	r0, r1
 80088fa:	e7cb      	b.n	8008894 <_strtod_l+0x1e4>
 80088fc:	9806      	ldr	r0, [sp, #24]
 80088fe:	e7d4      	b.n	80088aa <_strtod_l+0x1fa>
 8008900:	2908      	cmp	r1, #8
 8008902:	dc04      	bgt.n	800890e <_strtod_l+0x25e>
 8008904:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008906:	436e      	muls	r6, r5
 8008908:	9609      	str	r6, [sp, #36]	; 0x24
 800890a:	3101      	adds	r1, #1
 800890c:	e7e2      	b.n	80088d4 <_strtod_l+0x224>
 800890e:	f101 0e01 	add.w	lr, r1, #1
 8008912:	f1be 0f10 	cmp.w	lr, #16
 8008916:	bfd8      	it	le
 8008918:	fb05 fa0a 	mulle.w	sl, r5, sl
 800891c:	e7f5      	b.n	800890a <_strtod_l+0x25a>
 800891e:	2b10      	cmp	r3, #16
 8008920:	bfdc      	itt	le
 8008922:	210a      	movle	r1, #10
 8008924:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008928:	e7e1      	b.n	80088ee <_strtod_l+0x23e>
 800892a:	2700      	movs	r7, #0
 800892c:	2101      	movs	r1, #1
 800892e:	e780      	b.n	8008832 <_strtod_l+0x182>
 8008930:	f04f 0e00 	mov.w	lr, #0
 8008934:	f10b 0202 	add.w	r2, fp, #2
 8008938:	9211      	str	r2, [sp, #68]	; 0x44
 800893a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800893e:	e789      	b.n	8008854 <_strtod_l+0x1a4>
 8008940:	f04f 0e01 	mov.w	lr, #1
 8008944:	e7f6      	b.n	8008934 <_strtod_l+0x284>
 8008946:	bf00      	nop
 8008948:	0800b9a0 	.word	0x0800b9a0
 800894c:	0800b7d4 	.word	0x0800b7d4
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008956:	1c55      	adds	r5, r2, #1
 8008958:	9511      	str	r5, [sp, #68]	; 0x44
 800895a:	7852      	ldrb	r2, [r2, #1]
 800895c:	2a30      	cmp	r2, #48	; 0x30
 800895e:	d0f9      	beq.n	8008954 <_strtod_l+0x2a4>
 8008960:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008964:	2d08      	cmp	r5, #8
 8008966:	f63f af7b 	bhi.w	8008860 <_strtod_l+0x1b0>
 800896a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800896e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008970:	9207      	str	r2, [sp, #28]
 8008972:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008974:	1c55      	adds	r5, r2, #1
 8008976:	9511      	str	r5, [sp, #68]	; 0x44
 8008978:	7852      	ldrb	r2, [r2, #1]
 800897a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800897e:	2e09      	cmp	r6, #9
 8008980:	d937      	bls.n	80089f2 <_strtod_l+0x342>
 8008982:	9e07      	ldr	r6, [sp, #28]
 8008984:	1bad      	subs	r5, r5, r6
 8008986:	2d08      	cmp	r5, #8
 8008988:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800898c:	dc02      	bgt.n	8008994 <_strtod_l+0x2e4>
 800898e:	4565      	cmp	r5, ip
 8008990:	bfa8      	it	ge
 8008992:	4665      	movge	r5, ip
 8008994:	f1be 0f00 	cmp.w	lr, #0
 8008998:	d000      	beq.n	800899c <_strtod_l+0x2ec>
 800899a:	426d      	negs	r5, r5
 800899c:	2b00      	cmp	r3, #0
 800899e:	d14d      	bne.n	8008a3c <_strtod_l+0x38c>
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	4303      	orrs	r3, r0
 80089a4:	f47f aec8 	bne.w	8008738 <_strtod_l+0x88>
 80089a8:	2900      	cmp	r1, #0
 80089aa:	f47f aee2 	bne.w	8008772 <_strtod_l+0xc2>
 80089ae:	2a69      	cmp	r2, #105	; 0x69
 80089b0:	d027      	beq.n	8008a02 <_strtod_l+0x352>
 80089b2:	dc24      	bgt.n	80089fe <_strtod_l+0x34e>
 80089b4:	2a49      	cmp	r2, #73	; 0x49
 80089b6:	d024      	beq.n	8008a02 <_strtod_l+0x352>
 80089b8:	2a4e      	cmp	r2, #78	; 0x4e
 80089ba:	f47f aeda 	bne.w	8008772 <_strtod_l+0xc2>
 80089be:	4996      	ldr	r1, [pc, #600]	; (8008c18 <_strtod_l+0x568>)
 80089c0:	a811      	add	r0, sp, #68	; 0x44
 80089c2:	f001 f8f7 	bl	8009bb4 <__match>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f aed3 	beq.w	8008772 <_strtod_l+0xc2>
 80089cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b28      	cmp	r3, #40	; 0x28
 80089d2:	d12d      	bne.n	8008a30 <_strtod_l+0x380>
 80089d4:	4991      	ldr	r1, [pc, #580]	; (8008c1c <_strtod_l+0x56c>)
 80089d6:	aa14      	add	r2, sp, #80	; 0x50
 80089d8:	a811      	add	r0, sp, #68	; 0x44
 80089da:	f001 f8ff 	bl	8009bdc <__hexnan>
 80089de:	2805      	cmp	r0, #5
 80089e0:	d126      	bne.n	8008a30 <_strtod_l+0x380>
 80089e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089e4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80089e8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80089ec:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80089f0:	e6a2      	b.n	8008738 <_strtod_l+0x88>
 80089f2:	250a      	movs	r5, #10
 80089f4:	fb05 250c 	mla	r5, r5, ip, r2
 80089f8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80089fc:	e7b9      	b.n	8008972 <_strtod_l+0x2c2>
 80089fe:	2a6e      	cmp	r2, #110	; 0x6e
 8008a00:	e7db      	b.n	80089ba <_strtod_l+0x30a>
 8008a02:	4987      	ldr	r1, [pc, #540]	; (8008c20 <_strtod_l+0x570>)
 8008a04:	a811      	add	r0, sp, #68	; 0x44
 8008a06:	f001 f8d5 	bl	8009bb4 <__match>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f43f aeb1 	beq.w	8008772 <_strtod_l+0xc2>
 8008a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a12:	4984      	ldr	r1, [pc, #528]	; (8008c24 <_strtod_l+0x574>)
 8008a14:	3b01      	subs	r3, #1
 8008a16:	a811      	add	r0, sp, #68	; 0x44
 8008a18:	9311      	str	r3, [sp, #68]	; 0x44
 8008a1a:	f001 f8cb 	bl	8009bb4 <__match>
 8008a1e:	b910      	cbnz	r0, 8008a26 <_strtod_l+0x376>
 8008a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a22:	3301      	adds	r3, #1
 8008a24:	9311      	str	r3, [sp, #68]	; 0x44
 8008a26:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008c38 <_strtod_l+0x588>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	e683      	b.n	8008738 <_strtod_l+0x88>
 8008a30:	487d      	ldr	r0, [pc, #500]	; (8008c28 <_strtod_l+0x578>)
 8008a32:	f002 f9c1 	bl	800adb8 <nan>
 8008a36:	ec59 8b10 	vmov	r8, r9, d0
 8008a3a:	e67d      	b.n	8008738 <_strtod_l+0x88>
 8008a3c:	1bea      	subs	r2, r5, r7
 8008a3e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008a42:	9207      	str	r2, [sp, #28]
 8008a44:	9a06      	ldr	r2, [sp, #24]
 8008a46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	bf08      	it	eq
 8008a4e:	461a      	moveq	r2, r3
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	9206      	str	r2, [sp, #24]
 8008a54:	461a      	mov	r2, r3
 8008a56:	bfa8      	it	ge
 8008a58:	2210      	movge	r2, #16
 8008a5a:	2b09      	cmp	r3, #9
 8008a5c:	ec59 8b17 	vmov	r8, r9, d7
 8008a60:	dd0c      	ble.n	8008a7c <_strtod_l+0x3cc>
 8008a62:	4972      	ldr	r1, [pc, #456]	; (8008c2c <_strtod_l+0x57c>)
 8008a64:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008a68:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008a6c:	ee06 aa90 	vmov	s13, sl
 8008a70:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008a74:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008a78:	ec59 8b16 	vmov	r8, r9, d6
 8008a7c:	2b0f      	cmp	r3, #15
 8008a7e:	dc36      	bgt.n	8008aee <_strtod_l+0x43e>
 8008a80:	9907      	ldr	r1, [sp, #28]
 8008a82:	2900      	cmp	r1, #0
 8008a84:	f43f ae58 	beq.w	8008738 <_strtod_l+0x88>
 8008a88:	dd23      	ble.n	8008ad2 <_strtod_l+0x422>
 8008a8a:	2916      	cmp	r1, #22
 8008a8c:	dc0b      	bgt.n	8008aa6 <_strtod_l+0x3f6>
 8008a8e:	4b67      	ldr	r3, [pc, #412]	; (8008c2c <_strtod_l+0x57c>)
 8008a90:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008a94:	ed93 7b00 	vldr	d7, [r3]
 8008a98:	ec49 8b16 	vmov	d6, r8, r9
 8008a9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008aa0:	ec59 8b17 	vmov	r8, r9, d7
 8008aa4:	e648      	b.n	8008738 <_strtod_l+0x88>
 8008aa6:	9807      	ldr	r0, [sp, #28]
 8008aa8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008aac:	4281      	cmp	r1, r0
 8008aae:	db1e      	blt.n	8008aee <_strtod_l+0x43e>
 8008ab0:	4a5e      	ldr	r2, [pc, #376]	; (8008c2c <_strtod_l+0x57c>)
 8008ab2:	f1c3 030f 	rsb	r3, r3, #15
 8008ab6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008aba:	ed91 7b00 	vldr	d7, [r1]
 8008abe:	ec49 8b16 	vmov	d6, r8, r9
 8008ac2:	1ac3      	subs	r3, r0, r3
 8008ac4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008acc:	ed92 6b00 	vldr	d6, [r2]
 8008ad0:	e7e4      	b.n	8008a9c <_strtod_l+0x3ec>
 8008ad2:	9907      	ldr	r1, [sp, #28]
 8008ad4:	3116      	adds	r1, #22
 8008ad6:	db0a      	blt.n	8008aee <_strtod_l+0x43e>
 8008ad8:	4b54      	ldr	r3, [pc, #336]	; (8008c2c <_strtod_l+0x57c>)
 8008ada:	1b7d      	subs	r5, r7, r5
 8008adc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008ae0:	ed95 7b00 	vldr	d7, [r5]
 8008ae4:	ec49 8b16 	vmov	d6, r8, r9
 8008ae8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008aec:	e7d8      	b.n	8008aa0 <_strtod_l+0x3f0>
 8008aee:	9907      	ldr	r1, [sp, #28]
 8008af0:	1a9a      	subs	r2, r3, r2
 8008af2:	440a      	add	r2, r1
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	dd6f      	ble.n	8008bd8 <_strtod_l+0x528>
 8008af8:	f012 000f 	ands.w	r0, r2, #15
 8008afc:	d00a      	beq.n	8008b14 <_strtod_l+0x464>
 8008afe:	494b      	ldr	r1, [pc, #300]	; (8008c2c <_strtod_l+0x57c>)
 8008b00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b04:	ed91 7b00 	vldr	d7, [r1]
 8008b08:	ec49 8b16 	vmov	d6, r8, r9
 8008b0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b10:	ec59 8b17 	vmov	r8, r9, d7
 8008b14:	f032 020f 	bics.w	r2, r2, #15
 8008b18:	d04f      	beq.n	8008bba <_strtod_l+0x50a>
 8008b1a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008b1e:	dd22      	ble.n	8008b66 <_strtod_l+0x4b6>
 8008b20:	2500      	movs	r5, #0
 8008b22:	462e      	mov	r6, r5
 8008b24:	9506      	str	r5, [sp, #24]
 8008b26:	462f      	mov	r7, r5
 8008b28:	2322      	movs	r3, #34	; 0x22
 8008b2a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008c38 <_strtod_l+0x588>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	f04f 0800 	mov.w	r8, #0
 8008b34:	9b06      	ldr	r3, [sp, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f43f adfe 	beq.w	8008738 <_strtod_l+0x88>
 8008b3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 f958 	bl	8009df4 <_Bfree>
 8008b44:	4639      	mov	r1, r7
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 f954 	bl	8009df4 <_Bfree>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f001 f950 	bl	8009df4 <_Bfree>
 8008b54:	9906      	ldr	r1, [sp, #24]
 8008b56:	4620      	mov	r0, r4
 8008b58:	f001 f94c 	bl	8009df4 <_Bfree>
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f001 f948 	bl	8009df4 <_Bfree>
 8008b64:	e5e8      	b.n	8008738 <_strtod_l+0x88>
 8008b66:	2000      	movs	r0, #0
 8008b68:	ec49 8b17 	vmov	d7, r8, r9
 8008b6c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008c30 <_strtod_l+0x580>
 8008b70:	1112      	asrs	r2, r2, #4
 8008b72:	4601      	mov	r1, r0
 8008b74:	2a01      	cmp	r2, #1
 8008b76:	dc23      	bgt.n	8008bc0 <_strtod_l+0x510>
 8008b78:	b108      	cbz	r0, 8008b7e <_strtod_l+0x4ce>
 8008b7a:	ec59 8b17 	vmov	r8, r9, d7
 8008b7e:	4a2c      	ldr	r2, [pc, #176]	; (8008c30 <_strtod_l+0x580>)
 8008b80:	482c      	ldr	r0, [pc, #176]	; (8008c34 <_strtod_l+0x584>)
 8008b82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008b86:	ed92 7b00 	vldr	d7, [r2]
 8008b8a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008b8e:	ec49 8b16 	vmov	d6, r8, r9
 8008b92:	4a29      	ldr	r2, [pc, #164]	; (8008c38 <_strtod_l+0x588>)
 8008b94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b98:	ee17 1a90 	vmov	r1, s15
 8008b9c:	400a      	ands	r2, r1
 8008b9e:	4282      	cmp	r2, r0
 8008ba0:	ec59 8b17 	vmov	r8, r9, d7
 8008ba4:	d8bc      	bhi.n	8008b20 <_strtod_l+0x470>
 8008ba6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008baa:	4282      	cmp	r2, r0
 8008bac:	bf86      	itte	hi
 8008bae:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008c3c <_strtod_l+0x58c>
 8008bb2:	f04f 38ff 	movhi.w	r8, #4294967295
 8008bb6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008bba:	2200      	movs	r2, #0
 8008bbc:	9204      	str	r2, [sp, #16]
 8008bbe:	e078      	b.n	8008cb2 <_strtod_l+0x602>
 8008bc0:	07d6      	lsls	r6, r2, #31
 8008bc2:	d504      	bpl.n	8008bce <_strtod_l+0x51e>
 8008bc4:	ed9c 6b00 	vldr	d6, [ip]
 8008bc8:	2001      	movs	r0, #1
 8008bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bce:	3101      	adds	r1, #1
 8008bd0:	1052      	asrs	r2, r2, #1
 8008bd2:	f10c 0c08 	add.w	ip, ip, #8
 8008bd6:	e7cd      	b.n	8008b74 <_strtod_l+0x4c4>
 8008bd8:	d0ef      	beq.n	8008bba <_strtod_l+0x50a>
 8008bda:	4252      	negs	r2, r2
 8008bdc:	f012 000f 	ands.w	r0, r2, #15
 8008be0:	d00a      	beq.n	8008bf8 <_strtod_l+0x548>
 8008be2:	4912      	ldr	r1, [pc, #72]	; (8008c2c <_strtod_l+0x57c>)
 8008be4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008be8:	ed91 7b00 	vldr	d7, [r1]
 8008bec:	ec49 8b16 	vmov	d6, r8, r9
 8008bf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008bf4:	ec59 8b17 	vmov	r8, r9, d7
 8008bf8:	1112      	asrs	r2, r2, #4
 8008bfa:	d0de      	beq.n	8008bba <_strtod_l+0x50a>
 8008bfc:	2a1f      	cmp	r2, #31
 8008bfe:	dd1f      	ble.n	8008c40 <_strtod_l+0x590>
 8008c00:	2500      	movs	r5, #0
 8008c02:	462e      	mov	r6, r5
 8008c04:	9506      	str	r5, [sp, #24]
 8008c06:	462f      	mov	r7, r5
 8008c08:	2322      	movs	r3, #34	; 0x22
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	e78e      	b.n	8008b34 <_strtod_l+0x484>
 8008c16:	bf00      	nop
 8008c18:	0800b7d1 	.word	0x0800b7d1
 8008c1c:	0800b7e8 	.word	0x0800b7e8
 8008c20:	0800b7c8 	.word	0x0800b7c8
 8008c24:	0800b7cb 	.word	0x0800b7cb
 8008c28:	0800b6ea 	.word	0x0800b6ea
 8008c2c:	0800ba50 	.word	0x0800ba50
 8008c30:	0800ba28 	.word	0x0800ba28
 8008c34:	7ca00000 	.word	0x7ca00000
 8008c38:	7ff00000 	.word	0x7ff00000
 8008c3c:	7fefffff 	.word	0x7fefffff
 8008c40:	f012 0110 	ands.w	r1, r2, #16
 8008c44:	bf18      	it	ne
 8008c46:	216a      	movne	r1, #106	; 0x6a
 8008c48:	9104      	str	r1, [sp, #16]
 8008c4a:	ec49 8b17 	vmov	d7, r8, r9
 8008c4e:	49be      	ldr	r1, [pc, #760]	; (8008f48 <_strtod_l+0x898>)
 8008c50:	2000      	movs	r0, #0
 8008c52:	07d6      	lsls	r6, r2, #31
 8008c54:	d504      	bpl.n	8008c60 <_strtod_l+0x5b0>
 8008c56:	ed91 6b00 	vldr	d6, [r1]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c60:	1052      	asrs	r2, r2, #1
 8008c62:	f101 0108 	add.w	r1, r1, #8
 8008c66:	d1f4      	bne.n	8008c52 <_strtod_l+0x5a2>
 8008c68:	b108      	cbz	r0, 8008c6e <_strtod_l+0x5be>
 8008c6a:	ec59 8b17 	vmov	r8, r9, d7
 8008c6e:	9a04      	ldr	r2, [sp, #16]
 8008c70:	b1c2      	cbz	r2, 8008ca4 <_strtod_l+0x5f4>
 8008c72:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008c76:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	4648      	mov	r0, r9
 8008c7e:	dd11      	ble.n	8008ca4 <_strtod_l+0x5f4>
 8008c80:	2a1f      	cmp	r2, #31
 8008c82:	f340 812e 	ble.w	8008ee2 <_strtod_l+0x832>
 8008c86:	2a34      	cmp	r2, #52	; 0x34
 8008c88:	bfde      	ittt	le
 8008c8a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008c8e:	f04f 32ff 	movle.w	r2, #4294967295
 8008c92:	fa02 f101 	lslle.w	r1, r2, r1
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	bfcc      	ite	gt
 8008c9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ca0:	ea01 0900 	andle.w	r9, r1, r0
 8008ca4:	ec49 8b17 	vmov	d7, r8, r9
 8008ca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	d0a6      	beq.n	8008c00 <_strtod_l+0x550>
 8008cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb4:	9200      	str	r2, [sp, #0]
 8008cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cb8:	9a06      	ldr	r2, [sp, #24]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f001 f902 	bl	8009ec4 <__s2b>
 8008cc0:	9006      	str	r0, [sp, #24]
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f43f af2c 	beq.w	8008b20 <_strtod_l+0x470>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	1b7d      	subs	r5, r7, r5
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	bfb4      	ite	lt
 8008cd0:	462b      	movlt	r3, r5
 8008cd2:	2300      	movge	r3, #0
 8008cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd6:	9b07      	ldr	r3, [sp, #28]
 8008cd8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008f28 <_strtod_l+0x878>
 8008cdc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008f30 <_strtod_l+0x880>
 8008ce0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008f38 <_strtod_l+0x888>
 8008ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ce8:	2500      	movs	r5, #0
 8008cea:	930c      	str	r3, [sp, #48]	; 0x30
 8008cec:	462e      	mov	r6, r5
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	6859      	ldr	r1, [r3, #4]
 8008cf4:	f001 f83e 	bl	8009d74 <_Balloc>
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f af14 	beq.w	8008b28 <_strtod_l+0x478>
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	3202      	adds	r2, #2
 8008d06:	f103 010c 	add.w	r1, r3, #12
 8008d0a:	0092      	lsls	r2, r2, #2
 8008d0c:	300c      	adds	r0, #12
 8008d0e:	f7ff fb2a 	bl	8008366 <memcpy>
 8008d12:	ec49 8b10 	vmov	d0, r8, r9
 8008d16:	aa14      	add	r2, sp, #80	; 0x50
 8008d18:	a913      	add	r1, sp, #76	; 0x4c
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f001 fc18 	bl	800a550 <__d2b>
 8008d20:	ec49 8b18 	vmov	d8, r8, r9
 8008d24:	9012      	str	r0, [sp, #72]	; 0x48
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f aefe 	beq.w	8008b28 <_strtod_l+0x478>
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f001 f962 	bl	8009ff8 <__i2b>
 8008d34:	4606      	mov	r6, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f aef6 	beq.w	8008b28 <_strtod_l+0x478>
 8008d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d3e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfab      	itete	ge
 8008d44:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008d46:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008d48:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008d4c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008d50:	bfac      	ite	ge
 8008d52:	eb03 0b02 	addge.w	fp, r3, r2
 8008d56:	eba2 0a03 	sublt.w	sl, r2, r3
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	440b      	add	r3, r1
 8008d60:	4a7a      	ldr	r2, [pc, #488]	; (8008f4c <_strtod_l+0x89c>)
 8008d62:	3b01      	subs	r3, #1
 8008d64:	4293      	cmp	r3, r2
 8008d66:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008d6a:	f280 80cd 	bge.w	8008f08 <_strtod_l+0x858>
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	2a1f      	cmp	r2, #31
 8008d72:	eba1 0102 	sub.w	r1, r1, r2
 8008d76:	f04f 0001 	mov.w	r0, #1
 8008d7a:	f300 80b9 	bgt.w	8008ef0 <_strtod_l+0x840>
 8008d7e:	fa00 f302 	lsl.w	r3, r0, r2
 8008d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d84:	2300      	movs	r3, #0
 8008d86:	930a      	str	r3, [sp, #40]	; 0x28
 8008d88:	eb0b 0301 	add.w	r3, fp, r1
 8008d8c:	9a04      	ldr	r2, [sp, #16]
 8008d8e:	459b      	cmp	fp, r3
 8008d90:	448a      	add	sl, r1
 8008d92:	4492      	add	sl, r2
 8008d94:	465a      	mov	r2, fp
 8008d96:	bfa8      	it	ge
 8008d98:	461a      	movge	r2, r3
 8008d9a:	4552      	cmp	r2, sl
 8008d9c:	bfa8      	it	ge
 8008d9e:	4652      	movge	r2, sl
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	bfc2      	ittt	gt
 8008da4:	1a9b      	subgt	r3, r3, r2
 8008da6:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008daa:	ebab 0b02 	subgt.w	fp, fp, r2
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	dd18      	ble.n	8008de6 <_strtod_l+0x736>
 8008db4:	4631      	mov	r1, r6
 8008db6:	4620      	mov	r0, r4
 8008db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dba:	f001 f9dd 	bl	800a178 <__pow5mult>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f43f aeb1 	beq.w	8008b28 <_strtod_l+0x478>
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f001 f92a 	bl	800a024 <__multiply>
 8008dd0:	900e      	str	r0, [sp, #56]	; 0x38
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f43f aea8 	beq.w	8008b28 <_strtod_l+0x478>
 8008dd8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f001 f80a 	bl	8009df4 <_Bfree>
 8008de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008de4:	9212      	str	r2, [sp, #72]	; 0x48
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f300 8093 	bgt.w	8008f12 <_strtod_l+0x862>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	dd08      	ble.n	8008e04 <_strtod_l+0x754>
 8008df2:	4639      	mov	r1, r7
 8008df4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008df6:	4620      	mov	r0, r4
 8008df8:	f001 f9be 	bl	800a178 <__pow5mult>
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f43f ae92 	beq.w	8008b28 <_strtod_l+0x478>
 8008e04:	f1ba 0f00 	cmp.w	sl, #0
 8008e08:	dd08      	ble.n	8008e1c <_strtod_l+0x76c>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f001 fa0c 	bl	800a22c <__lshift>
 8008e14:	4607      	mov	r7, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f43f ae86 	beq.w	8008b28 <_strtod_l+0x478>
 8008e1c:	f1bb 0f00 	cmp.w	fp, #0
 8008e20:	dd08      	ble.n	8008e34 <_strtod_l+0x784>
 8008e22:	4631      	mov	r1, r6
 8008e24:	465a      	mov	r2, fp
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 fa00 	bl	800a22c <__lshift>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f ae7a 	beq.w	8008b28 <_strtod_l+0x478>
 8008e34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e36:	463a      	mov	r2, r7
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f001 fa83 	bl	800a344 <__mdiff>
 8008e3e:	4605      	mov	r5, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	f43f ae71 	beq.w	8008b28 <_strtod_l+0x478>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008e4c:	60c3      	str	r3, [r0, #12]
 8008e4e:	4631      	mov	r1, r6
 8008e50:	f001 fa5c 	bl	800a30c <__mcmp>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	da7d      	bge.n	8008f54 <_strtod_l+0x8a4>
 8008e58:	ea5a 0308 	orrs.w	r3, sl, r8
 8008e5c:	f040 80a3 	bne.w	8008fa6 <_strtod_l+0x8f6>
 8008e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f040 809e 	bne.w	8008fa6 <_strtod_l+0x8f6>
 8008e6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e6e:	0d1b      	lsrs	r3, r3, #20
 8008e70:	051b      	lsls	r3, r3, #20
 8008e72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008e76:	f240 8096 	bls.w	8008fa6 <_strtod_l+0x8f6>
 8008e7a:	696b      	ldr	r3, [r5, #20]
 8008e7c:	b91b      	cbnz	r3, 8008e86 <_strtod_l+0x7d6>
 8008e7e:	692b      	ldr	r3, [r5, #16]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	f340 8090 	ble.w	8008fa6 <_strtod_l+0x8f6>
 8008e86:	4629      	mov	r1, r5
 8008e88:	2201      	movs	r2, #1
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f001 f9ce 	bl	800a22c <__lshift>
 8008e90:	4631      	mov	r1, r6
 8008e92:	4605      	mov	r5, r0
 8008e94:	f001 fa3a 	bl	800a30c <__mcmp>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f340 8084 	ble.w	8008fa6 <_strtod_l+0x8f6>
 8008e9e:	9904      	ldr	r1, [sp, #16]
 8008ea0:	4a2b      	ldr	r2, [pc, #172]	; (8008f50 <_strtod_l+0x8a0>)
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	f000 809d 	beq.w	8008fe4 <_strtod_l+0x934>
 8008eaa:	ea02 0109 	and.w	r1, r2, r9
 8008eae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008eb2:	f300 8097 	bgt.w	8008fe4 <_strtod_l+0x934>
 8008eb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008eba:	f77f aea5 	ble.w	8008c08 <_strtod_l+0x558>
 8008ebe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008f40 <_strtod_l+0x890>
 8008ec2:	ec49 8b16 	vmov	d6, r8, r9
 8008ec6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008eca:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ece:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	bf08      	it	eq
 8008ed6:	2322      	moveq	r3, #34	; 0x22
 8008ed8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008edc:	bf08      	it	eq
 8008ede:	6023      	streq	r3, [r4, #0]
 8008ee0:	e62c      	b.n	8008b3c <_strtod_l+0x48c>
 8008ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eea:	ea02 0808 	and.w	r8, r2, r8
 8008eee:	e6d9      	b.n	8008ca4 <_strtod_l+0x5f4>
 8008ef0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008ef4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008ef8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008efc:	33e2      	adds	r3, #226	; 0xe2
 8008efe:	fa00 f303 	lsl.w	r3, r0, r3
 8008f02:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008f06:	e73f      	b.n	8008d88 <_strtod_l+0x6d8>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f10:	e73a      	b.n	8008d88 <_strtod_l+0x6d8>
 8008f12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f14:	461a      	mov	r2, r3
 8008f16:	4620      	mov	r0, r4
 8008f18:	f001 f988 	bl	800a22c <__lshift>
 8008f1c:	9012      	str	r0, [sp, #72]	; 0x48
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f47f af64 	bne.w	8008dec <_strtod_l+0x73c>
 8008f24:	e600      	b.n	8008b28 <_strtod_l+0x478>
 8008f26:	bf00      	nop
 8008f28:	94a03595 	.word	0x94a03595
 8008f2c:	3fcfffff 	.word	0x3fcfffff
 8008f30:	94a03595 	.word	0x94a03595
 8008f34:	3fdfffff 	.word	0x3fdfffff
 8008f38:	35afe535 	.word	0x35afe535
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	00000000 	.word	0x00000000
 8008f44:	39500000 	.word	0x39500000
 8008f48:	0800b800 	.word	0x0800b800
 8008f4c:	fffffc02 	.word	0xfffffc02
 8008f50:	7ff00000 	.word	0x7ff00000
 8008f54:	46cb      	mov	fp, r9
 8008f56:	d15f      	bne.n	8009018 <_strtod_l+0x968>
 8008f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f5c:	f1ba 0f00 	cmp.w	sl, #0
 8008f60:	d02a      	beq.n	8008fb8 <_strtod_l+0x908>
 8008f62:	4aa7      	ldr	r2, [pc, #668]	; (8009200 <_strtod_l+0xb50>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d12b      	bne.n	8008fc0 <_strtod_l+0x910>
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	b1fb      	cbz	r3, 8008fae <_strtod_l+0x8fe>
 8008f6e:	4ba5      	ldr	r3, [pc, #660]	; (8009204 <_strtod_l+0xb54>)
 8008f70:	ea09 0303 	and.w	r3, r9, r3
 8008f74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f78:	f04f 31ff 	mov.w	r1, #4294967295
 8008f7c:	d81a      	bhi.n	8008fb4 <_strtod_l+0x904>
 8008f7e:	0d1b      	lsrs	r3, r3, #20
 8008f80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f84:	fa01 f303 	lsl.w	r3, r1, r3
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d119      	bne.n	8008fc0 <_strtod_l+0x910>
 8008f8c:	4b9e      	ldr	r3, [pc, #632]	; (8009208 <_strtod_l+0xb58>)
 8008f8e:	459b      	cmp	fp, r3
 8008f90:	d102      	bne.n	8008f98 <_strtod_l+0x8e8>
 8008f92:	3201      	adds	r2, #1
 8008f94:	f43f adc8 	beq.w	8008b28 <_strtod_l+0x478>
 8008f98:	4b9a      	ldr	r3, [pc, #616]	; (8009204 <_strtod_l+0xb54>)
 8008f9a:	ea0b 0303 	and.w	r3, fp, r3
 8008f9e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d188      	bne.n	8008ebe <_strtod_l+0x80e>
 8008fac:	e5c6      	b.n	8008b3c <_strtod_l+0x48c>
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb2:	e7e9      	b.n	8008f88 <_strtod_l+0x8d8>
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	e7e7      	b.n	8008f88 <_strtod_l+0x8d8>
 8008fb8:	ea53 0308 	orrs.w	r3, r3, r8
 8008fbc:	f43f af6f 	beq.w	8008e9e <_strtod_l+0x7ee>
 8008fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc2:	b1cb      	cbz	r3, 8008ff8 <_strtod_l+0x948>
 8008fc4:	ea13 0f0b 	tst.w	r3, fp
 8008fc8:	d0ed      	beq.n	8008fa6 <_strtod_l+0x8f6>
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f1ba 0f00 	cmp.w	sl, #0
 8008fd4:	d014      	beq.n	8009000 <_strtod_l+0x950>
 8008fd6:	f7ff fb50 	bl	800867a <sulp>
 8008fda:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008fde:	ec59 8b17 	vmov	r8, r9, d7
 8008fe2:	e7e0      	b.n	8008fa6 <_strtod_l+0x8f6>
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008fea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008fee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ff2:	f04f 38ff 	mov.w	r8, #4294967295
 8008ff6:	e7d6      	b.n	8008fa6 <_strtod_l+0x8f6>
 8008ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffa:	ea13 0f08 	tst.w	r3, r8
 8008ffe:	e7e3      	b.n	8008fc8 <_strtod_l+0x918>
 8009000:	f7ff fb3b 	bl	800867a <sulp>
 8009004:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009008:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009010:	ec59 8b10 	vmov	r8, r9, d0
 8009014:	d1c7      	bne.n	8008fa6 <_strtod_l+0x8f6>
 8009016:	e5f7      	b.n	8008c08 <_strtod_l+0x558>
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	f001 faf4 	bl	800a608 <__ratio>
 8009020:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009024:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902c:	d865      	bhi.n	80090fa <_strtod_l+0xa4a>
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d042      	beq.n	80090ba <_strtod_l+0xa0a>
 8009034:	4b75      	ldr	r3, [pc, #468]	; (800920c <_strtod_l+0xb5c>)
 8009036:	2200      	movs	r2, #0
 8009038:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800903c:	4871      	ldr	r0, [pc, #452]	; (8009204 <_strtod_l+0xb54>)
 800903e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009218 <_strtod_l+0xb68>
 8009042:	ea0b 0100 	and.w	r1, fp, r0
 8009046:	4561      	cmp	r1, ip
 8009048:	f040 808e 	bne.w	8009168 <_strtod_l+0xab8>
 800904c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009050:	ec49 8b10 	vmov	d0, r8, r9
 8009054:	ec43 2b1c 	vmov	d12, r2, r3
 8009058:	910a      	str	r1, [sp, #40]	; 0x28
 800905a:	f001 f9fd 	bl	800a458 <__ulp>
 800905e:	ec49 8b1e 	vmov	d14, r8, r9
 8009062:	4868      	ldr	r0, [pc, #416]	; (8009204 <_strtod_l+0xb54>)
 8009064:	eeac eb00 	vfma.f64	d14, d12, d0
 8009068:	ee1e 3a90 	vmov	r3, s29
 800906c:	4a68      	ldr	r2, [pc, #416]	; (8009210 <_strtod_l+0xb60>)
 800906e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009070:	4018      	ands	r0, r3
 8009072:	4290      	cmp	r0, r2
 8009074:	ec59 8b1e 	vmov	r8, r9, d14
 8009078:	d94e      	bls.n	8009118 <_strtod_l+0xa68>
 800907a:	ee18 3a90 	vmov	r3, s17
 800907e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009082:	4293      	cmp	r3, r2
 8009084:	d104      	bne.n	8009090 <_strtod_l+0x9e0>
 8009086:	ee18 3a10 	vmov	r3, s16
 800908a:	3301      	adds	r3, #1
 800908c:	f43f ad4c 	beq.w	8008b28 <_strtod_l+0x478>
 8009090:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009208 <_strtod_l+0xb58>
 8009094:	f04f 38ff 	mov.w	r8, #4294967295
 8009098:	9912      	ldr	r1, [sp, #72]	; 0x48
 800909a:	4620      	mov	r0, r4
 800909c:	f000 feaa 	bl	8009df4 <_Bfree>
 80090a0:	4639      	mov	r1, r7
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 fea6 	bl	8009df4 <_Bfree>
 80090a8:	4631      	mov	r1, r6
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fea2 	bl	8009df4 <_Bfree>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 fe9e 	bl	8009df4 <_Bfree>
 80090b8:	e619      	b.n	8008cee <_strtod_l+0x63e>
 80090ba:	f1b8 0f00 	cmp.w	r8, #0
 80090be:	d112      	bne.n	80090e6 <_strtod_l+0xa36>
 80090c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090c4:	b9b3      	cbnz	r3, 80090f4 <_strtod_l+0xa44>
 80090c6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80090ca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80090d6:	bf58      	it	pl
 80090d8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80090dc:	eeb1 7b4d 	vneg.f64	d7, d13
 80090e0:	ec53 2b17 	vmov	r2, r3, d7
 80090e4:	e7aa      	b.n	800903c <_strtod_l+0x98c>
 80090e6:	f1b8 0f01 	cmp.w	r8, #1
 80090ea:	d103      	bne.n	80090f4 <_strtod_l+0xa44>
 80090ec:	f1b9 0f00 	cmp.w	r9, #0
 80090f0:	f43f ad8a 	beq.w	8008c08 <_strtod_l+0x558>
 80090f4:	4b47      	ldr	r3, [pc, #284]	; (8009214 <_strtod_l+0xb64>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	e79e      	b.n	8009038 <_strtod_l+0x988>
 80090fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80090fe:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009102:	f1ba 0f00 	cmp.w	sl, #0
 8009106:	d104      	bne.n	8009112 <_strtod_l+0xa62>
 8009108:	eeb1 7b4d 	vneg.f64	d7, d13
 800910c:	ec53 2b17 	vmov	r2, r3, d7
 8009110:	e794      	b.n	800903c <_strtod_l+0x98c>
 8009112:	eeb0 7b4d 	vmov.f64	d7, d13
 8009116:	e7f9      	b.n	800910c <_strtod_l+0xa5c>
 8009118:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1ba      	bne.n	8009098 <_strtod_l+0x9e8>
 8009122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009126:	0d1b      	lsrs	r3, r3, #20
 8009128:	051b      	lsls	r3, r3, #20
 800912a:	4299      	cmp	r1, r3
 800912c:	d1b4      	bne.n	8009098 <_strtod_l+0x9e8>
 800912e:	ec51 0b1d 	vmov	r0, r1, d13
 8009132:	f7f7 fb11 	bl	8000758 <__aeabi_d2lz>
 8009136:	f7f7 fac9 	bl	80006cc <__aeabi_l2d>
 800913a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800913e:	ec41 0b17 	vmov	d7, r0, r1
 8009142:	ea43 0308 	orr.w	r3, r3, r8
 8009146:	ea53 030a 	orrs.w	r3, r3, sl
 800914a:	ee3d db47 	vsub.f64	d13, d13, d7
 800914e:	d03c      	beq.n	80091ca <_strtod_l+0xb1a>
 8009150:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009158:	f53f acf0 	bmi.w	8008b3c <_strtod_l+0x48c>
 800915c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	dd98      	ble.n	8009098 <_strtod_l+0x9e8>
 8009166:	e4e9      	b.n	8008b3c <_strtod_l+0x48c>
 8009168:	9804      	ldr	r0, [sp, #16]
 800916a:	b1f0      	cbz	r0, 80091aa <_strtod_l+0xafa>
 800916c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009170:	d81b      	bhi.n	80091aa <_strtod_l+0xafa>
 8009172:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80091f8 <_strtod_l+0xb48>
 8009176:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800917a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917e:	d811      	bhi.n	80091a4 <_strtod_l+0xaf4>
 8009180:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009184:	ee1d 3a10 	vmov	r3, s26
 8009188:	2b01      	cmp	r3, #1
 800918a:	bf38      	it	cc
 800918c:	2301      	movcc	r3, #1
 800918e:	ee0d 3a10 	vmov	s26, r3
 8009192:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009196:	f1ba 0f00 	cmp.w	sl, #0
 800919a:	d113      	bne.n	80091c4 <_strtod_l+0xb14>
 800919c:	eeb1 7b4d 	vneg.f64	d7, d13
 80091a0:	ec53 2b17 	vmov	r2, r3, d7
 80091a4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80091a8:	1a43      	subs	r3, r0, r1
 80091aa:	eeb0 0b48 	vmov.f64	d0, d8
 80091ae:	ec43 2b1c 	vmov	d12, r2, r3
 80091b2:	910a      	str	r1, [sp, #40]	; 0x28
 80091b4:	f001 f950 	bl	800a458 <__ulp>
 80091b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091ba:	eeac 8b00 	vfma.f64	d8, d12, d0
 80091be:	ec59 8b18 	vmov	r8, r9, d8
 80091c2:	e7ab      	b.n	800911c <_strtod_l+0xa6c>
 80091c4:	eeb0 7b4d 	vmov.f64	d7, d13
 80091c8:	e7ea      	b.n	80091a0 <_strtod_l+0xaf0>
 80091ca:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80091ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d2:	f57f af61 	bpl.w	8009098 <_strtod_l+0x9e8>
 80091d6:	e4b1      	b.n	8008b3c <_strtod_l+0x48c>
 80091d8:	2300      	movs	r3, #0
 80091da:	9308      	str	r3, [sp, #32]
 80091dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	f7ff baad 	b.w	8008740 <_strtod_l+0x90>
 80091e6:	2a65      	cmp	r2, #101	; 0x65
 80091e8:	f43f ab9f 	beq.w	800892a <_strtod_l+0x27a>
 80091ec:	2a45      	cmp	r2, #69	; 0x45
 80091ee:	f43f ab9c 	beq.w	800892a <_strtod_l+0x27a>
 80091f2:	2101      	movs	r1, #1
 80091f4:	f7ff bbd4 	b.w	80089a0 <_strtod_l+0x2f0>
 80091f8:	ffc00000 	.word	0xffc00000
 80091fc:	41dfffff 	.word	0x41dfffff
 8009200:	000fffff 	.word	0x000fffff
 8009204:	7ff00000 	.word	0x7ff00000
 8009208:	7fefffff 	.word	0x7fefffff
 800920c:	3ff00000 	.word	0x3ff00000
 8009210:	7c9fffff 	.word	0x7c9fffff
 8009214:	bff00000 	.word	0xbff00000
 8009218:	7fe00000 	.word	0x7fe00000
 800921c:	00000000 	.word	0x00000000

08009220 <strtof>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4c1d      	ldr	r4, [pc, #116]	; (8009298 <strtof+0x78>)
 8009224:	4b1d      	ldr	r3, [pc, #116]	; (800929c <strtof+0x7c>)
 8009226:	460a      	mov	r2, r1
 8009228:	4601      	mov	r1, r0
 800922a:	6820      	ldr	r0, [r4, #0]
 800922c:	f7ff fa40 	bl	80086b0 <_strtod_l>
 8009230:	eeb4 0b40 	vcmp.f64	d0, d0
 8009234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009238:	eeb0 7b40 	vmov.f64	d7, d0
 800923c:	d70d      	bvc.n	800925a <strtof+0x3a>
 800923e:	ee17 3a90 	vmov	r3, s15
 8009242:	2b00      	cmp	r3, #0
 8009244:	4816      	ldr	r0, [pc, #88]	; (80092a0 <strtof+0x80>)
 8009246:	da04      	bge.n	8009252 <strtof+0x32>
 8009248:	f001 fdbe 	bl	800adc8 <nanf>
 800924c:	eeb1 0a40 	vneg.f32	s0, s0
 8009250:	bd10      	pop	{r4, pc}
 8009252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009256:	f001 bdb7 	b.w	800adc8 <nanf>
 800925a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800925e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80092a4 <strtof+0x84>
 8009262:	eeb0 6ac0 	vabs.f32	s12, s0
 8009266:	eeb4 6a66 	vcmp.f32	s12, s13
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	ddef      	ble.n	8009250 <strtof+0x30>
 8009270:	eeb0 7bc7 	vabs.f64	d7, d7
 8009274:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8009290 <strtof+0x70>
 8009278:	eeb4 7b46 	vcmp.f64	d7, d6
 800927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009280:	bfde      	ittt	le
 8009282:	6823      	ldrle	r3, [r4, #0]
 8009284:	2222      	movle	r2, #34	; 0x22
 8009286:	601a      	strle	r2, [r3, #0]
 8009288:	e7e2      	b.n	8009250 <strtof+0x30>
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w
 8009290:	ffffffff 	.word	0xffffffff
 8009294:	7fefffff 	.word	0x7fefffff
 8009298:	24000014 	.word	0x24000014
 800929c:	2400007c 	.word	0x2400007c
 80092a0:	0800b6ea 	.word	0x0800b6ea
 80092a4:	7f7fffff 	.word	0x7f7fffff

080092a8 <__strtok_r>:
 80092a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092aa:	b908      	cbnz	r0, 80092b0 <__strtok_r+0x8>
 80092ac:	6810      	ldr	r0, [r2, #0]
 80092ae:	b188      	cbz	r0, 80092d4 <__strtok_r+0x2c>
 80092b0:	4604      	mov	r4, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80092b8:	460f      	mov	r7, r1
 80092ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80092be:	b91e      	cbnz	r6, 80092c8 <__strtok_r+0x20>
 80092c0:	b965      	cbnz	r5, 80092dc <__strtok_r+0x34>
 80092c2:	6015      	str	r5, [r2, #0]
 80092c4:	4628      	mov	r0, r5
 80092c6:	e005      	b.n	80092d4 <__strtok_r+0x2c>
 80092c8:	42b5      	cmp	r5, r6
 80092ca:	d1f6      	bne.n	80092ba <__strtok_r+0x12>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1f0      	bne.n	80092b2 <__strtok_r+0xa>
 80092d0:	6014      	str	r4, [r2, #0]
 80092d2:	7003      	strb	r3, [r0, #0]
 80092d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d6:	461c      	mov	r4, r3
 80092d8:	e00c      	b.n	80092f4 <__strtok_r+0x4c>
 80092da:	b915      	cbnz	r5, 80092e2 <__strtok_r+0x3a>
 80092dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092e0:	460e      	mov	r6, r1
 80092e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80092e6:	42ab      	cmp	r3, r5
 80092e8:	d1f7      	bne.n	80092da <__strtok_r+0x32>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f3      	beq.n	80092d6 <__strtok_r+0x2e>
 80092ee:	2300      	movs	r3, #0
 80092f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80092f4:	6014      	str	r4, [r2, #0]
 80092f6:	e7ed      	b.n	80092d4 <__strtok_r+0x2c>

080092f8 <strtok_r>:
 80092f8:	2301      	movs	r3, #1
 80092fa:	f7ff bfd5 	b.w	80092a8 <__strtok_r>
	...

08009300 <_strtoul_l.constprop.0>:
 8009300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009304:	4f36      	ldr	r7, [pc, #216]	; (80093e0 <_strtoul_l.constprop.0+0xe0>)
 8009306:	4686      	mov	lr, r0
 8009308:	460d      	mov	r5, r1
 800930a:	4628      	mov	r0, r5
 800930c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009310:	5de6      	ldrb	r6, [r4, r7]
 8009312:	f016 0608 	ands.w	r6, r6, #8
 8009316:	d1f8      	bne.n	800930a <_strtoul_l.constprop.0+0xa>
 8009318:	2c2d      	cmp	r4, #45	; 0x2d
 800931a:	d12f      	bne.n	800937c <_strtoul_l.constprop.0+0x7c>
 800931c:	782c      	ldrb	r4, [r5, #0]
 800931e:	2601      	movs	r6, #1
 8009320:	1c85      	adds	r5, r0, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d057      	beq.n	80093d6 <_strtoul_l.constprop.0+0xd6>
 8009326:	2b10      	cmp	r3, #16
 8009328:	d109      	bne.n	800933e <_strtoul_l.constprop.0+0x3e>
 800932a:	2c30      	cmp	r4, #48	; 0x30
 800932c:	d107      	bne.n	800933e <_strtoul_l.constprop.0+0x3e>
 800932e:	7828      	ldrb	r0, [r5, #0]
 8009330:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009334:	2858      	cmp	r0, #88	; 0x58
 8009336:	d149      	bne.n	80093cc <_strtoul_l.constprop.0+0xcc>
 8009338:	786c      	ldrb	r4, [r5, #1]
 800933a:	2310      	movs	r3, #16
 800933c:	3502      	adds	r5, #2
 800933e:	f04f 38ff 	mov.w	r8, #4294967295
 8009342:	2700      	movs	r7, #0
 8009344:	fbb8 f8f3 	udiv	r8, r8, r3
 8009348:	fb03 f908 	mul.w	r9, r3, r8
 800934c:	ea6f 0909 	mvn.w	r9, r9
 8009350:	4638      	mov	r0, r7
 8009352:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009356:	f1bc 0f09 	cmp.w	ip, #9
 800935a:	d814      	bhi.n	8009386 <_strtoul_l.constprop.0+0x86>
 800935c:	4664      	mov	r4, ip
 800935e:	42a3      	cmp	r3, r4
 8009360:	dd22      	ble.n	80093a8 <_strtoul_l.constprop.0+0xa8>
 8009362:	2f00      	cmp	r7, #0
 8009364:	db1d      	blt.n	80093a2 <_strtoul_l.constprop.0+0xa2>
 8009366:	4580      	cmp	r8, r0
 8009368:	d31b      	bcc.n	80093a2 <_strtoul_l.constprop.0+0xa2>
 800936a:	d101      	bne.n	8009370 <_strtoul_l.constprop.0+0x70>
 800936c:	45a1      	cmp	r9, r4
 800936e:	db18      	blt.n	80093a2 <_strtoul_l.constprop.0+0xa2>
 8009370:	fb00 4003 	mla	r0, r0, r3, r4
 8009374:	2701      	movs	r7, #1
 8009376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800937a:	e7ea      	b.n	8009352 <_strtoul_l.constprop.0+0x52>
 800937c:	2c2b      	cmp	r4, #43	; 0x2b
 800937e:	bf04      	itt	eq
 8009380:	782c      	ldrbeq	r4, [r5, #0]
 8009382:	1c85      	addeq	r5, r0, #2
 8009384:	e7cd      	b.n	8009322 <_strtoul_l.constprop.0+0x22>
 8009386:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800938a:	f1bc 0f19 	cmp.w	ip, #25
 800938e:	d801      	bhi.n	8009394 <_strtoul_l.constprop.0+0x94>
 8009390:	3c37      	subs	r4, #55	; 0x37
 8009392:	e7e4      	b.n	800935e <_strtoul_l.constprop.0+0x5e>
 8009394:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009398:	f1bc 0f19 	cmp.w	ip, #25
 800939c:	d804      	bhi.n	80093a8 <_strtoul_l.constprop.0+0xa8>
 800939e:	3c57      	subs	r4, #87	; 0x57
 80093a0:	e7dd      	b.n	800935e <_strtoul_l.constprop.0+0x5e>
 80093a2:	f04f 37ff 	mov.w	r7, #4294967295
 80093a6:	e7e6      	b.n	8009376 <_strtoul_l.constprop.0+0x76>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	da07      	bge.n	80093bc <_strtoul_l.constprop.0+0xbc>
 80093ac:	2322      	movs	r3, #34	; 0x22
 80093ae:	f8ce 3000 	str.w	r3, [lr]
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295
 80093b6:	b932      	cbnz	r2, 80093c6 <_strtoul_l.constprop.0+0xc6>
 80093b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093bc:	b106      	cbz	r6, 80093c0 <_strtoul_l.constprop.0+0xc0>
 80093be:	4240      	negs	r0, r0
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	d0f9      	beq.n	80093b8 <_strtoul_l.constprop.0+0xb8>
 80093c4:	b107      	cbz	r7, 80093c8 <_strtoul_l.constprop.0+0xc8>
 80093c6:	1e69      	subs	r1, r5, #1
 80093c8:	6011      	str	r1, [r2, #0]
 80093ca:	e7f5      	b.n	80093b8 <_strtoul_l.constprop.0+0xb8>
 80093cc:	2430      	movs	r4, #48	; 0x30
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1b5      	bne.n	800933e <_strtoul_l.constprop.0+0x3e>
 80093d2:	2308      	movs	r3, #8
 80093d4:	e7b3      	b.n	800933e <_strtoul_l.constprop.0+0x3e>
 80093d6:	2c30      	cmp	r4, #48	; 0x30
 80093d8:	d0a9      	beq.n	800932e <_strtoul_l.constprop.0+0x2e>
 80093da:	230a      	movs	r3, #10
 80093dc:	e7af      	b.n	800933e <_strtoul_l.constprop.0+0x3e>
 80093de:	bf00      	nop
 80093e0:	0800b829 	.word	0x0800b829

080093e4 <strtoul>:
 80093e4:	4613      	mov	r3, r2
 80093e6:	460a      	mov	r2, r1
 80093e8:	4601      	mov	r1, r0
 80093ea:	4802      	ldr	r0, [pc, #8]	; (80093f4 <strtoul+0x10>)
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f7ff bf87 	b.w	8009300 <_strtoul_l.constprop.0>
 80093f2:	bf00      	nop
 80093f4:	24000014 	.word	0x24000014

080093f8 <_vsniprintf_r>:
 80093f8:	b530      	push	{r4, r5, lr}
 80093fa:	4614      	mov	r4, r2
 80093fc:	2c00      	cmp	r4, #0
 80093fe:	b09b      	sub	sp, #108	; 0x6c
 8009400:	4605      	mov	r5, r0
 8009402:	461a      	mov	r2, r3
 8009404:	da05      	bge.n	8009412 <_vsniprintf_r+0x1a>
 8009406:	238b      	movs	r3, #139	; 0x8b
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	b01b      	add	sp, #108	; 0x6c
 8009410:	bd30      	pop	{r4, r5, pc}
 8009412:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009416:	f8ad 300c 	strh.w	r3, [sp, #12]
 800941a:	bf14      	ite	ne
 800941c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009420:	4623      	moveq	r3, r4
 8009422:	9302      	str	r3, [sp, #8]
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800942a:	9100      	str	r1, [sp, #0]
 800942c:	9104      	str	r1, [sp, #16]
 800942e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009432:	4669      	mov	r1, sp
 8009434:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009436:	f001 fa19 	bl	800a86c <_svfiprintf_r>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	bfbc      	itt	lt
 800943e:	238b      	movlt	r3, #139	; 0x8b
 8009440:	602b      	strlt	r3, [r5, #0]
 8009442:	2c00      	cmp	r4, #0
 8009444:	d0e3      	beq.n	800940e <_vsniprintf_r+0x16>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	e7df      	b.n	800940e <_vsniprintf_r+0x16>
	...

08009450 <vsniprintf>:
 8009450:	b507      	push	{r0, r1, r2, lr}
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	460a      	mov	r2, r1
 8009458:	4601      	mov	r1, r0
 800945a:	4803      	ldr	r0, [pc, #12]	; (8009468 <vsniprintf+0x18>)
 800945c:	6800      	ldr	r0, [r0, #0]
 800945e:	f7ff ffcb 	bl	80093f8 <_vsniprintf_r>
 8009462:	b003      	add	sp, #12
 8009464:	f85d fb04 	ldr.w	pc, [sp], #4
 8009468:	24000014 	.word	0x24000014

0800946c <_write_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	; (800948c <_write_r+0x20>)
 8009470:	4604      	mov	r4, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f7 ff9e 	bl	80013bc <_write>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_write_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_write_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	24007774 	.word	0x24007774

08009490 <_close_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	; (80094ac <_close_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7f7 ff9c 	bl	80013d8 <_close>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_close_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_close_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	24007774 	.word	0x24007774

080094b0 <__sflush_r>:
 80094b0:	898a      	ldrh	r2, [r1, #12]
 80094b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	4605      	mov	r5, r0
 80094b8:	0710      	lsls	r0, r2, #28
 80094ba:	460c      	mov	r4, r1
 80094bc:	d458      	bmi.n	8009570 <__sflush_r+0xc0>
 80094be:	684b      	ldr	r3, [r1, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dc05      	bgt.n	80094d0 <__sflush_r+0x20>
 80094c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dc02      	bgt.n	80094d0 <__sflush_r+0x20>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d0f9      	beq.n	80094ca <__sflush_r+0x1a>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094dc:	682f      	ldr	r7, [r5, #0]
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	d032      	beq.n	8009548 <__sflush_r+0x98>
 80094e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	075a      	lsls	r2, r3, #29
 80094e8:	d505      	bpl.n	80094f6 <__sflush_r+0x46>
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	1ac0      	subs	r0, r0, r3
 80094ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094f0:	b10b      	cbz	r3, 80094f6 <__sflush_r+0x46>
 80094f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094f4:	1ac0      	subs	r0, r0, r3
 80094f6:	2300      	movs	r3, #0
 80094f8:	4602      	mov	r2, r0
 80094fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094fc:	6a21      	ldr	r1, [r4, #32]
 80094fe:	4628      	mov	r0, r5
 8009500:	47b0      	blx	r6
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	d106      	bne.n	8009516 <__sflush_r+0x66>
 8009508:	6829      	ldr	r1, [r5, #0]
 800950a:	291d      	cmp	r1, #29
 800950c:	d82c      	bhi.n	8009568 <__sflush_r+0xb8>
 800950e:	4a2a      	ldr	r2, [pc, #168]	; (80095b8 <__sflush_r+0x108>)
 8009510:	40ca      	lsrs	r2, r1
 8009512:	07d6      	lsls	r6, r2, #31
 8009514:	d528      	bpl.n	8009568 <__sflush_r+0xb8>
 8009516:	2200      	movs	r2, #0
 8009518:	6062      	str	r2, [r4, #4]
 800951a:	04d9      	lsls	r1, r3, #19
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	d504      	bpl.n	800952c <__sflush_r+0x7c>
 8009522:	1c42      	adds	r2, r0, #1
 8009524:	d101      	bne.n	800952a <__sflush_r+0x7a>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	b903      	cbnz	r3, 800952c <__sflush_r+0x7c>
 800952a:	6560      	str	r0, [r4, #84]	; 0x54
 800952c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800952e:	602f      	str	r7, [r5, #0]
 8009530:	2900      	cmp	r1, #0
 8009532:	d0ca      	beq.n	80094ca <__sflush_r+0x1a>
 8009534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009538:	4299      	cmp	r1, r3
 800953a:	d002      	beq.n	8009542 <__sflush_r+0x92>
 800953c:	4628      	mov	r0, r5
 800953e:	f001 f8ed 	bl	800a71c <_free_r>
 8009542:	2000      	movs	r0, #0
 8009544:	6360      	str	r0, [r4, #52]	; 0x34
 8009546:	e7c1      	b.n	80094cc <__sflush_r+0x1c>
 8009548:	6a21      	ldr	r1, [r4, #32]
 800954a:	2301      	movs	r3, #1
 800954c:	4628      	mov	r0, r5
 800954e:	47b0      	blx	r6
 8009550:	1c41      	adds	r1, r0, #1
 8009552:	d1c7      	bne.n	80094e4 <__sflush_r+0x34>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0c4      	beq.n	80094e4 <__sflush_r+0x34>
 800955a:	2b1d      	cmp	r3, #29
 800955c:	d001      	beq.n	8009562 <__sflush_r+0xb2>
 800955e:	2b16      	cmp	r3, #22
 8009560:	d101      	bne.n	8009566 <__sflush_r+0xb6>
 8009562:	602f      	str	r7, [r5, #0]
 8009564:	e7b1      	b.n	80094ca <__sflush_r+0x1a>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	e7ad      	b.n	80094cc <__sflush_r+0x1c>
 8009570:	690f      	ldr	r7, [r1, #16]
 8009572:	2f00      	cmp	r7, #0
 8009574:	d0a9      	beq.n	80094ca <__sflush_r+0x1a>
 8009576:	0793      	lsls	r3, r2, #30
 8009578:	680e      	ldr	r6, [r1, #0]
 800957a:	bf08      	it	eq
 800957c:	694b      	ldreq	r3, [r1, #20]
 800957e:	600f      	str	r7, [r1, #0]
 8009580:	bf18      	it	ne
 8009582:	2300      	movne	r3, #0
 8009584:	eba6 0807 	sub.w	r8, r6, r7
 8009588:	608b      	str	r3, [r1, #8]
 800958a:	f1b8 0f00 	cmp.w	r8, #0
 800958e:	dd9c      	ble.n	80094ca <__sflush_r+0x1a>
 8009590:	6a21      	ldr	r1, [r4, #32]
 8009592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009594:	4643      	mov	r3, r8
 8009596:	463a      	mov	r2, r7
 8009598:	4628      	mov	r0, r5
 800959a:	47b0      	blx	r6
 800959c:	2800      	cmp	r0, #0
 800959e:	dc06      	bgt.n	80095ae <__sflush_r+0xfe>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	e78e      	b.n	80094cc <__sflush_r+0x1c>
 80095ae:	4407      	add	r7, r0
 80095b0:	eba8 0800 	sub.w	r8, r8, r0
 80095b4:	e7e9      	b.n	800958a <__sflush_r+0xda>
 80095b6:	bf00      	nop
 80095b8:	20400001 	.word	0x20400001

080095bc <_fflush_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	690b      	ldr	r3, [r1, #16]
 80095c0:	4605      	mov	r5, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	b913      	cbnz	r3, 80095cc <_fflush_r+0x10>
 80095c6:	2500      	movs	r5, #0
 80095c8:	4628      	mov	r0, r5
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	b118      	cbz	r0, 80095d6 <_fflush_r+0x1a>
 80095ce:	6983      	ldr	r3, [r0, #24]
 80095d0:	b90b      	cbnz	r3, 80095d6 <_fflush_r+0x1a>
 80095d2:	f7fe fe03 	bl	80081dc <__sinit>
 80095d6:	4b14      	ldr	r3, [pc, #80]	; (8009628 <_fflush_r+0x6c>)
 80095d8:	429c      	cmp	r4, r3
 80095da:	d11b      	bne.n	8009614 <_fflush_r+0x58>
 80095dc:	686c      	ldr	r4, [r5, #4]
 80095de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0ef      	beq.n	80095c6 <_fflush_r+0xa>
 80095e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095e8:	07d0      	lsls	r0, r2, #31
 80095ea:	d404      	bmi.n	80095f6 <_fflush_r+0x3a>
 80095ec:	0599      	lsls	r1, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_fflush_r+0x3a>
 80095f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f2:	f7fe feb6 	bl	8008362 <__retarget_lock_acquire_recursive>
 80095f6:	4628      	mov	r0, r5
 80095f8:	4621      	mov	r1, r4
 80095fa:	f7ff ff59 	bl	80094b0 <__sflush_r>
 80095fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009600:	07da      	lsls	r2, r3, #31
 8009602:	4605      	mov	r5, r0
 8009604:	d4e0      	bmi.n	80095c8 <_fflush_r+0xc>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	059b      	lsls	r3, r3, #22
 800960a:	d4dd      	bmi.n	80095c8 <_fflush_r+0xc>
 800960c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960e:	f7fe fea9 	bl	8008364 <__retarget_lock_release_recursive>
 8009612:	e7d9      	b.n	80095c8 <_fflush_r+0xc>
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <_fflush_r+0x70>)
 8009616:	429c      	cmp	r4, r3
 8009618:	d101      	bne.n	800961e <_fflush_r+0x62>
 800961a:	68ac      	ldr	r4, [r5, #8]
 800961c:	e7df      	b.n	80095de <_fflush_r+0x22>
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <_fflush_r+0x74>)
 8009620:	429c      	cmp	r4, r3
 8009622:	bf08      	it	eq
 8009624:	68ec      	ldreq	r4, [r5, #12]
 8009626:	e7da      	b.n	80095de <_fflush_r+0x22>
 8009628:	0800b784 	.word	0x0800b784
 800962c:	0800b7a4 	.word	0x0800b7a4
 8009630:	0800b764 	.word	0x0800b764

08009634 <rshift>:
 8009634:	6903      	ldr	r3, [r0, #16]
 8009636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800963a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800963e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009642:	f100 0414 	add.w	r4, r0, #20
 8009646:	dd45      	ble.n	80096d4 <rshift+0xa0>
 8009648:	f011 011f 	ands.w	r1, r1, #31
 800964c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009654:	d10c      	bne.n	8009670 <rshift+0x3c>
 8009656:	f100 0710 	add.w	r7, r0, #16
 800965a:	4629      	mov	r1, r5
 800965c:	42b1      	cmp	r1, r6
 800965e:	d334      	bcc.n	80096ca <rshift+0x96>
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	1eea      	subs	r2, r5, #3
 8009666:	4296      	cmp	r6, r2
 8009668:	bf38      	it	cc
 800966a:	2300      	movcc	r3, #0
 800966c:	4423      	add	r3, r4
 800966e:	e015      	b.n	800969c <rshift+0x68>
 8009670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009674:	f1c1 0820 	rsb	r8, r1, #32
 8009678:	40cf      	lsrs	r7, r1
 800967a:	f105 0e04 	add.w	lr, r5, #4
 800967e:	46a1      	mov	r9, r4
 8009680:	4576      	cmp	r6, lr
 8009682:	46f4      	mov	ip, lr
 8009684:	d815      	bhi.n	80096b2 <rshift+0x7e>
 8009686:	1a9a      	subs	r2, r3, r2
 8009688:	0092      	lsls	r2, r2, #2
 800968a:	3a04      	subs	r2, #4
 800968c:	3501      	adds	r5, #1
 800968e:	42ae      	cmp	r6, r5
 8009690:	bf38      	it	cc
 8009692:	2200      	movcc	r2, #0
 8009694:	18a3      	adds	r3, r4, r2
 8009696:	50a7      	str	r7, [r4, r2]
 8009698:	b107      	cbz	r7, 800969c <rshift+0x68>
 800969a:	3304      	adds	r3, #4
 800969c:	1b1a      	subs	r2, r3, r4
 800969e:	42a3      	cmp	r3, r4
 80096a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096a4:	bf08      	it	eq
 80096a6:	2300      	moveq	r3, #0
 80096a8:	6102      	str	r2, [r0, #16]
 80096aa:	bf08      	it	eq
 80096ac:	6143      	streq	r3, [r0, #20]
 80096ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096b2:	f8dc c000 	ldr.w	ip, [ip]
 80096b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80096ba:	ea4c 0707 	orr.w	r7, ip, r7
 80096be:	f849 7b04 	str.w	r7, [r9], #4
 80096c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096c6:	40cf      	lsrs	r7, r1
 80096c8:	e7da      	b.n	8009680 <rshift+0x4c>
 80096ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80096ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80096d2:	e7c3      	b.n	800965c <rshift+0x28>
 80096d4:	4623      	mov	r3, r4
 80096d6:	e7e1      	b.n	800969c <rshift+0x68>

080096d8 <__hexdig_fun>:
 80096d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d802      	bhi.n	80096e6 <__hexdig_fun+0xe>
 80096e0:	3820      	subs	r0, #32
 80096e2:	b2c0      	uxtb	r0, r0
 80096e4:	4770      	bx	lr
 80096e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	d801      	bhi.n	80096f2 <__hexdig_fun+0x1a>
 80096ee:	3847      	subs	r0, #71	; 0x47
 80096f0:	e7f7      	b.n	80096e2 <__hexdig_fun+0xa>
 80096f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d801      	bhi.n	80096fe <__hexdig_fun+0x26>
 80096fa:	3827      	subs	r0, #39	; 0x27
 80096fc:	e7f1      	b.n	80096e2 <__hexdig_fun+0xa>
 80096fe:	2000      	movs	r0, #0
 8009700:	4770      	bx	lr
	...

08009704 <__gethex>:
 8009704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	ed2d 8b02 	vpush	{d8}
 800970c:	b089      	sub	sp, #36	; 0x24
 800970e:	ee08 0a10 	vmov	s16, r0
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	4bb4      	ldr	r3, [pc, #720]	; (80099e8 <__gethex+0x2e4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	4618      	mov	r0, r3
 800971c:	468b      	mov	fp, r1
 800971e:	4690      	mov	r8, r2
 8009720:	f7f6 fde8 	bl	80002f4 <strlen>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	f8db 2000 	ldr.w	r2, [fp]
 800972a:	4403      	add	r3, r0
 800972c:	4682      	mov	sl, r0
 800972e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009732:	9305      	str	r3, [sp, #20]
 8009734:	1c93      	adds	r3, r2, #2
 8009736:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800973a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800973e:	32fe      	adds	r2, #254	; 0xfe
 8009740:	18d1      	adds	r1, r2, r3
 8009742:	461f      	mov	r7, r3
 8009744:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009748:	9100      	str	r1, [sp, #0]
 800974a:	2830      	cmp	r0, #48	; 0x30
 800974c:	d0f8      	beq.n	8009740 <__gethex+0x3c>
 800974e:	f7ff ffc3 	bl	80096d8 <__hexdig_fun>
 8009752:	4604      	mov	r4, r0
 8009754:	2800      	cmp	r0, #0
 8009756:	d13a      	bne.n	80097ce <__gethex+0xca>
 8009758:	9901      	ldr	r1, [sp, #4]
 800975a:	4652      	mov	r2, sl
 800975c:	4638      	mov	r0, r7
 800975e:	f001 fb39 	bl	800add4 <strncmp>
 8009762:	4605      	mov	r5, r0
 8009764:	2800      	cmp	r0, #0
 8009766:	d168      	bne.n	800983a <__gethex+0x136>
 8009768:	f817 000a 	ldrb.w	r0, [r7, sl]
 800976c:	eb07 060a 	add.w	r6, r7, sl
 8009770:	f7ff ffb2 	bl	80096d8 <__hexdig_fun>
 8009774:	2800      	cmp	r0, #0
 8009776:	d062      	beq.n	800983e <__gethex+0x13a>
 8009778:	4633      	mov	r3, r6
 800977a:	7818      	ldrb	r0, [r3, #0]
 800977c:	2830      	cmp	r0, #48	; 0x30
 800977e:	461f      	mov	r7, r3
 8009780:	f103 0301 	add.w	r3, r3, #1
 8009784:	d0f9      	beq.n	800977a <__gethex+0x76>
 8009786:	f7ff ffa7 	bl	80096d8 <__hexdig_fun>
 800978a:	2301      	movs	r3, #1
 800978c:	fab0 f480 	clz	r4, r0
 8009790:	0964      	lsrs	r4, r4, #5
 8009792:	4635      	mov	r5, r6
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	463a      	mov	r2, r7
 8009798:	4616      	mov	r6, r2
 800979a:	3201      	adds	r2, #1
 800979c:	7830      	ldrb	r0, [r6, #0]
 800979e:	f7ff ff9b 	bl	80096d8 <__hexdig_fun>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1f8      	bne.n	8009798 <__gethex+0x94>
 80097a6:	9901      	ldr	r1, [sp, #4]
 80097a8:	4652      	mov	r2, sl
 80097aa:	4630      	mov	r0, r6
 80097ac:	f001 fb12 	bl	800add4 <strncmp>
 80097b0:	b980      	cbnz	r0, 80097d4 <__gethex+0xd0>
 80097b2:	b94d      	cbnz	r5, 80097c8 <__gethex+0xc4>
 80097b4:	eb06 050a 	add.w	r5, r6, sl
 80097b8:	462a      	mov	r2, r5
 80097ba:	4616      	mov	r6, r2
 80097bc:	3201      	adds	r2, #1
 80097be:	7830      	ldrb	r0, [r6, #0]
 80097c0:	f7ff ff8a 	bl	80096d8 <__hexdig_fun>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f8      	bne.n	80097ba <__gethex+0xb6>
 80097c8:	1bad      	subs	r5, r5, r6
 80097ca:	00ad      	lsls	r5, r5, #2
 80097cc:	e004      	b.n	80097d8 <__gethex+0xd4>
 80097ce:	2400      	movs	r4, #0
 80097d0:	4625      	mov	r5, r4
 80097d2:	e7e0      	b.n	8009796 <__gethex+0x92>
 80097d4:	2d00      	cmp	r5, #0
 80097d6:	d1f7      	bne.n	80097c8 <__gethex+0xc4>
 80097d8:	7833      	ldrb	r3, [r6, #0]
 80097da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097de:	2b50      	cmp	r3, #80	; 0x50
 80097e0:	d13b      	bne.n	800985a <__gethex+0x156>
 80097e2:	7873      	ldrb	r3, [r6, #1]
 80097e4:	2b2b      	cmp	r3, #43	; 0x2b
 80097e6:	d02c      	beq.n	8009842 <__gethex+0x13e>
 80097e8:	2b2d      	cmp	r3, #45	; 0x2d
 80097ea:	d02e      	beq.n	800984a <__gethex+0x146>
 80097ec:	1c71      	adds	r1, r6, #1
 80097ee:	f04f 0900 	mov.w	r9, #0
 80097f2:	7808      	ldrb	r0, [r1, #0]
 80097f4:	f7ff ff70 	bl	80096d8 <__hexdig_fun>
 80097f8:	1e43      	subs	r3, r0, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b18      	cmp	r3, #24
 80097fe:	d82c      	bhi.n	800985a <__gethex+0x156>
 8009800:	f1a0 0210 	sub.w	r2, r0, #16
 8009804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009808:	f7ff ff66 	bl	80096d8 <__hexdig_fun>
 800980c:	1e43      	subs	r3, r0, #1
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b18      	cmp	r3, #24
 8009812:	d91d      	bls.n	8009850 <__gethex+0x14c>
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	d000      	beq.n	800981c <__gethex+0x118>
 800981a:	4252      	negs	r2, r2
 800981c:	4415      	add	r5, r2
 800981e:	f8cb 1000 	str.w	r1, [fp]
 8009822:	b1e4      	cbz	r4, 800985e <__gethex+0x15a>
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2700      	movne	r7, #0
 800982c:	2706      	moveq	r7, #6
 800982e:	4638      	mov	r0, r7
 8009830:	b009      	add	sp, #36	; 0x24
 8009832:	ecbd 8b02 	vpop	{d8}
 8009836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983a:	463e      	mov	r6, r7
 800983c:	4625      	mov	r5, r4
 800983e:	2401      	movs	r4, #1
 8009840:	e7ca      	b.n	80097d8 <__gethex+0xd4>
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	1cb1      	adds	r1, r6, #2
 8009848:	e7d3      	b.n	80097f2 <__gethex+0xee>
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	e7fa      	b.n	8009846 <__gethex+0x142>
 8009850:	230a      	movs	r3, #10
 8009852:	fb03 0202 	mla	r2, r3, r2, r0
 8009856:	3a10      	subs	r2, #16
 8009858:	e7d4      	b.n	8009804 <__gethex+0x100>
 800985a:	4631      	mov	r1, r6
 800985c:	e7df      	b.n	800981e <__gethex+0x11a>
 800985e:	1bf3      	subs	r3, r6, r7
 8009860:	3b01      	subs	r3, #1
 8009862:	4621      	mov	r1, r4
 8009864:	2b07      	cmp	r3, #7
 8009866:	dc0b      	bgt.n	8009880 <__gethex+0x17c>
 8009868:	ee18 0a10 	vmov	r0, s16
 800986c:	f000 fa82 	bl	8009d74 <_Balloc>
 8009870:	4604      	mov	r4, r0
 8009872:	b940      	cbnz	r0, 8009886 <__gethex+0x182>
 8009874:	4b5d      	ldr	r3, [pc, #372]	; (80099ec <__gethex+0x2e8>)
 8009876:	4602      	mov	r2, r0
 8009878:	21de      	movs	r1, #222	; 0xde
 800987a:	485d      	ldr	r0, [pc, #372]	; (80099f0 <__gethex+0x2ec>)
 800987c:	f001 facc 	bl	800ae18 <__assert_func>
 8009880:	3101      	adds	r1, #1
 8009882:	105b      	asrs	r3, r3, #1
 8009884:	e7ee      	b.n	8009864 <__gethex+0x160>
 8009886:	f100 0914 	add.w	r9, r0, #20
 800988a:	f04f 0b00 	mov.w	fp, #0
 800988e:	f1ca 0301 	rsb	r3, sl, #1
 8009892:	f8cd 9008 	str.w	r9, [sp, #8]
 8009896:	f8cd b000 	str.w	fp, [sp]
 800989a:	9306      	str	r3, [sp, #24]
 800989c:	42b7      	cmp	r7, r6
 800989e:	d340      	bcc.n	8009922 <__gethex+0x21e>
 80098a0:	9802      	ldr	r0, [sp, #8]
 80098a2:	9b00      	ldr	r3, [sp, #0]
 80098a4:	f840 3b04 	str.w	r3, [r0], #4
 80098a8:	eba0 0009 	sub.w	r0, r0, r9
 80098ac:	1080      	asrs	r0, r0, #2
 80098ae:	0146      	lsls	r6, r0, #5
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fb50 	bl	8009f58 <__hi0bits>
 80098b8:	1a30      	subs	r0, r6, r0
 80098ba:	f8d8 6000 	ldr.w	r6, [r8]
 80098be:	42b0      	cmp	r0, r6
 80098c0:	dd63      	ble.n	800998a <__gethex+0x286>
 80098c2:	1b87      	subs	r7, r0, r6
 80098c4:	4639      	mov	r1, r7
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 fef1 	bl	800a6ae <__any_on>
 80098cc:	4682      	mov	sl, r0
 80098ce:	b1a8      	cbz	r0, 80098fc <__gethex+0x1f8>
 80098d0:	1e7b      	subs	r3, r7, #1
 80098d2:	1159      	asrs	r1, r3, #5
 80098d4:	f003 021f 	and.w	r2, r3, #31
 80098d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80098dc:	f04f 0a01 	mov.w	sl, #1
 80098e0:	fa0a f202 	lsl.w	r2, sl, r2
 80098e4:	420a      	tst	r2, r1
 80098e6:	d009      	beq.n	80098fc <__gethex+0x1f8>
 80098e8:	4553      	cmp	r3, sl
 80098ea:	dd05      	ble.n	80098f8 <__gethex+0x1f4>
 80098ec:	1eb9      	subs	r1, r7, #2
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 fedd 	bl	800a6ae <__any_on>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d145      	bne.n	8009984 <__gethex+0x280>
 80098f8:	f04f 0a02 	mov.w	sl, #2
 80098fc:	4639      	mov	r1, r7
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fe98 	bl	8009634 <rshift>
 8009904:	443d      	add	r5, r7
 8009906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800990a:	42ab      	cmp	r3, r5
 800990c:	da4c      	bge.n	80099a8 <__gethex+0x2a4>
 800990e:	ee18 0a10 	vmov	r0, s16
 8009912:	4621      	mov	r1, r4
 8009914:	f000 fa6e 	bl	8009df4 <_Bfree>
 8009918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800991a:	2300      	movs	r3, #0
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	27a3      	movs	r7, #163	; 0xa3
 8009920:	e785      	b.n	800982e <__gethex+0x12a>
 8009922:	1e73      	subs	r3, r6, #1
 8009924:	9a05      	ldr	r2, [sp, #20]
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800992c:	4293      	cmp	r3, r2
 800992e:	d019      	beq.n	8009964 <__gethex+0x260>
 8009930:	f1bb 0f20 	cmp.w	fp, #32
 8009934:	d107      	bne.n	8009946 <__gethex+0x242>
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	9a00      	ldr	r2, [sp, #0]
 800993a:	f843 2b04 	str.w	r2, [r3], #4
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	2300      	movs	r3, #0
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	469b      	mov	fp, r3
 8009946:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800994a:	f7ff fec5 	bl	80096d8 <__hexdig_fun>
 800994e:	9b00      	ldr	r3, [sp, #0]
 8009950:	f000 000f 	and.w	r0, r0, #15
 8009954:	fa00 f00b 	lsl.w	r0, r0, fp
 8009958:	4303      	orrs	r3, r0
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	f10b 0b04 	add.w	fp, fp, #4
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	e00d      	b.n	8009980 <__gethex+0x27c>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	9a06      	ldr	r2, [sp, #24]
 8009968:	4413      	add	r3, r2
 800996a:	42bb      	cmp	r3, r7
 800996c:	d3e0      	bcc.n	8009930 <__gethex+0x22c>
 800996e:	4618      	mov	r0, r3
 8009970:	9901      	ldr	r1, [sp, #4]
 8009972:	9307      	str	r3, [sp, #28]
 8009974:	4652      	mov	r2, sl
 8009976:	f001 fa2d 	bl	800add4 <strncmp>
 800997a:	9b07      	ldr	r3, [sp, #28]
 800997c:	2800      	cmp	r0, #0
 800997e:	d1d7      	bne.n	8009930 <__gethex+0x22c>
 8009980:	461e      	mov	r6, r3
 8009982:	e78b      	b.n	800989c <__gethex+0x198>
 8009984:	f04f 0a03 	mov.w	sl, #3
 8009988:	e7b8      	b.n	80098fc <__gethex+0x1f8>
 800998a:	da0a      	bge.n	80099a2 <__gethex+0x29e>
 800998c:	1a37      	subs	r7, r6, r0
 800998e:	4621      	mov	r1, r4
 8009990:	ee18 0a10 	vmov	r0, s16
 8009994:	463a      	mov	r2, r7
 8009996:	f000 fc49 	bl	800a22c <__lshift>
 800999a:	1bed      	subs	r5, r5, r7
 800999c:	4604      	mov	r4, r0
 800999e:	f100 0914 	add.w	r9, r0, #20
 80099a2:	f04f 0a00 	mov.w	sl, #0
 80099a6:	e7ae      	b.n	8009906 <__gethex+0x202>
 80099a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099ac:	42a8      	cmp	r0, r5
 80099ae:	dd72      	ble.n	8009a96 <__gethex+0x392>
 80099b0:	1b45      	subs	r5, r0, r5
 80099b2:	42ae      	cmp	r6, r5
 80099b4:	dc36      	bgt.n	8009a24 <__gethex+0x320>
 80099b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d02a      	beq.n	8009a14 <__gethex+0x310>
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d02c      	beq.n	8009a1c <__gethex+0x318>
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d11c      	bne.n	8009a00 <__gethex+0x2fc>
 80099c6:	42ae      	cmp	r6, r5
 80099c8:	d11a      	bne.n	8009a00 <__gethex+0x2fc>
 80099ca:	2e01      	cmp	r6, #1
 80099cc:	d112      	bne.n	80099f4 <__gethex+0x2f0>
 80099ce:	9a04      	ldr	r2, [sp, #16]
 80099d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	2301      	movs	r3, #1
 80099d8:	6123      	str	r3, [r4, #16]
 80099da:	f8c9 3000 	str.w	r3, [r9]
 80099de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099e0:	2762      	movs	r7, #98	; 0x62
 80099e2:	601c      	str	r4, [r3, #0]
 80099e4:	e723      	b.n	800982e <__gethex+0x12a>
 80099e6:	bf00      	nop
 80099e8:	0800b9a0 	.word	0x0800b9a0
 80099ec:	0800b929 	.word	0x0800b929
 80099f0:	0800b93a 	.word	0x0800b93a
 80099f4:	1e71      	subs	r1, r6, #1
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 fe59 	bl	800a6ae <__any_on>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1e6      	bne.n	80099ce <__gethex+0x2ca>
 8009a00:	ee18 0a10 	vmov	r0, s16
 8009a04:	4621      	mov	r1, r4
 8009a06:	f000 f9f5 	bl	8009df4 <_Bfree>
 8009a0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	2750      	movs	r7, #80	; 0x50
 8009a12:	e70c      	b.n	800982e <__gethex+0x12a>
 8009a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f2      	bne.n	8009a00 <__gethex+0x2fc>
 8009a1a:	e7d8      	b.n	80099ce <__gethex+0x2ca>
 8009a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1d5      	bne.n	80099ce <__gethex+0x2ca>
 8009a22:	e7ed      	b.n	8009a00 <__gethex+0x2fc>
 8009a24:	1e6f      	subs	r7, r5, #1
 8009a26:	f1ba 0f00 	cmp.w	sl, #0
 8009a2a:	d131      	bne.n	8009a90 <__gethex+0x38c>
 8009a2c:	b127      	cbz	r7, 8009a38 <__gethex+0x334>
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 fe3c 	bl	800a6ae <__any_on>
 8009a36:	4682      	mov	sl, r0
 8009a38:	117b      	asrs	r3, r7, #5
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a40:	f007 071f 	and.w	r7, r7, #31
 8009a44:	fa01 f707 	lsl.w	r7, r1, r7
 8009a48:	421f      	tst	r7, r3
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	bf18      	it	ne
 8009a50:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a54:	1b76      	subs	r6, r6, r5
 8009a56:	f7ff fded 	bl	8009634 <rshift>
 8009a5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a5e:	2702      	movs	r7, #2
 8009a60:	f1ba 0f00 	cmp.w	sl, #0
 8009a64:	d048      	beq.n	8009af8 <__gethex+0x3f4>
 8009a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d015      	beq.n	8009a9a <__gethex+0x396>
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d017      	beq.n	8009aa2 <__gethex+0x39e>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d109      	bne.n	8009a8a <__gethex+0x386>
 8009a76:	f01a 0f02 	tst.w	sl, #2
 8009a7a:	d006      	beq.n	8009a8a <__gethex+0x386>
 8009a7c:	f8d9 0000 	ldr.w	r0, [r9]
 8009a80:	ea4a 0a00 	orr.w	sl, sl, r0
 8009a84:	f01a 0f01 	tst.w	sl, #1
 8009a88:	d10e      	bne.n	8009aa8 <__gethex+0x3a4>
 8009a8a:	f047 0710 	orr.w	r7, r7, #16
 8009a8e:	e033      	b.n	8009af8 <__gethex+0x3f4>
 8009a90:	f04f 0a01 	mov.w	sl, #1
 8009a94:	e7d0      	b.n	8009a38 <__gethex+0x334>
 8009a96:	2701      	movs	r7, #1
 8009a98:	e7e2      	b.n	8009a60 <__gethex+0x35c>
 8009a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a9c:	f1c3 0301 	rsb	r3, r3, #1
 8009aa0:	9315      	str	r3, [sp, #84]	; 0x54
 8009aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0f0      	beq.n	8009a8a <__gethex+0x386>
 8009aa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009aac:	f104 0314 	add.w	r3, r4, #20
 8009ab0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ab4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ac6:	d01c      	beq.n	8009b02 <__gethex+0x3fe>
 8009ac8:	3201      	adds	r2, #1
 8009aca:	6002      	str	r2, [r0, #0]
 8009acc:	2f02      	cmp	r7, #2
 8009ace:	f104 0314 	add.w	r3, r4, #20
 8009ad2:	d13f      	bne.n	8009b54 <__gethex+0x450>
 8009ad4:	f8d8 2000 	ldr.w	r2, [r8]
 8009ad8:	3a01      	subs	r2, #1
 8009ada:	42b2      	cmp	r2, r6
 8009adc:	d10a      	bne.n	8009af4 <__gethex+0x3f0>
 8009ade:	1171      	asrs	r1, r6, #5
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ae6:	f006 061f 	and.w	r6, r6, #31
 8009aea:	fa02 f606 	lsl.w	r6, r2, r6
 8009aee:	421e      	tst	r6, r3
 8009af0:	bf18      	it	ne
 8009af2:	4617      	movne	r7, r2
 8009af4:	f047 0720 	orr.w	r7, r7, #32
 8009af8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009afa:	601c      	str	r4, [r3, #0]
 8009afc:	9b04      	ldr	r3, [sp, #16]
 8009afe:	601d      	str	r5, [r3, #0]
 8009b00:	e695      	b.n	800982e <__gethex+0x12a>
 8009b02:	4299      	cmp	r1, r3
 8009b04:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b08:	d8d8      	bhi.n	8009abc <__gethex+0x3b8>
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	459b      	cmp	fp, r3
 8009b0e:	db19      	blt.n	8009b44 <__gethex+0x440>
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	ee18 0a10 	vmov	r0, s16
 8009b16:	3101      	adds	r1, #1
 8009b18:	f000 f92c 	bl	8009d74 <_Balloc>
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	b918      	cbnz	r0, 8009b28 <__gethex+0x424>
 8009b20:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <__gethex+0x488>)
 8009b22:	4602      	mov	r2, r0
 8009b24:	2184      	movs	r1, #132	; 0x84
 8009b26:	e6a8      	b.n	800987a <__gethex+0x176>
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	3202      	adds	r2, #2
 8009b2c:	f104 010c 	add.w	r1, r4, #12
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	300c      	adds	r0, #12
 8009b34:	f7fe fc17 	bl	8008366 <memcpy>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	ee18 0a10 	vmov	r0, s16
 8009b3e:	f000 f959 	bl	8009df4 <_Bfree>
 8009b42:	464c      	mov	r4, r9
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b4c:	6122      	str	r2, [r4, #16]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	615a      	str	r2, [r3, #20]
 8009b52:	e7bb      	b.n	8009acc <__gethex+0x3c8>
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	455a      	cmp	r2, fp
 8009b58:	dd0b      	ble.n	8009b72 <__gethex+0x46e>
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7ff fd69 	bl	8009634 <rshift>
 8009b62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b66:	3501      	adds	r5, #1
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	f6ff aed0 	blt.w	800990e <__gethex+0x20a>
 8009b6e:	2701      	movs	r7, #1
 8009b70:	e7c0      	b.n	8009af4 <__gethex+0x3f0>
 8009b72:	f016 061f 	ands.w	r6, r6, #31
 8009b76:	d0fa      	beq.n	8009b6e <__gethex+0x46a>
 8009b78:	4453      	add	r3, sl
 8009b7a:	f1c6 0620 	rsb	r6, r6, #32
 8009b7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b82:	f000 f9e9 	bl	8009f58 <__hi0bits>
 8009b86:	42b0      	cmp	r0, r6
 8009b88:	dbe7      	blt.n	8009b5a <__gethex+0x456>
 8009b8a:	e7f0      	b.n	8009b6e <__gethex+0x46a>
 8009b8c:	0800b929 	.word	0x0800b929

08009b90 <L_shift>:
 8009b90:	f1c2 0208 	rsb	r2, r2, #8
 8009b94:	0092      	lsls	r2, r2, #2
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	f1c2 0620 	rsb	r6, r2, #32
 8009b9c:	6843      	ldr	r3, [r0, #4]
 8009b9e:	6804      	ldr	r4, [r0, #0]
 8009ba0:	fa03 f506 	lsl.w	r5, r3, r6
 8009ba4:	432c      	orrs	r4, r5
 8009ba6:	40d3      	lsrs	r3, r2
 8009ba8:	6004      	str	r4, [r0, #0]
 8009baa:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bae:	4288      	cmp	r0, r1
 8009bb0:	d3f4      	bcc.n	8009b9c <L_shift+0xc>
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <__match>:
 8009bb4:	b530      	push	{r4, r5, lr}
 8009bb6:	6803      	ldr	r3, [r0, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bbe:	b914      	cbnz	r4, 8009bc6 <__match+0x12>
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	bd30      	pop	{r4, r5, pc}
 8009bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bce:	2d19      	cmp	r5, #25
 8009bd0:	bf98      	it	ls
 8009bd2:	3220      	addls	r2, #32
 8009bd4:	42a2      	cmp	r2, r4
 8009bd6:	d0f0      	beq.n	8009bba <__match+0x6>
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7f3      	b.n	8009bc4 <__match+0x10>

08009bdc <__hexnan>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	680b      	ldr	r3, [r1, #0]
 8009be2:	115e      	asrs	r6, r3, #5
 8009be4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009be8:	f013 031f 	ands.w	r3, r3, #31
 8009bec:	b087      	sub	sp, #28
 8009bee:	bf18      	it	ne
 8009bf0:	3604      	addne	r6, #4
 8009bf2:	2500      	movs	r5, #0
 8009bf4:	1f37      	subs	r7, r6, #4
 8009bf6:	4690      	mov	r8, r2
 8009bf8:	6802      	ldr	r2, [r0, #0]
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c02:	46b9      	mov	r9, r7
 8009c04:	463c      	mov	r4, r7
 8009c06:	9502      	str	r5, [sp, #8]
 8009c08:	46ab      	mov	fp, r5
 8009c0a:	7851      	ldrb	r1, [r2, #1]
 8009c0c:	1c53      	adds	r3, r2, #1
 8009c0e:	9303      	str	r3, [sp, #12]
 8009c10:	b341      	cbz	r1, 8009c64 <__hexnan+0x88>
 8009c12:	4608      	mov	r0, r1
 8009c14:	9205      	str	r2, [sp, #20]
 8009c16:	9104      	str	r1, [sp, #16]
 8009c18:	f7ff fd5e 	bl	80096d8 <__hexdig_fun>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d14f      	bne.n	8009cc0 <__hexnan+0xe4>
 8009c20:	9904      	ldr	r1, [sp, #16]
 8009c22:	9a05      	ldr	r2, [sp, #20]
 8009c24:	2920      	cmp	r1, #32
 8009c26:	d818      	bhi.n	8009c5a <__hexnan+0x7e>
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	459b      	cmp	fp, r3
 8009c2c:	dd13      	ble.n	8009c56 <__hexnan+0x7a>
 8009c2e:	454c      	cmp	r4, r9
 8009c30:	d206      	bcs.n	8009c40 <__hexnan+0x64>
 8009c32:	2d07      	cmp	r5, #7
 8009c34:	dc04      	bgt.n	8009c40 <__hexnan+0x64>
 8009c36:	462a      	mov	r2, r5
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f7ff ffa8 	bl	8009b90 <L_shift>
 8009c40:	4544      	cmp	r4, r8
 8009c42:	d950      	bls.n	8009ce6 <__hexnan+0x10a>
 8009c44:	2300      	movs	r3, #0
 8009c46:	f1a4 0904 	sub.w	r9, r4, #4
 8009c4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c4e:	f8cd b008 	str.w	fp, [sp, #8]
 8009c52:	464c      	mov	r4, r9
 8009c54:	461d      	mov	r5, r3
 8009c56:	9a03      	ldr	r2, [sp, #12]
 8009c58:	e7d7      	b.n	8009c0a <__hexnan+0x2e>
 8009c5a:	2929      	cmp	r1, #41	; 0x29
 8009c5c:	d156      	bne.n	8009d0c <__hexnan+0x130>
 8009c5e:	3202      	adds	r2, #2
 8009c60:	f8ca 2000 	str.w	r2, [sl]
 8009c64:	f1bb 0f00 	cmp.w	fp, #0
 8009c68:	d050      	beq.n	8009d0c <__hexnan+0x130>
 8009c6a:	454c      	cmp	r4, r9
 8009c6c:	d206      	bcs.n	8009c7c <__hexnan+0xa0>
 8009c6e:	2d07      	cmp	r5, #7
 8009c70:	dc04      	bgt.n	8009c7c <__hexnan+0xa0>
 8009c72:	462a      	mov	r2, r5
 8009c74:	4649      	mov	r1, r9
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff ff8a 	bl	8009b90 <L_shift>
 8009c7c:	4544      	cmp	r4, r8
 8009c7e:	d934      	bls.n	8009cea <__hexnan+0x10e>
 8009c80:	f1a8 0204 	sub.w	r2, r8, #4
 8009c84:	4623      	mov	r3, r4
 8009c86:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c8e:	429f      	cmp	r7, r3
 8009c90:	d2f9      	bcs.n	8009c86 <__hexnan+0xaa>
 8009c92:	1b3b      	subs	r3, r7, r4
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	3401      	adds	r4, #1
 8009c9c:	3e03      	subs	r6, #3
 8009c9e:	42b4      	cmp	r4, r6
 8009ca0:	bf88      	it	hi
 8009ca2:	2304      	movhi	r3, #4
 8009ca4:	4443      	add	r3, r8
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f843 2b04 	str.w	r2, [r3], #4
 8009cac:	429f      	cmp	r7, r3
 8009cae:	d2fb      	bcs.n	8009ca8 <__hexnan+0xcc>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	b91b      	cbnz	r3, 8009cbc <__hexnan+0xe0>
 8009cb4:	4547      	cmp	r7, r8
 8009cb6:	d127      	bne.n	8009d08 <__hexnan+0x12c>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	2005      	movs	r0, #5
 8009cbe:	e026      	b.n	8009d0e <__hexnan+0x132>
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	2d08      	cmp	r5, #8
 8009cc4:	f10b 0b01 	add.w	fp, fp, #1
 8009cc8:	dd06      	ble.n	8009cd8 <__hexnan+0xfc>
 8009cca:	4544      	cmp	r4, r8
 8009ccc:	d9c3      	bls.n	8009c56 <__hexnan+0x7a>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cd4:	2501      	movs	r5, #1
 8009cd6:	3c04      	subs	r4, #4
 8009cd8:	6822      	ldr	r2, [r4, #0]
 8009cda:	f000 000f 	and.w	r0, r0, #15
 8009cde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ce2:	6022      	str	r2, [r4, #0]
 8009ce4:	e7b7      	b.n	8009c56 <__hexnan+0x7a>
 8009ce6:	2508      	movs	r5, #8
 8009ce8:	e7b5      	b.n	8009c56 <__hexnan+0x7a>
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0df      	beq.n	8009cb0 <__hexnan+0xd4>
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf4:	f1c3 0320 	rsb	r3, r3, #32
 8009cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d00:	401a      	ands	r2, r3
 8009d02:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d06:	e7d3      	b.n	8009cb0 <__hexnan+0xd4>
 8009d08:	3f04      	subs	r7, #4
 8009d0a:	e7d1      	b.n	8009cb0 <__hexnan+0xd4>
 8009d0c:	2004      	movs	r0, #4
 8009d0e:	b007      	add	sp, #28
 8009d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d14 <_lseek_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	; (8009d34 <_lseek_r+0x20>)
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f7f7 fb62 	bl	80013ec <_lseek>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_lseek_r+0x1e>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_lseek_r+0x1e>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	24007774 	.word	0x24007774

08009d38 <__ascii_mbtowc>:
 8009d38:	b082      	sub	sp, #8
 8009d3a:	b901      	cbnz	r1, 8009d3e <__ascii_mbtowc+0x6>
 8009d3c:	a901      	add	r1, sp, #4
 8009d3e:	b142      	cbz	r2, 8009d52 <__ascii_mbtowc+0x1a>
 8009d40:	b14b      	cbz	r3, 8009d56 <__ascii_mbtowc+0x1e>
 8009d42:	7813      	ldrb	r3, [r2, #0]
 8009d44:	600b      	str	r3, [r1, #0]
 8009d46:	7812      	ldrb	r2, [r2, #0]
 8009d48:	1e10      	subs	r0, r2, #0
 8009d4a:	bf18      	it	ne
 8009d4c:	2001      	movne	r0, #1
 8009d4e:	b002      	add	sp, #8
 8009d50:	4770      	bx	lr
 8009d52:	4610      	mov	r0, r2
 8009d54:	e7fb      	b.n	8009d4e <__ascii_mbtowc+0x16>
 8009d56:	f06f 0001 	mvn.w	r0, #1
 8009d5a:	e7f8      	b.n	8009d4e <__ascii_mbtowc+0x16>

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f7fe bb00 	b.w	8008362 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	24007768 	.word	0x24007768

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f7fe bafb 	b.w	8008364 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	24007768 	.word	0x24007768

08009d74 <_Balloc>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	b976      	cbnz	r6, 8009d9c <_Balloc+0x28>
 8009d7e:	2010      	movs	r0, #16
 8009d80:	f001 f87a 	bl	800ae78 <malloc>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6260      	str	r0, [r4, #36]	; 0x24
 8009d88:	b920      	cbnz	r0, 8009d94 <_Balloc+0x20>
 8009d8a:	4b18      	ldr	r3, [pc, #96]	; (8009dec <_Balloc+0x78>)
 8009d8c:	4818      	ldr	r0, [pc, #96]	; (8009df0 <_Balloc+0x7c>)
 8009d8e:	2166      	movs	r1, #102	; 0x66
 8009d90:	f001 f842 	bl	800ae18 <__assert_func>
 8009d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d98:	6006      	str	r6, [r0, #0]
 8009d9a:	60c6      	str	r6, [r0, #12]
 8009d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9e:	68f3      	ldr	r3, [r6, #12]
 8009da0:	b183      	cbz	r3, 8009dc4 <_Balloc+0x50>
 8009da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009daa:	b9b8      	cbnz	r0, 8009ddc <_Balloc+0x68>
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f605 	lsl.w	r6, r1, r5
 8009db2:	1d72      	adds	r2, r6, #5
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fc9a 	bl	800a6f0 <_calloc_r>
 8009dbc:	b160      	cbz	r0, 8009dd8 <_Balloc+0x64>
 8009dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dc2:	e00e      	b.n	8009de2 <_Balloc+0x6e>
 8009dc4:	2221      	movs	r2, #33	; 0x21
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fc91 	bl	800a6f0 <_calloc_r>
 8009dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd0:	60f0      	str	r0, [r6, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e4      	bne.n	8009da2 <_Balloc+0x2e>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	6802      	ldr	r2, [r0, #0]
 8009dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009de2:	2300      	movs	r3, #0
 8009de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de8:	e7f7      	b.n	8009dda <_Balloc+0x66>
 8009dea:	bf00      	nop
 8009dec:	0800b9b2 	.word	0x0800b9b2
 8009df0:	0800b9c9 	.word	0x0800b9c9

08009df4 <_Bfree>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	b976      	cbnz	r6, 8009e1c <_Bfree+0x28>
 8009dfe:	2010      	movs	r0, #16
 8009e00:	f001 f83a 	bl	800ae78 <malloc>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6268      	str	r0, [r5, #36]	; 0x24
 8009e08:	b920      	cbnz	r0, 8009e14 <_Bfree+0x20>
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <_Bfree+0x3c>)
 8009e0c:	4809      	ldr	r0, [pc, #36]	; (8009e34 <_Bfree+0x40>)
 8009e0e:	218a      	movs	r1, #138	; 0x8a
 8009e10:	f001 f802 	bl	800ae18 <__assert_func>
 8009e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e18:	6006      	str	r6, [r0, #0]
 8009e1a:	60c6      	str	r6, [r0, #12]
 8009e1c:	b13c      	cbz	r4, 8009e2e <_Bfree+0x3a>
 8009e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e20:	6862      	ldr	r2, [r4, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e28:	6021      	str	r1, [r4, #0]
 8009e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	0800b9b2 	.word	0x0800b9b2
 8009e34:	0800b9c9 	.word	0x0800b9c9

08009e38 <__multadd>:
 8009e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3c:	690d      	ldr	r5, [r1, #16]
 8009e3e:	4607      	mov	r7, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	461e      	mov	r6, r3
 8009e44:	f101 0c14 	add.w	ip, r1, #20
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e4e:	b299      	uxth	r1, r3
 8009e50:	fb02 6101 	mla	r1, r2, r1, r6
 8009e54:	0c1e      	lsrs	r6, r3, #16
 8009e56:	0c0b      	lsrs	r3, r1, #16
 8009e58:	fb02 3306 	mla	r3, r2, r6, r3
 8009e5c:	b289      	uxth	r1, r1
 8009e5e:	3001      	adds	r0, #1
 8009e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e64:	4285      	cmp	r5, r0
 8009e66:	f84c 1b04 	str.w	r1, [ip], #4
 8009e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e6e:	dcec      	bgt.n	8009e4a <__multadd+0x12>
 8009e70:	b30e      	cbz	r6, 8009eb6 <__multadd+0x7e>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	dc19      	bgt.n	8009eac <__multadd+0x74>
 8009e78:	6861      	ldr	r1, [r4, #4]
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	3101      	adds	r1, #1
 8009e7e:	f7ff ff79 	bl	8009d74 <_Balloc>
 8009e82:	4680      	mov	r8, r0
 8009e84:	b928      	cbnz	r0, 8009e92 <__multadd+0x5a>
 8009e86:	4602      	mov	r2, r0
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <__multadd+0x84>)
 8009e8a:	480d      	ldr	r0, [pc, #52]	; (8009ec0 <__multadd+0x88>)
 8009e8c:	21b5      	movs	r1, #181	; 0xb5
 8009e8e:	f000 ffc3 	bl	800ae18 <__assert_func>
 8009e92:	6922      	ldr	r2, [r4, #16]
 8009e94:	3202      	adds	r2, #2
 8009e96:	f104 010c 	add.w	r1, r4, #12
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	300c      	adds	r0, #12
 8009e9e:	f7fe fa62 	bl	8008366 <memcpy>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff ffa5 	bl	8009df4 <_Bfree>
 8009eaa:	4644      	mov	r4, r8
 8009eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	615e      	str	r6, [r3, #20]
 8009eb4:	6125      	str	r5, [r4, #16]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebc:	0800b929 	.word	0x0800b929
 8009ec0:	0800b9c9 	.word	0x0800b9c9

08009ec4 <__s2b>:
 8009ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec8:	460c      	mov	r4, r1
 8009eca:	4615      	mov	r5, r2
 8009ecc:	461f      	mov	r7, r3
 8009ece:	2209      	movs	r2, #9
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed8:	2100      	movs	r1, #0
 8009eda:	2201      	movs	r2, #1
 8009edc:	429a      	cmp	r2, r3
 8009ede:	db09      	blt.n	8009ef4 <__s2b+0x30>
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff ff47 	bl	8009d74 <_Balloc>
 8009ee6:	b940      	cbnz	r0, 8009efa <__s2b+0x36>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b19      	ldr	r3, [pc, #100]	; (8009f50 <__s2b+0x8c>)
 8009eec:	4819      	ldr	r0, [pc, #100]	; (8009f54 <__s2b+0x90>)
 8009eee:	21ce      	movs	r1, #206	; 0xce
 8009ef0:	f000 ff92 	bl	800ae18 <__assert_func>
 8009ef4:	0052      	lsls	r2, r2, #1
 8009ef6:	3101      	adds	r1, #1
 8009ef8:	e7f0      	b.n	8009edc <__s2b+0x18>
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	6143      	str	r3, [r0, #20]
 8009efe:	2d09      	cmp	r5, #9
 8009f00:	f04f 0301 	mov.w	r3, #1
 8009f04:	6103      	str	r3, [r0, #16]
 8009f06:	dd16      	ble.n	8009f36 <__s2b+0x72>
 8009f08:	f104 0909 	add.w	r9, r4, #9
 8009f0c:	46c8      	mov	r8, r9
 8009f0e:	442c      	add	r4, r5
 8009f10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f14:	4601      	mov	r1, r0
 8009f16:	3b30      	subs	r3, #48	; 0x30
 8009f18:	220a      	movs	r2, #10
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ff8c 	bl	8009e38 <__multadd>
 8009f20:	45a0      	cmp	r8, r4
 8009f22:	d1f5      	bne.n	8009f10 <__s2b+0x4c>
 8009f24:	f1a5 0408 	sub.w	r4, r5, #8
 8009f28:	444c      	add	r4, r9
 8009f2a:	1b2d      	subs	r5, r5, r4
 8009f2c:	1963      	adds	r3, r4, r5
 8009f2e:	42bb      	cmp	r3, r7
 8009f30:	db04      	blt.n	8009f3c <__s2b+0x78>
 8009f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f36:	340a      	adds	r4, #10
 8009f38:	2509      	movs	r5, #9
 8009f3a:	e7f6      	b.n	8009f2a <__s2b+0x66>
 8009f3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f40:	4601      	mov	r1, r0
 8009f42:	3b30      	subs	r3, #48	; 0x30
 8009f44:	220a      	movs	r2, #10
 8009f46:	4630      	mov	r0, r6
 8009f48:	f7ff ff76 	bl	8009e38 <__multadd>
 8009f4c:	e7ee      	b.n	8009f2c <__s2b+0x68>
 8009f4e:	bf00      	nop
 8009f50:	0800b929 	.word	0x0800b929
 8009f54:	0800b9c9 	.word	0x0800b9c9

08009f58 <__hi0bits>:
 8009f58:	0c03      	lsrs	r3, r0, #16
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	b9d3      	cbnz	r3, 8009f94 <__hi0bits+0x3c>
 8009f5e:	0400      	lsls	r0, r0, #16
 8009f60:	2310      	movs	r3, #16
 8009f62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f66:	bf04      	itt	eq
 8009f68:	0200      	lsleq	r0, r0, #8
 8009f6a:	3308      	addeq	r3, #8
 8009f6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f70:	bf04      	itt	eq
 8009f72:	0100      	lsleq	r0, r0, #4
 8009f74:	3304      	addeq	r3, #4
 8009f76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f7a:	bf04      	itt	eq
 8009f7c:	0080      	lsleq	r0, r0, #2
 8009f7e:	3302      	addeq	r3, #2
 8009f80:	2800      	cmp	r0, #0
 8009f82:	db05      	blt.n	8009f90 <__hi0bits+0x38>
 8009f84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f88:	f103 0301 	add.w	r3, r3, #1
 8009f8c:	bf08      	it	eq
 8009f8e:	2320      	moveq	r3, #32
 8009f90:	4618      	mov	r0, r3
 8009f92:	4770      	bx	lr
 8009f94:	2300      	movs	r3, #0
 8009f96:	e7e4      	b.n	8009f62 <__hi0bits+0xa>

08009f98 <__lo0bits>:
 8009f98:	6803      	ldr	r3, [r0, #0]
 8009f9a:	f013 0207 	ands.w	r2, r3, #7
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	d00b      	beq.n	8009fba <__lo0bits+0x22>
 8009fa2:	07da      	lsls	r2, r3, #31
 8009fa4:	d423      	bmi.n	8009fee <__lo0bits+0x56>
 8009fa6:	0798      	lsls	r0, r3, #30
 8009fa8:	bf49      	itett	mi
 8009faa:	085b      	lsrmi	r3, r3, #1
 8009fac:	089b      	lsrpl	r3, r3, #2
 8009fae:	2001      	movmi	r0, #1
 8009fb0:	600b      	strmi	r3, [r1, #0]
 8009fb2:	bf5c      	itt	pl
 8009fb4:	600b      	strpl	r3, [r1, #0]
 8009fb6:	2002      	movpl	r0, #2
 8009fb8:	4770      	bx	lr
 8009fba:	b298      	uxth	r0, r3
 8009fbc:	b9a8      	cbnz	r0, 8009fea <__lo0bits+0x52>
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	2010      	movs	r0, #16
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	b90a      	cbnz	r2, 8009fca <__lo0bits+0x32>
 8009fc6:	3008      	adds	r0, #8
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	071a      	lsls	r2, r3, #28
 8009fcc:	bf04      	itt	eq
 8009fce:	091b      	lsreq	r3, r3, #4
 8009fd0:	3004      	addeq	r0, #4
 8009fd2:	079a      	lsls	r2, r3, #30
 8009fd4:	bf04      	itt	eq
 8009fd6:	089b      	lsreq	r3, r3, #2
 8009fd8:	3002      	addeq	r0, #2
 8009fda:	07da      	lsls	r2, r3, #31
 8009fdc:	d403      	bmi.n	8009fe6 <__lo0bits+0x4e>
 8009fde:	085b      	lsrs	r3, r3, #1
 8009fe0:	f100 0001 	add.w	r0, r0, #1
 8009fe4:	d005      	beq.n	8009ff2 <__lo0bits+0x5a>
 8009fe6:	600b      	str	r3, [r1, #0]
 8009fe8:	4770      	bx	lr
 8009fea:	4610      	mov	r0, r2
 8009fec:	e7e9      	b.n	8009fc2 <__lo0bits+0x2a>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	4770      	bx	lr
 8009ff2:	2020      	movs	r0, #32
 8009ff4:	4770      	bx	lr
	...

08009ff8 <__i2b>:
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	f7ff feb9 	bl	8009d74 <_Balloc>
 800a002:	4602      	mov	r2, r0
 800a004:	b928      	cbnz	r0, 800a012 <__i2b+0x1a>
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <__i2b+0x24>)
 800a008:	4805      	ldr	r0, [pc, #20]	; (800a020 <__i2b+0x28>)
 800a00a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a00e:	f000 ff03 	bl	800ae18 <__assert_func>
 800a012:	2301      	movs	r3, #1
 800a014:	6144      	str	r4, [r0, #20]
 800a016:	6103      	str	r3, [r0, #16]
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	bf00      	nop
 800a01c:	0800b929 	.word	0x0800b929
 800a020:	0800b9c9 	.word	0x0800b9c9

0800a024 <__multiply>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	4691      	mov	r9, r2
 800a02a:	690a      	ldr	r2, [r1, #16]
 800a02c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a030:	429a      	cmp	r2, r3
 800a032:	bfb8      	it	lt
 800a034:	460b      	movlt	r3, r1
 800a036:	460c      	mov	r4, r1
 800a038:	bfbc      	itt	lt
 800a03a:	464c      	movlt	r4, r9
 800a03c:	4699      	movlt	r9, r3
 800a03e:	6927      	ldr	r7, [r4, #16]
 800a040:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a044:	68a3      	ldr	r3, [r4, #8]
 800a046:	6861      	ldr	r1, [r4, #4]
 800a048:	eb07 060a 	add.w	r6, r7, sl
 800a04c:	42b3      	cmp	r3, r6
 800a04e:	b085      	sub	sp, #20
 800a050:	bfb8      	it	lt
 800a052:	3101      	addlt	r1, #1
 800a054:	f7ff fe8e 	bl	8009d74 <_Balloc>
 800a058:	b930      	cbnz	r0, 800a068 <__multiply+0x44>
 800a05a:	4602      	mov	r2, r0
 800a05c:	4b44      	ldr	r3, [pc, #272]	; (800a170 <__multiply+0x14c>)
 800a05e:	4845      	ldr	r0, [pc, #276]	; (800a174 <__multiply+0x150>)
 800a060:	f240 115d 	movw	r1, #349	; 0x15d
 800a064:	f000 fed8 	bl	800ae18 <__assert_func>
 800a068:	f100 0514 	add.w	r5, r0, #20
 800a06c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a070:	462b      	mov	r3, r5
 800a072:	2200      	movs	r2, #0
 800a074:	4543      	cmp	r3, r8
 800a076:	d321      	bcc.n	800a0bc <__multiply+0x98>
 800a078:	f104 0314 	add.w	r3, r4, #20
 800a07c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a080:	f109 0314 	add.w	r3, r9, #20
 800a084:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a088:	9202      	str	r2, [sp, #8]
 800a08a:	1b3a      	subs	r2, r7, r4
 800a08c:	3a15      	subs	r2, #21
 800a08e:	f022 0203 	bic.w	r2, r2, #3
 800a092:	3204      	adds	r2, #4
 800a094:	f104 0115 	add.w	r1, r4, #21
 800a098:	428f      	cmp	r7, r1
 800a09a:	bf38      	it	cc
 800a09c:	2204      	movcc	r2, #4
 800a09e:	9201      	str	r2, [sp, #4]
 800a0a0:	9a02      	ldr	r2, [sp, #8]
 800a0a2:	9303      	str	r3, [sp, #12]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d80c      	bhi.n	800a0c2 <__multiply+0x9e>
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	dd03      	ble.n	800a0b4 <__multiply+0x90>
 800a0ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d05a      	beq.n	800a16a <__multiply+0x146>
 800a0b4:	6106      	str	r6, [r0, #16]
 800a0b6:	b005      	add	sp, #20
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	f843 2b04 	str.w	r2, [r3], #4
 800a0c0:	e7d8      	b.n	800a074 <__multiply+0x50>
 800a0c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0c6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ca:	d024      	beq.n	800a116 <__multiply+0xf2>
 800a0cc:	f104 0e14 	add.w	lr, r4, #20
 800a0d0:	46a9      	mov	r9, r5
 800a0d2:	f04f 0c00 	mov.w	ip, #0
 800a0d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0da:	f8d9 1000 	ldr.w	r1, [r9]
 800a0de:	fa1f fb82 	uxth.w	fp, r2
 800a0e2:	b289      	uxth	r1, r1
 800a0e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a0f0:	4461      	add	r1, ip
 800a0f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0fe:	b289      	uxth	r1, r1
 800a100:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a104:	4577      	cmp	r7, lr
 800a106:	f849 1b04 	str.w	r1, [r9], #4
 800a10a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a10e:	d8e2      	bhi.n	800a0d6 <__multiply+0xb2>
 800a110:	9a01      	ldr	r2, [sp, #4]
 800a112:	f845 c002 	str.w	ip, [r5, r2]
 800a116:	9a03      	ldr	r2, [sp, #12]
 800a118:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a11c:	3304      	adds	r3, #4
 800a11e:	f1b9 0f00 	cmp.w	r9, #0
 800a122:	d020      	beq.n	800a166 <__multiply+0x142>
 800a124:	6829      	ldr	r1, [r5, #0]
 800a126:	f104 0c14 	add.w	ip, r4, #20
 800a12a:	46ae      	mov	lr, r5
 800a12c:	f04f 0a00 	mov.w	sl, #0
 800a130:	f8bc b000 	ldrh.w	fp, [ip]
 800a134:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a138:	fb09 220b 	mla	r2, r9, fp, r2
 800a13c:	4492      	add	sl, r2
 800a13e:	b289      	uxth	r1, r1
 800a140:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a144:	f84e 1b04 	str.w	r1, [lr], #4
 800a148:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a14c:	f8be 1000 	ldrh.w	r1, [lr]
 800a150:	0c12      	lsrs	r2, r2, #16
 800a152:	fb09 1102 	mla	r1, r9, r2, r1
 800a156:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a15a:	4567      	cmp	r7, ip
 800a15c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a160:	d8e6      	bhi.n	800a130 <__multiply+0x10c>
 800a162:	9a01      	ldr	r2, [sp, #4]
 800a164:	50a9      	str	r1, [r5, r2]
 800a166:	3504      	adds	r5, #4
 800a168:	e79a      	b.n	800a0a0 <__multiply+0x7c>
 800a16a:	3e01      	subs	r6, #1
 800a16c:	e79c      	b.n	800a0a8 <__multiply+0x84>
 800a16e:	bf00      	nop
 800a170:	0800b929 	.word	0x0800b929
 800a174:	0800b9c9 	.word	0x0800b9c9

0800a178 <__pow5mult>:
 800a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	4615      	mov	r5, r2
 800a17e:	f012 0203 	ands.w	r2, r2, #3
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	d007      	beq.n	800a198 <__pow5mult+0x20>
 800a188:	4c25      	ldr	r4, [pc, #148]	; (800a220 <__pow5mult+0xa8>)
 800a18a:	3a01      	subs	r2, #1
 800a18c:	2300      	movs	r3, #0
 800a18e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a192:	f7ff fe51 	bl	8009e38 <__multadd>
 800a196:	4607      	mov	r7, r0
 800a198:	10ad      	asrs	r5, r5, #2
 800a19a:	d03d      	beq.n	800a218 <__pow5mult+0xa0>
 800a19c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a19e:	b97c      	cbnz	r4, 800a1c0 <__pow5mult+0x48>
 800a1a0:	2010      	movs	r0, #16
 800a1a2:	f000 fe69 	bl	800ae78 <malloc>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1aa:	b928      	cbnz	r0, 800a1b8 <__pow5mult+0x40>
 800a1ac:	4b1d      	ldr	r3, [pc, #116]	; (800a224 <__pow5mult+0xac>)
 800a1ae:	481e      	ldr	r0, [pc, #120]	; (800a228 <__pow5mult+0xb0>)
 800a1b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1b4:	f000 fe30 	bl	800ae18 <__assert_func>
 800a1b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1bc:	6004      	str	r4, [r0, #0]
 800a1be:	60c4      	str	r4, [r0, #12]
 800a1c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1c8:	b94c      	cbnz	r4, 800a1de <__pow5mult+0x66>
 800a1ca:	f240 2171 	movw	r1, #625	; 0x271
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7ff ff12 	bl	8009ff8 <__i2b>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1da:	4604      	mov	r4, r0
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	f04f 0900 	mov.w	r9, #0
 800a1e2:	07eb      	lsls	r3, r5, #31
 800a1e4:	d50a      	bpl.n	800a1fc <__pow5mult+0x84>
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7ff ff1a 	bl	800a024 <__multiply>
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff fdfd 	bl	8009df4 <_Bfree>
 800a1fa:	4647      	mov	r7, r8
 800a1fc:	106d      	asrs	r5, r5, #1
 800a1fe:	d00b      	beq.n	800a218 <__pow5mult+0xa0>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	b938      	cbnz	r0, 800a214 <__pow5mult+0x9c>
 800a204:	4622      	mov	r2, r4
 800a206:	4621      	mov	r1, r4
 800a208:	4630      	mov	r0, r6
 800a20a:	f7ff ff0b 	bl	800a024 <__multiply>
 800a20e:	6020      	str	r0, [r4, #0]
 800a210:	f8c0 9000 	str.w	r9, [r0]
 800a214:	4604      	mov	r4, r0
 800a216:	e7e4      	b.n	800a1e2 <__pow5mult+0x6a>
 800a218:	4638      	mov	r0, r7
 800a21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21e:	bf00      	nop
 800a220:	0800bb18 	.word	0x0800bb18
 800a224:	0800b9b2 	.word	0x0800b9b2
 800a228:	0800b9c9 	.word	0x0800b9c9

0800a22c <__lshift>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	6849      	ldr	r1, [r1, #4]
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	4607      	mov	r7, r0
 800a23e:	4691      	mov	r9, r2
 800a240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a244:	f108 0601 	add.w	r6, r8, #1
 800a248:	42b3      	cmp	r3, r6
 800a24a:	db0b      	blt.n	800a264 <__lshift+0x38>
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff fd91 	bl	8009d74 <_Balloc>
 800a252:	4605      	mov	r5, r0
 800a254:	b948      	cbnz	r0, 800a26a <__lshift+0x3e>
 800a256:	4602      	mov	r2, r0
 800a258:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <__lshift+0xd8>)
 800a25a:	482b      	ldr	r0, [pc, #172]	; (800a308 <__lshift+0xdc>)
 800a25c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a260:	f000 fdda 	bl	800ae18 <__assert_func>
 800a264:	3101      	adds	r1, #1
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	e7ee      	b.n	800a248 <__lshift+0x1c>
 800a26a:	2300      	movs	r3, #0
 800a26c:	f100 0114 	add.w	r1, r0, #20
 800a270:	f100 0210 	add.w	r2, r0, #16
 800a274:	4618      	mov	r0, r3
 800a276:	4553      	cmp	r3, sl
 800a278:	db37      	blt.n	800a2ea <__lshift+0xbe>
 800a27a:	6920      	ldr	r0, [r4, #16]
 800a27c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a280:	f104 0314 	add.w	r3, r4, #20
 800a284:	f019 091f 	ands.w	r9, r9, #31
 800a288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a28c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a290:	d02f      	beq.n	800a2f2 <__lshift+0xc6>
 800a292:	f1c9 0e20 	rsb	lr, r9, #32
 800a296:	468a      	mov	sl, r1
 800a298:	f04f 0c00 	mov.w	ip, #0
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	fa02 f209 	lsl.w	r2, r2, r9
 800a2a2:	ea42 020c 	orr.w	r2, r2, ip
 800a2a6:	f84a 2b04 	str.w	r2, [sl], #4
 800a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ae:	4298      	cmp	r0, r3
 800a2b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2b4:	d8f2      	bhi.n	800a29c <__lshift+0x70>
 800a2b6:	1b03      	subs	r3, r0, r4
 800a2b8:	3b15      	subs	r3, #21
 800a2ba:	f023 0303 	bic.w	r3, r3, #3
 800a2be:	3304      	adds	r3, #4
 800a2c0:	f104 0215 	add.w	r2, r4, #21
 800a2c4:	4290      	cmp	r0, r2
 800a2c6:	bf38      	it	cc
 800a2c8:	2304      	movcc	r3, #4
 800a2ca:	f841 c003 	str.w	ip, [r1, r3]
 800a2ce:	f1bc 0f00 	cmp.w	ip, #0
 800a2d2:	d001      	beq.n	800a2d8 <__lshift+0xac>
 800a2d4:	f108 0602 	add.w	r6, r8, #2
 800a2d8:	3e01      	subs	r6, #1
 800a2da:	4638      	mov	r0, r7
 800a2dc:	612e      	str	r6, [r5, #16]
 800a2de:	4621      	mov	r1, r4
 800a2e0:	f7ff fd88 	bl	8009df4 <_Bfree>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	e7c1      	b.n	800a276 <__lshift+0x4a>
 800a2f2:	3904      	subs	r1, #4
 800a2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2fc:	4298      	cmp	r0, r3
 800a2fe:	d8f9      	bhi.n	800a2f4 <__lshift+0xc8>
 800a300:	e7ea      	b.n	800a2d8 <__lshift+0xac>
 800a302:	bf00      	nop
 800a304:	0800b929 	.word	0x0800b929
 800a308:	0800b9c9 	.word	0x0800b9c9

0800a30c <__mcmp>:
 800a30c:	b530      	push	{r4, r5, lr}
 800a30e:	6902      	ldr	r2, [r0, #16]
 800a310:	690c      	ldr	r4, [r1, #16]
 800a312:	1b12      	subs	r2, r2, r4
 800a314:	d10e      	bne.n	800a334 <__mcmp+0x28>
 800a316:	f100 0314 	add.w	r3, r0, #20
 800a31a:	3114      	adds	r1, #20
 800a31c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a32c:	42a5      	cmp	r5, r4
 800a32e:	d003      	beq.n	800a338 <__mcmp+0x2c>
 800a330:	d305      	bcc.n	800a33e <__mcmp+0x32>
 800a332:	2201      	movs	r2, #1
 800a334:	4610      	mov	r0, r2
 800a336:	bd30      	pop	{r4, r5, pc}
 800a338:	4283      	cmp	r3, r0
 800a33a:	d3f3      	bcc.n	800a324 <__mcmp+0x18>
 800a33c:	e7fa      	b.n	800a334 <__mcmp+0x28>
 800a33e:	f04f 32ff 	mov.w	r2, #4294967295
 800a342:	e7f7      	b.n	800a334 <__mcmp+0x28>

0800a344 <__mdiff>:
 800a344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	4606      	mov	r6, r0
 800a34c:	4611      	mov	r1, r2
 800a34e:	4620      	mov	r0, r4
 800a350:	4690      	mov	r8, r2
 800a352:	f7ff ffdb 	bl	800a30c <__mcmp>
 800a356:	1e05      	subs	r5, r0, #0
 800a358:	d110      	bne.n	800a37c <__mdiff+0x38>
 800a35a:	4629      	mov	r1, r5
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff fd09 	bl	8009d74 <_Balloc>
 800a362:	b930      	cbnz	r0, 800a372 <__mdiff+0x2e>
 800a364:	4b3a      	ldr	r3, [pc, #232]	; (800a450 <__mdiff+0x10c>)
 800a366:	4602      	mov	r2, r0
 800a368:	f240 2132 	movw	r1, #562	; 0x232
 800a36c:	4839      	ldr	r0, [pc, #228]	; (800a454 <__mdiff+0x110>)
 800a36e:	f000 fd53 	bl	800ae18 <__assert_func>
 800a372:	2301      	movs	r3, #1
 800a374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	bfa4      	itt	ge
 800a37e:	4643      	movge	r3, r8
 800a380:	46a0      	movge	r8, r4
 800a382:	4630      	mov	r0, r6
 800a384:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a388:	bfa6      	itte	ge
 800a38a:	461c      	movge	r4, r3
 800a38c:	2500      	movge	r5, #0
 800a38e:	2501      	movlt	r5, #1
 800a390:	f7ff fcf0 	bl	8009d74 <_Balloc>
 800a394:	b920      	cbnz	r0, 800a3a0 <__mdiff+0x5c>
 800a396:	4b2e      	ldr	r3, [pc, #184]	; (800a450 <__mdiff+0x10c>)
 800a398:	4602      	mov	r2, r0
 800a39a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a39e:	e7e5      	b.n	800a36c <__mdiff+0x28>
 800a3a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3a4:	6926      	ldr	r6, [r4, #16]
 800a3a6:	60c5      	str	r5, [r0, #12]
 800a3a8:	f104 0914 	add.w	r9, r4, #20
 800a3ac:	f108 0514 	add.w	r5, r8, #20
 800a3b0:	f100 0e14 	add.w	lr, r0, #20
 800a3b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3bc:	f108 0210 	add.w	r2, r8, #16
 800a3c0:	46f2      	mov	sl, lr
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3cc:	fa1f f883 	uxth.w	r8, r3
 800a3d0:	fa11 f18b 	uxtah	r1, r1, fp
 800a3d4:	0c1b      	lsrs	r3, r3, #16
 800a3d6:	eba1 0808 	sub.w	r8, r1, r8
 800a3da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3e2:	fa1f f888 	uxth.w	r8, r8
 800a3e6:	1419      	asrs	r1, r3, #16
 800a3e8:	454e      	cmp	r6, r9
 800a3ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3ee:	f84a 3b04 	str.w	r3, [sl], #4
 800a3f2:	d8e7      	bhi.n	800a3c4 <__mdiff+0x80>
 800a3f4:	1b33      	subs	r3, r6, r4
 800a3f6:	3b15      	subs	r3, #21
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	3415      	adds	r4, #21
 800a400:	42a6      	cmp	r6, r4
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	441d      	add	r5, r3
 800a408:	4473      	add	r3, lr
 800a40a:	469e      	mov	lr, r3
 800a40c:	462e      	mov	r6, r5
 800a40e:	4566      	cmp	r6, ip
 800a410:	d30e      	bcc.n	800a430 <__mdiff+0xec>
 800a412:	f10c 0203 	add.w	r2, ip, #3
 800a416:	1b52      	subs	r2, r2, r5
 800a418:	f022 0203 	bic.w	r2, r2, #3
 800a41c:	3d03      	subs	r5, #3
 800a41e:	45ac      	cmp	ip, r5
 800a420:	bf38      	it	cc
 800a422:	2200      	movcc	r2, #0
 800a424:	441a      	add	r2, r3
 800a426:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a42a:	b17b      	cbz	r3, 800a44c <__mdiff+0x108>
 800a42c:	6107      	str	r7, [r0, #16]
 800a42e:	e7a3      	b.n	800a378 <__mdiff+0x34>
 800a430:	f856 8b04 	ldr.w	r8, [r6], #4
 800a434:	fa11 f288 	uxtah	r2, r1, r8
 800a438:	1414      	asrs	r4, r2, #16
 800a43a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a43e:	b292      	uxth	r2, r2
 800a440:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a444:	f84e 2b04 	str.w	r2, [lr], #4
 800a448:	1421      	asrs	r1, r4, #16
 800a44a:	e7e0      	b.n	800a40e <__mdiff+0xca>
 800a44c:	3f01      	subs	r7, #1
 800a44e:	e7ea      	b.n	800a426 <__mdiff+0xe2>
 800a450:	0800b929 	.word	0x0800b929
 800a454:	0800b9c9 	.word	0x0800b9c9

0800a458 <__ulp>:
 800a458:	b082      	sub	sp, #8
 800a45a:	ed8d 0b00 	vstr	d0, [sp]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	4912      	ldr	r1, [pc, #72]	; (800a4ac <__ulp+0x54>)
 800a462:	4019      	ands	r1, r3
 800a464:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a468:	2900      	cmp	r1, #0
 800a46a:	dd05      	ble.n	800a478 <__ulp+0x20>
 800a46c:	2200      	movs	r2, #0
 800a46e:	460b      	mov	r3, r1
 800a470:	ec43 2b10 	vmov	d0, r2, r3
 800a474:	b002      	add	sp, #8
 800a476:	4770      	bx	lr
 800a478:	4249      	negs	r1, r1
 800a47a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a47e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a482:	f04f 0200 	mov.w	r2, #0
 800a486:	f04f 0300 	mov.w	r3, #0
 800a48a:	da04      	bge.n	800a496 <__ulp+0x3e>
 800a48c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a490:	fa41 f300 	asr.w	r3, r1, r0
 800a494:	e7ec      	b.n	800a470 <__ulp+0x18>
 800a496:	f1a0 0114 	sub.w	r1, r0, #20
 800a49a:	291e      	cmp	r1, #30
 800a49c:	bfda      	itte	le
 800a49e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a4a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a4a6:	2101      	movgt	r1, #1
 800a4a8:	460a      	mov	r2, r1
 800a4aa:	e7e1      	b.n	800a470 <__ulp+0x18>
 800a4ac:	7ff00000 	.word	0x7ff00000

0800a4b0 <__b2d>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	6905      	ldr	r5, [r0, #16]
 800a4b4:	f100 0714 	add.w	r7, r0, #20
 800a4b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a4bc:	1f2e      	subs	r6, r5, #4
 800a4be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff fd48 	bl	8009f58 <__hi0bits>
 800a4c8:	f1c0 0320 	rsb	r3, r0, #32
 800a4cc:	280a      	cmp	r0, #10
 800a4ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a54c <__b2d+0x9c>
 800a4d2:	600b      	str	r3, [r1, #0]
 800a4d4:	dc14      	bgt.n	800a500 <__b2d+0x50>
 800a4d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a4da:	fa24 f10e 	lsr.w	r1, r4, lr
 800a4de:	42b7      	cmp	r7, r6
 800a4e0:	ea41 030c 	orr.w	r3, r1, ip
 800a4e4:	bf34      	ite	cc
 800a4e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4ea:	2100      	movcs	r1, #0
 800a4ec:	3015      	adds	r0, #21
 800a4ee:	fa04 f000 	lsl.w	r0, r4, r0
 800a4f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a4f6:	ea40 0201 	orr.w	r2, r0, r1
 800a4fa:	ec43 2b10 	vmov	d0, r2, r3
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a500:	42b7      	cmp	r7, r6
 800a502:	bf3a      	itte	cc
 800a504:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a508:	f1a5 0608 	subcc.w	r6, r5, #8
 800a50c:	2100      	movcs	r1, #0
 800a50e:	380b      	subs	r0, #11
 800a510:	d017      	beq.n	800a542 <__b2d+0x92>
 800a512:	f1c0 0c20 	rsb	ip, r0, #32
 800a516:	fa04 f500 	lsl.w	r5, r4, r0
 800a51a:	42be      	cmp	r6, r7
 800a51c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a520:	ea45 0504 	orr.w	r5, r5, r4
 800a524:	bf8c      	ite	hi
 800a526:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a52a:	2400      	movls	r4, #0
 800a52c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a530:	fa01 f000 	lsl.w	r0, r1, r0
 800a534:	fa24 f40c 	lsr.w	r4, r4, ip
 800a538:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a53c:	ea40 0204 	orr.w	r2, r0, r4
 800a540:	e7db      	b.n	800a4fa <__b2d+0x4a>
 800a542:	ea44 030c 	orr.w	r3, r4, ip
 800a546:	460a      	mov	r2, r1
 800a548:	e7d7      	b.n	800a4fa <__b2d+0x4a>
 800a54a:	bf00      	nop
 800a54c:	3ff00000 	.word	0x3ff00000

0800a550 <__d2b>:
 800a550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4689      	mov	r9, r1
 800a556:	2101      	movs	r1, #1
 800a558:	ec57 6b10 	vmov	r6, r7, d0
 800a55c:	4690      	mov	r8, r2
 800a55e:	f7ff fc09 	bl	8009d74 <_Balloc>
 800a562:	4604      	mov	r4, r0
 800a564:	b930      	cbnz	r0, 800a574 <__d2b+0x24>
 800a566:	4602      	mov	r2, r0
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <__d2b+0xb0>)
 800a56a:	4826      	ldr	r0, [pc, #152]	; (800a604 <__d2b+0xb4>)
 800a56c:	f240 310a 	movw	r1, #778	; 0x30a
 800a570:	f000 fc52 	bl	800ae18 <__assert_func>
 800a574:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a57c:	bb35      	cbnz	r5, 800a5cc <__d2b+0x7c>
 800a57e:	2e00      	cmp	r6, #0
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	d028      	beq.n	800a5d6 <__d2b+0x86>
 800a584:	4668      	mov	r0, sp
 800a586:	9600      	str	r6, [sp, #0]
 800a588:	f7ff fd06 	bl	8009f98 <__lo0bits>
 800a58c:	9900      	ldr	r1, [sp, #0]
 800a58e:	b300      	cbz	r0, 800a5d2 <__d2b+0x82>
 800a590:	9a01      	ldr	r2, [sp, #4]
 800a592:	f1c0 0320 	rsb	r3, r0, #32
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	430b      	orrs	r3, r1
 800a59c:	40c2      	lsrs	r2, r0
 800a59e:	6163      	str	r3, [r4, #20]
 800a5a0:	9201      	str	r2, [sp, #4]
 800a5a2:	9b01      	ldr	r3, [sp, #4]
 800a5a4:	61a3      	str	r3, [r4, #24]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bf14      	ite	ne
 800a5aa:	2202      	movne	r2, #2
 800a5ac:	2201      	moveq	r2, #1
 800a5ae:	6122      	str	r2, [r4, #16]
 800a5b0:	b1d5      	cbz	r5, 800a5e8 <__d2b+0x98>
 800a5b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5b6:	4405      	add	r5, r0
 800a5b8:	f8c9 5000 	str.w	r5, [r9]
 800a5bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5c0:	f8c8 0000 	str.w	r0, [r8]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5d0:	e7d5      	b.n	800a57e <__d2b+0x2e>
 800a5d2:	6161      	str	r1, [r4, #20]
 800a5d4:	e7e5      	b.n	800a5a2 <__d2b+0x52>
 800a5d6:	a801      	add	r0, sp, #4
 800a5d8:	f7ff fcde 	bl	8009f98 <__lo0bits>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	6163      	str	r3, [r4, #20]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	6122      	str	r2, [r4, #16]
 800a5e4:	3020      	adds	r0, #32
 800a5e6:	e7e3      	b.n	800a5b0 <__d2b+0x60>
 800a5e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5f0:	f8c9 0000 	str.w	r0, [r9]
 800a5f4:	6918      	ldr	r0, [r3, #16]
 800a5f6:	f7ff fcaf 	bl	8009f58 <__hi0bits>
 800a5fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5fe:	e7df      	b.n	800a5c0 <__d2b+0x70>
 800a600:	0800b929 	.word	0x0800b929
 800a604:	0800b9c9 	.word	0x0800b9c9

0800a608 <__ratio>:
 800a608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	4688      	mov	r8, r1
 800a60e:	4669      	mov	r1, sp
 800a610:	4681      	mov	r9, r0
 800a612:	f7ff ff4d 	bl	800a4b0 <__b2d>
 800a616:	a901      	add	r1, sp, #4
 800a618:	4640      	mov	r0, r8
 800a61a:	ec55 4b10 	vmov	r4, r5, d0
 800a61e:	ee10 aa10 	vmov	sl, s0
 800a622:	f7ff ff45 	bl	800a4b0 <__b2d>
 800a626:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a62a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a62e:	1a59      	subs	r1, r3, r1
 800a630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a63a:	ec57 6b10 	vmov	r6, r7, d0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfd6      	itet	le
 800a642:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a646:	462a      	movgt	r2, r5
 800a648:	463a      	movle	r2, r7
 800a64a:	46ab      	mov	fp, r5
 800a64c:	bfd6      	itet	le
 800a64e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a652:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a656:	ee00 3a90 	vmovle	s1, r3
 800a65a:	ec4b ab17 	vmov	d7, sl, fp
 800a65e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a662:	b003      	add	sp, #12
 800a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a668 <__copybits>:
 800a668:	3901      	subs	r1, #1
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	1149      	asrs	r1, r1, #5
 800a66e:	6914      	ldr	r4, [r2, #16]
 800a670:	3101      	adds	r1, #1
 800a672:	f102 0314 	add.w	r3, r2, #20
 800a676:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a67a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a67e:	1f05      	subs	r5, r0, #4
 800a680:	42a3      	cmp	r3, r4
 800a682:	d30c      	bcc.n	800a69e <__copybits+0x36>
 800a684:	1aa3      	subs	r3, r4, r2
 800a686:	3b11      	subs	r3, #17
 800a688:	f023 0303 	bic.w	r3, r3, #3
 800a68c:	3211      	adds	r2, #17
 800a68e:	42a2      	cmp	r2, r4
 800a690:	bf88      	it	hi
 800a692:	2300      	movhi	r3, #0
 800a694:	4418      	add	r0, r3
 800a696:	2300      	movs	r3, #0
 800a698:	4288      	cmp	r0, r1
 800a69a:	d305      	bcc.n	800a6a8 <__copybits+0x40>
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6a2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6a6:	e7eb      	b.n	800a680 <__copybits+0x18>
 800a6a8:	f840 3b04 	str.w	r3, [r0], #4
 800a6ac:	e7f4      	b.n	800a698 <__copybits+0x30>

0800a6ae <__any_on>:
 800a6ae:	f100 0214 	add.w	r2, r0, #20
 800a6b2:	6900      	ldr	r0, [r0, #16]
 800a6b4:	114b      	asrs	r3, r1, #5
 800a6b6:	4298      	cmp	r0, r3
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	db11      	blt.n	800a6e0 <__any_on+0x32>
 800a6bc:	dd0a      	ble.n	800a6d4 <__any_on+0x26>
 800a6be:	f011 011f 	ands.w	r1, r1, #31
 800a6c2:	d007      	beq.n	800a6d4 <__any_on+0x26>
 800a6c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6c8:	fa24 f001 	lsr.w	r0, r4, r1
 800a6cc:	fa00 f101 	lsl.w	r1, r0, r1
 800a6d0:	428c      	cmp	r4, r1
 800a6d2:	d10b      	bne.n	800a6ec <__any_on+0x3e>
 800a6d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d803      	bhi.n	800a6e4 <__any_on+0x36>
 800a6dc:	2000      	movs	r0, #0
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	e7f7      	b.n	800a6d4 <__any_on+0x26>
 800a6e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	d0f5      	beq.n	800a6d8 <__any_on+0x2a>
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	e7f6      	b.n	800a6de <__any_on+0x30>

0800a6f0 <_calloc_r>:
 800a6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f2:	fba1 2402 	umull	r2, r4, r1, r2
 800a6f6:	b94c      	cbnz	r4, 800a70c <_calloc_r+0x1c>
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	9201      	str	r2, [sp, #4]
 800a6fc:	f7fd fe84 	bl	8008408 <_malloc_r>
 800a700:	9a01      	ldr	r2, [sp, #4]
 800a702:	4605      	mov	r5, r0
 800a704:	b930      	cbnz	r0, 800a714 <_calloc_r+0x24>
 800a706:	4628      	mov	r0, r5
 800a708:	b003      	add	sp, #12
 800a70a:	bd30      	pop	{r4, r5, pc}
 800a70c:	220c      	movs	r2, #12
 800a70e:	6002      	str	r2, [r0, #0]
 800a710:	2500      	movs	r5, #0
 800a712:	e7f8      	b.n	800a706 <_calloc_r+0x16>
 800a714:	4621      	mov	r1, r4
 800a716:	f7fd fe4e 	bl	80083b6 <memset>
 800a71a:	e7f4      	b.n	800a706 <_calloc_r+0x16>

0800a71c <_free_r>:
 800a71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a71e:	2900      	cmp	r1, #0
 800a720:	d044      	beq.n	800a7ac <_free_r+0x90>
 800a722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a726:	9001      	str	r0, [sp, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f1a1 0404 	sub.w	r4, r1, #4
 800a72e:	bfb8      	it	lt
 800a730:	18e4      	addlt	r4, r4, r3
 800a732:	f7ff fb13 	bl	8009d5c <__malloc_lock>
 800a736:	4a1e      	ldr	r2, [pc, #120]	; (800a7b0 <_free_r+0x94>)
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	b933      	cbnz	r3, 800a74c <_free_r+0x30>
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	6014      	str	r4, [r2, #0]
 800a742:	b003      	add	sp, #12
 800a744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a748:	f7ff bb0e 	b.w	8009d68 <__malloc_unlock>
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d908      	bls.n	800a762 <_free_r+0x46>
 800a750:	6825      	ldr	r5, [r4, #0]
 800a752:	1961      	adds	r1, r4, r5
 800a754:	428b      	cmp	r3, r1
 800a756:	bf01      	itttt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	1949      	addeq	r1, r1, r5
 800a75e:	6021      	streq	r1, [r4, #0]
 800a760:	e7ed      	b.n	800a73e <_free_r+0x22>
 800a762:	461a      	mov	r2, r3
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	b10b      	cbz	r3, 800a76c <_free_r+0x50>
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d9fa      	bls.n	800a762 <_free_r+0x46>
 800a76c:	6811      	ldr	r1, [r2, #0]
 800a76e:	1855      	adds	r5, r2, r1
 800a770:	42a5      	cmp	r5, r4
 800a772:	d10b      	bne.n	800a78c <_free_r+0x70>
 800a774:	6824      	ldr	r4, [r4, #0]
 800a776:	4421      	add	r1, r4
 800a778:	1854      	adds	r4, r2, r1
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	d1e0      	bne.n	800a742 <_free_r+0x26>
 800a780:	681c      	ldr	r4, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	6053      	str	r3, [r2, #4]
 800a786:	4421      	add	r1, r4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	e7da      	b.n	800a742 <_free_r+0x26>
 800a78c:	d902      	bls.n	800a794 <_free_r+0x78>
 800a78e:	230c      	movs	r3, #12
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	e7d6      	b.n	800a742 <_free_r+0x26>
 800a794:	6825      	ldr	r5, [r4, #0]
 800a796:	1961      	adds	r1, r4, r5
 800a798:	428b      	cmp	r3, r1
 800a79a:	bf04      	itt	eq
 800a79c:	6819      	ldreq	r1, [r3, #0]
 800a79e:	685b      	ldreq	r3, [r3, #4]
 800a7a0:	6063      	str	r3, [r4, #4]
 800a7a2:	bf04      	itt	eq
 800a7a4:	1949      	addeq	r1, r1, r5
 800a7a6:	6021      	streq	r1, [r4, #0]
 800a7a8:	6054      	str	r4, [r2, #4]
 800a7aa:	e7ca      	b.n	800a742 <_free_r+0x26>
 800a7ac:	b003      	add	sp, #12
 800a7ae:	bd30      	pop	{r4, r5, pc}
 800a7b0:	2400776c 	.word	0x2400776c

0800a7b4 <__ssputs_r>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	688e      	ldr	r6, [r1, #8]
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	4682      	mov	sl, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4690      	mov	r8, r2
 800a7c2:	461f      	mov	r7, r3
 800a7c4:	d838      	bhi.n	800a838 <__ssputs_r+0x84>
 800a7c6:	898a      	ldrh	r2, [r1, #12]
 800a7c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7cc:	d032      	beq.n	800a834 <__ssputs_r+0x80>
 800a7ce:	6825      	ldr	r5, [r4, #0]
 800a7d0:	6909      	ldr	r1, [r1, #16]
 800a7d2:	eba5 0901 	sub.w	r9, r5, r1
 800a7d6:	6965      	ldr	r5, [r4, #20]
 800a7d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	444b      	add	r3, r9
 800a7e4:	106d      	asrs	r5, r5, #1
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	bf38      	it	cc
 800a7ea:	461d      	movcc	r5, r3
 800a7ec:	0553      	lsls	r3, r2, #21
 800a7ee:	d531      	bpl.n	800a854 <__ssputs_r+0xa0>
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7fd fe09 	bl	8008408 <_malloc_r>
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	b950      	cbnz	r0, 800a810 <__ssputs_r+0x5c>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	f8ca 3000 	str.w	r3, [sl]
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a810:	6921      	ldr	r1, [r4, #16]
 800a812:	464a      	mov	r2, r9
 800a814:	f7fd fda7 	bl	8008366 <memcpy>
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a81e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	6126      	str	r6, [r4, #16]
 800a826:	6165      	str	r5, [r4, #20]
 800a828:	444e      	add	r6, r9
 800a82a:	eba5 0509 	sub.w	r5, r5, r9
 800a82e:	6026      	str	r6, [r4, #0]
 800a830:	60a5      	str	r5, [r4, #8]
 800a832:	463e      	mov	r6, r7
 800a834:	42be      	cmp	r6, r7
 800a836:	d900      	bls.n	800a83a <__ssputs_r+0x86>
 800a838:	463e      	mov	r6, r7
 800a83a:	6820      	ldr	r0, [r4, #0]
 800a83c:	4632      	mov	r2, r6
 800a83e:	4641      	mov	r1, r8
 800a840:	f7fd fd9f 	bl	8008382 <memmove>
 800a844:	68a3      	ldr	r3, [r4, #8]
 800a846:	1b9b      	subs	r3, r3, r6
 800a848:	60a3      	str	r3, [r4, #8]
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	4433      	add	r3, r6
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	2000      	movs	r0, #0
 800a852:	e7db      	b.n	800a80c <__ssputs_r+0x58>
 800a854:	462a      	mov	r2, r5
 800a856:	f000 fb17 	bl	800ae88 <_realloc_r>
 800a85a:	4606      	mov	r6, r0
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d1e1      	bne.n	800a824 <__ssputs_r+0x70>
 800a860:	6921      	ldr	r1, [r4, #16]
 800a862:	4650      	mov	r0, sl
 800a864:	f7ff ff5a 	bl	800a71c <_free_r>
 800a868:	e7c7      	b.n	800a7fa <__ssputs_r+0x46>
	...

0800a86c <_svfiprintf_r>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	4698      	mov	r8, r3
 800a872:	898b      	ldrh	r3, [r1, #12]
 800a874:	061b      	lsls	r3, r3, #24
 800a876:	b09d      	sub	sp, #116	; 0x74
 800a878:	4607      	mov	r7, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	d50e      	bpl.n	800a89e <_svfiprintf_r+0x32>
 800a880:	690b      	ldr	r3, [r1, #16]
 800a882:	b963      	cbnz	r3, 800a89e <_svfiprintf_r+0x32>
 800a884:	2140      	movs	r1, #64	; 0x40
 800a886:	f7fd fdbf 	bl	8008408 <_malloc_r>
 800a88a:	6028      	str	r0, [r5, #0]
 800a88c:	6128      	str	r0, [r5, #16]
 800a88e:	b920      	cbnz	r0, 800a89a <_svfiprintf_r+0x2e>
 800a890:	230c      	movs	r3, #12
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	e0d1      	b.n	800aa3e <_svfiprintf_r+0x1d2>
 800a89a:	2340      	movs	r3, #64	; 0x40
 800a89c:	616b      	str	r3, [r5, #20]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a2:	2320      	movs	r3, #32
 800a8a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ac:	2330      	movs	r3, #48	; 0x30
 800a8ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa58 <_svfiprintf_r+0x1ec>
 800a8b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8b6:	f04f 0901 	mov.w	r9, #1
 800a8ba:	4623      	mov	r3, r4
 800a8bc:	469a      	mov	sl, r3
 800a8be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c2:	b10a      	cbz	r2, 800a8c8 <_svfiprintf_r+0x5c>
 800a8c4:	2a25      	cmp	r2, #37	; 0x25
 800a8c6:	d1f9      	bne.n	800a8bc <_svfiprintf_r+0x50>
 800a8c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a8cc:	d00b      	beq.n	800a8e6 <_svfiprintf_r+0x7a>
 800a8ce:	465b      	mov	r3, fp
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff ff6d 	bl	800a7b4 <__ssputs_r>
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f000 80aa 	beq.w	800aa34 <_svfiprintf_r+0x1c8>
 800a8e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8e2:	445a      	add	r2, fp
 800a8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80a2 	beq.w	800aa34 <_svfiprintf_r+0x1c8>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8fa:	f10a 0a01 	add.w	sl, sl, #1
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	9307      	str	r3, [sp, #28]
 800a902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a906:	931a      	str	r3, [sp, #104]	; 0x68
 800a908:	4654      	mov	r4, sl
 800a90a:	2205      	movs	r2, #5
 800a90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a910:	4851      	ldr	r0, [pc, #324]	; (800aa58 <_svfiprintf_r+0x1ec>)
 800a912:	f7f5 fcfd 	bl	8000310 <memchr>
 800a916:	9a04      	ldr	r2, [sp, #16]
 800a918:	b9d8      	cbnz	r0, 800a952 <_svfiprintf_r+0xe6>
 800a91a:	06d0      	lsls	r0, r2, #27
 800a91c:	bf44      	itt	mi
 800a91e:	2320      	movmi	r3, #32
 800a920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a924:	0711      	lsls	r1, r2, #28
 800a926:	bf44      	itt	mi
 800a928:	232b      	movmi	r3, #43	; 0x2b
 800a92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a92e:	f89a 3000 	ldrb.w	r3, [sl]
 800a932:	2b2a      	cmp	r3, #42	; 0x2a
 800a934:	d015      	beq.n	800a962 <_svfiprintf_r+0xf6>
 800a936:	9a07      	ldr	r2, [sp, #28]
 800a938:	4654      	mov	r4, sl
 800a93a:	2000      	movs	r0, #0
 800a93c:	f04f 0c0a 	mov.w	ip, #10
 800a940:	4621      	mov	r1, r4
 800a942:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a946:	3b30      	subs	r3, #48	; 0x30
 800a948:	2b09      	cmp	r3, #9
 800a94a:	d94e      	bls.n	800a9ea <_svfiprintf_r+0x17e>
 800a94c:	b1b0      	cbz	r0, 800a97c <_svfiprintf_r+0x110>
 800a94e:	9207      	str	r2, [sp, #28]
 800a950:	e014      	b.n	800a97c <_svfiprintf_r+0x110>
 800a952:	eba0 0308 	sub.w	r3, r0, r8
 800a956:	fa09 f303 	lsl.w	r3, r9, r3
 800a95a:	4313      	orrs	r3, r2
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	46a2      	mov	sl, r4
 800a960:	e7d2      	b.n	800a908 <_svfiprintf_r+0x9c>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	1d19      	adds	r1, r3, #4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	9103      	str	r1, [sp, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfbb      	ittet	lt
 800a96e:	425b      	neglt	r3, r3
 800a970:	f042 0202 	orrlt.w	r2, r2, #2
 800a974:	9307      	strge	r3, [sp, #28]
 800a976:	9307      	strlt	r3, [sp, #28]
 800a978:	bfb8      	it	lt
 800a97a:	9204      	strlt	r2, [sp, #16]
 800a97c:	7823      	ldrb	r3, [r4, #0]
 800a97e:	2b2e      	cmp	r3, #46	; 0x2e
 800a980:	d10c      	bne.n	800a99c <_svfiprintf_r+0x130>
 800a982:	7863      	ldrb	r3, [r4, #1]
 800a984:	2b2a      	cmp	r3, #42	; 0x2a
 800a986:	d135      	bne.n	800a9f4 <_svfiprintf_r+0x188>
 800a988:	9b03      	ldr	r3, [sp, #12]
 800a98a:	1d1a      	adds	r2, r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	9203      	str	r2, [sp, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfb8      	it	lt
 800a994:	f04f 33ff 	movlt.w	r3, #4294967295
 800a998:	3402      	adds	r4, #2
 800a99a:	9305      	str	r3, [sp, #20]
 800a99c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa68 <_svfiprintf_r+0x1fc>
 800a9a0:	7821      	ldrb	r1, [r4, #0]
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	f7f5 fcb3 	bl	8000310 <memchr>
 800a9aa:	b140      	cbz	r0, 800a9be <_svfiprintf_r+0x152>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	eba0 000a 	sub.w	r0, r0, sl
 800a9b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a9b6:	9b04      	ldr	r3, [sp, #16]
 800a9b8:	4303      	orrs	r3, r0
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c2:	4826      	ldr	r0, [pc, #152]	; (800aa5c <_svfiprintf_r+0x1f0>)
 800a9c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9c8:	2206      	movs	r2, #6
 800a9ca:	f7f5 fca1 	bl	8000310 <memchr>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d038      	beq.n	800aa44 <_svfiprintf_r+0x1d8>
 800a9d2:	4b23      	ldr	r3, [pc, #140]	; (800aa60 <_svfiprintf_r+0x1f4>)
 800a9d4:	bb1b      	cbnz	r3, 800aa1e <_svfiprintf_r+0x1b2>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	3307      	adds	r3, #7
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	3308      	adds	r3, #8
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	4433      	add	r3, r6
 800a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e8:	e767      	b.n	800a8ba <_svfiprintf_r+0x4e>
 800a9ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2001      	movs	r0, #1
 800a9f2:	e7a5      	b.n	800a940 <_svfiprintf_r+0xd4>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	3401      	adds	r4, #1
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f04f 0c0a 	mov.w	ip, #10
 800aa00:	4620      	mov	r0, r4
 800aa02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa06:	3a30      	subs	r2, #48	; 0x30
 800aa08:	2a09      	cmp	r2, #9
 800aa0a:	d903      	bls.n	800aa14 <_svfiprintf_r+0x1a8>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0c5      	beq.n	800a99c <_svfiprintf_r+0x130>
 800aa10:	9105      	str	r1, [sp, #20]
 800aa12:	e7c3      	b.n	800a99c <_svfiprintf_r+0x130>
 800aa14:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e7f0      	b.n	800aa00 <_svfiprintf_r+0x194>
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <_svfiprintf_r+0x1f8>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f3af 8000 	nop.w
 800aa2e:	1c42      	adds	r2, r0, #1
 800aa30:	4606      	mov	r6, r0
 800aa32:	d1d6      	bne.n	800a9e2 <_svfiprintf_r+0x176>
 800aa34:	89ab      	ldrh	r3, [r5, #12]
 800aa36:	065b      	lsls	r3, r3, #25
 800aa38:	f53f af2c 	bmi.w	800a894 <_svfiprintf_r+0x28>
 800aa3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa3e:	b01d      	add	sp, #116	; 0x74
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	ab03      	add	r3, sp, #12
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	462a      	mov	r2, r5
 800aa4a:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <_svfiprintf_r+0x1f8>)
 800aa4c:	a904      	add	r1, sp, #16
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f000 f87a 	bl	800ab48 <_printf_i>
 800aa54:	e7eb      	b.n	800aa2e <_svfiprintf_r+0x1c2>
 800aa56:	bf00      	nop
 800aa58:	0800bb24 	.word	0x0800bb24
 800aa5c:	0800bb2e 	.word	0x0800bb2e
 800aa60:	00000000 	.word	0x00000000
 800aa64:	0800a7b5 	.word	0x0800a7b5
 800aa68:	0800bb2a 	.word	0x0800bb2a

0800aa6c <_printf_common>:
 800aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa70:	4616      	mov	r6, r2
 800aa72:	4699      	mov	r9, r3
 800aa74:	688a      	ldr	r2, [r1, #8]
 800aa76:	690b      	ldr	r3, [r1, #16]
 800aa78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	bfb8      	it	lt
 800aa80:	4613      	movlt	r3, r2
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa88:	4607      	mov	r7, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	b10a      	cbz	r2, 800aa92 <_printf_common+0x26>
 800aa8e:	3301      	adds	r3, #1
 800aa90:	6033      	str	r3, [r6, #0]
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	0699      	lsls	r1, r3, #26
 800aa96:	bf42      	ittt	mi
 800aa98:	6833      	ldrmi	r3, [r6, #0]
 800aa9a:	3302      	addmi	r3, #2
 800aa9c:	6033      	strmi	r3, [r6, #0]
 800aa9e:	6825      	ldr	r5, [r4, #0]
 800aaa0:	f015 0506 	ands.w	r5, r5, #6
 800aaa4:	d106      	bne.n	800aab4 <_printf_common+0x48>
 800aaa6:	f104 0a19 	add.w	sl, r4, #25
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	6832      	ldr	r2, [r6, #0]
 800aaae:	1a9b      	subs	r3, r3, r2
 800aab0:	42ab      	cmp	r3, r5
 800aab2:	dc26      	bgt.n	800ab02 <_printf_common+0x96>
 800aab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aab8:	1e13      	subs	r3, r2, #0
 800aaba:	6822      	ldr	r2, [r4, #0]
 800aabc:	bf18      	it	ne
 800aabe:	2301      	movne	r3, #1
 800aac0:	0692      	lsls	r2, r2, #26
 800aac2:	d42b      	bmi.n	800ab1c <_printf_common+0xb0>
 800aac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aac8:	4649      	mov	r1, r9
 800aaca:	4638      	mov	r0, r7
 800aacc:	47c0      	blx	r8
 800aace:	3001      	adds	r0, #1
 800aad0:	d01e      	beq.n	800ab10 <_printf_common+0xa4>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	68e5      	ldr	r5, [r4, #12]
 800aad6:	6832      	ldr	r2, [r6, #0]
 800aad8:	f003 0306 	and.w	r3, r3, #6
 800aadc:	2b04      	cmp	r3, #4
 800aade:	bf08      	it	eq
 800aae0:	1aad      	subeq	r5, r5, r2
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	6922      	ldr	r2, [r4, #16]
 800aae6:	bf0c      	ite	eq
 800aae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaec:	2500      	movne	r5, #0
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	bfc4      	itt	gt
 800aaf2:	1a9b      	subgt	r3, r3, r2
 800aaf4:	18ed      	addgt	r5, r5, r3
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	341a      	adds	r4, #26
 800aafa:	42b5      	cmp	r5, r6
 800aafc:	d11a      	bne.n	800ab34 <_printf_common+0xc8>
 800aafe:	2000      	movs	r0, #0
 800ab00:	e008      	b.n	800ab14 <_printf_common+0xa8>
 800ab02:	2301      	movs	r3, #1
 800ab04:	4652      	mov	r2, sl
 800ab06:	4649      	mov	r1, r9
 800ab08:	4638      	mov	r0, r7
 800ab0a:	47c0      	blx	r8
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d103      	bne.n	800ab18 <_printf_common+0xac>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab18:	3501      	adds	r5, #1
 800ab1a:	e7c6      	b.n	800aaaa <_printf_common+0x3e>
 800ab1c:	18e1      	adds	r1, r4, r3
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	2030      	movs	r0, #48	; 0x30
 800ab22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab26:	4422      	add	r2, r4
 800ab28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab30:	3302      	adds	r3, #2
 800ab32:	e7c7      	b.n	800aac4 <_printf_common+0x58>
 800ab34:	2301      	movs	r3, #1
 800ab36:	4622      	mov	r2, r4
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	47c0      	blx	r8
 800ab3e:	3001      	adds	r0, #1
 800ab40:	d0e6      	beq.n	800ab10 <_printf_common+0xa4>
 800ab42:	3601      	adds	r6, #1
 800ab44:	e7d9      	b.n	800aafa <_printf_common+0x8e>
	...

0800ab48 <_printf_i>:
 800ab48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4c:	7e0f      	ldrb	r7, [r1, #24]
 800ab4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab50:	2f78      	cmp	r7, #120	; 0x78
 800ab52:	4691      	mov	r9, r2
 800ab54:	4680      	mov	r8, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	469a      	mov	sl, r3
 800ab5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab5e:	d807      	bhi.n	800ab70 <_printf_i+0x28>
 800ab60:	2f62      	cmp	r7, #98	; 0x62
 800ab62:	d80a      	bhi.n	800ab7a <_printf_i+0x32>
 800ab64:	2f00      	cmp	r7, #0
 800ab66:	f000 80d8 	beq.w	800ad1a <_printf_i+0x1d2>
 800ab6a:	2f58      	cmp	r7, #88	; 0x58
 800ab6c:	f000 80a3 	beq.w	800acb6 <_printf_i+0x16e>
 800ab70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab78:	e03a      	b.n	800abf0 <_printf_i+0xa8>
 800ab7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab7e:	2b15      	cmp	r3, #21
 800ab80:	d8f6      	bhi.n	800ab70 <_printf_i+0x28>
 800ab82:	a101      	add	r1, pc, #4	; (adr r1, 800ab88 <_printf_i+0x40>)
 800ab84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab88:	0800abe1 	.word	0x0800abe1
 800ab8c:	0800abf5 	.word	0x0800abf5
 800ab90:	0800ab71 	.word	0x0800ab71
 800ab94:	0800ab71 	.word	0x0800ab71
 800ab98:	0800ab71 	.word	0x0800ab71
 800ab9c:	0800ab71 	.word	0x0800ab71
 800aba0:	0800abf5 	.word	0x0800abf5
 800aba4:	0800ab71 	.word	0x0800ab71
 800aba8:	0800ab71 	.word	0x0800ab71
 800abac:	0800ab71 	.word	0x0800ab71
 800abb0:	0800ab71 	.word	0x0800ab71
 800abb4:	0800ad01 	.word	0x0800ad01
 800abb8:	0800ac25 	.word	0x0800ac25
 800abbc:	0800ace3 	.word	0x0800ace3
 800abc0:	0800ab71 	.word	0x0800ab71
 800abc4:	0800ab71 	.word	0x0800ab71
 800abc8:	0800ad23 	.word	0x0800ad23
 800abcc:	0800ab71 	.word	0x0800ab71
 800abd0:	0800ac25 	.word	0x0800ac25
 800abd4:	0800ab71 	.word	0x0800ab71
 800abd8:	0800ab71 	.word	0x0800ab71
 800abdc:	0800aceb 	.word	0x0800aceb
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	1d1a      	adds	r2, r3, #4
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	602a      	str	r2, [r5, #0]
 800abe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0a3      	b.n	800ad3c <_printf_i+0x1f4>
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	6829      	ldr	r1, [r5, #0]
 800abf8:	0606      	lsls	r6, r0, #24
 800abfa:	f101 0304 	add.w	r3, r1, #4
 800abfe:	d50a      	bpl.n	800ac16 <_printf_i+0xce>
 800ac00:	680e      	ldr	r6, [r1, #0]
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	2e00      	cmp	r6, #0
 800ac06:	da03      	bge.n	800ac10 <_printf_i+0xc8>
 800ac08:	232d      	movs	r3, #45	; 0x2d
 800ac0a:	4276      	negs	r6, r6
 800ac0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac10:	485e      	ldr	r0, [pc, #376]	; (800ad8c <_printf_i+0x244>)
 800ac12:	230a      	movs	r3, #10
 800ac14:	e019      	b.n	800ac4a <_printf_i+0x102>
 800ac16:	680e      	ldr	r6, [r1, #0]
 800ac18:	602b      	str	r3, [r5, #0]
 800ac1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac1e:	bf18      	it	ne
 800ac20:	b236      	sxthne	r6, r6
 800ac22:	e7ef      	b.n	800ac04 <_printf_i+0xbc>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	6820      	ldr	r0, [r4, #0]
 800ac28:	1d19      	adds	r1, r3, #4
 800ac2a:	6029      	str	r1, [r5, #0]
 800ac2c:	0601      	lsls	r1, r0, #24
 800ac2e:	d501      	bpl.n	800ac34 <_printf_i+0xec>
 800ac30:	681e      	ldr	r6, [r3, #0]
 800ac32:	e002      	b.n	800ac3a <_printf_i+0xf2>
 800ac34:	0646      	lsls	r6, r0, #25
 800ac36:	d5fb      	bpl.n	800ac30 <_printf_i+0xe8>
 800ac38:	881e      	ldrh	r6, [r3, #0]
 800ac3a:	4854      	ldr	r0, [pc, #336]	; (800ad8c <_printf_i+0x244>)
 800ac3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac3e:	bf0c      	ite	eq
 800ac40:	2308      	moveq	r3, #8
 800ac42:	230a      	movne	r3, #10
 800ac44:	2100      	movs	r1, #0
 800ac46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac4a:	6865      	ldr	r5, [r4, #4]
 800ac4c:	60a5      	str	r5, [r4, #8]
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	bfa2      	ittt	ge
 800ac52:	6821      	ldrge	r1, [r4, #0]
 800ac54:	f021 0104 	bicge.w	r1, r1, #4
 800ac58:	6021      	strge	r1, [r4, #0]
 800ac5a:	b90e      	cbnz	r6, 800ac60 <_printf_i+0x118>
 800ac5c:	2d00      	cmp	r5, #0
 800ac5e:	d04d      	beq.n	800acfc <_printf_i+0x1b4>
 800ac60:	4615      	mov	r5, r2
 800ac62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac66:	fb03 6711 	mls	r7, r3, r1, r6
 800ac6a:	5dc7      	ldrb	r7, [r0, r7]
 800ac6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac70:	4637      	mov	r7, r6
 800ac72:	42bb      	cmp	r3, r7
 800ac74:	460e      	mov	r6, r1
 800ac76:	d9f4      	bls.n	800ac62 <_printf_i+0x11a>
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d10b      	bne.n	800ac94 <_printf_i+0x14c>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	07de      	lsls	r6, r3, #31
 800ac80:	d508      	bpl.n	800ac94 <_printf_i+0x14c>
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	6861      	ldr	r1, [r4, #4]
 800ac86:	4299      	cmp	r1, r3
 800ac88:	bfde      	ittt	le
 800ac8a:	2330      	movle	r3, #48	; 0x30
 800ac8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac94:	1b52      	subs	r2, r2, r5
 800ac96:	6122      	str	r2, [r4, #16]
 800ac98:	f8cd a000 	str.w	sl, [sp]
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	aa03      	add	r2, sp, #12
 800aca0:	4621      	mov	r1, r4
 800aca2:	4640      	mov	r0, r8
 800aca4:	f7ff fee2 	bl	800aa6c <_printf_common>
 800aca8:	3001      	adds	r0, #1
 800acaa:	d14c      	bne.n	800ad46 <_printf_i+0x1fe>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295
 800acb0:	b004      	add	sp, #16
 800acb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb6:	4835      	ldr	r0, [pc, #212]	; (800ad8c <_printf_i+0x244>)
 800acb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acbc:	6829      	ldr	r1, [r5, #0]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800acc4:	6029      	str	r1, [r5, #0]
 800acc6:	061d      	lsls	r5, r3, #24
 800acc8:	d514      	bpl.n	800acf4 <_printf_i+0x1ac>
 800acca:	07df      	lsls	r7, r3, #31
 800accc:	bf44      	itt	mi
 800acce:	f043 0320 	orrmi.w	r3, r3, #32
 800acd2:	6023      	strmi	r3, [r4, #0]
 800acd4:	b91e      	cbnz	r6, 800acde <_printf_i+0x196>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	f023 0320 	bic.w	r3, r3, #32
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	2310      	movs	r3, #16
 800ace0:	e7b0      	b.n	800ac44 <_printf_i+0xfc>
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	f043 0320 	orr.w	r3, r3, #32
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	2378      	movs	r3, #120	; 0x78
 800acec:	4828      	ldr	r0, [pc, #160]	; (800ad90 <_printf_i+0x248>)
 800acee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acf2:	e7e3      	b.n	800acbc <_printf_i+0x174>
 800acf4:	0659      	lsls	r1, r3, #25
 800acf6:	bf48      	it	mi
 800acf8:	b2b6      	uxthmi	r6, r6
 800acfa:	e7e6      	b.n	800acca <_printf_i+0x182>
 800acfc:	4615      	mov	r5, r2
 800acfe:	e7bb      	b.n	800ac78 <_printf_i+0x130>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	6826      	ldr	r6, [r4, #0]
 800ad04:	6961      	ldr	r1, [r4, #20]
 800ad06:	1d18      	adds	r0, r3, #4
 800ad08:	6028      	str	r0, [r5, #0]
 800ad0a:	0635      	lsls	r5, r6, #24
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0x1cc>
 800ad10:	6019      	str	r1, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <_printf_i+0x1d2>
 800ad14:	0670      	lsls	r0, r6, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0x1c8>
 800ad18:	8019      	strh	r1, [r3, #0]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	4615      	mov	r5, r2
 800ad20:	e7ba      	b.n	800ac98 <_printf_i+0x150>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	1d1a      	adds	r2, r3, #4
 800ad26:	602a      	str	r2, [r5, #0]
 800ad28:	681d      	ldr	r5, [r3, #0]
 800ad2a:	6862      	ldr	r2, [r4, #4]
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f7f5 faee 	bl	8000310 <memchr>
 800ad34:	b108      	cbz	r0, 800ad3a <_printf_i+0x1f2>
 800ad36:	1b40      	subs	r0, r0, r5
 800ad38:	6060      	str	r0, [r4, #4]
 800ad3a:	6863      	ldr	r3, [r4, #4]
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad44:	e7a8      	b.n	800ac98 <_printf_i+0x150>
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	462a      	mov	r2, r5
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	47d0      	blx	sl
 800ad50:	3001      	adds	r0, #1
 800ad52:	d0ab      	beq.n	800acac <_printf_i+0x164>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	079b      	lsls	r3, r3, #30
 800ad58:	d413      	bmi.n	800ad82 <_printf_i+0x23a>
 800ad5a:	68e0      	ldr	r0, [r4, #12]
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	4298      	cmp	r0, r3
 800ad60:	bfb8      	it	lt
 800ad62:	4618      	movlt	r0, r3
 800ad64:	e7a4      	b.n	800acb0 <_printf_i+0x168>
 800ad66:	2301      	movs	r3, #1
 800ad68:	4632      	mov	r2, r6
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	47d0      	blx	sl
 800ad70:	3001      	adds	r0, #1
 800ad72:	d09b      	beq.n	800acac <_printf_i+0x164>
 800ad74:	3501      	adds	r5, #1
 800ad76:	68e3      	ldr	r3, [r4, #12]
 800ad78:	9903      	ldr	r1, [sp, #12]
 800ad7a:	1a5b      	subs	r3, r3, r1
 800ad7c:	42ab      	cmp	r3, r5
 800ad7e:	dcf2      	bgt.n	800ad66 <_printf_i+0x21e>
 800ad80:	e7eb      	b.n	800ad5a <_printf_i+0x212>
 800ad82:	2500      	movs	r5, #0
 800ad84:	f104 0619 	add.w	r6, r4, #25
 800ad88:	e7f5      	b.n	800ad76 <_printf_i+0x22e>
 800ad8a:	bf00      	nop
 800ad8c:	0800bb35 	.word	0x0800bb35
 800ad90:	0800bb46 	.word	0x0800bb46

0800ad94 <_read_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d07      	ldr	r5, [pc, #28]	; (800adb4 <_read_r+0x20>)
 800ad98:	4604      	mov	r4, r0
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7f6 fafc 	bl	80013a0 <_read>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_read_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_read_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	24007774 	.word	0x24007774

0800adb8 <nan>:
 800adb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800adc0 <nan+0x8>
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	00000000 	.word	0x00000000
 800adc4:	7ff80000 	.word	0x7ff80000

0800adc8 <nanf>:
 800adc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800add0 <nanf+0x8>
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	7fc00000 	.word	0x7fc00000

0800add4 <strncmp>:
 800add4:	b510      	push	{r4, lr}
 800add6:	b17a      	cbz	r2, 800adf8 <strncmp+0x24>
 800add8:	4603      	mov	r3, r0
 800adda:	3901      	subs	r1, #1
 800addc:	1884      	adds	r4, r0, r2
 800adde:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ade2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ade6:	4290      	cmp	r0, r2
 800ade8:	d101      	bne.n	800adee <strncmp+0x1a>
 800adea:	42a3      	cmp	r3, r4
 800adec:	d101      	bne.n	800adf2 <strncmp+0x1e>
 800adee:	1a80      	subs	r0, r0, r2
 800adf0:	bd10      	pop	{r4, pc}
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d1f3      	bne.n	800adde <strncmp+0xa>
 800adf6:	e7fa      	b.n	800adee <strncmp+0x1a>
 800adf8:	4610      	mov	r0, r2
 800adfa:	e7f9      	b.n	800adf0 <strncmp+0x1c>

0800adfc <__ascii_wctomb>:
 800adfc:	b149      	cbz	r1, 800ae12 <__ascii_wctomb+0x16>
 800adfe:	2aff      	cmp	r2, #255	; 0xff
 800ae00:	bf85      	ittet	hi
 800ae02:	238a      	movhi	r3, #138	; 0x8a
 800ae04:	6003      	strhi	r3, [r0, #0]
 800ae06:	700a      	strbls	r2, [r1, #0]
 800ae08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae0c:	bf98      	it	ls
 800ae0e:	2001      	movls	r0, #1
 800ae10:	4770      	bx	lr
 800ae12:	4608      	mov	r0, r1
 800ae14:	4770      	bx	lr
	...

0800ae18 <__assert_func>:
 800ae18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae1a:	4614      	mov	r4, r2
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <__assert_func+0x2c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4605      	mov	r5, r0
 800ae24:	68d8      	ldr	r0, [r3, #12]
 800ae26:	b14c      	cbz	r4, 800ae3c <__assert_func+0x24>
 800ae28:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <__assert_func+0x30>)
 800ae2a:	9100      	str	r1, [sp, #0]
 800ae2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae30:	4906      	ldr	r1, [pc, #24]	; (800ae4c <__assert_func+0x34>)
 800ae32:	462b      	mov	r3, r5
 800ae34:	f000 f80e 	bl	800ae54 <fiprintf>
 800ae38:	f000 fa6e 	bl	800b318 <abort>
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <__assert_func+0x38>)
 800ae3e:	461c      	mov	r4, r3
 800ae40:	e7f3      	b.n	800ae2a <__assert_func+0x12>
 800ae42:	bf00      	nop
 800ae44:	24000014 	.word	0x24000014
 800ae48:	0800bb57 	.word	0x0800bb57
 800ae4c:	0800bb64 	.word	0x0800bb64
 800ae50:	0800b6ea 	.word	0x0800b6ea

0800ae54 <fiprintf>:
 800ae54:	b40e      	push	{r1, r2, r3}
 800ae56:	b503      	push	{r0, r1, lr}
 800ae58:	4601      	mov	r1, r0
 800ae5a:	ab03      	add	r3, sp, #12
 800ae5c:	4805      	ldr	r0, [pc, #20]	; (800ae74 <fiprintf+0x20>)
 800ae5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae62:	6800      	ldr	r0, [r0, #0]
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	f000 f867 	bl	800af38 <_vfiprintf_r>
 800ae6a:	b002      	add	sp, #8
 800ae6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae70:	b003      	add	sp, #12
 800ae72:	4770      	bx	lr
 800ae74:	24000014 	.word	0x24000014

0800ae78 <malloc>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <malloc+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f7fd bac3 	b.w	8008408 <_malloc_r>
 800ae82:	bf00      	nop
 800ae84:	24000014 	.word	0x24000014

0800ae88 <_realloc_r>:
 800ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	4614      	mov	r4, r2
 800ae90:	460e      	mov	r6, r1
 800ae92:	b921      	cbnz	r1, 800ae9e <_realloc_r+0x16>
 800ae94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	4611      	mov	r1, r2
 800ae9a:	f7fd bab5 	b.w	8008408 <_malloc_r>
 800ae9e:	b92a      	cbnz	r2, 800aeac <_realloc_r+0x24>
 800aea0:	f7ff fc3c 	bl	800a71c <_free_r>
 800aea4:	4625      	mov	r5, r4
 800aea6:	4628      	mov	r0, r5
 800aea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeac:	f000 faa0 	bl	800b3f0 <_malloc_usable_size_r>
 800aeb0:	4284      	cmp	r4, r0
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	d802      	bhi.n	800aebc <_realloc_r+0x34>
 800aeb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeba:	d812      	bhi.n	800aee2 <_realloc_r+0x5a>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4640      	mov	r0, r8
 800aec0:	f7fd faa2 	bl	8008408 <_malloc_r>
 800aec4:	4605      	mov	r5, r0
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0ed      	beq.n	800aea6 <_realloc_r+0x1e>
 800aeca:	42bc      	cmp	r4, r7
 800aecc:	4622      	mov	r2, r4
 800aece:	4631      	mov	r1, r6
 800aed0:	bf28      	it	cs
 800aed2:	463a      	movcs	r2, r7
 800aed4:	f7fd fa47 	bl	8008366 <memcpy>
 800aed8:	4631      	mov	r1, r6
 800aeda:	4640      	mov	r0, r8
 800aedc:	f7ff fc1e 	bl	800a71c <_free_r>
 800aee0:	e7e1      	b.n	800aea6 <_realloc_r+0x1e>
 800aee2:	4635      	mov	r5, r6
 800aee4:	e7df      	b.n	800aea6 <_realloc_r+0x1e>

0800aee6 <__sfputc_r>:
 800aee6:	6893      	ldr	r3, [r2, #8]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	b410      	push	{r4}
 800aeee:	6093      	str	r3, [r2, #8]
 800aef0:	da08      	bge.n	800af04 <__sfputc_r+0x1e>
 800aef2:	6994      	ldr	r4, [r2, #24]
 800aef4:	42a3      	cmp	r3, r4
 800aef6:	db01      	blt.n	800aefc <__sfputc_r+0x16>
 800aef8:	290a      	cmp	r1, #10
 800aefa:	d103      	bne.n	800af04 <__sfputc_r+0x1e>
 800aefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af00:	f000 b94a 	b.w	800b198 <__swbuf_r>
 800af04:	6813      	ldr	r3, [r2, #0]
 800af06:	1c58      	adds	r0, r3, #1
 800af08:	6010      	str	r0, [r2, #0]
 800af0a:	7019      	strb	r1, [r3, #0]
 800af0c:	4608      	mov	r0, r1
 800af0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <__sfputs_r>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	4614      	mov	r4, r2
 800af1c:	18d5      	adds	r5, r2, r3
 800af1e:	42ac      	cmp	r4, r5
 800af20:	d101      	bne.n	800af26 <__sfputs_r+0x12>
 800af22:	2000      	movs	r0, #0
 800af24:	e007      	b.n	800af36 <__sfputs_r+0x22>
 800af26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2a:	463a      	mov	r2, r7
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ffda 	bl	800aee6 <__sfputc_r>
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	d1f3      	bne.n	800af1e <__sfputs_r+0xa>
 800af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af38 <_vfiprintf_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	460d      	mov	r5, r1
 800af3e:	b09d      	sub	sp, #116	; 0x74
 800af40:	4614      	mov	r4, r2
 800af42:	4698      	mov	r8, r3
 800af44:	4606      	mov	r6, r0
 800af46:	b118      	cbz	r0, 800af50 <_vfiprintf_r+0x18>
 800af48:	6983      	ldr	r3, [r0, #24]
 800af4a:	b90b      	cbnz	r3, 800af50 <_vfiprintf_r+0x18>
 800af4c:	f7fd f946 	bl	80081dc <__sinit>
 800af50:	4b89      	ldr	r3, [pc, #548]	; (800b178 <_vfiprintf_r+0x240>)
 800af52:	429d      	cmp	r5, r3
 800af54:	d11b      	bne.n	800af8e <_vfiprintf_r+0x56>
 800af56:	6875      	ldr	r5, [r6, #4]
 800af58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af5a:	07d9      	lsls	r1, r3, #31
 800af5c:	d405      	bmi.n	800af6a <_vfiprintf_r+0x32>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	059a      	lsls	r2, r3, #22
 800af62:	d402      	bmi.n	800af6a <_vfiprintf_r+0x32>
 800af64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af66:	f7fd f9fc 	bl	8008362 <__retarget_lock_acquire_recursive>
 800af6a:	89ab      	ldrh	r3, [r5, #12]
 800af6c:	071b      	lsls	r3, r3, #28
 800af6e:	d501      	bpl.n	800af74 <_vfiprintf_r+0x3c>
 800af70:	692b      	ldr	r3, [r5, #16]
 800af72:	b9eb      	cbnz	r3, 800afb0 <_vfiprintf_r+0x78>
 800af74:	4629      	mov	r1, r5
 800af76:	4630      	mov	r0, r6
 800af78:	f000 f960 	bl	800b23c <__swsetup_r>
 800af7c:	b1c0      	cbz	r0, 800afb0 <_vfiprintf_r+0x78>
 800af7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af80:	07dc      	lsls	r4, r3, #31
 800af82:	d50e      	bpl.n	800afa2 <_vfiprintf_r+0x6a>
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	b01d      	add	sp, #116	; 0x74
 800af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8e:	4b7b      	ldr	r3, [pc, #492]	; (800b17c <_vfiprintf_r+0x244>)
 800af90:	429d      	cmp	r5, r3
 800af92:	d101      	bne.n	800af98 <_vfiprintf_r+0x60>
 800af94:	68b5      	ldr	r5, [r6, #8]
 800af96:	e7df      	b.n	800af58 <_vfiprintf_r+0x20>
 800af98:	4b79      	ldr	r3, [pc, #484]	; (800b180 <_vfiprintf_r+0x248>)
 800af9a:	429d      	cmp	r5, r3
 800af9c:	bf08      	it	eq
 800af9e:	68f5      	ldreq	r5, [r6, #12]
 800afa0:	e7da      	b.n	800af58 <_vfiprintf_r+0x20>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	0598      	lsls	r0, r3, #22
 800afa6:	d4ed      	bmi.n	800af84 <_vfiprintf_r+0x4c>
 800afa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afaa:	f7fd f9db 	bl	8008364 <__retarget_lock_release_recursive>
 800afae:	e7e9      	b.n	800af84 <_vfiprintf_r+0x4c>
 800afb0:	2300      	movs	r3, #0
 800afb2:	9309      	str	r3, [sp, #36]	; 0x24
 800afb4:	2320      	movs	r3, #32
 800afb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afba:	f8cd 800c 	str.w	r8, [sp, #12]
 800afbe:	2330      	movs	r3, #48	; 0x30
 800afc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b184 <_vfiprintf_r+0x24c>
 800afc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afc8:	f04f 0901 	mov.w	r9, #1
 800afcc:	4623      	mov	r3, r4
 800afce:	469a      	mov	sl, r3
 800afd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd4:	b10a      	cbz	r2, 800afda <_vfiprintf_r+0xa2>
 800afd6:	2a25      	cmp	r2, #37	; 0x25
 800afd8:	d1f9      	bne.n	800afce <_vfiprintf_r+0x96>
 800afda:	ebba 0b04 	subs.w	fp, sl, r4
 800afde:	d00b      	beq.n	800aff8 <_vfiprintf_r+0xc0>
 800afe0:	465b      	mov	r3, fp
 800afe2:	4622      	mov	r2, r4
 800afe4:	4629      	mov	r1, r5
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7ff ff94 	bl	800af14 <__sfputs_r>
 800afec:	3001      	adds	r0, #1
 800afee:	f000 80aa 	beq.w	800b146 <_vfiprintf_r+0x20e>
 800aff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aff4:	445a      	add	r2, fp
 800aff6:	9209      	str	r2, [sp, #36]	; 0x24
 800aff8:	f89a 3000 	ldrb.w	r3, [sl]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 80a2 	beq.w	800b146 <_vfiprintf_r+0x20e>
 800b002:	2300      	movs	r3, #0
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b00c:	f10a 0a01 	add.w	sl, sl, #1
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	9307      	str	r3, [sp, #28]
 800b014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b018:	931a      	str	r3, [sp, #104]	; 0x68
 800b01a:	4654      	mov	r4, sl
 800b01c:	2205      	movs	r2, #5
 800b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b022:	4858      	ldr	r0, [pc, #352]	; (800b184 <_vfiprintf_r+0x24c>)
 800b024:	f7f5 f974 	bl	8000310 <memchr>
 800b028:	9a04      	ldr	r2, [sp, #16]
 800b02a:	b9d8      	cbnz	r0, 800b064 <_vfiprintf_r+0x12c>
 800b02c:	06d1      	lsls	r1, r2, #27
 800b02e:	bf44      	itt	mi
 800b030:	2320      	movmi	r3, #32
 800b032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b036:	0713      	lsls	r3, r2, #28
 800b038:	bf44      	itt	mi
 800b03a:	232b      	movmi	r3, #43	; 0x2b
 800b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b040:	f89a 3000 	ldrb.w	r3, [sl]
 800b044:	2b2a      	cmp	r3, #42	; 0x2a
 800b046:	d015      	beq.n	800b074 <_vfiprintf_r+0x13c>
 800b048:	9a07      	ldr	r2, [sp, #28]
 800b04a:	4654      	mov	r4, sl
 800b04c:	2000      	movs	r0, #0
 800b04e:	f04f 0c0a 	mov.w	ip, #10
 800b052:	4621      	mov	r1, r4
 800b054:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b058:	3b30      	subs	r3, #48	; 0x30
 800b05a:	2b09      	cmp	r3, #9
 800b05c:	d94e      	bls.n	800b0fc <_vfiprintf_r+0x1c4>
 800b05e:	b1b0      	cbz	r0, 800b08e <_vfiprintf_r+0x156>
 800b060:	9207      	str	r2, [sp, #28]
 800b062:	e014      	b.n	800b08e <_vfiprintf_r+0x156>
 800b064:	eba0 0308 	sub.w	r3, r0, r8
 800b068:	fa09 f303 	lsl.w	r3, r9, r3
 800b06c:	4313      	orrs	r3, r2
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	46a2      	mov	sl, r4
 800b072:	e7d2      	b.n	800b01a <_vfiprintf_r+0xe2>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	1d19      	adds	r1, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	9103      	str	r1, [sp, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	bfbb      	ittet	lt
 800b080:	425b      	neglt	r3, r3
 800b082:	f042 0202 	orrlt.w	r2, r2, #2
 800b086:	9307      	strge	r3, [sp, #28]
 800b088:	9307      	strlt	r3, [sp, #28]
 800b08a:	bfb8      	it	lt
 800b08c:	9204      	strlt	r2, [sp, #16]
 800b08e:	7823      	ldrb	r3, [r4, #0]
 800b090:	2b2e      	cmp	r3, #46	; 0x2e
 800b092:	d10c      	bne.n	800b0ae <_vfiprintf_r+0x176>
 800b094:	7863      	ldrb	r3, [r4, #1]
 800b096:	2b2a      	cmp	r3, #42	; 0x2a
 800b098:	d135      	bne.n	800b106 <_vfiprintf_r+0x1ce>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	1d1a      	adds	r2, r3, #4
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	9203      	str	r2, [sp, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	bfb8      	it	lt
 800b0a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0aa:	3402      	adds	r4, #2
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b194 <_vfiprintf_r+0x25c>
 800b0b2:	7821      	ldrb	r1, [r4, #0]
 800b0b4:	2203      	movs	r2, #3
 800b0b6:	4650      	mov	r0, sl
 800b0b8:	f7f5 f92a 	bl	8000310 <memchr>
 800b0bc:	b140      	cbz	r0, 800b0d0 <_vfiprintf_r+0x198>
 800b0be:	2340      	movs	r3, #64	; 0x40
 800b0c0:	eba0 000a 	sub.w	r0, r0, sl
 800b0c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	4303      	orrs	r3, r0
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d4:	482c      	ldr	r0, [pc, #176]	; (800b188 <_vfiprintf_r+0x250>)
 800b0d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0da:	2206      	movs	r2, #6
 800b0dc:	f7f5 f918 	bl	8000310 <memchr>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d03f      	beq.n	800b164 <_vfiprintf_r+0x22c>
 800b0e4:	4b29      	ldr	r3, [pc, #164]	; (800b18c <_vfiprintf_r+0x254>)
 800b0e6:	bb1b      	cbnz	r3, 800b130 <_vfiprintf_r+0x1f8>
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	3307      	adds	r3, #7
 800b0ec:	f023 0307 	bic.w	r3, r3, #7
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f6:	443b      	add	r3, r7
 800b0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fa:	e767      	b.n	800afcc <_vfiprintf_r+0x94>
 800b0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b100:	460c      	mov	r4, r1
 800b102:	2001      	movs	r0, #1
 800b104:	e7a5      	b.n	800b052 <_vfiprintf_r+0x11a>
 800b106:	2300      	movs	r3, #0
 800b108:	3401      	adds	r4, #1
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	4619      	mov	r1, r3
 800b10e:	f04f 0c0a 	mov.w	ip, #10
 800b112:	4620      	mov	r0, r4
 800b114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b118:	3a30      	subs	r2, #48	; 0x30
 800b11a:	2a09      	cmp	r2, #9
 800b11c:	d903      	bls.n	800b126 <_vfiprintf_r+0x1ee>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0c5      	beq.n	800b0ae <_vfiprintf_r+0x176>
 800b122:	9105      	str	r1, [sp, #20]
 800b124:	e7c3      	b.n	800b0ae <_vfiprintf_r+0x176>
 800b126:	fb0c 2101 	mla	r1, ip, r1, r2
 800b12a:	4604      	mov	r4, r0
 800b12c:	2301      	movs	r3, #1
 800b12e:	e7f0      	b.n	800b112 <_vfiprintf_r+0x1da>
 800b130:	ab03      	add	r3, sp, #12
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	462a      	mov	r2, r5
 800b136:	4b16      	ldr	r3, [pc, #88]	; (800b190 <_vfiprintf_r+0x258>)
 800b138:	a904      	add	r1, sp, #16
 800b13a:	4630      	mov	r0, r6
 800b13c:	f3af 8000 	nop.w
 800b140:	4607      	mov	r7, r0
 800b142:	1c78      	adds	r0, r7, #1
 800b144:	d1d6      	bne.n	800b0f4 <_vfiprintf_r+0x1bc>
 800b146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b148:	07d9      	lsls	r1, r3, #31
 800b14a:	d405      	bmi.n	800b158 <_vfiprintf_r+0x220>
 800b14c:	89ab      	ldrh	r3, [r5, #12]
 800b14e:	059a      	lsls	r2, r3, #22
 800b150:	d402      	bmi.n	800b158 <_vfiprintf_r+0x220>
 800b152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b154:	f7fd f906 	bl	8008364 <__retarget_lock_release_recursive>
 800b158:	89ab      	ldrh	r3, [r5, #12]
 800b15a:	065b      	lsls	r3, r3, #25
 800b15c:	f53f af12 	bmi.w	800af84 <_vfiprintf_r+0x4c>
 800b160:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b162:	e711      	b.n	800af88 <_vfiprintf_r+0x50>
 800b164:	ab03      	add	r3, sp, #12
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	462a      	mov	r2, r5
 800b16a:	4b09      	ldr	r3, [pc, #36]	; (800b190 <_vfiprintf_r+0x258>)
 800b16c:	a904      	add	r1, sp, #16
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff fcea 	bl	800ab48 <_printf_i>
 800b174:	e7e4      	b.n	800b140 <_vfiprintf_r+0x208>
 800b176:	bf00      	nop
 800b178:	0800b784 	.word	0x0800b784
 800b17c:	0800b7a4 	.word	0x0800b7a4
 800b180:	0800b764 	.word	0x0800b764
 800b184:	0800bb24 	.word	0x0800bb24
 800b188:	0800bb2e 	.word	0x0800bb2e
 800b18c:	00000000 	.word	0x00000000
 800b190:	0800af15 	.word	0x0800af15
 800b194:	0800bb2a 	.word	0x0800bb2a

0800b198 <__swbuf_r>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	460e      	mov	r6, r1
 800b19c:	4614      	mov	r4, r2
 800b19e:	4605      	mov	r5, r0
 800b1a0:	b118      	cbz	r0, 800b1aa <__swbuf_r+0x12>
 800b1a2:	6983      	ldr	r3, [r0, #24]
 800b1a4:	b90b      	cbnz	r3, 800b1aa <__swbuf_r+0x12>
 800b1a6:	f7fd f819 	bl	80081dc <__sinit>
 800b1aa:	4b21      	ldr	r3, [pc, #132]	; (800b230 <__swbuf_r+0x98>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d12b      	bne.n	800b208 <__swbuf_r+0x70>
 800b1b0:	686c      	ldr	r4, [r5, #4]
 800b1b2:	69a3      	ldr	r3, [r4, #24]
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	071a      	lsls	r2, r3, #28
 800b1ba:	d52f      	bpl.n	800b21c <__swbuf_r+0x84>
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	b36b      	cbz	r3, 800b21c <__swbuf_r+0x84>
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	6820      	ldr	r0, [r4, #0]
 800b1c4:	1ac0      	subs	r0, r0, r3
 800b1c6:	6963      	ldr	r3, [r4, #20]
 800b1c8:	b2f6      	uxtb	r6, r6
 800b1ca:	4283      	cmp	r3, r0
 800b1cc:	4637      	mov	r7, r6
 800b1ce:	dc04      	bgt.n	800b1da <__swbuf_r+0x42>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f7fe f9f2 	bl	80095bc <_fflush_r>
 800b1d8:	bb30      	cbnz	r0, 800b228 <__swbuf_r+0x90>
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	60a3      	str	r3, [r4, #8]
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	701e      	strb	r6, [r3, #0]
 800b1e8:	6963      	ldr	r3, [r4, #20]
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	4283      	cmp	r3, r0
 800b1ee:	d004      	beq.n	800b1fa <__swbuf_r+0x62>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	07db      	lsls	r3, r3, #31
 800b1f4:	d506      	bpl.n	800b204 <__swbuf_r+0x6c>
 800b1f6:	2e0a      	cmp	r6, #10
 800b1f8:	d104      	bne.n	800b204 <__swbuf_r+0x6c>
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7fe f9dd 	bl	80095bc <_fflush_r>
 800b202:	b988      	cbnz	r0, 800b228 <__swbuf_r+0x90>
 800b204:	4638      	mov	r0, r7
 800b206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b208:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <__swbuf_r+0x9c>)
 800b20a:	429c      	cmp	r4, r3
 800b20c:	d101      	bne.n	800b212 <__swbuf_r+0x7a>
 800b20e:	68ac      	ldr	r4, [r5, #8]
 800b210:	e7cf      	b.n	800b1b2 <__swbuf_r+0x1a>
 800b212:	4b09      	ldr	r3, [pc, #36]	; (800b238 <__swbuf_r+0xa0>)
 800b214:	429c      	cmp	r4, r3
 800b216:	bf08      	it	eq
 800b218:	68ec      	ldreq	r4, [r5, #12]
 800b21a:	e7ca      	b.n	800b1b2 <__swbuf_r+0x1a>
 800b21c:	4621      	mov	r1, r4
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 f80c 	bl	800b23c <__swsetup_r>
 800b224:	2800      	cmp	r0, #0
 800b226:	d0cb      	beq.n	800b1c0 <__swbuf_r+0x28>
 800b228:	f04f 37ff 	mov.w	r7, #4294967295
 800b22c:	e7ea      	b.n	800b204 <__swbuf_r+0x6c>
 800b22e:	bf00      	nop
 800b230:	0800b784 	.word	0x0800b784
 800b234:	0800b7a4 	.word	0x0800b7a4
 800b238:	0800b764 	.word	0x0800b764

0800b23c <__swsetup_r>:
 800b23c:	4b32      	ldr	r3, [pc, #200]	; (800b308 <__swsetup_r+0xcc>)
 800b23e:	b570      	push	{r4, r5, r6, lr}
 800b240:	681d      	ldr	r5, [r3, #0]
 800b242:	4606      	mov	r6, r0
 800b244:	460c      	mov	r4, r1
 800b246:	b125      	cbz	r5, 800b252 <__swsetup_r+0x16>
 800b248:	69ab      	ldr	r3, [r5, #24]
 800b24a:	b913      	cbnz	r3, 800b252 <__swsetup_r+0x16>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7fc ffc5 	bl	80081dc <__sinit>
 800b252:	4b2e      	ldr	r3, [pc, #184]	; (800b30c <__swsetup_r+0xd0>)
 800b254:	429c      	cmp	r4, r3
 800b256:	d10f      	bne.n	800b278 <__swsetup_r+0x3c>
 800b258:	686c      	ldr	r4, [r5, #4]
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b260:	0719      	lsls	r1, r3, #28
 800b262:	d42c      	bmi.n	800b2be <__swsetup_r+0x82>
 800b264:	06dd      	lsls	r5, r3, #27
 800b266:	d411      	bmi.n	800b28c <__swsetup_r+0x50>
 800b268:	2309      	movs	r3, #9
 800b26a:	6033      	str	r3, [r6, #0]
 800b26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295
 800b276:	e03e      	b.n	800b2f6 <__swsetup_r+0xba>
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <__swsetup_r+0xd4>)
 800b27a:	429c      	cmp	r4, r3
 800b27c:	d101      	bne.n	800b282 <__swsetup_r+0x46>
 800b27e:	68ac      	ldr	r4, [r5, #8]
 800b280:	e7eb      	b.n	800b25a <__swsetup_r+0x1e>
 800b282:	4b24      	ldr	r3, [pc, #144]	; (800b314 <__swsetup_r+0xd8>)
 800b284:	429c      	cmp	r4, r3
 800b286:	bf08      	it	eq
 800b288:	68ec      	ldreq	r4, [r5, #12]
 800b28a:	e7e6      	b.n	800b25a <__swsetup_r+0x1e>
 800b28c:	0758      	lsls	r0, r3, #29
 800b28e:	d512      	bpl.n	800b2b6 <__swsetup_r+0x7a>
 800b290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b292:	b141      	cbz	r1, 800b2a6 <__swsetup_r+0x6a>
 800b294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b298:	4299      	cmp	r1, r3
 800b29a:	d002      	beq.n	800b2a2 <__swsetup_r+0x66>
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7ff fa3d 	bl	800a71c <_free_r>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f043 0308 	orr.w	r3, r3, #8
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	b94b      	cbnz	r3, 800b2d6 <__swsetup_r+0x9a>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2cc:	d003      	beq.n	800b2d6 <__swsetup_r+0x9a>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f000 f84d 	bl	800b370 <__smakebuf_r>
 800b2d6:	89a0      	ldrh	r0, [r4, #12]
 800b2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2dc:	f010 0301 	ands.w	r3, r0, #1
 800b2e0:	d00a      	beq.n	800b2f8 <__swsetup_r+0xbc>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	6963      	ldr	r3, [r4, #20]
 800b2e8:	425b      	negs	r3, r3
 800b2ea:	61a3      	str	r3, [r4, #24]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	b943      	cbnz	r3, 800b302 <__swsetup_r+0xc6>
 800b2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2f4:	d1ba      	bne.n	800b26c <__swsetup_r+0x30>
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	0781      	lsls	r1, r0, #30
 800b2fa:	bf58      	it	pl
 800b2fc:	6963      	ldrpl	r3, [r4, #20]
 800b2fe:	60a3      	str	r3, [r4, #8]
 800b300:	e7f4      	b.n	800b2ec <__swsetup_r+0xb0>
 800b302:	2000      	movs	r0, #0
 800b304:	e7f7      	b.n	800b2f6 <__swsetup_r+0xba>
 800b306:	bf00      	nop
 800b308:	24000014 	.word	0x24000014
 800b30c:	0800b784 	.word	0x0800b784
 800b310:	0800b7a4 	.word	0x0800b7a4
 800b314:	0800b764 	.word	0x0800b764

0800b318 <abort>:
 800b318:	b508      	push	{r3, lr}
 800b31a:	2006      	movs	r0, #6
 800b31c:	f000 f898 	bl	800b450 <raise>
 800b320:	2001      	movs	r0, #1
 800b322:	f7f6 f837 	bl	8001394 <_exit>

0800b326 <__swhatbuf_r>:
 800b326:	b570      	push	{r4, r5, r6, lr}
 800b328:	460e      	mov	r6, r1
 800b32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32e:	2900      	cmp	r1, #0
 800b330:	b096      	sub	sp, #88	; 0x58
 800b332:	4614      	mov	r4, r2
 800b334:	461d      	mov	r5, r3
 800b336:	da08      	bge.n	800b34a <__swhatbuf_r+0x24>
 800b338:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	602a      	str	r2, [r5, #0]
 800b340:	061a      	lsls	r2, r3, #24
 800b342:	d410      	bmi.n	800b366 <__swhatbuf_r+0x40>
 800b344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b348:	e00e      	b.n	800b368 <__swhatbuf_r+0x42>
 800b34a:	466a      	mov	r2, sp
 800b34c:	f000 f89c 	bl	800b488 <_fstat_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	dbf1      	blt.n	800b338 <__swhatbuf_r+0x12>
 800b354:	9a01      	ldr	r2, [sp, #4]
 800b356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b35a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b35e:	425a      	negs	r2, r3
 800b360:	415a      	adcs	r2, r3
 800b362:	602a      	str	r2, [r5, #0]
 800b364:	e7ee      	b.n	800b344 <__swhatbuf_r+0x1e>
 800b366:	2340      	movs	r3, #64	; 0x40
 800b368:	2000      	movs	r0, #0
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	b016      	add	sp, #88	; 0x58
 800b36e:	bd70      	pop	{r4, r5, r6, pc}

0800b370 <__smakebuf_r>:
 800b370:	898b      	ldrh	r3, [r1, #12]
 800b372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b374:	079d      	lsls	r5, r3, #30
 800b376:	4606      	mov	r6, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	d507      	bpl.n	800b38c <__smakebuf_r+0x1c>
 800b37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	6123      	str	r3, [r4, #16]
 800b384:	2301      	movs	r3, #1
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	b002      	add	sp, #8
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	ab01      	add	r3, sp, #4
 800b38e:	466a      	mov	r2, sp
 800b390:	f7ff ffc9 	bl	800b326 <__swhatbuf_r>
 800b394:	9900      	ldr	r1, [sp, #0]
 800b396:	4605      	mov	r5, r0
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fd f835 	bl	8008408 <_malloc_r>
 800b39e:	b948      	cbnz	r0, 800b3b4 <__smakebuf_r+0x44>
 800b3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d4ef      	bmi.n	800b388 <__smakebuf_r+0x18>
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	f043 0302 	orr.w	r3, r3, #2
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e7e3      	b.n	800b37c <__smakebuf_r+0xc>
 800b3b4:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <__smakebuf_r+0x7c>)
 800b3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	6020      	str	r0, [r4, #0]
 800b3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	9b00      	ldr	r3, [sp, #0]
 800b3c4:	6163      	str	r3, [r4, #20]
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	6120      	str	r0, [r4, #16]
 800b3ca:	b15b      	cbz	r3, 800b3e4 <__smakebuf_r+0x74>
 800b3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 f86b 	bl	800b4ac <_isatty_r>
 800b3d6:	b128      	cbz	r0, 800b3e4 <__smakebuf_r+0x74>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	f043 0301 	orr.w	r3, r3, #1
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	89a0      	ldrh	r0, [r4, #12]
 800b3e6:	4305      	orrs	r5, r0
 800b3e8:	81a5      	strh	r5, [r4, #12]
 800b3ea:	e7cd      	b.n	800b388 <__smakebuf_r+0x18>
 800b3ec:	08008175 	.word	0x08008175

0800b3f0 <_malloc_usable_size_r>:
 800b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f4:	1f18      	subs	r0, r3, #4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bfbc      	itt	lt
 800b3fa:	580b      	ldrlt	r3, [r1, r0]
 800b3fc:	18c0      	addlt	r0, r0, r3
 800b3fe:	4770      	bx	lr

0800b400 <_raise_r>:
 800b400:	291f      	cmp	r1, #31
 800b402:	b538      	push	{r3, r4, r5, lr}
 800b404:	4604      	mov	r4, r0
 800b406:	460d      	mov	r5, r1
 800b408:	d904      	bls.n	800b414 <_raise_r+0x14>
 800b40a:	2316      	movs	r3, #22
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	f04f 30ff 	mov.w	r0, #4294967295
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b416:	b112      	cbz	r2, 800b41e <_raise_r+0x1e>
 800b418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b41c:	b94b      	cbnz	r3, 800b432 <_raise_r+0x32>
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 f830 	bl	800b484 <_getpid_r>
 800b424:	462a      	mov	r2, r5
 800b426:	4601      	mov	r1, r0
 800b428:	4620      	mov	r0, r4
 800b42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b42e:	f000 b817 	b.w	800b460 <_kill_r>
 800b432:	2b01      	cmp	r3, #1
 800b434:	d00a      	beq.n	800b44c <_raise_r+0x4c>
 800b436:	1c59      	adds	r1, r3, #1
 800b438:	d103      	bne.n	800b442 <_raise_r+0x42>
 800b43a:	2316      	movs	r3, #22
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	2001      	movs	r0, #1
 800b440:	e7e7      	b.n	800b412 <_raise_r+0x12>
 800b442:	2400      	movs	r4, #0
 800b444:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b448:	4628      	mov	r0, r5
 800b44a:	4798      	blx	r3
 800b44c:	2000      	movs	r0, #0
 800b44e:	e7e0      	b.n	800b412 <_raise_r+0x12>

0800b450 <raise>:
 800b450:	4b02      	ldr	r3, [pc, #8]	; (800b45c <raise+0xc>)
 800b452:	4601      	mov	r1, r0
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	f7ff bfd3 	b.w	800b400 <_raise_r>
 800b45a:	bf00      	nop
 800b45c:	24000014 	.word	0x24000014

0800b460 <_kill_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d07      	ldr	r5, [pc, #28]	; (800b480 <_kill_r+0x20>)
 800b464:	2300      	movs	r3, #0
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	4611      	mov	r1, r2
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	f7f5 ff89 	bl	8001384 <_kill>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	d102      	bne.n	800b47c <_kill_r+0x1c>
 800b476:	682b      	ldr	r3, [r5, #0]
 800b478:	b103      	cbz	r3, 800b47c <_kill_r+0x1c>
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
 800b47e:	bf00      	nop
 800b480:	24007774 	.word	0x24007774

0800b484 <_getpid_r>:
 800b484:	f7f5 bf7c 	b.w	8001380 <_getpid>

0800b488 <_fstat_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_fstat_r+0x20>)
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	602b      	str	r3, [r5, #0]
 800b496:	f7f5 ffa2 	bl	80013de <_fstat>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	d102      	bne.n	800b4a4 <_fstat_r+0x1c>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	b103      	cbz	r3, 800b4a4 <_fstat_r+0x1c>
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	bd38      	pop	{r3, r4, r5, pc}
 800b4a6:	bf00      	nop
 800b4a8:	24007774 	.word	0x24007774

0800b4ac <_isatty_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_isatty_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f5 ff96 	bl	80013e8 <_isatty>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_isatty_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_isatty_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	24007774 	.word	0x24007774

0800b4cc <_init>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr

0800b4d8 <_fini>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	bf00      	nop
 800b4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4de:	bc08      	pop	{r3}
 800b4e0:	469e      	mov	lr, r3
 800b4e2:	4770      	bx	lr
