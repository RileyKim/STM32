
STM32H743ZG_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d878  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc94  0800dc94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc94  0800dc94  0001dc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc9c  0800dc9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc9c  0800dc9c  0001dc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dca0  0800dca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800dca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071cc  24000078  0800dd1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24007244  0800dd1c  00027244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc9d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049a2  00000000  00000000  0004dd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  000526e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  000541a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc5c  00000000  00000000  00055aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d90  00000000  00000000  000916fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017203f  00000000  00000000  000b648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002284cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075d0  00000000  00000000  0022851c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800db00 	.word	0x0800db00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800db00 	.word	0x0800db00

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_Z7bspInitv>:





void bspInit(void){
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <__io_putchar>:
uint32_t millis(void){

	return HAL_GetTick();
}

extern "C" int __io_putchar(int ch){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	2000      	movs	r0, #0
 8000602:	f001 f8bb 	bl	800177c <uartWrite>

	return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f001 f962 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f84a 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fa7a 	bl	8000b14 <MX_GPIO_Init>
  MX_UART8_Init();
 8000620:	f000 f95c 	bl	80008dc <MX_UART8_Init>
  MX_USART6_UART_Init();
 8000624:	f000 f9f2 	bl	8000a0c <MX_USART6_UART_Init>
  MX_UART5_Init();
 8000628:	f000 f90c 	bl	8000844 <MX_UART5_Init>
  MX_DMA_Init();
 800062c:	f000 fa3a 	bl	8000aa4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f9a0 	bl	8000974 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000634:	f000 f8ba 	bl	80007ac <MX_LPUART1_UART_Init>
//  HAL_UART_Receive_DMA(&huart5, rxBuffer, 100);
//  HAL_UART_Transmit_DMA(&huart8, rxBuffer, 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f009 fede 	bl	800a3f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gyroQueue */
  gyroQueueHandle = osMessageQueueNew (256, sizeof(uint32_t), &gyroQueue_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <main+0x74>)
 800063e:	2104      	movs	r1, #4
 8000640:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000644:	f009 ffb4 	bl	800a5b0 <osMessageQueueNew>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0x78>)
 800064c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDebug */
  TaskDebugHandle = osThreadNew(DebugTask, NULL, &TaskDebug_attributes);
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <main+0x7c>)
 8000650:	2100      	movs	r1, #0
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0x80>)
 8000654:	f009 ff1a 	bl	800a48c <osThreadNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <main+0x84>)
 800065c:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensing */
  TaskSensingHandle = osThreadNew(SensingTask, NULL, &TaskSensing_attributes);
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <main+0x88>)
 8000660:	2100      	movs	r1, #0
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0x8c>)
 8000664:	f009 ff12 	bl	800a48c <osThreadNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <main+0x90>)
 800066c:	6013      	str	r3, [r2, #0]

  /* creation of TaskMain */
  TaskMainHandle = osThreadNew(MainTask, NULL, &TaskMain_attributes);
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <main+0x94>)
 8000670:	2100      	movs	r1, #0
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0x98>)
 8000674:	f009 ff0a 	bl	800a48c <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <main+0x9c>)
 800067c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f009 fedf 	bl	800a440 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x72>
 8000684:	0800dbd8 	.word	0x0800dbd8
 8000688:	24002694 	.word	0x24002694
 800068c:	0800db6c 	.word	0x0800db6c
 8000690:	08001801 	.word	0x08001801
 8000694:	24000454 	.word	0x24000454
 8000698:	0800db90 	.word	0x0800db90
 800069c:	08001823 	.word	0x08001823
 80006a0:	24000d14 	.word	0x24000d14
 80006a4:	0800dbb4 	.word	0x0800dbb4
 80006a8:	08001815 	.word	0x08001815
 80006ac:	240015d4 	.word	0x240015d4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	224c      	movs	r2, #76	; 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00c fda5 	bl	800d20e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c fd9f 	bl	800d20e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d0:	2002      	movs	r0, #2
 80006d2:	f004 fa37 	bl	8004b44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <SystemClock_Config+0xf4>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <SystemClock_Config+0xf4>)
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <SystemClock_Config+0xf4>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <SystemClock_Config+0xf8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <SystemClock_Config+0xf8>)
 80006fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xf8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070c:	bf00      	nop
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xf8>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800071a:	d1f8      	bne.n	800070e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000720:	2301      	movs	r3, #1
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000734:	231e      	movs	r3, #30
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000744:	230c      	movs	r3, #12
 8000746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000748:	2300      	movs	r3, #0
 800074a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fa2f 	bl	8004bb8 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000760:	f000 fa50 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	233f      	movs	r3, #63	; 0x3f
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2303      	movs	r3, #3
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000770:	2308      	movs	r3, #8
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000774:	2340      	movs	r3, #64	; 0x40
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fe42 	bl	8005414 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000796:	f000 fa35 	bl	8000c04 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3770      	adds	r7, #112	; 0x70
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	58000400 	.word	0x58000400
 80007a8:	58024800 	.word	0x58024800

080007ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_LPUART1_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007f6:	f007 f81d 	bl	8007834 <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 fa00 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 8000808:	f009 fce7 	bl	800a1da <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f9f7 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 800081a:	f009 fd1c 	bl	800a256 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f9ee 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 800082a:	f009 fc9d 	bl	800a168 <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f9e6 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000094 	.word	0x24000094
 8000840:	58000c00 	.word	0x58000c00

08000844 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_UART5_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <MX_UART5_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_UART5_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_UART5_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_UART5_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_UART5_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_UART5_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_UART5_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_UART5_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_UART5_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_UART5_Init+0x90>)
 800088e:	f006 ffd1 	bl	8007834 <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f9b4 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_UART5_Init+0x90>)
 80008a0:	f009 fc9b 	bl	800a1da <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f9ab 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_UART5_Init+0x90>)
 80008b2:	f009 fcd0 	bl	800a256 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 f9a2 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_UART5_Init+0x90>)
 80008c2:	f009 fc51 	bl	800a168 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f99a 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24000124 	.word	0x24000124
 80008d8:	40005000 	.word	0x40005000

080008dc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_UART8_Init+0x90>)
 80008e2:	4a23      	ldr	r2, [pc, #140]	; (8000970 <MX_UART8_Init+0x94>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_UART8_Init+0x90>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_UART8_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_UART8_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_UART8_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_UART8_Init+0x90>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_UART8_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_UART8_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_UART8_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_UART8_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_UART8_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_UART8_Init+0x90>)
 8000926:	f006 ff85 	bl	8007834 <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 f968 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_UART8_Init+0x90>)
 8000938:	f009 fc4f 	bl	800a1da <HAL_UARTEx_SetTxFifoThreshold>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f95f 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <MX_UART8_Init+0x90>)
 800094a:	f009 fc84 	bl	800a256 <HAL_UARTEx_SetRxFifoThreshold>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f956 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_UART8_Init+0x90>)
 800095a:	f009 fc05 	bl	800a168 <HAL_UARTEx_DisableFifoMode>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f94e 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	240001b4 	.word	0x240001b4
 8000970:	40007c00 	.word	0x40007c00

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 800097a:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009be:	f006 ff39 	bl	8007834 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 f91c 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009d0:	f009 fc03 	bl	800a1da <HAL_UARTEx_SetTxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f913 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009e2:	f009 fc38 	bl	800a256 <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f90a 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USART1_UART_Init+0x90>)
 80009f2:	f009 fbb9 	bl	800a168 <HAL_UARTEx_DisableFifoMode>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f902 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000244 	.word	0x24000244
 8000a08:	40011000 	.word	0x40011000

08000a0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART6_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a56:	f006 feed 	bl	8007834 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f8d0 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a68:	f009 fbb7 	bl	800a1da <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f8c7 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a7a:	f009 fbec 	bl	800a256 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f8be 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART6_UART_Init+0x90>)
 8000a8a:	f009 fb6d 	bl	800a168 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f8b6 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	240002d4 	.word	0x240002d4
 8000aa0:	40011400 	.word	0x40011400

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_DMA_Init+0x6c>)
 8000ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	200b      	movs	r0, #11
 8000aec:	f001 f816 	bl	8001b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000af0:	200b      	movs	r0, #11
 8000af2:	f001 f82d 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	203a      	movs	r0, #58	; 0x3a
 8000afc:	f001 f80e 	bl	8001b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b00:	203a      	movs	r0, #58	; 0x3a
 8000b02:	f001 f825 	bl	8001b50 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_GPIO_Init+0xc8>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

}
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	58024400 	.word	0x58024400

08000be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf2:	f000 feaf 	bl	8001954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010000 	.word	0x40010000

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x38>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_MspInit+0x38>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_MspInit+0x38>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	210f      	movs	r1, #15
 8000c38:	f06f 0001 	mvn.w	r0, #1
 8000c3c:	f000 ff6e 	bl	8001b1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0c2      	sub	sp, #264	; 0x108
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c70:	22bc      	movs	r2, #188	; 0xbc
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00c faca 	bl	800d20e <memset>
  if(huart->Instance==LPUART1)
 8000c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a93      	ldr	r2, [pc, #588]	; (8000ed4 <HAL_UART_MspInit+0x288>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d143      	bne.n	8000d14 <HAL_UART_MspInit+0xc8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 ff88 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8000ca6:	f7ff ffad 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000caa:	4b8b      	ldr	r3, [pc, #556]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb0:	4a89      	ldr	r2, [pc, #548]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cba:	4b87      	ldr	r3, [pc, #540]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b83      	ldr	r3, [pc, #524]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	4a82      	ldr	r2, [pc, #520]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd8:	4b7f      	ldr	r3, [pc, #508]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4873      	ldr	r0, [pc, #460]	; (8000edc <HAL_UART_MspInit+0x290>)
 8000d0e:	f003 fd69 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d12:	e20a      	b.n	800112a <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==UART5)
 8000d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a6f      	ldr	r2, [pc, #444]	; (8000ee0 <HAL_UART_MspInit+0x294>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f040 8082 	bne.w	8000e2c <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 ff3a 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8000d42:	f7ff ff5f 	bl	8000c04 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d46:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d4c:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a5b      	ldr	r2, [pc, #364]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000d82:	f242 0320 	movw	r3, #8224	; 0x2020
 8000d86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000d9c:	230e      	movs	r3, #14
 8000d9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000da6:	4619      	mov	r1, r3
 8000da8:	484e      	ldr	r0, [pc, #312]	; (8000ee4 <HAL_UART_MspInit+0x298>)
 8000daa:	f003 fd1b 	bl	80047e4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Stream2;
 8000dae:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_UART_MspInit+0x2a0>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000db4:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000db6:	2241      	movs	r2, #65	; 0x41
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000dda:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000dee:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000df0:	f000 febc 	bl	8001b6c <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8000dfa:	f7ff ff03 	bl	8000c04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a37      	ldr	r2, [pc, #220]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000e0a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <HAL_UART_MspInit+0x29c>)
 8000e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2035      	movs	r0, #53	; 0x35
 8000e20:	f000 fe7c 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e24:	2035      	movs	r0, #53	; 0x35
 8000e26:	f000 fe93 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 8000e2a:	e17e      	b.n	800112a <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==UART8)
 8000e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_UART_MspInit+0x2a4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d15c      	bne.n	8000ef8 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 feaf 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x210>
      Error_Handler();
 8000e58:	f7ff fed4 	bl	8000c04 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_UART_MspInit+0x28c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <HAL_UART_MspInit+0x2a8>)
 8000ebe:	f003 fc91 	bl	80047e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2053      	movs	r0, #83	; 0x53
 8000ec8:	f000 fe28 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000ecc:	2053      	movs	r0, #83	; 0x53
 8000ece:	f000 fe3f 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 8000ed2:	e12a      	b.n	800112a <HAL_UART_MspInit+0x4de>
 8000ed4:	58000c00 	.word	0x58000c00
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	40005000 	.word	0x40005000
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	24000364 	.word	0x24000364
 8000eec:	40020440 	.word	0x40020440
 8000ef0:	40007c00 	.word	0x40007c00
 8000ef4:	58021000 	.word	0x58021000
  else if(huart->Instance==USART1)
 8000ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a8b      	ldr	r2, [pc, #556]	; (8001134 <HAL_UART_MspInit+0x4e8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f040 8097 	bne.w	800103a <HAL_UART_MspInit+0x3ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fe48 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x2de>
      Error_Handler();
 8000f26:	f7ff fe6d 	bl	8000c04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2a:	4b83      	ldr	r3, [pc, #524]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f30:	4a81      	ldr	r2, [pc, #516]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	4a7a      	ldr	r2, [pc, #488]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f58:	4b77      	ldr	r3, [pc, #476]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f80:	2304      	movs	r3, #4
 8000f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	486b      	ldr	r0, [pc, #428]	; (800113c <HAL_UART_MspInit+0x4f0>)
 8000f8e:	f003 fc29 	bl	80047e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000faa:	2307      	movs	r3, #7
 8000fac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4861      	ldr	r0, [pc, #388]	; (800113c <HAL_UART_MspInit+0x4f0>)
 8000fb8:	f003 fc14 	bl	80047e4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000fbc:	4b60      	ldr	r3, [pc, #384]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fbe:	4a61      	ldr	r2, [pc, #388]	; (8001144 <HAL_UART_MspInit+0x4f8>)
 8000fc0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fc4:	2229      	movs	r2, #41	; 0x29
 8000fc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc8:	4b5d      	ldr	r3, [pc, #372]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd4:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fe8:	4b55      	ldr	r3, [pc, #340]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff0:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ffc:	4850      	ldr	r0, [pc, #320]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8000ffe:	f000 fdb5 	bl	8001b6c <HAL_DMA_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8001008:	f7ff fdfc 	bl	8000c04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800100c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 8001018:	67da      	str	r2, [r3, #124]	; 0x7c
 800101a:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_UART_MspInit+0x4f4>)
 800101c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2105      	movs	r1, #5
 800102c:	2025      	movs	r0, #37	; 0x25
 800102e:	f000 fd75 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001032:	2025      	movs	r0, #37	; 0x25
 8001034:	f000 fd8c 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 8001038:	e077      	b.n	800112a <HAL_UART_MspInit+0x4de>
  else if(huart->Instance==USART6)
 800103a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800103e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a40      	ldr	r2, [pc, #256]	; (8001148 <HAL_UART_MspInit+0x4fc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d16e      	bne.n	800112a <HAL_UART_MspInit+0x4de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800104c:	2301      	movs	r3, #1
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105a:	4618      	mov	r0, r3
 800105c:	f004 fda8 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_UART_MspInit+0x41e>
      Error_Handler();
 8001066:	f7ff fdcd 	bl	8000c04 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 800106c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001070:	4a31      	ldr	r2, [pc, #196]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 800107c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_UART_MspInit+0x4ec>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <HAL_UART_MspInit+0x500>)
 80010ea:	f003 fb7b 	bl	80047e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001108:	2307      	movs	r3, #7
 800110a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001112:	4619      	mov	r1, r3
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <HAL_UART_MspInit+0x504>)
 8001116:	f003 fb65 	bl	80047e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2047      	movs	r0, #71	; 0x47
 8001120:	f000 fcfc 	bl	8001b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001124:	2047      	movs	r0, #71	; 0x47
 8001126:	f000 fd13 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40011000 	.word	0x40011000
 8001138:	58024400 	.word	0x58024400
 800113c:	58020400 	.word	0x58020400
 8001140:	240003dc 	.word	0x240003dc
 8001144:	40020010 	.word	0x40020010
 8001148:	40011400 	.word	0x40011400
 800114c:	58020800 	.word	0x58020800
 8001150:	58021800 	.word	0x58021800

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d844      	bhi.n	80011ec <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	2019      	movs	r0, #25
 8001168:	f000 fcd8 	bl	8001b1c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800116c:	2019      	movs	r0, #25
 800116e:	f000 fcef 	bl	8001b50 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_InitTick+0xb0>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_InitTick+0xb4>)
 800117a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_InitTick+0xb4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_InitTick+0xb4>)
 800118a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fcc3 	bl	8005b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011a6:	f004 fcab 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 80011aa:	4603      	mov	r3, r0
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_InitTick+0xb8>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3b01      	subs	r3, #1
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_InitTick+0xbc>)
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_InitTick+0xc0>)
 80011c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0xbc>)
 80011c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_InitTick+0xbc>)
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_InitTick+0xbc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_InitTick+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <HAL_InitTick+0xbc>)
 80011e0:	f006 f84e 	bl	8007280 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_InitTick+0xa6>
 80011ea:	e001      	b.n	80011f0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e005      	b.n	80011fc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_InitTick+0xbc>)
 80011f2:	f006 f8a7 	bl	8007344 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3738      	adds	r7, #56	; 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000008 	.word	0x24000008
 8001208:	58024400 	.word	0x58024400
 800120c:	431bde83 	.word	0x431bde83
 8001210:	24002698 	.word	0x24002698
 8001214:	40010000 	.word	0x40010000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Stream0_IRQHandler+0x10>)
 800124a:	f001 ffb9 	bl	80031c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	240003dc 	.word	0x240003dc

08001258 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM1_UP_IRQHandler+0x10>)
 800125e:	f006 f8e9 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24002698 	.word	0x24002698

0800126c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USART1_IRQHandler+0x10>)
 8001272:	f006 fc71 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24000244 	.word	0x24000244

08001280 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <UART5_IRQHandler+0x10>)
 8001286:	f006 fc67 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	24000124 	.word	0x24000124

08001294 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA2_Stream2_IRQHandler+0x10>)
 800129a:	f001 ff91 	bl	80031c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000364 	.word	0x24000364

080012a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART6_IRQHandler+0x10>)
 80012ae:	f006 fc53 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	240002d4 	.word	0x240002d4

080012bc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <UART8_IRQHandler+0x10>)
 80012c2:	f006 fc49 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	240001b4 	.word	0x240001b4

080012d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
	}

return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f964 	bl	80005f2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
	}
	return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f00b fde6 	bl	800cfac <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24080000 	.word	0x24080000
 800140c:	00000400 	.word	0x00000400
 8001410:	240026e4 	.word	0x240026e4
 8001414:	24007248 	.word	0x24007248

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <SystemInit+0xec>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a38      	ldr	r2, [pc, #224]	; (8001504 <SystemInit+0xec>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <SystemInit+0xf0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2b06      	cmp	r3, #6
 8001436:	d807      	bhi.n	8001448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <SystemInit+0xf0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	4a31      	ldr	r2, [pc, #196]	; (8001508 <SystemInit+0xf0>)
 8001442:	f043 0307 	orr.w	r3, r3, #7
 8001446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <SystemInit+0xf4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2f      	ldr	r2, [pc, #188]	; (800150c <SystemInit+0xf4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <SystemInit+0xf4>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <SystemInit+0xf4>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	492b      	ldr	r1, [pc, #172]	; (800150c <SystemInit+0xf4>)
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <SystemInit+0xf8>)
 8001462:	4013      	ands	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <SystemInit+0xf0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <SystemInit+0xf0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 030f 	bic.w	r3, r3, #15
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <SystemInit+0xf0>)
 800147c:	f043 0307 	orr.w	r3, r3, #7
 8001480:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <SystemInit+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <SystemInit+0xf4>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <SystemInit+0xf4>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <SystemInit+0xf4>)
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <SystemInit+0xfc>)
 8001498:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <SystemInit+0xf4>)
 800149c:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <SystemInit+0x100>)
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <SystemInit+0xf4>)
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <SystemInit+0x104>)
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <SystemInit+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <SystemInit+0xf4>)
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <SystemInit+0x104>)
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <SystemInit+0xf4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <SystemInit+0xf4>)
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <SystemInit+0x104>)
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <SystemInit+0xf4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <SystemInit+0xf4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <SystemInit+0xf4>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <SystemInit+0xf4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <SystemInit+0x108>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <SystemInit+0x10c>)
 80014dc:	4013      	ands	r3, r2
 80014de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e2:	d202      	bcs.n	80014ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <SystemInit+0x110>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <SystemInit+0x114>)
 80014ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0xec>)
 80014f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00
 8001508:	52002000 	.word	0x52002000
 800150c:	58024400 	.word	0x58024400
 8001510:	eaf6ed7f 	.word	0xeaf6ed7f
 8001514:	02020200 	.word	0x02020200
 8001518:	01ff0000 	.word	0x01ff0000
 800151c:	01010280 	.word	0x01010280
 8001520:	5c001000 	.word	0x5c001000
 8001524:	ffff0000 	.word	0xffff0000
 8001528:	51008108 	.word	0x51008108
 800152c:	52004000 	.word	0x52004000

08001530 <qbufferCreate>:

}


bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]

	bool ret = true;
 800153c:	2301      	movs	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]
	p_node->in = 0;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	60da      	str	r2, [r3, #12]

	return ret;
 8001558:	7dfb      	ldrb	r3, [r7, #23]

}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <qbufferWrite>:


bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001566:	b480      	push	{r7}
 8001568:	b089      	sub	sp, #36	; 0x24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8001572:	2301      	movs	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
	uint32_t next_in;

	for(int i=0; i< (int)length; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	429a      	cmp	r2, r3
 8001580:	da28      	bge.n	80015d4 <qbufferWrite+0x6e>
	{
		next_in = (p_node->in+1) % p_node->len;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	6892      	ldr	r2, [r2, #8]
 800158c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001590:	fb01 f202 	mul.w	r2, r1, r2
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	617b      	str	r3, [r7, #20]
		if(next_in != p_node->out)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d011      	beq.n	80015c6 <qbufferWrite+0x60>
		{
			if(p_node->p_buf != NULL)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <qbufferWrite+0x58>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	441a      	add	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	440b      	add	r3, r1
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	701a      	strb	r2, [r3, #0]
			}
			p_node->in = next_in;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e002      	b.n	80015cc <qbufferWrite+0x66>
		}
		else
		{
			ret = false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	77fb      	strb	r3, [r7, #31]
			break;
 80015ca:	e003      	b.n	80015d4 <qbufferWrite+0x6e>
	for(int i=0; i< (int)length; i++)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	e7d2      	b.n	800157a <qbufferWrite+0x14>
		}
	}
	return ret;
 80015d4:	7ffb      	ldrb	r3, [r7, #31]

}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <uartInit>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...);


bool uartInit(void){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
	for(int i =0; i<UART_MAX_CH; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	dc08      	bgt.n	8001606 <uartInit+0x22>
		is_open[i] = false;
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <uartInit+0x30>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
	for(int i =0; i<UART_MAX_CH; i++){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e7f3      	b.n	80015ee <uartInit+0xa>
	}
	return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	240026e8 	.word	0x240026e8

08001618 <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <uartOpen+0x1c>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d02a      	beq.n	8001688 <uartOpen+0x70>
 8001632:	e06e      	b.n	8001712 <uartOpen+0xfa>
	{
		case _DEF_UART1:

			qbufferCreate(&qbuffer[_DEF_UART1], &rx_buf[0], 256);
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	4938      	ldr	r1, [pc, #224]	; (800171c <uartOpen+0x104>)
 800163a:	4839      	ldr	r0, [pc, #228]	; (8001720 <uartOpen+0x108>)
 800163c:	f7ff ff78 	bl	8001530 <qbufferCreate>

			if(HAL_UART_Init(&huart5) != HAL_OK){
 8001640:	4838      	ldr	r0, [pc, #224]	; (8001724 <uartOpen+0x10c>)
 8001642:	f006 f8f7 	bl	8007834 <HAL_UART_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <uartOpen+0x44>
				ret = false;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
#ifdef UART5_DMA
				qbuffer[ch].in = qbuffer[ch].len - DMA2_Stream2->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
#endif
			}
			break;
 800165a:	e059      	b.n	8001710 <uartOpen+0xf8>
				ret = true;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <uartOpen+0x110>)
 8001664:	2101      	movs	r1, #1
 8001666:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1) != HAL_OK)
 8001668:	2201      	movs	r2, #1
 800166a:	4930      	ldr	r1, [pc, #192]	; (800172c <uartOpen+0x114>)
 800166c:	482d      	ldr	r0, [pc, #180]	; (8001724 <uartOpen+0x10c>)
 800166e:	f006 f9c7 	bl	8007a00 <HAL_UART_Receive_IT>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d046      	beq.n	8001710 <uartOpen+0xf8>
					ret = false;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
			break;
 8001686:	e043      	b.n	8001710 <uartOpen+0xf8>

		case _DEF_UART2:

			qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8001688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168c:	4923      	ldr	r1, [pc, #140]	; (800171c <uartOpen+0x104>)
 800168e:	4828      	ldr	r0, [pc, #160]	; (8001730 <uartOpen+0x118>)
 8001690:	f7ff ff4e 	bl	8001530 <qbufferCreate>

			if(HAL_UART_Init(&huart1) != HAL_OK){
 8001694:	4827      	ldr	r0, [pc, #156]	; (8001734 <uartOpen+0x11c>)
 8001696:	f006 f8cd 	bl	8007834 <HAL_UART_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <uartOpen+0x98>
				ret = false;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
					ret = false;
				}
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 80016ae:	e030      	b.n	8001712 <uartOpen+0xfa>
				ret = true;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <uartOpen+0x110>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, &rx_buf[0], 256)!=HAL_OK)
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <uartOpen+0x104>)
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <uartOpen+0x11c>)
 80016c4:	f006 f9f2 	bl	8007aac <HAL_UART_Receive_DMA>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <uartOpen+0xc4>
					ret = false;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in = qbuffer[ch].len - DMA1_Stream0->NDTR;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <uartOpen+0x108>)
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	3308      	adds	r3, #8
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <uartOpen+0x120>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	1a8a      	subs	r2, r1, r2
 80016f0:	490b      	ldr	r1, [pc, #44]	; (8001720 <uartOpen+0x108>)
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	440b      	add	r3, r1
 80016f6:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4908      	ldr	r1, [pc, #32]	; (8001720 <uartOpen+0x108>)
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	440a      	add	r2, r1
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <uartOpen+0x108>)
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3304      	adds	r3, #4
 800170c:	601a      	str	r2, [r3, #0]
			break;
 800170e:	e000      	b.n	8001712 <uartOpen+0xfa>
			break;
 8001710:	bf00      	nop
	}

	return ret;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2400271c 	.word	0x2400271c
 8001720:	240026ec 	.word	0x240026ec
 8001724:	24000124 	.word	0x24000124
 8001728:	240026e8 	.word	0x240026e8
 800172c:	2400281c 	.word	0x2400281c
 8001730:	240026fc 	.word	0x240026fc
 8001734:	24000244 	.word	0x24000244
 8001738:	40020010 	.word	0x40020010

0800173c <HAL_UART_RxCpltCallback>:
	return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
#ifdef UART5_IT
	if(huart->Instance == UART5){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_UART_RxCpltCallback+0x30>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d109      	bne.n	8001762 <HAL_UART_RxCpltCallback+0x26>
		qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800174e:	2201      	movs	r2, #1
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <HAL_UART_RxCpltCallback+0x34>)
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <HAL_UART_RxCpltCallback+0x38>)
 8001754:	f7ff ff07 	bl	8001566 <qbufferWrite>
		HAL_UART_Receive_IT(&huart5, (uint8_t *)&rx_data[_DEF_UART1], 1);
 8001758:	2201      	movs	r2, #1
 800175a:	4905      	ldr	r1, [pc, #20]	; (8001770 <HAL_UART_RxCpltCallback+0x34>)
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <HAL_UART_RxCpltCallback+0x3c>)
 800175e:	f006 f94f 	bl	8007a00 <HAL_UART_Receive_IT>
	}
#endif
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005000 	.word	0x40005000
 8001770:	2400281c 	.word	0x2400281c
 8001774:	240026ec 	.word	0x240026ec
 8001778:	24000124 	.word	0x24000124

0800177c <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef status;
	switch(ch){
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <uartWrite+0x1e>
 8001794:	2b01      	cmp	r3, #1
 8001796:	d00f      	beq.n	80017b8 <uartWrite+0x3c>
 8001798:	e020      	b.n	80017dc <uartWrite+0x60>

		case _DEF_UART1:
			status = HAL_UART_Transmit(&huart5, p_data, length, 100);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	b29a      	uxth	r2, r3
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <uartWrite+0x6c>)
 80017a4:	f006 f896 	bl	80078d4 <HAL_UART_Transmit>
 80017a8:	4603      	mov	r3, r0
 80017aa:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d111      	bne.n	80017d6 <uartWrite+0x5a>
				ret = length;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	617b      	str	r3, [r7, #20]
			}
			break;
 80017b6:	e00e      	b.n	80017d6 <uartWrite+0x5a>

		case _DEF_UART2:
			status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <uartWrite+0x70>)
 80017c2:	f006 f887 	bl	80078d4 <HAL_UART_Transmit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	74fb      	strb	r3, [r7, #19]
			if(status == HAL_OK){
 80017ca:	7cfb      	ldrb	r3, [r7, #19]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <uartWrite+0x5e>
				ret = length;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	617b      	str	r3, [r7, #20]
			}
			break;
 80017d4:	e001      	b.n	80017da <uartWrite+0x5e>
			break;
 80017d6:	bf00      	nop
 80017d8:	e000      	b.n	80017dc <uartWrite+0x60>
			break;
 80017da:	bf00      	nop
	}
	return ret;
 80017dc:	697b      	ldr	r3, [r7, #20]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24000124 	.word	0x24000124
 80017ec:	24000244 	.word	0x24000244

080017f0 <_Z6hwInitv>:



#include "hw.h"

void hwInit(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	bspInit();
 80017f4:	f7fe fef6 	bl	80005e4 <_Z7bspInitv>
	uartInit();
 80017f8:	f7ff fef4 	bl	80015e4 <uartInit>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DebugTask>:


extern UART_HandleTypeDef huart8;


extern "C" void DebugTask(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	hwInit();
 8001804:	f7ff fff4 	bl	80017f0 <_Z6hwInitv>
	apInit();
 8001808:	f000 f812 	bl	8001830 <_Z6apInitv>
	apMain();
 800180c:	f000 f81e 	bl	800184c <_Z6apMainv>

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <MainTask>:


extern "C" void MainTask(void){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <SensingTask>:

extern "C" void SensingTask(void){
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_Z6apInitv>:

#include "ap.h"



void apInit(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 115200);
 8001834:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff feed 	bl	8001618 <uartOpen>
	uartOpen(_DEF_UART2, 115200);
 800183e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff fee8 	bl	8001618 <uartOpen>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <_Z6apMainv>:


void apMain(void){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	pre_time = HAL_GetTick();
 8001852:	f000 f893 	bl	800197c <HAL_GetTick>
 8001856:	6078      	str	r0, [r7, #4]

	while(1){
		if(HAL_GetTick()-pre_time >= 500){
 8001858:	f000 f890 	bl	800197c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001866:	4293      	cmp	r3, r2
 8001868:	bf8c      	ite	hi
 800186a:	2301      	movhi	r3, #1
 800186c:	2300      	movls	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f1      	beq.n	8001858 <_Z6apMainv+0xc>
			pre_time = HAL_GetTick();
 8001874:	f000 f882 	bl	800197c <HAL_GetTick>
 8001878:	6078      	str	r0, [r7, #4]
			logPrintf("print test\r\n");
 800187a:	4802      	ldr	r0, [pc, #8]	; (8001884 <_Z6apMainv+0x38>)
 800187c:	f00b fdd2 	bl	800d424 <puts>
		if(HAL_GetTick()-pre_time >= 500){
 8001880:	e7ea      	b.n	8001858 <_Z6apMainv+0xc>
 8001882:	bf00      	nop
 8001884:	0800db48 	.word	0x0800db48

08001888 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800188c:	f7ff fdc4 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001892:	e003      	b.n	800189c <LoopCopyDataInit>

08001894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800189a:	3104      	adds	r1, #4

0800189c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800189c:	480a      	ldr	r0, [pc, #40]	; (80018c8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80018a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018a4:	d3f6      	bcc.n	8001894 <CopyDataInit>
  ldr  r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80018a8:	e002      	b.n	80018b0 <LoopFillZerobss>

080018aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ac:	f842 3b04 	str.w	r3, [r2], #4

080018b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80018b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018b4:	d3f9      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f00b fc75 	bl	800d1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7fe fea9 	bl	8000610 <main>
  bx  lr    
 80018be:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80018c4:	0800dca4 	.word	0x0800dca4
  ldr  r0, =_sdata
 80018c8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018cc:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80018d0:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80018d4:	24007244 	.word	0x24007244

080018d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f90f 	bl	8001b06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e8:	f003 ff4a 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	4913      	ldr	r1, [pc, #76]	; (8001948 <HAL_Init+0x6c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_Init+0x6c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_Init+0x70>)
 800191e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	200f      	movs	r0, #15
 8001928:	f7ff fc14 	bl	8001154 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff f96b 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	0800dbf0 	.word	0x0800dbf0
 800194c:	24000004 	.word	0x24000004
 8001950:	24000000 	.word	0x24000000

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2400000c 	.word	0x2400000c
 8001978:	24002820 	.word	0x24002820

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	24002820 	.word	0x24002820

08001994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetREVID+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1b      	lsrs	r3, r3, #16
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	5c001000 	.word	0x5c001000

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <__NVIC_SetPriorityGrouping+0x40>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x40>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	05fa0000 	.word	0x05fa0000

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff4c 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2a:	f7ff ff63 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7ff ffb3 	bl	8001aa0 <NVIC_EncodePriority>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff82 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff56 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ff02 	bl	800197c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e316      	b.n	80021b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <HAL_DMA_Init+0x1b8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d04a      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a65      	ldr	r2, [pc, #404]	; (8001d28 <HAL_DMA_Init+0x1bc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d045      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a63      	ldr	r2, [pc, #396]	; (8001d2c <HAL_DMA_Init+0x1c0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d040      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a62      	ldr	r2, [pc, #392]	; (8001d30 <HAL_DMA_Init+0x1c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d03b      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_DMA_Init+0x1c8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d036      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5f      	ldr	r2, [pc, #380]	; (8001d38 <HAL_DMA_Init+0x1cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d031      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_DMA_Init+0x1d0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02c      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5c      	ldr	r2, [pc, #368]	; (8001d40 <HAL_DMA_Init+0x1d4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d027      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_DMA_Init+0x1d8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d022      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a59      	ldr	r2, [pc, #356]	; (8001d48 <HAL_DMA_Init+0x1dc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01d      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_DMA_Init+0x1e0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d018      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_DMA_Init+0x1e4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_DMA_Init+0x1e8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00e      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_DMA_Init+0x1ec>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_DMA_Init+0x1f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_DMA_Init+0xb8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_DMA_Init+0x1f4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Init+0xbc>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_DMA_Init+0xbe>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 813b 	beq.w	8001ea6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <HAL_DMA_Init+0x1b8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d04a      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_DMA_Init+0x1bc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d045      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <HAL_DMA_Init+0x1c0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d040      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_DMA_Init+0x1c4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d03b      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_DMA_Init+0x1c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d036      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_DMA_Init+0x1cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d031      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_DMA_Init+0x1d0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02c      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_DMA_Init+0x1d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d027      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_DMA_Init+0x1d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d022      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <HAL_DMA_Init+0x1dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d01d      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_DMA_Init+0x1e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d018      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_DMA_Init+0x1e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <HAL_DMA_Init+0x1e8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_DMA_Init+0x1ec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_DMA_Init+0x1f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_DMA_Init+0x174>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_DMA_Init+0x1f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d108      	bne.n	8001cf2 <HAL_DMA_Init+0x186>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e007      	b.n	8001d02 <HAL_DMA_Init+0x196>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d02:	e02f      	b.n	8001d64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d04:	f7ff fe3a 	bl	800197c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d928      	bls.n	8001d64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e246      	b.n	80021b2 <HAL_DMA_Init+0x646>
 8001d24:	40020010 	.word	0x40020010
 8001d28:	40020028 	.word	0x40020028
 8001d2c:	40020040 	.word	0x40020040
 8001d30:	40020058 	.word	0x40020058
 8001d34:	40020070 	.word	0x40020070
 8001d38:	40020088 	.word	0x40020088
 8001d3c:	400200a0 	.word	0x400200a0
 8001d40:	400200b8 	.word	0x400200b8
 8001d44:	40020410 	.word	0x40020410
 8001d48:	40020428 	.word	0x40020428
 8001d4c:	40020440 	.word	0x40020440
 8001d50:	40020458 	.word	0x40020458
 8001d54:	40020470 	.word	0x40020470
 8001d58:	40020488 	.word	0x40020488
 8001d5c:	400204a0 	.word	0x400204a0
 8001d60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1c8      	bne.n	8001d04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_DMA_Init+0x420>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d107      	bne.n	8001dc8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001dc8:	4b71      	ldr	r3, [pc, #452]	; (8001f90 <HAL_DMA_Init+0x424>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <HAL_DMA_Init+0x428>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd4:	d328      	bcc.n	8001e28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b28      	cmp	r3, #40	; 0x28
 8001ddc:	d903      	bls.n	8001de6 <HAL_DMA_Init+0x27a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b2e      	cmp	r3, #46	; 0x2e
 8001de4:	d917      	bls.n	8001e16 <HAL_DMA_Init+0x2aa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b3e      	cmp	r3, #62	; 0x3e
 8001dec:	d903      	bls.n	8001df6 <HAL_DMA_Init+0x28a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b42      	cmp	r3, #66	; 0x42
 8001df4:	d90f      	bls.n	8001e16 <HAL_DMA_Init+0x2aa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b46      	cmp	r3, #70	; 0x46
 8001dfc:	d903      	bls.n	8001e06 <HAL_DMA_Init+0x29a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b48      	cmp	r3, #72	; 0x48
 8001e04:	d907      	bls.n	8001e16 <HAL_DMA_Init+0x2aa>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b4e      	cmp	r3, #78	; 0x4e
 8001e0c:	d905      	bls.n	8001e1a <HAL_DMA_Init+0x2ae>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b52      	cmp	r3, #82	; 0x52
 8001e14:	d801      	bhi.n	8001e1a <HAL_DMA_Init+0x2ae>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_DMA_Init+0x2b0>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d117      	bne.n	8001e82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f002 fb33 	bl	80044d0 <DMA_CheckFifoParam>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e197      	b.n	80021b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f002 fa6e 	bl	800436c <DMA_CalcBaseAndBitshift>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	223f      	movs	r2, #63	; 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e0cd      	b.n	8002042 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <HAL_DMA_Init+0x42c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_DMA_Init+0x430>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01d      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x434>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d018      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a36      	ldr	r2, [pc, #216]	; (8001fa4 <HAL_DMA_Init+0x438>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <HAL_DMA_Init+0x43c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00e      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_DMA_Init+0x440>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <HAL_DMA_Init+0x444>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d004      	beq.n	8001ef6 <HAL_DMA_Init+0x38a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_DMA_Init+0x448>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_DMA_Init+0x38e>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_DMA_Init+0x390>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <HAL_DMA_Init+0x42c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d021      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_DMA_Init+0x430>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01c      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_DMA_Init+0x434>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d017      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_DMA_Init+0x438>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d012      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_DMA_Init+0x43c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_DMA_Init+0x440>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d008      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_DMA_Init+0x444>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA_Init+0x3e4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_DMA_Init+0x448>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_DMA_Init+0x44c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d020      	beq.n	8001fbc <HAL_DMA_Init+0x450>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d102      	bne.n	8001f88 <HAL_DMA_Init+0x41c>
 8001f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f86:	e01a      	b.n	8001fbe <HAL_DMA_Init+0x452>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e018      	b.n	8001fbe <HAL_DMA_Init+0x452>
 8001f8c:	fe10803f 	.word	0xfe10803f
 8001f90:	5c001000 	.word	0x5c001000
 8001f94:	ffff0000 	.word	0xffff0000
 8001f98:	58025408 	.word	0x58025408
 8001f9c:	5802541c 	.word	0x5802541c
 8001fa0:	58025430 	.word	0x58025430
 8001fa4:	58025444 	.word	0x58025444
 8001fa8:	58025458 	.word	0x58025458
 8001fac:	5802546c 	.word	0x5802546c
 8001fb0:	58025480 	.word	0x58025480
 8001fb4:	58025494 	.word	0x58025494
 8001fb8:	fffe000f 	.word	0xfffe000f
 8001fbc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <HAL_DMA_Init+0x650>)
 8002004:	4413      	add	r3, r2
 8002006:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_DMA_Init+0x654>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	009a      	lsls	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f002 f9a9 	bl	800436c <DMA_CalcBaseAndBitshift>
 800201a:	4603      	mov	r3, r0
 800201c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e008      	b.n	8002042 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0b7      	b.n	80021b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_DMA_Init+0x658>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d072      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_DMA_Init+0x65c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d06d      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_DMA_Init+0x660>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d068      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_DMA_Init+0x664>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d063      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <HAL_DMA_Init+0x668>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_DMA_Init+0x66c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d059      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_DMA_Init+0x670>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d054      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_DMA_Init+0x674>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d04f      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_DMA_Init+0x678>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04a      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_DMA_Init+0x67c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d045      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_DMA_Init+0x680>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d040      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_DMA_Init+0x684>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d03b      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_DMA_Init+0x688>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d036      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_DMA_Init+0x68c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d031      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <HAL_DMA_Init+0x690>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d02c      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_DMA_Init+0x694>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d027      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a47      	ldr	r2, [pc, #284]	; (8002204 <HAL_DMA_Init+0x698>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a45      	ldr	r2, [pc, #276]	; (8002208 <HAL_DMA_Init+0x69c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a44      	ldr	r2, [pc, #272]	; (800220c <HAL_DMA_Init+0x6a0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a42      	ldr	r2, [pc, #264]	; (8002210 <HAL_DMA_Init+0x6a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a41      	ldr	r2, [pc, #260]	; (8002214 <HAL_DMA_Init+0x6a8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <HAL_DMA_Init+0x6ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_DMA_Init+0x6b0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_DMA_Init+0x5c6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3c      	ldr	r2, [pc, #240]	; (8002220 <HAL_DMA_Init+0x6b4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Init+0x5ca>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_DMA_Init+0x5cc>
 8002136:	2300      	movs	r3, #0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d032      	beq.n	80021a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f002 fa43 	bl	80045c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b80      	cmp	r3, #128	; 0x80
 8002148:	d102      	bne.n	8002150 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002164:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_DMA_Init+0x624>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d80c      	bhi.n	8002190 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f002 fac0 	bl	80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e008      	b.n	80021a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	a7fdabf8 	.word	0xa7fdabf8
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	40020010 	.word	0x40020010
 80021c8:	40020028 	.word	0x40020028
 80021cc:	40020040 	.word	0x40020040
 80021d0:	40020058 	.word	0x40020058
 80021d4:	40020070 	.word	0x40020070
 80021d8:	40020088 	.word	0x40020088
 80021dc:	400200a0 	.word	0x400200a0
 80021e0:	400200b8 	.word	0x400200b8
 80021e4:	40020410 	.word	0x40020410
 80021e8:	40020428 	.word	0x40020428
 80021ec:	40020440 	.word	0x40020440
 80021f0:	40020458 	.word	0x40020458
 80021f4:	40020470 	.word	0x40020470
 80021f8:	40020488 	.word	0x40020488
 80021fc:	400204a0 	.word	0x400204a0
 8002200:	400204b8 	.word	0x400204b8
 8002204:	58025408 	.word	0x58025408
 8002208:	5802541c 	.word	0x5802541c
 800220c:	58025430 	.word	0x58025430
 8002210:	58025444 	.word	0x58025444
 8002214:	58025458 	.word	0x58025458
 8002218:	5802546c 	.word	0x5802546c
 800221c:	58025480 	.word	0x58025480
 8002220:	58025494 	.word	0x58025494

08002224 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e226      	b.n	800268e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_DMA_Start_IT+0x2a>
 800224a:	2302      	movs	r3, #2
 800224c:	e21f      	b.n	800268e <HAL_DMA_Start_IT+0x46a>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 820a 	bne.w	8002678 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_DMA_Start_IT+0x1f4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d04a      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a66      	ldr	r2, [pc, #408]	; (800241c <HAL_DMA_Start_IT+0x1f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d045      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_DMA_Start_IT+0x1fc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d040      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a63      	ldr	r2, [pc, #396]	; (8002424 <HAL_DMA_Start_IT+0x200>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d03b      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a62      	ldr	r2, [pc, #392]	; (8002428 <HAL_DMA_Start_IT+0x204>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d036      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a60      	ldr	r2, [pc, #384]	; (800242c <HAL_DMA_Start_IT+0x208>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <HAL_DMA_Start_IT+0x20c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d02c      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	; (8002434 <HAL_DMA_Start_IT+0x210>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d027      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_DMA_Start_IT+0x214>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5a      	ldr	r2, [pc, #360]	; (800243c <HAL_DMA_Start_IT+0x218>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01d      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a59      	ldr	r2, [pc, #356]	; (8002440 <HAL_DMA_Start_IT+0x21c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d018      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_DMA_Start_IT+0x220>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a56      	ldr	r2, [pc, #344]	; (8002448 <HAL_DMA_Start_IT+0x224>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00e      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a54      	ldr	r2, [pc, #336]	; (800244c <HAL_DMA_Start_IT+0x228>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a53      	ldr	r2, [pc, #332]	; (8002450 <HAL_DMA_Start_IT+0x22c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Start_IT+0xee>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a51      	ldr	r2, [pc, #324]	; (8002454 <HAL_DMA_Start_IT+0x230>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <HAL_DMA_Start_IT+0x100>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <HAL_DMA_Start_IT+0x110>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 fe6a 	bl	8004014 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a34      	ldr	r2, [pc, #208]	; (8002418 <HAL_DMA_Start_IT+0x1f4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a33      	ldr	r2, [pc, #204]	; (800241c <HAL_DMA_Start_IT+0x1f8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <HAL_DMA_Start_IT+0x1fc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a30      	ldr	r2, [pc, #192]	; (8002424 <HAL_DMA_Start_IT+0x200>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <HAL_DMA_Start_IT+0x204>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2d      	ldr	r2, [pc, #180]	; (800242c <HAL_DMA_Start_IT+0x208>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <HAL_DMA_Start_IT+0x20c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <HAL_DMA_Start_IT+0x210>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_DMA_Start_IT+0x214>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_DMA_Start_IT+0x218>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_DMA_Start_IT+0x21c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_DMA_Start_IT+0x220>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_DMA_Start_IT+0x224>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <HAL_DMA_Start_IT+0x228>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_DMA_Start_IT+0x22c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Start_IT+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_DMA_Start_IT+0x230>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Start_IT+0x1c0>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_Start_IT+0x1c2>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 021e 	bic.w	r2, r3, #30
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0216 	orr.w	r2, r2, #22
 80023fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03e      	beq.n	8002484 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0208 	orr.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e035      	b.n	8002484 <HAL_DMA_Start_IT+0x260>
 8002418:	40020010 	.word	0x40020010
 800241c:	40020028 	.word	0x40020028
 8002420:	40020040 	.word	0x40020040
 8002424:	40020058 	.word	0x40020058
 8002428:	40020070 	.word	0x40020070
 800242c:	40020088 	.word	0x40020088
 8002430:	400200a0 	.word	0x400200a0
 8002434:	400200b8 	.word	0x400200b8
 8002438:	40020410 	.word	0x40020410
 800243c:	40020428 	.word	0x40020428
 8002440:	40020440 	.word	0x40020440
 8002444:	40020458 	.word	0x40020458
 8002448:	40020470 	.word	0x40020470
 800244c:	40020488 	.word	0x40020488
 8002450:	400204a0 	.word	0x400204a0
 8002454:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 020e 	bic.w	r2, r3, #14
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 020a 	orr.w	r2, r2, #10
 800246a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a83      	ldr	r2, [pc, #524]	; (8002698 <HAL_DMA_Start_IT+0x474>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d072      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a82      	ldr	r2, [pc, #520]	; (800269c <HAL_DMA_Start_IT+0x478>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d06d      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a80      	ldr	r2, [pc, #512]	; (80026a0 <HAL_DMA_Start_IT+0x47c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d068      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7f      	ldr	r2, [pc, #508]	; (80026a4 <HAL_DMA_Start_IT+0x480>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d063      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a7d      	ldr	r2, [pc, #500]	; (80026a8 <HAL_DMA_Start_IT+0x484>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d05e      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7c      	ldr	r2, [pc, #496]	; (80026ac <HAL_DMA_Start_IT+0x488>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d059      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a7a      	ldr	r2, [pc, #488]	; (80026b0 <HAL_DMA_Start_IT+0x48c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d054      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a79      	ldr	r2, [pc, #484]	; (80026b4 <HAL_DMA_Start_IT+0x490>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04f      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a77      	ldr	r2, [pc, #476]	; (80026b8 <HAL_DMA_Start_IT+0x494>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04a      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a76      	ldr	r2, [pc, #472]	; (80026bc <HAL_DMA_Start_IT+0x498>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d045      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a74      	ldr	r2, [pc, #464]	; (80026c0 <HAL_DMA_Start_IT+0x49c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d040      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a73      	ldr	r2, [pc, #460]	; (80026c4 <HAL_DMA_Start_IT+0x4a0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03b      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a71      	ldr	r2, [pc, #452]	; (80026c8 <HAL_DMA_Start_IT+0x4a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a70      	ldr	r2, [pc, #448]	; (80026cc <HAL_DMA_Start_IT+0x4a8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d031      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_DMA_Start_IT+0x4ac>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02c      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6d      	ldr	r2, [pc, #436]	; (80026d4 <HAL_DMA_Start_IT+0x4b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <HAL_DMA_Start_IT+0x4b4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d022      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_DMA_Start_IT+0x4b8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a68      	ldr	r2, [pc, #416]	; (80026e0 <HAL_DMA_Start_IT+0x4bc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <HAL_DMA_Start_IT+0x4c0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_DMA_Start_IT+0x4c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_DMA_Start_IT+0x4c8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a62      	ldr	r2, [pc, #392]	; (80026f0 <HAL_DMA_Start_IT+0x4cc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a61      	ldr	r2, [pc, #388]	; (80026f4 <HAL_DMA_Start_IT+0x4d0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Start_IT+0x354>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_DMA_Start_IT+0x356>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01a      	beq.n	80025b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a37      	ldr	r2, [pc, #220]	; (8002698 <HAL_DMA_Start_IT+0x474>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a36      	ldr	r2, [pc, #216]	; (800269c <HAL_DMA_Start_IT+0x478>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <HAL_DMA_Start_IT+0x47c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <HAL_DMA_Start_IT+0x480>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_DMA_Start_IT+0x484>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_DMA_Start_IT+0x488>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2e      	ldr	r2, [pc, #184]	; (80026b0 <HAL_DMA_Start_IT+0x48c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_DMA_Start_IT+0x490>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_DMA_Start_IT+0x494>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <HAL_DMA_Start_IT+0x498>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_DMA_Start_IT+0x49c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_DMA_Start_IT+0x4a0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <HAL_DMA_Start_IT+0x4a4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_DMA_Start_IT+0x4a8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_DMA_Start_IT+0x4ac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Start_IT+0x430>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_DMA_Start_IT+0x4b0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <HAL_DMA_Start_IT+0x442>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e012      	b.n	800268c <HAL_DMA_Start_IT+0x468>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e009      	b.n	800268c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800267e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40020010 	.word	0x40020010
 800269c:	40020028 	.word	0x40020028
 80026a0:	40020040 	.word	0x40020040
 80026a4:	40020058 	.word	0x40020058
 80026a8:	40020070 	.word	0x40020070
 80026ac:	40020088 	.word	0x40020088
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	400200b8 	.word	0x400200b8
 80026b8:	40020410 	.word	0x40020410
 80026bc:	40020428 	.word	0x40020428
 80026c0:	40020440 	.word	0x40020440
 80026c4:	40020458 	.word	0x40020458
 80026c8:	40020470 	.word	0x40020470
 80026cc:	40020488 	.word	0x40020488
 80026d0:	400204a0 	.word	0x400204a0
 80026d4:	400204b8 	.word	0x400204b8
 80026d8:	58025408 	.word	0x58025408
 80026dc:	5802541c 	.word	0x5802541c
 80026e0:	58025430 	.word	0x58025430
 80026e4:	58025444 	.word	0x58025444
 80026e8:	58025458 	.word	0x58025458
 80026ec:	5802546c 	.word	0x5802546c
 80026f0:	58025480 	.word	0x58025480
 80026f4:	58025494 	.word	0x58025494

080026f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff f93c 	bl	800197c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2dc      	b.n	8002cca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d008      	beq.n	800272e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e2cd      	b.n	8002cca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_DMA_Abort+0x214>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a74      	ldr	r2, [pc, #464]	; (8002910 <HAL_DMA_Abort+0x218>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <HAL_DMA_Abort+0x21c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a71      	ldr	r2, [pc, #452]	; (8002918 <HAL_DMA_Abort+0x220>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a70      	ldr	r2, [pc, #448]	; (800291c <HAL_DMA_Abort+0x224>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6e      	ldr	r2, [pc, #440]	; (8002920 <HAL_DMA_Abort+0x228>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_DMA_Abort+0x22c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_DMA_Abort+0x230>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_DMA_Abort+0x234>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a68      	ldr	r2, [pc, #416]	; (8002930 <HAL_DMA_Abort+0x238>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_DMA_Abort+0x23c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_DMA_Abort+0x240>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_DMA_Abort+0x244>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a62      	ldr	r2, [pc, #392]	; (8002940 <HAL_DMA_Abort+0x248>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_DMA_Abort+0x24c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5f      	ldr	r2, [pc, #380]	; (8002948 <HAL_DMA_Abort+0x250>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_Abort+0xda>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_Abort+0xdc>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 021e 	bic.w	r2, r2, #30
 80027e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e00a      	b.n	8002816 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 020e 	bic.w	r2, r2, #14
 800280e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3c      	ldr	r2, [pc, #240]	; (800290c <HAL_DMA_Abort+0x214>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d072      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_DMA_Abort+0x218>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d06d      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a39      	ldr	r2, [pc, #228]	; (8002914 <HAL_DMA_Abort+0x21c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d068      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_DMA_Abort+0x220>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d063      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a36      	ldr	r2, [pc, #216]	; (800291c <HAL_DMA_Abort+0x224>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a34      	ldr	r2, [pc, #208]	; (8002920 <HAL_DMA_Abort+0x228>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d059      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <HAL_DMA_Abort+0x22c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d054      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_DMA_Abort+0x230>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d04f      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_DMA_Abort+0x234>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <HAL_DMA_Abort+0x238>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_DMA_Abort+0x23c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_DMA_Abort+0x240>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2a      	ldr	r2, [pc, #168]	; (800293c <HAL_DMA_Abort+0x244>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_DMA_Abort+0x248>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_DMA_Abort+0x24c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_DMA_Abort+0x250>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_DMA_Abort+0x254>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_Abort+0x258>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_DMA_Abort+0x25c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_Abort+0x260>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_DMA_Abort+0x264>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_DMA_Abort+0x268>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_DMA_Abort+0x26c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_DMA_Abort+0x270>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d132      	bne.n	800296c <HAL_DMA_Abort+0x274>
 8002906:	2301      	movs	r3, #1
 8002908:	e031      	b.n	800296e <HAL_DMA_Abort+0x276>
 800290a:	bf00      	nop
 800290c:	40020010 	.word	0x40020010
 8002910:	40020028 	.word	0x40020028
 8002914:	40020040 	.word	0x40020040
 8002918:	40020058 	.word	0x40020058
 800291c:	40020070 	.word	0x40020070
 8002920:	40020088 	.word	0x40020088
 8002924:	400200a0 	.word	0x400200a0
 8002928:	400200b8 	.word	0x400200b8
 800292c:	40020410 	.word	0x40020410
 8002930:	40020428 	.word	0x40020428
 8002934:	40020440 	.word	0x40020440
 8002938:	40020458 	.word	0x40020458
 800293c:	40020470 	.word	0x40020470
 8002940:	40020488 	.word	0x40020488
 8002944:	400204a0 	.word	0x400204a0
 8002948:	400204b8 	.word	0x400204b8
 800294c:	58025408 	.word	0x58025408
 8002950:	5802541c 	.word	0x5802541c
 8002954:	58025430 	.word	0x58025430
 8002958:	58025444 	.word	0x58025444
 800295c:	58025458 	.word	0x58025458
 8002960:	5802546c 	.word	0x5802546c
 8002964:	58025480 	.word	0x58025480
 8002968:	58025494 	.word	0x58025494
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002980:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6d      	ldr	r2, [pc, #436]	; (8002b3c <HAL_DMA_Abort+0x444>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_DMA_Abort+0x448>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_DMA_Abort+0x44c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_DMA_Abort+0x450>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a67      	ldr	r2, [pc, #412]	; (8002b4c <HAL_DMA_Abort+0x454>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_DMA_Abort+0x458>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <HAL_DMA_Abort+0x45c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a62      	ldr	r2, [pc, #392]	; (8002b58 <HAL_DMA_Abort+0x460>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_DMA_Abort+0x464>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5f      	ldr	r2, [pc, #380]	; (8002b60 <HAL_DMA_Abort+0x468>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5e      	ldr	r2, [pc, #376]	; (8002b64 <HAL_DMA_Abort+0x46c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5c      	ldr	r2, [pc, #368]	; (8002b68 <HAL_DMA_Abort+0x470>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5b      	ldr	r2, [pc, #364]	; (8002b6c <HAL_DMA_Abort+0x474>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a59      	ldr	r2, [pc, #356]	; (8002b70 <HAL_DMA_Abort+0x478>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_DMA_Abort+0x47c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_DMA_Abort+0x480>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <HAL_DMA_Abort+0x33c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e007      	b.n	8002a44 <HAL_DMA_Abort+0x34c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a44:	e013      	b.n	8002a6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a46:	f7fe ff99 	bl	800197c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d90c      	bls.n	8002a6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e12d      	b.n	8002cca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e5      	bne.n	8002a46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <HAL_DMA_Abort+0x444>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_DMA_Abort+0x448>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <HAL_DMA_Abort+0x44c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_DMA_Abort+0x450>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_DMA_Abort+0x454>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_DMA_Abort+0x458>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <HAL_DMA_Abort+0x45c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_DMA_Abort+0x460>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <HAL_DMA_Abort+0x464>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_DMA_Abort+0x468>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <HAL_DMA_Abort+0x46c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_DMA_Abort+0x470>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_DMA_Abort+0x474>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_DMA_Abort+0x478>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_DMA_Abort+0x47c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_DMA_Abort+0x480>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Abort+0x426>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_Abort+0x428>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02b      	beq.n	8002b7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	223f      	movs	r2, #63	; 0x3f
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e02a      	b.n	8002b92 <HAL_DMA_Abort+0x49a>
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4f      	ldr	r2, [pc, #316]	; (8002cd4 <HAL_DMA_Abort+0x5dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d072      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_DMA_Abort+0x5e0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d06d      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <HAL_DMA_Abort+0x5e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d068      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_DMA_Abort+0x5e8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d063      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a49      	ldr	r2, [pc, #292]	; (8002ce4 <HAL_DMA_Abort+0x5ec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d05e      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_DMA_Abort+0x5f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d059      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_DMA_Abort+0x5f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d054      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a44      	ldr	r2, [pc, #272]	; (8002cf0 <HAL_DMA_Abort+0x5f8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d04f      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <HAL_DMA_Abort+0x5fc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <HAL_DMA_Abort+0x600>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <HAL_DMA_Abort+0x604>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <HAL_DMA_Abort+0x608>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <HAL_DMA_Abort+0x60c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_DMA_Abort+0x610>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <HAL_DMA_Abort+0x614>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_DMA_Abort+0x618>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a37      	ldr	r2, [pc, #220]	; (8002d14 <HAL_DMA_Abort+0x61c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a35      	ldr	r2, [pc, #212]	; (8002d18 <HAL_DMA_Abort+0x620>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <HAL_DMA_Abort+0x624>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_DMA_Abort+0x628>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <HAL_DMA_Abort+0x62c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_DMA_Abort+0x630>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_DMA_Abort+0x634>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_DMA_Abort+0x638>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Abort+0x58e>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_Abort+0x590>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c94:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cb6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40020010 	.word	0x40020010
 8002cd8:	40020028 	.word	0x40020028
 8002cdc:	40020040 	.word	0x40020040
 8002ce0:	40020058 	.word	0x40020058
 8002ce4:	40020070 	.word	0x40020070
 8002ce8:	40020088 	.word	0x40020088
 8002cec:	400200a0 	.word	0x400200a0
 8002cf0:	400200b8 	.word	0x400200b8
 8002cf4:	40020410 	.word	0x40020410
 8002cf8:	40020428 	.word	0x40020428
 8002cfc:	40020440 	.word	0x40020440
 8002d00:	40020458 	.word	0x40020458
 8002d04:	40020470 	.word	0x40020470
 8002d08:	40020488 	.word	0x40020488
 8002d0c:	400204a0 	.word	0x400204a0
 8002d10:	400204b8 	.word	0x400204b8
 8002d14:	58025408 	.word	0x58025408
 8002d18:	5802541c 	.word	0x5802541c
 8002d1c:	58025430 	.word	0x58025430
 8002d20:	58025444 	.word	0x58025444
 8002d24:	58025458 	.word	0x58025458
 8002d28:	5802546c 	.word	0x5802546c
 8002d2c:	58025480 	.word	0x58025480
 8002d30:	58025494 	.word	0x58025494

08002d34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e237      	b.n	80031b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d004      	beq.n	8002d5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e22c      	b.n	80031b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_DMA_Abort_IT+0x1a0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d04a      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_DMA_Abort_IT+0x1a4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d045      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a59      	ldr	r2, [pc, #356]	; (8002edc <HAL_DMA_Abort_IT+0x1a8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d040      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_DMA_Abort_IT+0x1ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d03b      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_DMA_Abort_IT+0x1b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d036      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_DMA_Abort_IT+0x1b4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a53      	ldr	r2, [pc, #332]	; (8002eec <HAL_DMA_Abort_IT+0x1b8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02c      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_DMA_Abort_IT+0x1bc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d027      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_DMA_Abort_IT+0x1c0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_DMA_Abort_IT+0x1c4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01d      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a4d      	ldr	r2, [pc, #308]	; (8002efc <HAL_DMA_Abort_IT+0x1c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_DMA_Abort_IT+0x1cc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_DMA_Abort_IT+0x1d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a49      	ldr	r2, [pc, #292]	; (8002f08 <HAL_DMA_Abort_IT+0x1d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_DMA_Abort_IT+0x1d8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <HAL_DMA_Abort_IT+0x1dc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Abort_IT+0xcc>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_DMA_Abort_IT+0xce>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8086 	beq.w	8002f14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <HAL_DMA_Abort_IT+0x1a0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04a      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_DMA_Abort_IT+0x1a4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d045      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <HAL_DMA_Abort_IT+0x1a8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HAL_DMA_Abort_IT+0x1ac>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d03b      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_DMA_Abort_IT+0x1b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_DMA_Abort_IT+0x1b4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_DMA_Abort_IT+0x1b8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02c      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_DMA_Abort_IT+0x1bc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d027      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_DMA_Abort_IT+0x1c0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_DMA_Abort_IT+0x1c4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01d      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a20      	ldr	r2, [pc, #128]	; (8002efc <HAL_DMA_Abort_IT+0x1c8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d018      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_DMA_Abort_IT+0x1cc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_DMA_Abort_IT+0x1d0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_DMA_Abort_IT+0x1d4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <HAL_DMA_Abort_IT+0x1d8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_DMA_Abort_IT+0x1dc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d108      	bne.n	8002ec2 <HAL_DMA_Abort_IT+0x18e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e178      	b.n	80031b4 <HAL_DMA_Abort_IT+0x480>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e16f      	b.n	80031b4 <HAL_DMA_Abort_IT+0x480>
 8002ed4:	40020010 	.word	0x40020010
 8002ed8:	40020028 	.word	0x40020028
 8002edc:	40020040 	.word	0x40020040
 8002ee0:	40020058 	.word	0x40020058
 8002ee4:	40020070 	.word	0x40020070
 8002ee8:	40020088 	.word	0x40020088
 8002eec:	400200a0 	.word	0x400200a0
 8002ef0:	400200b8 	.word	0x400200b8
 8002ef4:	40020410 	.word	0x40020410
 8002ef8:	40020428 	.word	0x40020428
 8002efc:	40020440 	.word	0x40020440
 8002f00:	40020458 	.word	0x40020458
 8002f04:	40020470 	.word	0x40020470
 8002f08:	40020488 	.word	0x40020488
 8002f0c:	400204a0 	.word	0x400204a0
 8002f10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 020e 	bic.w	r2, r2, #14
 8002f22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6c      	ldr	r2, [pc, #432]	; (80030dc <HAL_DMA_Abort_IT+0x3a8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6b      	ldr	r2, [pc, #428]	; (80030e0 <HAL_DMA_Abort_IT+0x3ac>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_DMA_Abort_IT+0x3b0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a68      	ldr	r2, [pc, #416]	; (80030e8 <HAL_DMA_Abort_IT+0x3b4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a66      	ldr	r2, [pc, #408]	; (80030ec <HAL_DMA_Abort_IT+0x3b8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_DMA_Abort_IT+0x3bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a63      	ldr	r2, [pc, #396]	; (80030f4 <HAL_DMA_Abort_IT+0x3c0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a62      	ldr	r2, [pc, #392]	; (80030f8 <HAL_DMA_Abort_IT+0x3c4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a60      	ldr	r2, [pc, #384]	; (80030fc <HAL_DMA_Abort_IT+0x3c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5f      	ldr	r2, [pc, #380]	; (8003100 <HAL_DMA_Abort_IT+0x3cc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5d      	ldr	r2, [pc, #372]	; (8003104 <HAL_DMA_Abort_IT+0x3d0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5c      	ldr	r2, [pc, #368]	; (8003108 <HAL_DMA_Abort_IT+0x3d4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_DMA_Abort_IT+0x3d8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a59      	ldr	r2, [pc, #356]	; (8003110 <HAL_DMA_Abort_IT+0x3dc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a57      	ldr	r2, [pc, #348]	; (8003114 <HAL_DMA_Abort_IT+0x3e0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_DMA_Abort_IT+0x3e4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d108      	bne.n	8002fd6 <HAL_DMA_Abort_IT+0x2a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e007      	b.n	8002fe6 <HAL_DMA_Abort_IT+0x2b2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <HAL_DMA_Abort_IT+0x3a8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d072      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <HAL_DMA_Abort_IT+0x3ac>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d06d      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_DMA_Abort_IT+0x3b0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d068      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a37      	ldr	r2, [pc, #220]	; (80030e8 <HAL_DMA_Abort_IT+0x3b4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d063      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a36      	ldr	r2, [pc, #216]	; (80030ec <HAL_DMA_Abort_IT+0x3b8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d05e      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a34      	ldr	r2, [pc, #208]	; (80030f0 <HAL_DMA_Abort_IT+0x3bc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d059      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a33      	ldr	r2, [pc, #204]	; (80030f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d054      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d04f      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a30      	ldr	r2, [pc, #192]	; (80030fc <HAL_DMA_Abort_IT+0x3c8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2e      	ldr	r2, [pc, #184]	; (8003100 <HAL_DMA_Abort_IT+0x3cc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <HAL_DMA_Abort_IT+0x3d0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <HAL_DMA_Abort_IT+0x3d4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2a      	ldr	r2, [pc, #168]	; (800310c <HAL_DMA_Abort_IT+0x3d8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_DMA_Abort_IT+0x3dc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_DMA_Abort_IT+0x3e0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a25      	ldr	r2, [pc, #148]	; (8003118 <HAL_DMA_Abort_IT+0x3e4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a24      	ldr	r2, [pc, #144]	; (800311c <HAL_DMA_Abort_IT+0x3e8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <HAL_DMA_Abort_IT+0x3ec>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <HAL_DMA_Abort_IT+0x3f0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <HAL_DMA_Abort_IT+0x3f4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1e      	ldr	r2, [pc, #120]	; (800312c <HAL_DMA_Abort_IT+0x3f8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_DMA_Abort_IT+0x3fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_DMA_Abort_IT+0x400>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_DMA_Abort_IT+0x404>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d132      	bne.n	800313c <HAL_DMA_Abort_IT+0x408>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e031      	b.n	800313e <HAL_DMA_Abort_IT+0x40a>
 80030da:	bf00      	nop
 80030dc:	40020010 	.word	0x40020010
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40020040 	.word	0x40020040
 80030e8:	40020058 	.word	0x40020058
 80030ec:	40020070 	.word	0x40020070
 80030f0:	40020088 	.word	0x40020088
 80030f4:	400200a0 	.word	0x400200a0
 80030f8:	400200b8 	.word	0x400200b8
 80030fc:	40020410 	.word	0x40020410
 8003100:	40020428 	.word	0x40020428
 8003104:	40020440 	.word	0x40020440
 8003108:	40020458 	.word	0x40020458
 800310c:	40020470 	.word	0x40020470
 8003110:	40020488 	.word	0x40020488
 8003114:	400204a0 	.word	0x400204a0
 8003118:	400204b8 	.word	0x400204b8
 800311c:	58025408 	.word	0x58025408
 8003120:	5802541c 	.word	0x5802541c
 8003124:	58025430 	.word	0x58025430
 8003128:	58025444 	.word	0x58025444
 800312c:	58025458 	.word	0x58025458
 8003130:	5802546c 	.word	0x5802546c
 8003134:	58025480 	.word	0x58025480
 8003138:	58025494 	.word	0x58025494
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003150:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003170:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003188:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003192:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031cc:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_DMA_IRQHandler+0x1ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a67      	ldr	r2, [pc, #412]	; (8003370 <HAL_DMA_IRQHandler+0x1b0>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5f      	ldr	r2, [pc, #380]	; (8003374 <HAL_DMA_IRQHandler+0x1b4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <HAL_DMA_IRQHandler+0x1b8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5c      	ldr	r2, [pc, #368]	; (800337c <HAL_DMA_IRQHandler+0x1bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5a      	ldr	r2, [pc, #360]	; (8003380 <HAL_DMA_IRQHandler+0x1c0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a59      	ldr	r2, [pc, #356]	; (8003384 <HAL_DMA_IRQHandler+0x1c4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a57      	ldr	r2, [pc, #348]	; (8003388 <HAL_DMA_IRQHandler+0x1c8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a56      	ldr	r2, [pc, #344]	; (800338c <HAL_DMA_IRQHandler+0x1cc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <HAL_DMA_IRQHandler+0x1d0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a53      	ldr	r2, [pc, #332]	; (8003394 <HAL_DMA_IRQHandler+0x1d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_DMA_IRQHandler+0x1d8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_DMA_IRQHandler+0x1dc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4d      	ldr	r2, [pc, #308]	; (80033a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4b      	ldr	r2, [pc, #300]	; (80033a8 <HAL_DMA_IRQHandler+0x1e8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4a      	ldr	r2, [pc, #296]	; (80033ac <HAL_DMA_IRQHandler+0x1ec>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a48      	ldr	r2, [pc, #288]	; (80033b0 <HAL_DMA_IRQHandler+0x1f0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_DMA_IRQHandler+0xd6>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_DMA_IRQHandler+0xd8>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 842b 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2208      	movs	r2, #8
 80032a8:	409a      	lsls	r2, r3
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80a2 	beq.w	80033f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2e      	ldr	r2, [pc, #184]	; (8003374 <HAL_DMA_IRQHandler+0x1b4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <HAL_DMA_IRQHandler+0x1b8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <HAL_DMA_IRQHandler+0x1bc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d040      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <HAL_DMA_IRQHandler+0x1c0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_DMA_IRQHandler+0x1c4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a27      	ldr	r2, [pc, #156]	; (8003388 <HAL_DMA_IRQHandler+0x1c8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <HAL_DMA_IRQHandler+0x1cc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <HAL_DMA_IRQHandler+0x1d0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d027      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_DMA_IRQHandler+0x1d4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <HAL_DMA_IRQHandler+0x1d8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01d      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <HAL_DMA_IRQHandler+0x1dc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_DMA_IRQHandler+0x1e8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_DMA_IRQHandler+0x1ec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d12f      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x1f4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	e02e      	b.n	80033c8 <HAL_DMA_IRQHandler+0x208>
 800336a:	bf00      	nop
 800336c:	24000000 	.word	0x24000000
 8003370:	1b4e81b5 	.word	0x1b4e81b5
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d06e      	beq.n	80034ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04a      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_DMA_IRQHandler+0x3fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d045      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a66      	ldr	r2, [pc, #408]	; (80035c0 <HAL_DMA_IRQHandler+0x400>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <HAL_DMA_IRQHandler+0x404>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03b      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_DMA_IRQHandler+0x408>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d036      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a61      	ldr	r2, [pc, #388]	; (80035cc <HAL_DMA_IRQHandler+0x40c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_DMA_IRQHandler+0x410>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d02c      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <HAL_DMA_IRQHandler+0x414>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d027      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <HAL_DMA_IRQHandler+0x418>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_DMA_IRQHandler+0x41c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_DMA_IRQHandler+0x420>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_DMA_IRQHandler+0x424>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a57      	ldr	r2, [pc, #348]	; (80035e8 <HAL_DMA_IRQHandler+0x428>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_DMA_IRQHandler+0x42c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a54      	ldr	r2, [pc, #336]	; (80035f0 <HAL_DMA_IRQHandler+0x430>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_DMA_IRQHandler+0x434>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10a      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x304>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e003      	b.n	80034cc <HAL_DMA_IRQHandler+0x30c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0202 	orr.w	r2, r3, #2
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2204      	movs	r2, #4
 80034f6:	409a      	lsls	r2, r3
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 808f 	beq.w	8003620 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_DMA_IRQHandler+0x3fc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <HAL_DMA_IRQHandler+0x400>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <HAL_DMA_IRQHandler+0x404>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_DMA_IRQHandler+0x408>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <HAL_DMA_IRQHandler+0x40c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <HAL_DMA_IRQHandler+0x410>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_DMA_IRQHandler+0x414>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_DMA_IRQHandler+0x418>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_DMA_IRQHandler+0x41c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_DMA_IRQHandler+0x420>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_DMA_IRQHandler+0x424>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_DMA_IRQHandler+0x428>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_DMA_IRQHandler+0x42c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_DMA_IRQHandler+0x430>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_DMA_IRQHandler+0x434>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d12a      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x438>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e023      	b.n	8003600 <HAL_DMA_IRQHandler+0x440>
 80035b8:	40020010 	.word	0x40020010
 80035bc:	40020028 	.word	0x40020028
 80035c0:	40020040 	.word	0x40020040
 80035c4:	40020058 	.word	0x40020058
 80035c8:	40020070 	.word	0x40020070
 80035cc:	40020088 	.word	0x40020088
 80035d0:	400200a0 	.word	0x400200a0
 80035d4:	400200b8 	.word	0x400200b8
 80035d8:	40020410 	.word	0x40020410
 80035dc:	40020428 	.word	0x40020428
 80035e0:	40020440 	.word	0x40020440
 80035e4:	40020458 	.word	0x40020458
 80035e8:	40020470 	.word	0x40020470
 80035ec:	40020488 	.word	0x40020488
 80035f0:	400204a0 	.word	0x400204a0
 80035f4:	400204b8 	.word	0x400204b8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2204      	movs	r2, #4
 800360e:	409a      	lsls	r2, r3
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2210      	movs	r2, #16
 800362a:	409a      	lsls	r2, r3
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a6 	beq.w	8003782 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a85      	ldr	r2, [pc, #532]	; (8003850 <HAL_DMA_IRQHandler+0x690>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d04a      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a83      	ldr	r2, [pc, #524]	; (8003854 <HAL_DMA_IRQHandler+0x694>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d045      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a82      	ldr	r2, [pc, #520]	; (8003858 <HAL_DMA_IRQHandler+0x698>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d040      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_DMA_IRQHandler+0x69c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d03b      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_DMA_IRQHandler+0x6a0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d036      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_DMA_IRQHandler+0x6a4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_DMA_IRQHandler+0x6a8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d02c      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_DMA_IRQHandler+0x6ac>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d027      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a79      	ldr	r2, [pc, #484]	; (8003870 <HAL_DMA_IRQHandler+0x6b0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a77      	ldr	r2, [pc, #476]	; (8003874 <HAL_DMA_IRQHandler+0x6b4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_DMA_IRQHandler+0x6b8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a74      	ldr	r2, [pc, #464]	; (800387c <HAL_DMA_IRQHandler+0x6bc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a73      	ldr	r2, [pc, #460]	; (8003880 <HAL_DMA_IRQHandler+0x6c0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a71      	ldr	r2, [pc, #452]	; (8003884 <HAL_DMA_IRQHandler+0x6c4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a70      	ldr	r2, [pc, #448]	; (8003888 <HAL_DMA_IRQHandler+0x6c8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_DMA_IRQHandler+0x6cc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10a      	bne.n	80036ec <HAL_DMA_IRQHandler+0x52c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e009      	b.n	8003700 <HAL_DMA_IRQHandler+0x540>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03e      	beq.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2210      	movs	r2, #16
 800370e:	409a      	lsls	r2, r3
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d024      	beq.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
 8003740:	e01f      	b.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01b      	beq.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e016      	b.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0208 	bic.w	r2, r2, #8
 8003770:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8110 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <HAL_DMA_IRQHandler+0x690>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <HAL_DMA_IRQHandler+0x694>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_DMA_IRQHandler+0x698>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a28      	ldr	r2, [pc, #160]	; (800385c <HAL_DMA_IRQHandler+0x69c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_DMA_IRQHandler+0x6a0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a25      	ldr	r2, [pc, #148]	; (8003864 <HAL_DMA_IRQHandler+0x6a4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <HAL_DMA_IRQHandler+0x6a8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a22      	ldr	r2, [pc, #136]	; (800386c <HAL_DMA_IRQHandler+0x6ac>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <HAL_DMA_IRQHandler+0x6b0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_DMA_IRQHandler+0x6b4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_DMA_IRQHandler+0x6b8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_DMA_IRQHandler+0x6bc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_DMA_IRQHandler+0x6c0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_DMA_IRQHandler+0x6c4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_DMA_IRQHandler+0x6c8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_DMA_IRQHandler+0x6cc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d12b      	bne.n	8003890 <HAL_DMA_IRQHandler+0x6d0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e02a      	b.n	80038a4 <HAL_DMA_IRQHandler+0x6e4>
 800384e:	bf00      	nop
 8003850:	40020010 	.word	0x40020010
 8003854:	40020028 	.word	0x40020028
 8003858:	40020040 	.word	0x40020040
 800385c:	40020058 	.word	0x40020058
 8003860:	40020070 	.word	0x40020070
 8003864:	40020088 	.word	0x40020088
 8003868:	400200a0 	.word	0x400200a0
 800386c:	400200b8 	.word	0x400200b8
 8003870:	40020410 	.word	0x40020410
 8003874:	40020428 	.word	0x40020428
 8003878:	40020440 	.word	0x40020440
 800387c:	40020458 	.word	0x40020458
 8003880:	40020470 	.word	0x40020470
 8003884:	40020488 	.word	0x40020488
 8003888:	400204a0 	.word	0x400204a0
 800388c:	400204b8 	.word	0x400204b8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8087 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2220      	movs	r2, #32
 80038b4:	409a      	lsls	r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d139      	bne.n	800393a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0216 	bic.w	r2, r2, #22
 80038d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x736>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0208 	bic.w	r2, r2, #8
 8003904:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	223f      	movs	r2, #63	; 0x3f
 8003910:	409a      	lsls	r2, r3
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 834a 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
          }
          return;
 8003938:	e344      	b.n	8003fc4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	2b00      	cmp	r3, #0
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e027      	b.n	80039b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e01e      	b.n	80039b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0210 	bic.w	r2, r2, #16
 8003996:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8306 	beq.w	8003fce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8088 	beq.w	8003ae0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2204      	movs	r2, #4
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7a      	ldr	r2, [pc, #488]	; (8003bc8 <HAL_DMA_IRQHandler+0xa08>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d04a      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a79      	ldr	r2, [pc, #484]	; (8003bcc <HAL_DMA_IRQHandler+0xa0c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d045      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_DMA_IRQHandler+0xa10>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d040      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a76      	ldr	r2, [pc, #472]	; (8003bd4 <HAL_DMA_IRQHandler+0xa14>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d03b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a74      	ldr	r2, [pc, #464]	; (8003bd8 <HAL_DMA_IRQHandler+0xa18>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d036      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	; (8003bdc <HAL_DMA_IRQHandler+0xa1c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d031      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <HAL_DMA_IRQHandler+0xa20>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a70      	ldr	r2, [pc, #448]	; (8003be4 <HAL_DMA_IRQHandler+0xa24>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d027      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_DMA_IRQHandler+0xa28>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_DMA_IRQHandler+0xa2c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01d      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_DMA_IRQHandler+0xa30>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_DMA_IRQHandler+0xa34>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_DMA_IRQHandler+0xa38>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a67      	ldr	r2, [pc, #412]	; (8003bfc <HAL_DMA_IRQHandler+0xa3c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_DMA_IRQHandler+0xa40>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a64      	ldr	r2, [pc, #400]	; (8003c04 <HAL_DMA_IRQHandler+0xa44>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d108      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x8ca>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	e007      	b.n	8003a9a <HAL_DMA_IRQHandler+0x8da>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d307      	bcc.n	8003ab6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f2      	bne.n	8003a9a <HAL_DMA_IRQHandler+0x8da>
 8003ab4:	e000      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ab6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ace:	e003      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8272 	beq.w	8003fce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
 8003af2:	e26c      	b.n	8003fce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a43      	ldr	r2, [pc, #268]	; (8003c08 <HAL_DMA_IRQHandler+0xa48>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_DMA_IRQHandler+0xa4c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d01d      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <HAL_DMA_IRQHandler+0xa50>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <HAL_DMA_IRQHandler+0xa54>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3d      	ldr	r2, [pc, #244]	; (8003c18 <HAL_DMA_IRQHandler+0xa58>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <HAL_DMA_IRQHandler+0xa5c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <HAL_DMA_IRQHandler+0xa60>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x984>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <HAL_DMA_IRQHandler+0xa64>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x988>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_DMA_IRQHandler+0x98a>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 823f 	beq.w	8003fce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2204      	movs	r2, #4
 8003b62:	409a      	lsls	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80cd 	beq.w	8003d08 <HAL_DMA_IRQHandler+0xb48>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80c7 	beq.w	8003d08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2204      	movs	r2, #4
 8003b84:	409a      	lsls	r2, r3
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d049      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8210 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb0:	e20a      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8206 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc4:	e200      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xe08>
 8003bc6:	bf00      	nop
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	58025408 	.word	0x58025408
 8003c0c:	5802541c 	.word	0x5802541c
 8003c10:	58025430 	.word	0x58025430
 8003c14:	58025444 	.word	0x58025444
 8003c18:	58025458 	.word	0x58025458
 8003c1c:	5802546c 	.word	0x5802546c
 8003c20:	58025480 	.word	0x58025480
 8003c24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d160      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7f      	ldr	r2, [pc, #508]	; (8003e34 <HAL_DMA_IRQHandler+0xc74>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7d      	ldr	r2, [pc, #500]	; (8003e38 <HAL_DMA_IRQHandler+0xc78>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_DMA_IRQHandler+0xc7c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_DMA_IRQHandler+0xc80>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a79      	ldr	r2, [pc, #484]	; (8003e44 <HAL_DMA_IRQHandler+0xc84>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <HAL_DMA_IRQHandler+0xc88>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_DMA_IRQHandler+0xc8c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <HAL_DMA_IRQHandler+0xc90>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a73      	ldr	r2, [pc, #460]	; (8003e54 <HAL_DMA_IRQHandler+0xc94>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_DMA_IRQHandler+0xc98>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a70      	ldr	r2, [pc, #448]	; (8003e5c <HAL_DMA_IRQHandler+0xc9c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_DMA_IRQHandler+0xca0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <HAL_DMA_IRQHandler+0xca4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <HAL_DMA_IRQHandler+0xca8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_DMA_IRQHandler+0xcac>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xb12>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_DMA_IRQHandler+0xcb0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0xb24>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0208 	bic.w	r2, r2, #8
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <HAL_DMA_IRQHandler+0xb34>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8165 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d06:	e15f      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2202      	movs	r2, #2
 8003d12:	409a      	lsls	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80c5 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0xce8>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80bf 	beq.w	8003ea8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2202      	movs	r2, #2
 8003d34:	409a      	lsls	r2, r3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 813a 	beq.w	8003fcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d60:	e134      	b.n	8003fcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8130 	beq.w	8003fcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d74:	e12a      	b.n	8003fcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 8089 	bne.w	8003e94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_DMA_IRQHandler+0xc74>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_IRQHandler+0xc78>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_DMA_IRQHandler+0xc7c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_IRQHandler+0xc80>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <HAL_DMA_IRQHandler+0xc84>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_DMA_IRQHandler+0xc88>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_IRQHandler+0xc8c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_DMA_IRQHandler+0xc90>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_DMA_IRQHandler+0xc94>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_DMA_IRQHandler+0xc98>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_DMA_IRQHandler+0xc9c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_DMA_IRQHandler+0xca0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_DMA_IRQHandler+0xca4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_DMA_IRQHandler+0xca8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_DMA_IRQHandler+0xcac>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xc62>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <HAL_DMA_IRQHandler+0xcb0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d128      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xcb4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0214 	bic.w	r2, r2, #20
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e027      	b.n	8003e84 <HAL_DMA_IRQHandler+0xcc4>
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020a 	bic.w	r2, r2, #10
 8003e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8097 	beq.w	8003fcc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea6:	e091      	b.n	8003fcc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8088 	beq.w	8003fce <HAL_DMA_IRQHandler+0xe0e>
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8082 	beq.w	8003fce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a41      	ldr	r2, [pc, #260]	; (8003fd4 <HAL_DMA_IRQHandler+0xe14>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d04a      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3f      	ldr	r2, [pc, #252]	; (8003fd8 <HAL_DMA_IRQHandler+0xe18>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d045      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	; (8003fdc <HAL_DMA_IRQHandler+0xe1c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d040      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <HAL_DMA_IRQHandler+0xe20>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <HAL_DMA_IRQHandler+0xe24>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d036      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a39      	ldr	r2, [pc, #228]	; (8003fe8 <HAL_DMA_IRQHandler+0xe28>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_DMA_IRQHandler+0xe2c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d02c      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a36      	ldr	r2, [pc, #216]	; (8003ff0 <HAL_DMA_IRQHandler+0xe30>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d027      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a35      	ldr	r2, [pc, #212]	; (8003ff4 <HAL_DMA_IRQHandler+0xe34>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <HAL_DMA_IRQHandler+0xe38>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01d      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a32      	ldr	r2, [pc, #200]	; (8003ffc <HAL_DMA_IRQHandler+0xe3c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a30      	ldr	r2, [pc, #192]	; (8004000 <HAL_DMA_IRQHandler+0xe40>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <HAL_DMA_IRQHandler+0xe44>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <HAL_DMA_IRQHandler+0xe48>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2c      	ldr	r2, [pc, #176]	; (800400c <HAL_DMA_IRQHandler+0xe4c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xdaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <HAL_DMA_IRQHandler+0xe50>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <HAL_DMA_IRQHandler+0xdbc>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 021c 	bic.w	r2, r2, #28
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e007      	b.n	8003f8c <HAL_DMA_IRQHandler+0xdcc>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 020e 	bic.w	r2, r2, #14
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e004      	b.n	8003fce <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fcc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40020010 	.word	0x40020010
 8003fd8:	40020028 	.word	0x40020028
 8003fdc:	40020040 	.word	0x40020040
 8003fe0:	40020058 	.word	0x40020058
 8003fe4:	40020070 	.word	0x40020070
 8003fe8:	40020088 	.word	0x40020088
 8003fec:	400200a0 	.word	0x400200a0
 8003ff0:	400200b8 	.word	0x400200b8
 8003ff4:	40020410 	.word	0x40020410
 8003ff8:	40020428 	.word	0x40020428
 8003ffc:	40020440 	.word	0x40020440
 8004000:	40020458 	.word	0x40020458
 8004004:	40020470 	.word	0x40020470
 8004008:	40020488 	.word	0x40020488
 800400c:	400204a0 	.word	0x400204a0
 8004010:	400204b8 	.word	0x400204b8

08004014 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7f      	ldr	r2, [pc, #508]	; (8004230 <DMA_SetConfig+0x21c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d072      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7d      	ldr	r2, [pc, #500]	; (8004234 <DMA_SetConfig+0x220>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d06d      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7c      	ldr	r2, [pc, #496]	; (8004238 <DMA_SetConfig+0x224>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d068      	beq.n	800411e <DMA_SetConfig+0x10a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a7a      	ldr	r2, [pc, #488]	; (800423c <DMA_SetConfig+0x228>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d063      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a79      	ldr	r2, [pc, #484]	; (8004240 <DMA_SetConfig+0x22c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d05e      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a77      	ldr	r2, [pc, #476]	; (8004244 <DMA_SetConfig+0x230>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d059      	beq.n	800411e <DMA_SetConfig+0x10a>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a76      	ldr	r2, [pc, #472]	; (8004248 <DMA_SetConfig+0x234>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d054      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a74      	ldr	r2, [pc, #464]	; (800424c <DMA_SetConfig+0x238>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04f      	beq.n	800411e <DMA_SetConfig+0x10a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a73      	ldr	r2, [pc, #460]	; (8004250 <DMA_SetConfig+0x23c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d04a      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a71      	ldr	r2, [pc, #452]	; (8004254 <DMA_SetConfig+0x240>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d045      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a70      	ldr	r2, [pc, #448]	; (8004258 <DMA_SetConfig+0x244>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d040      	beq.n	800411e <DMA_SetConfig+0x10a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6e      	ldr	r2, [pc, #440]	; (800425c <DMA_SetConfig+0x248>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d03b      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6d      	ldr	r2, [pc, #436]	; (8004260 <DMA_SetConfig+0x24c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d036      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <DMA_SetConfig+0x250>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d031      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <DMA_SetConfig+0x254>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d02c      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	; (800426c <DMA_SetConfig+0x258>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d027      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a67      	ldr	r2, [pc, #412]	; (8004270 <DMA_SetConfig+0x25c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d022      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <DMA_SetConfig+0x260>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01d      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a64      	ldr	r2, [pc, #400]	; (8004278 <DMA_SetConfig+0x264>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d018      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a62      	ldr	r2, [pc, #392]	; (800427c <DMA_SetConfig+0x268>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <DMA_SetConfig+0x10a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a61      	ldr	r2, [pc, #388]	; (8004280 <DMA_SetConfig+0x26c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00e      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5f      	ldr	r2, [pc, #380]	; (8004284 <DMA_SetConfig+0x270>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d009      	beq.n	800411e <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <DMA_SetConfig+0x274>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5c      	ldr	r2, [pc, #368]	; (800428c <DMA_SetConfig+0x278>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <DMA_SetConfig+0x10e>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <DMA_SetConfig+0x110>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004130:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004142:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a39      	ldr	r2, [pc, #228]	; (8004230 <DMA_SetConfig+0x21c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d04a      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a38      	ldr	r2, [pc, #224]	; (8004234 <DMA_SetConfig+0x220>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d045      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a36      	ldr	r2, [pc, #216]	; (8004238 <DMA_SetConfig+0x224>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d040      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a35      	ldr	r2, [pc, #212]	; (800423c <DMA_SetConfig+0x228>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d03b      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a33      	ldr	r2, [pc, #204]	; (8004240 <DMA_SetConfig+0x22c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d036      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a32      	ldr	r2, [pc, #200]	; (8004244 <DMA_SetConfig+0x230>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d031      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <DMA_SetConfig+0x234>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02c      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2f      	ldr	r2, [pc, #188]	; (800424c <DMA_SetConfig+0x238>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d027      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <DMA_SetConfig+0x23c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d022      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <DMA_SetConfig+0x240>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d01d      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <DMA_SetConfig+0x244>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <DMA_SetConfig+0x248>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <DMA_SetConfig+0x24c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <DMA_SetConfig+0x250>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <DMA_SetConfig+0x254>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <DMA_SetConfig+0x1d0>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a23      	ldr	r2, [pc, #140]	; (800426c <DMA_SetConfig+0x258>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <DMA_SetConfig+0x1d4>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <DMA_SetConfig+0x1d6>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d059      	beq.n	80042a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	223f      	movs	r2, #63	; 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800420c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d138      	bne.n	8004290 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800422e:	e086      	b.n	800433e <DMA_SetConfig+0x32a>
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
 8004270:	58025408 	.word	0x58025408
 8004274:	5802541c 	.word	0x5802541c
 8004278:	58025430 	.word	0x58025430
 800427c:	58025444 	.word	0x58025444
 8004280:	58025458 	.word	0x58025458
 8004284:	5802546c 	.word	0x5802546c
 8004288:	58025480 	.word	0x58025480
 800428c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
}
 80042a0:	e04d      	b.n	800433e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a29      	ldr	r2, [pc, #164]	; (800434c <DMA_SetConfig+0x338>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a27      	ldr	r2, [pc, #156]	; (8004350 <DMA_SetConfig+0x33c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a26      	ldr	r2, [pc, #152]	; (8004354 <DMA_SetConfig+0x340>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <DMA_SetConfig+0x344>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <DMA_SetConfig+0x348>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <DMA_SetConfig+0x34c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <DMA_SetConfig+0x350>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <DMA_SetConfig+0x2de>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <DMA_SetConfig+0x354>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <DMA_SetConfig+0x2e2>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <DMA_SetConfig+0x2e4>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d108      	bne.n	800432e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	60da      	str	r2, [r3, #12]
}
 800432c:	e007      	b.n	800433e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	58025408 	.word	0x58025408
 8004350:	5802541c 	.word	0x5802541c
 8004354:	58025430 	.word	0x58025430
 8004358:	58025444 	.word	0x58025444
 800435c:	58025458 	.word	0x58025458
 8004360:	5802546c 	.word	0x5802546c
 8004364:	58025480 	.word	0x58025480
 8004368:	58025494 	.word	0x58025494

0800436c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a42      	ldr	r2, [pc, #264]	; (8004484 <DMA_CalcBaseAndBitshift+0x118>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a41      	ldr	r2, [pc, #260]	; (8004488 <DMA_CalcBaseAndBitshift+0x11c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3f      	ldr	r2, [pc, #252]	; (800448c <DMA_CalcBaseAndBitshift+0x120>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3e      	ldr	r2, [pc, #248]	; (8004490 <DMA_CalcBaseAndBitshift+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3c      	ldr	r2, [pc, #240]	; (8004494 <DMA_CalcBaseAndBitshift+0x128>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3b      	ldr	r2, [pc, #236]	; (8004498 <DMA_CalcBaseAndBitshift+0x12c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a39      	ldr	r2, [pc, #228]	; (800449c <DMA_CalcBaseAndBitshift+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a38      	ldr	r2, [pc, #224]	; (80044a0 <DMA_CalcBaseAndBitshift+0x134>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <DMA_CalcBaseAndBitshift+0x138>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a33      	ldr	r2, [pc, #204]	; (80044ac <DMA_CalcBaseAndBitshift+0x140>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a32      	ldr	r2, [pc, #200]	; (80044b0 <DMA_CalcBaseAndBitshift+0x144>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <DMA_CalcBaseAndBitshift+0x148>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <DMA_CalcBaseAndBitshift+0x150>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <DMA_CalcBaseAndBitshift+0x154>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <DMA_CalcBaseAndBitshift+0xac>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <DMA_CalcBaseAndBitshift+0xae>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d024      	beq.n	8004468 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3b10      	subs	r3, #16
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <DMA_CalcBaseAndBitshift+0x158>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d908      	bls.n	8004458 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <DMA_CalcBaseAndBitshift+0x160>)
 800444e:	4013      	ands	r3, r2
 8004450:	1d1a      	adds	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	; 0x58
 8004456:	e00d      	b.n	8004474 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <DMA_CalcBaseAndBitshift+0x160>)
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6593      	str	r3, [r2, #88]	; 0x58
 8004466:	e005      	b.n	8004474 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40020010 	.word	0x40020010
 8004488:	40020028 	.word	0x40020028
 800448c:	40020040 	.word	0x40020040
 8004490:	40020058 	.word	0x40020058
 8004494:	40020070 	.word	0x40020070
 8004498:	40020088 	.word	0x40020088
 800449c:	400200a0 	.word	0x400200a0
 80044a0:	400200b8 	.word	0x400200b8
 80044a4:	40020410 	.word	0x40020410
 80044a8:	40020428 	.word	0x40020428
 80044ac:	40020440 	.word	0x40020440
 80044b0:	40020458 	.word	0x40020458
 80044b4:	40020470 	.word	0x40020470
 80044b8:	40020488 	.word	0x40020488
 80044bc:	400204a0 	.word	0x400204a0
 80044c0:	400204b8 	.word	0x400204b8
 80044c4:	aaaaaaab 	.word	0xaaaaaaab
 80044c8:	0800dc00 	.word	0x0800dc00
 80044cc:	fffffc00 	.word	0xfffffc00

080044d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d120      	bne.n	8004526 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d858      	bhi.n	800459e <DMA_CheckFifoParam+0xce>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <DMA_CheckFifoParam+0x24>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004517 	.word	0x08004517
 80044fc:	08004505 	.word	0x08004505
 8004500:	0800459f 	.word	0x0800459f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d048      	beq.n	80045a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004514:	e045      	b.n	80045a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800451e:	d142      	bne.n	80045a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004524:	e03f      	b.n	80045a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452e:	d123      	bne.n	8004578 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	2b03      	cmp	r3, #3
 8004536:	d838      	bhi.n	80045aa <DMA_CheckFifoParam+0xda>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <DMA_CheckFifoParam+0x70>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004557 	.word	0x08004557
 8004548:	08004551 	.word	0x08004551
 800454c:	08004569 	.word	0x08004569
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
        break;
 8004554:	e030      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d025      	beq.n	80045ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004566:	e022      	b.n	80045ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004570:	d11f      	bne.n	80045b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004576:	e01c      	b.n	80045b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <DMA_CheckFifoParam+0xb6>
 8004580:	2b03      	cmp	r3, #3
 8004582:	d003      	beq.n	800458c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004584:	e018      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
        break;
 800458a:	e015      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00e      	beq.n	80045b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
    break;
 800459c:	e00b      	b.n	80045b6 <DMA_CheckFifoParam+0xe6>
        break;
 800459e:	bf00      	nop
 80045a0:	e00a      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        break;
 80045a2:	bf00      	nop
 80045a4:	e008      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        break;
 80045a6:	bf00      	nop
 80045a8:	e006      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        break;
 80045aa:	bf00      	nop
 80045ac:	e004      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
        break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <DMA_CheckFifoParam+0xe8>
    break;
 80045b6:	bf00      	nop
    }
  }

  return status;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop

080045c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a36      	ldr	r2, [pc, #216]	; (80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a33      	ldr	r2, [pc, #204]	; (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a32      	ldr	r2, [pc, #200]	; (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01a      	beq.n	8004666 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	3b08      	subs	r3, #8
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004654:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004664:	e024      	b.n	80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3b10      	subs	r3, #16
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d806      	bhi.n	800468e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d902      	bls.n	800468e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3308      	adds	r3, #8
 800468c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2201      	movs	r2, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	58025408 	.word	0x58025408
 80046c0:	5802541c 	.word	0x5802541c
 80046c4:	58025430 	.word	0x58025430
 80046c8:	58025444 	.word	0x58025444
 80046cc:	58025458 	.word	0x58025458
 80046d0:	5802546c 	.word	0x5802546c
 80046d4:	58025480 	.word	0x58025480
 80046d8:	58025494 	.word	0x58025494
 80046dc:	cccccccd 	.word	0xcccccccd
 80046e0:	16009600 	.word	0x16009600
 80046e4:	58025880 	.word	0x58025880
 80046e8:	aaaaaaab 	.word	0xaaaaaaab
 80046ec:	400204b8 	.word	0x400204b8
 80046f0:	4002040f 	.word	0x4002040f
 80046f4:	10008200 	.word	0x10008200
 80046f8:	40020880 	.word	0x40020880

080046fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04a      	beq.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d847      	bhi.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a22      	ldr	r2, [pc, #136]	; (80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004784:	671a      	str	r2, [r3, #112]	; 0x70
 8004786:	e009      	b.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800479a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3b01      	subs	r3, #1
 80047a0:	2201      	movs	r2, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	58025408 	.word	0x58025408
 80047b8:	5802541c 	.word	0x5802541c
 80047bc:	58025430 	.word	0x58025430
 80047c0:	58025444 	.word	0x58025444
 80047c4:	58025458 	.word	0x58025458
 80047c8:	5802546c 	.word	0x5802546c
 80047cc:	58025480 	.word	0x58025480
 80047d0:	58025494 	.word	0x58025494
 80047d4:	1600963f 	.word	0x1600963f
 80047d8:	58025940 	.word	0x58025940
 80047dc:	1000823f 	.word	0x1000823f
 80047e0:	40020940 	.word	0x40020940

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047f2:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <HAL_GPIO_Init+0x234>)
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047f6:	e194      	b.n	8004b22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8186 	beq.w	8004b1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x44>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d017      	beq.n	80048c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d123      	bne.n	800491a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80e0 	beq.w	8004b1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <HAL_GPIO_Init+0x238>)
 800495e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004962:	4a2e      	ldr	r2, [pc, #184]	; (8004a1c <HAL_GPIO_Init+0x238>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800496c:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_GPIO_Init+0x238>)
 800496e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800497a:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <HAL_GPIO_Init+0x23c>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a20      	ldr	r2, [pc, #128]	; (8004a24 <HAL_GPIO_Init+0x240>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d052      	beq.n	8004a4c <HAL_GPIO_Init+0x268>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_GPIO_Init+0x244>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <HAL_GPIO_Init+0x22e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <HAL_GPIO_Init+0x248>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <HAL_GPIO_Init+0x22a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <HAL_GPIO_Init+0x24c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d025      	beq.n	8004a0a <HAL_GPIO_Init+0x226>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_GPIO_Init+0x250>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <HAL_GPIO_Init+0x222>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_GPIO_Init+0x254>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x21e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1a      	ldr	r2, [pc, #104]	; (8004a3c <HAL_GPIO_Init+0x258>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x21a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <HAL_GPIO_Init+0x25c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x216>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_GPIO_Init+0x260>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x212>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <HAL_GPIO_Init+0x264>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x20e>
 80049ee:	2309      	movs	r3, #9
 80049f0:	e02d      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 80049f2:	230a      	movs	r3, #10
 80049f4:	e02b      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 80049f6:	2308      	movs	r3, #8
 80049f8:	e029      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e027      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 80049fe:	2306      	movs	r3, #6
 8004a00:	e025      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e023      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e021      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e01f      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e01d      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01b      	b.n	8004a4e <HAL_GPIO_Init+0x26a>
 8004a16:	bf00      	nop
 8004a18:	58000080 	.word	0x58000080
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	58000400 	.word	0x58000400
 8004a24:	58020000 	.word	0x58020000
 8004a28:	58020400 	.word	0x58020400
 8004a2c:	58020800 	.word	0x58020800
 8004a30:	58020c00 	.word	0x58020c00
 8004a34:	58021000 	.word	0x58021000
 8004a38:	58021400 	.word	0x58021400
 8004a3c:	58021800 	.word	0x58021800
 8004a40:	58021c00 	.word	0x58021c00
 8004a44:	58022000 	.word	0x58022000
 8004a48:	58022400 	.word	0x58022400
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	f002 0203 	and.w	r2, r2, #3
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	4093      	lsls	r3, r2
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a5e:	4938      	ldr	r1, [pc, #224]	; (8004b40 <HAL_GPIO_Init+0x35c>)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f47f ae63 	bne.w	80047f8 <HAL_GPIO_Init+0x14>
  }
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	3724      	adds	r7, #36	; 0x24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	58000400 	.word	0x58000400

08004b44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d00a      	beq.n	8004b6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e01f      	b.n	8004baa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e01d      	b.n	8004baa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 0207 	bic.w	r2, r3, #7
 8004b76:	490f      	ldr	r1, [pc, #60]	; (8004bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b7e:	f7fc fefd 	bl	800197c <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b84:	e009      	b.n	8004b9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b86:	f7fc fef9 	bl	800197c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b94:	d901      	bls.n	8004b9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba6:	d1ee      	bne.n	8004b86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	58024800 	.word	0x58024800

08004bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	; 0x30
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f000 bc1d 	b.w	8005406 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8087 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bda:	4b99      	ldr	r3, [pc, #612]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be4:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d007      	beq.n	8004c00 <HAL_RCC_OscConfig+0x48>
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	2b18      	cmp	r3, #24
 8004bf4:	d110      	bne.n	8004c18 <HAL_RCC_OscConfig+0x60>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	4b8f      	ldr	r3, [pc, #572]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d06c      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x12e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d168      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e3f6      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x78>
 8004c22:	4b87      	ldr	r3, [pc, #540]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e02e      	b.n	8004c8e <HAL_RCC_OscConfig+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x9a>
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a80      	ldr	r2, [pc, #512]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e01d      	b.n	8004c8e <HAL_RCC_OscConfig+0xd6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5a:	d10c      	bne.n	8004c76 <HAL_RCC_OscConfig+0xbe>
 8004c5c:	4b78      	ldr	r3, [pc, #480]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a77      	ldr	r2, [pc, #476]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b75      	ldr	r3, [pc, #468]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a74      	ldr	r2, [pc, #464]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e00b      	b.n	8004c8e <HAL_RCC_OscConfig+0xd6>
 8004c76:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a71      	ldr	r2, [pc, #452]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6e      	ldr	r2, [pc, #440]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d013      	beq.n	8004cbe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fc fe71 	bl	800197c <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9e:	f7fc fe6d 	bl	800197c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b64      	cmp	r3, #100	; 0x64
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e3aa      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cb0:	4b63      	ldr	r3, [pc, #396]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0xe6>
 8004cbc:	e014      	b.n	8004ce8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fc fe5d 	bl	800197c <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc6:	f7fc fe59 	bl	800197c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b64      	cmp	r3, #100	; 0x64
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e396      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x10e>
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80cb 	beq.w	8004e8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf6:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d00:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_RCC_OscConfig+0x164>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b18      	cmp	r3, #24
 8004d10:	d156      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x208>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d151      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d1c:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_OscConfig+0x17c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e368      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d34:	4b42      	ldr	r3, [pc, #264]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 0219 	bic.w	r2, r3, #25
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	493f      	ldr	r1, [pc, #252]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d46:	f7fc fe19 	bl	800197c <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fc fe15 	bl	800197c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e352      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d60:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6c:	f7fc fe12 	bl	8001994 <HAL_GetREVID>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d817      	bhi.n	8004daa <HAL_RCC_OscConfig+0x1f2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d108      	bne.n	8004d94 <HAL_RCC_OscConfig+0x1dc>
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d8a:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d92:	e07b      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	4927      	ldr	r1, [pc, #156]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da8:	e070      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	4921      	ldr	r1, [pc, #132]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbe:	e065      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d048      	beq.n	8004e5a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0219 	bic.w	r2, r3, #25
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	491a      	ldr	r1, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc fdcf 	bl	800197c <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fc fdcb 	bl	800197c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e308      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	f7fc fdc8 	bl	8001994 <HAL_GetREVID>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d81a      	bhi.n	8004e44 <HAL_RCC_OscConfig+0x28c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d108      	bne.n	8004e28 <HAL_RCC_OscConfig+0x270>
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e24:	6053      	str	r3, [r2, #4]
 8004e26:	e031      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	4902      	ldr	r1, [pc, #8]	; (8004e40 <HAL_RCC_OscConfig+0x288>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e026      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
 8004e44:	4b9a      	ldr	r3, [pc, #616]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	4997      	ldr	r1, [pc, #604]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
 8004e58:	e018      	b.n	8004e8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b95      	ldr	r3, [pc, #596]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a94      	ldr	r2, [pc, #592]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fc fd89 	bl	800197c <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fd85 	bl	800197c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e2c2      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e80:	4b8b      	ldr	r3, [pc, #556]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a9 	beq.w	8004fec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9a:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ea4:	4b82      	ldr	r3, [pc, #520]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d007      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x308>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b18      	cmp	r3, #24
 8004eb4:	d13a      	bne.n	8004f2c <HAL_RCC_OscConfig+0x374>
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d135      	bne.n	8004f2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec0:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x320>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e296      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ed8:	f7fc fd5c 	bl	8001994 <HAL_GetREVID>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d817      	bhi.n	8004f16 <HAL_RCC_OscConfig+0x35e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d108      	bne.n	8004f00 <HAL_RCC_OscConfig+0x348>
 8004eee:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ef6:	4a6e      	ldr	r2, [pc, #440]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efe:	e075      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f00:	4b6b      	ldr	r3, [pc, #428]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	069b      	lsls	r3, r3, #26
 8004f0e:	4968      	ldr	r1, [pc, #416]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f14:	e06a      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f16:	4b66      	ldr	r3, [pc, #408]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	4962      	ldr	r1, [pc, #392]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2a:	e05f      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d042      	beq.n	8004fba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f34:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a5d      	ldr	r2, [pc, #372]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fc fd1c 	bl	800197c <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f48:	f7fc fd18 	bl	800197c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e255      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5a:	4b55      	ldr	r3, [pc, #340]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f66:	f7fc fd15 	bl	8001994 <HAL_GetREVID>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d817      	bhi.n	8004fa4 <HAL_RCC_OscConfig+0x3ec>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d108      	bne.n	8004f8e <HAL_RCC_OscConfig+0x3d6>
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f84:	4a4a      	ldr	r2, [pc, #296]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	e02e      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
 8004f8e:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	069b      	lsls	r3, r3, #26
 8004f9c:	4944      	ldr	r1, [pc, #272]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
 8004fa2:	e023      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
 8004fa4:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	493f      	ldr	r1, [pc, #252]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
 8004fb8:	e018      	b.n	8004fec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fc fcd9 	bl	800197c <HAL_GetTick>
 8004fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fce:	f7fc fcd5 	bl	800197c <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e212      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d036      	beq.n	8005066 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d019      	beq.n	8005034 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005000:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fcb6 	bl	800197c <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fc fcb2 	bl	800197c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1ef      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x45c>
 8005032:	e018      	b.n	8005066 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005034:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8005036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fc fc9c 	bl	800197c <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7fc fc98 	bl	800197c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1d5      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d039      	beq.n	80050e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01c      	beq.n	80050b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005084:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005086:	f7fc fc79 	bl	800197c <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800508e:	f7fc fc75 	bl	800197c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1b2      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x4d6>
 80050ac:	e01b      	b.n	80050e6 <HAL_RCC_OscConfig+0x52e>
 80050ae:	bf00      	nop
 80050b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b4:	4b9b      	ldr	r3, [pc, #620]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a9a      	ldr	r2, [pc, #616]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050c0:	f7fc fc5c 	bl	800197c <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050c8:	f7fc fc58 	bl	800197c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e195      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050da:	4b92      	ldr	r3, [pc, #584]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8081 	beq.w	80051f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050f4:	4b8c      	ldr	r3, [pc, #560]	; (8005328 <HAL_RCC_OscConfig+0x770>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a8b      	ldr	r2, [pc, #556]	; (8005328 <HAL_RCC_OscConfig+0x770>)
 80050fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005100:	f7fc fc3c 	bl	800197c <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005108:	f7fc fc38 	bl	800197c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e175      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511a:	4b83      	ldr	r3, [pc, #524]	; (8005328 <HAL_RCC_OscConfig+0x770>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d106      	bne.n	800513c <HAL_RCC_OscConfig+0x584>
 800512e:	4b7d      	ldr	r3, [pc, #500]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a7c      	ldr	r2, [pc, #496]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	e02d      	b.n	8005198 <HAL_RCC_OscConfig+0x5e0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10c      	bne.n	800515e <HAL_RCC_OscConfig+0x5a6>
 8005144:	4b77      	ldr	r3, [pc, #476]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a76      	ldr	r2, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
 8005150:	4b74      	ldr	r3, [pc, #464]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a73      	ldr	r2, [pc, #460]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005156:	f023 0304 	bic.w	r3, r3, #4
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
 800515c:	e01c      	b.n	8005198 <HAL_RCC_OscConfig+0x5e0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b05      	cmp	r3, #5
 8005164:	d10c      	bne.n	8005180 <HAL_RCC_OscConfig+0x5c8>
 8005166:	4b6f      	ldr	r3, [pc, #444]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a6e      	ldr	r2, [pc, #440]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800516c:	f043 0304 	orr.w	r3, r3, #4
 8005170:	6713      	str	r3, [r2, #112]	; 0x70
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a6b      	ldr	r2, [pc, #428]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	6713      	str	r3, [r2, #112]	; 0x70
 800517e:	e00b      	b.n	8005198 <HAL_RCC_OscConfig+0x5e0>
 8005180:	4b68      	ldr	r3, [pc, #416]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a67      	ldr	r2, [pc, #412]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
 800518c:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a64      	ldr	r2, [pc, #400]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005192:	f023 0304 	bic.w	r3, r3, #4
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d015      	beq.n	80051cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a0:	f7fc fbec 	bl	800197c <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7fc fbe8 	bl	800197c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e123      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051be:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0ee      	beq.n	80051a8 <HAL_RCC_OscConfig+0x5f0>
 80051ca:	e014      	b.n	80051f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fc fbd6 	bl	800197c <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d4:	f7fc fbd2 	bl	800197c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e10d      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ea:	4b4e      	ldr	r3, [pc, #312]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1ee      	bne.n	80051d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8102 	beq.w	8005404 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005200:	4b48      	ldr	r3, [pc, #288]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005208:	2b18      	cmp	r3, #24
 800520a:	f000 80bd 	beq.w	8005388 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b02      	cmp	r3, #2
 8005214:	f040 809e 	bne.w	8005354 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b42      	ldr	r3, [pc, #264]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a41      	ldr	r2, [pc, #260]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fc fbaa 	bl	800197c <HAL_GetTick>
 8005228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fc fba6 	bl	800197c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e0e3      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523e:	4b39      	ldr	r3, [pc, #228]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800524c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <HAL_RCC_OscConfig+0x774>)
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800525a:	0112      	lsls	r2, r2, #4
 800525c:	430a      	orrs	r2, r1
 800525e:	4931      	ldr	r1, [pc, #196]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	628b      	str	r3, [r1, #40]	; 0x28
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	3b01      	subs	r3, #1
 800526a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	3b01      	subs	r3, #1
 8005274:	025b      	lsls	r3, r3, #9
 8005276:	b29b      	uxth	r3, r3
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	3b01      	subs	r3, #1
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	3b01      	subs	r3, #1
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005294:	4923      	ldr	r1, [pc, #140]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800529a:	4b22      	ldr	r3, [pc, #136]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a21      	ldr	r2, [pc, #132]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052a6:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_OscConfig+0x778>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052b2:	00d2      	lsls	r2, r2, #3
 80052b4:	491b      	ldr	r1, [pc, #108]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052ba:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f023 020c 	bic.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4917      	ldr	r1, [pc, #92]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052cc:	4b15      	ldr	r3, [pc, #84]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f023 0202 	bic.w	r2, r3, #2
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	4912      	ldr	r1, [pc, #72]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a07      	ldr	r2, [pc, #28]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800530e:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_RCC_OscConfig+0x76c>)
 8005314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fc fb2f 	bl	800197c <HAL_GetTick>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005320:	e011      	b.n	8005346 <HAL_RCC_OscConfig+0x78e>
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400
 8005328:	58024800 	.word	0x58024800
 800532c:	fffffc0c 	.word	0xfffffc0c
 8005330:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005334:	f7fc fb22 	bl	800197c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e05f      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005346:	4b32      	ldr	r3, [pc, #200]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x77c>
 8005352:	e057      	b.n	8005404 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005354:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2d      	ldr	r2, [pc, #180]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 800535a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800535e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fc fb0c 	bl	800197c <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fc fb08 	bl	800197c <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e045      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800537a:	4b25      	ldr	r3, [pc, #148]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x7b0>
 8005386:	e03d      	b.n	8005404 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005388:	4b21      	ldr	r3, [pc, #132]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCC_OscConfig+0x858>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b01      	cmp	r3, #1
 800539a:	d031      	beq.n	8005400 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f003 0203 	and.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d12a      	bne.n	8005400 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d122      	bne.n	8005400 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d11a      	bne.n	8005400 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d111      	bne.n	8005400 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d108      	bne.n	8005400 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	0e1b      	lsrs	r3, r3, #24
 80053f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3730      	adds	r7, #48	; 0x30
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	58024400 	.word	0x58024400

08005414 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e19c      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b8a      	ldr	r3, [pc, #552]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d910      	bls.n	8005458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b87      	ldr	r3, [pc, #540]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 020f 	bic.w	r2, r3, #15
 800543e:	4985      	ldr	r1, [pc, #532]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b83      	ldr	r3, [pc, #524]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e184      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005470:	429a      	cmp	r2, r3
 8005472:	d908      	bls.n	8005486 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005474:	4b78      	ldr	r3, [pc, #480]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4975      	ldr	r1, [pc, #468]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005482:	4313      	orrs	r3, r2
 8005484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	4b70      	ldr	r3, [pc, #448]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800549e:	429a      	cmp	r2, r3
 80054a0:	d908      	bls.n	80054b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054a2:	4b6d      	ldr	r3, [pc, #436]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	496a      	ldr	r1, [pc, #424]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b64      	ldr	r3, [pc, #400]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d908      	bls.n	80054e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	495e      	ldr	r1, [pc, #376]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d908      	bls.n	8005510 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054fe:	4b56      	ldr	r3, [pc, #344]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4953      	ldr	r1, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800550c:	4313      	orrs	r3, r2
 800550e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d010      	beq.n	800553e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	429a      	cmp	r2, r3
 800552a:	d908      	bls.n	800553e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f023 020f 	bic.w	r2, r3, #15
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4947      	ldr	r1, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800553a:	4313      	orrs	r3, r2
 800553c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d055      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800554a:	4b43      	ldr	r3, [pc, #268]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4940      	ldr	r1, [pc, #256]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005558:	4313      	orrs	r3, r2
 800555a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d107      	bne.n	8005574 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d121      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0f6      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d115      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0ea      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005594:	4b30      	ldr	r3, [pc, #192]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0de      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0d6      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f023 0207 	bic.w	r2, r3, #7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4925      	ldr	r1, [pc, #148]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fc f9d9 	bl	800197c <HAL_GetTick>
 80055ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055cc:	e00a      	b.n	80055e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ce:	f7fc f9d5 	bl	800197c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0be      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e4:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d1eb      	bne.n	80055ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	429a      	cmp	r2, r3
 8005610:	d208      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f023 020f 	bic.w	r2, r3, #15
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	490e      	ldr	r1, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x244>)
 8005620:	4313      	orrs	r3, r2
 8005622:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d214      	bcs.n	800565c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 020f 	bic.w	r2, r3, #15
 800563a:	4906      	ldr	r1, [pc, #24]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <HAL_RCC_ClockConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d005      	beq.n	800565c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e086      	b.n	8005762 <HAL_RCC_ClockConfig+0x34e>
 8005654:	52002000 	.word	0x52002000
 8005658:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005674:	429a      	cmp	r2, r3
 8005676:	d208      	bcs.n	800568a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005678:	4b3c      	ldr	r3, [pc, #240]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4939      	ldr	r1, [pc, #228]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005686:	4313      	orrs	r3, r2
 8005688:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d208      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056a6:	4b31      	ldr	r3, [pc, #196]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	492e      	ldr	r1, [pc, #184]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d208      	bcs.n	80056e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	4922      	ldr	r1, [pc, #136]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056fe:	429a      	cmp	r2, r3
 8005700:	d208      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4917      	ldr	r1, [pc, #92]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005710:	4313      	orrs	r3, r2
 8005712:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005714:	f000 f834 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	4912      	ldr	r1, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x35c>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <HAL_RCC_ClockConfig+0x358>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <HAL_RCC_ClockConfig+0x35c>)
 800573c:	5cd3      	ldrb	r3, [r2, r3]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <HAL_RCC_ClockConfig+0x360>)
 800574a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x364>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x368>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7fb fcfc 	bl	8001154 <HAL_InitTick>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400
 8005770:	0800dbf0 	.word	0x0800dbf0
 8005774:	24000004 	.word	0x24000004
 8005778:	24000000 	.word	0x24000000
 800577c:	24000008 	.word	0x24000008

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005786:	4bb3      	ldr	r3, [pc, #716]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578e:	2b18      	cmp	r3, #24
 8005790:	f200 8155 	bhi.w	8005a3e <HAL_RCC_GetSysClockFreq+0x2be>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005801 	.word	0x08005801
 80057a0:	08005a3f 	.word	0x08005a3f
 80057a4:	08005a3f 	.word	0x08005a3f
 80057a8:	08005a3f 	.word	0x08005a3f
 80057ac:	08005a3f 	.word	0x08005a3f
 80057b0:	08005a3f 	.word	0x08005a3f
 80057b4:	08005a3f 	.word	0x08005a3f
 80057b8:	08005a3f 	.word	0x08005a3f
 80057bc:	08005827 	.word	0x08005827
 80057c0:	08005a3f 	.word	0x08005a3f
 80057c4:	08005a3f 	.word	0x08005a3f
 80057c8:	08005a3f 	.word	0x08005a3f
 80057cc:	08005a3f 	.word	0x08005a3f
 80057d0:	08005a3f 	.word	0x08005a3f
 80057d4:	08005a3f 	.word	0x08005a3f
 80057d8:	08005a3f 	.word	0x08005a3f
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	08005a3f 	.word	0x08005a3f
 80057e4:	08005a3f 	.word	0x08005a3f
 80057e8:	08005a3f 	.word	0x08005a3f
 80057ec:	08005a3f 	.word	0x08005a3f
 80057f0:	08005a3f 	.word	0x08005a3f
 80057f4:	08005a3f 	.word	0x08005a3f
 80057f8:	08005a3f 	.word	0x08005a3f
 80057fc:	08005833 	.word	0x08005833
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005800:	4b94      	ldr	r3, [pc, #592]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800580c:	4b91      	ldr	r3, [pc, #580]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a90      	ldr	r2, [pc, #576]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800581e:	e111      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005820:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005822:	61bb      	str	r3, [r7, #24]
    break;
 8005824:	e10e      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005826:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005828:	61bb      	str	r3, [r7, #24]
    break;
 800582a:	e10b      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800582c:	4b8c      	ldr	r3, [pc, #560]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800582e:	61bb      	str	r3, [r7, #24]
    break;
 8005830:	e108      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005832:	4b88      	ldr	r3, [pc, #544]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800583c:	4b85      	ldr	r3, [pc, #532]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005846:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005848:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005852:	4b80      	ldr	r3, [pc, #512]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	08db      	lsrs	r3, r3, #3
 8005858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80e1 	beq.w	8005a38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b02      	cmp	r3, #2
 800587a:	f000 8083 	beq.w	8005984 <HAL_RCC_GetSysClockFreq+0x204>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b02      	cmp	r3, #2
 8005882:	f200 80a1 	bhi.w	80059c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0x114>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d056      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005892:	e099      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005894:	4b6f      	ldr	r3, [pc, #444]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02d      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a0:	4b6c      	ldr	r3, [pc, #432]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	08db      	lsrs	r3, r3, #3
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
 80058b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ca:	4b62      	ldr	r3, [pc, #392]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058da:	ed97 6a02 	vldr	s12, [r7, #8]
 80058de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a64 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058fa:	e087      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e8>
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b51      	ldr	r3, [pc, #324]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005922:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593e:	e065      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a6c <HAL_RCC_GetSysClockFreq+0x2ec>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b40      	ldr	r3, [pc, #256]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a02 	vldr	s12, [r7, #8]
 8005966:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a64 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	e043      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a64 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c6:	e021      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a6c <HAL_RCC_GetSysClockFreq+0x2ec>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a64 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a16:	3301      	adds	r3, #1
 8005a18:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a30:	ee17 3a90 	vmov	r3, s15
 8005a34:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a36:	e005      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
    break;
 8005a3c:	e002      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a3e:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a40:	61bb      	str	r3, [r7, #24]
    break;
 8005a42:	bf00      	nop
  }

  return sysclockfreq;
 8005a44:	69bb      	ldr	r3, [r7, #24]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3724      	adds	r7, #36	; 0x24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	58024400 	.word	0x58024400
 8005a58:	03d09000 	.word	0x03d09000
 8005a5c:	003d0900 	.word	0x003d0900
 8005a60:	017d7840 	.word	0x017d7840
 8005a64:	46000000 	.word	0x46000000
 8005a68:	4c742400 	.word	0x4c742400
 8005a6c:	4a742400 	.word	0x4a742400
 8005a70:	4bbebc20 	.word	0x4bbebc20

08005a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a7a:	f7ff fe81 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	490f      	ldr	r1, [pc, #60]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a8c:	5ccb      	ldrb	r3, [r1, r3]
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aa2:	5cd3      	ldrb	r3, [r2, r3]
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	4a07      	ldr	r2, [pc, #28]	; (8005acc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ab0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab2:	4a07      	ldr	r2, [pc, #28]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ab8:	4b04      	ldr	r3, [pc, #16]	; (8005acc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	0800dbf0 	.word	0x0800dbf0
 8005acc:	24000004 	.word	0x24000004
 8005ad0:	24000000 	.word	0x24000000

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ad8:	f7ff ffcc 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4904      	ldr	r1, [pc, #16]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	58024400 	.word	0x58024400
 8005afc:	0800dbf0 	.word	0x0800dbf0

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b04:	f7ff ffb6 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	58024400 	.word	0x58024400
 8005b28:	0800dbf0 	.word	0x0800dbf0

08005b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	223f      	movs	r2, #63	; 0x3f
 8005b3a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0207 	and.w	r2, r3, #7
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005b48:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005b54:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 020f 	and.w	r2, r3, #15
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005b60:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005b84:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_GetClockConfig+0x80>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 020f 	and.w	r2, r3, #15
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	52002000 	.word	0x52002000

08005bb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bb8:	2300      	movs	r3, #0
 8005bba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03f      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd4:	d02a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005bd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bda:	d824      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be0:	d018      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be6:	d81e      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005bf2:	e018      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4ba3      	ldr	r3, [pc, #652]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4aa2      	ldr	r2, [pc, #648]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c00:	e015      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f9d5 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c12:	e00c      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	2102      	movs	r1, #2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fa7e 	bl	800711c <RCCEx_PLL3_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c24:	e003      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c34:	4b93      	ldr	r3, [pc, #588]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c40:	4990      	ldr	r1, [pc, #576]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	650b      	str	r3, [r1, #80]	; 0x50
 8005c46:	e001      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d03d      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d826      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c7d 	.word	0x08005c7d
 8005c6c:	08005c8b 	.word	0x08005c8b
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005cb5 	.word	0x08005cb5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7c:	4b81      	ldr	r3, [pc, #516]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c88:	e015      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f991 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e00c      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fa3a 	bl	800711c <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cac:	e003      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cbc:	4b71      	ldr	r3, [pc, #452]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	f023 0207 	bic.w	r2, r3, #7
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	496e      	ldr	r1, [pc, #440]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	650b      	str	r3, [r1, #80]	; 0x50
 8005cce:	e001      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d042      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce8:	d02b      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cee:	d825      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cf0:	2bc0      	cmp	r3, #192	; 0xc0
 8005cf2:	d028      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cf4:	2bc0      	cmp	r3, #192	; 0xc0
 8005cf6:	d821      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d016      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d81d      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d007      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005d08:	e018      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0a:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	4a5d      	ldr	r2, [pc, #372]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d16:	e017      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 f94a 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d28:	e00e      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3324      	adds	r3, #36	; 0x24
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f9f3 	bl	800711c <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d3a:	e005      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d40:	e002      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d4e:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	494a      	ldr	r1, [pc, #296]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	650b      	str	r3, [r1, #80]	; 0x50
 8005d60:	e001      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d049      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d7c:	d030      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d82:	d82a      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d88:	d02c      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d8e:	d824      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d94:	d018      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9a:	d81e      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da4:	d007      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005da6:	e018      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a35      	ldr	r2, [pc, #212]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005db4:	e017      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f8fb 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005dc6:	e00e      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3324      	adds	r3, #36	; 0x24
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f9a4 	bl	800711c <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dd8:	e005      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dde:	e002      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dfa:	4922      	ldr	r1, [pc, #136]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	658b      	str	r3, [r1, #88]	; 0x58
 8005e00:	e001      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04b      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e1c:	d030      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e22:	d82a      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e28:	d02e      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005e2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e2e:	d824      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e34:	d018      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e3a:	d81e      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e44:	d007      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e46:	e018      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a0d      	ldr	r2, [pc, #52]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e54:	e019      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f8ab 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e66:	e010      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 f954 	bl	800711c <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e78:	e007      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005e80:	bf00      	nop
 8005e82:	e002      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e84:	58024400 	.word	0x58024400
      break;
 8005e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e90:	4b99      	ldr	r3, [pc, #612]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e9e:	4996      	ldr	r1, [pc, #600]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	658b      	str	r3, [r1, #88]	; 0x58
 8005ea4:	e001      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d032      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	2b30      	cmp	r3, #48	; 0x30
 8005ebc:	d01c      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005ebe:	2b30      	cmp	r3, #48	; 0x30
 8005ec0:	d817      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d813      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d016      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d10f      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4b89      	ldr	r3, [pc, #548]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a88      	ldr	r2, [pc, #544]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ede:	e00e      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2102      	movs	r1, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 f866 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ef0:	e005      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	e002      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005ef8:	bf00      	nop
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f04:	4b7c      	ldr	r3, [pc, #496]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	4979      	ldr	r1, [pc, #484]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f16:	e001      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d047      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f30:	d030      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f36:	d82a      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f3c:	d02c      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f42:	d824      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f48:	d018      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4e:	d81e      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f58:	d007      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005f5a:	e018      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b66      	ldr	r3, [pc, #408]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a65      	ldr	r2, [pc, #404]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f68:	e017      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f821 	bl	8006fb8 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f7a:	e00e      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3324      	adds	r3, #36	; 0x24
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f8ca 	bl	800711c <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f8c:	e005      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f94:	bf00      	nop
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fa0:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	4952      	ldr	r1, [pc, #328]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8005fb2:	e001      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d049      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fcc:	d02e      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd2:	d828      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd8:	d02a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fde:	d822      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fe4:	d026      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005fe6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fea:	d81c      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff0:	d010      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff6:	d816      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01d      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006000:	d111      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f000 ffd5 	bl	8006fb8 <RCCEx_PLL2_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006012:	e012      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f87e 	bl	800711c <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006024:	e009      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
      break;
 800602a:	e006      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800602c:	bf00      	nop
 800602e:	e004      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006030:	bf00      	nop
 8006032:	e002      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006034:	bf00      	nop
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006040:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604c:	492a      	ldr	r1, [pc, #168]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800604e:	4313      	orrs	r3, r2
 8006050:	650b      	str	r3, [r1, #80]	; 0x50
 8006052:	e001      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d04d      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800606a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606e:	d02e      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006074:	d828      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d02a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d822      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006086:	d026      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800608c:	d81c      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800608e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006092:	d010      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006098:	d816      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01d      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800609e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a2:	d111      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	2101      	movs	r1, #1
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 ff84 	bl	8006fb8 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060b4:	e012      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f82d 	bl	800711c <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060c6:	e009      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e006      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060ce:	bf00      	nop
 80060d0:	e004      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80060da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10c      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060f0:	4901      	ldr	r1, [pc, #4]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	658b      	str	r3, [r1, #88]	; 0x58
 80060f6:	e003      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80060f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02f      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006114:	d00e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611a:	d814      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006124:	d10f      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006126:	4baf      	ldr	r3, [pc, #700]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4aae      	ldr	r2, [pc, #696]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800612c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006132:	e00c      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f000 ff3c 	bl	8006fb8 <RCCEx_PLL2_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006144:	e003      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
      break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800614c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006154:	4ba3      	ldr	r3, [pc, #652]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	49a0      	ldr	r1, [pc, #640]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006162:	4313      	orrs	r3, r2
 8006164:	650b      	str	r3, [r1, #80]	; 0x50
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d032      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	2b03      	cmp	r3, #3
 800617e:	d81b      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061bf 	.word	0x080061bf
 800618c:	08006199 	.word	0x08006199
 8006190:	080061a7 	.word	0x080061a7
 8006194:	080061bf 	.word	0x080061bf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b92      	ldr	r3, [pc, #584]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4a91      	ldr	r2, [pc, #580]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061a4:	e00c      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3304      	adds	r3, #4
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 ff03 	bl	8006fb8 <RCCEx_PLL2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
      break;
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80061be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061c6:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ca:	f023 0203 	bic.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4984      	ldr	r1, [pc, #528]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061d8:	e001      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8086 	beq.w	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ec:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a7d      	ldr	r2, [pc, #500]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f8:	f7fb fbc0 	bl	800197c <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061fe:	e009      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006200:	f7fb fbbc 	bl	800197c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b64      	cmp	r3, #100	; 0x64
 800620c:	d902      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	75fb      	strb	r3, [r7, #23]
        break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006214:	4b74      	ldr	r3, [pc, #464]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ef      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d166      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006226:	4b6f      	ldr	r3, [pc, #444]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006230:	4053      	eors	r3, r2
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800623a:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006244:	4b67      	ldr	r3, [pc, #412]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	4a66      	ldr	r2, [pc, #408]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800624a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006250:	4b64      	ldr	r3, [pc, #400]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a63      	ldr	r2, [pc, #396]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800625c:	4a61      	ldr	r2, [pc, #388]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626c:	d115      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626e:	f7fb fb85 	bl	800197c <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006274:	e00b      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fb fb81 	bl	800197c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d902      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	75fb      	strb	r3, [r7, #23]
            break;
 800628c:	e005      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628e:	4b55      	ldr	r3, [pc, #340]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0ed      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d126      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ae:	d10d      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80062b0:	4b4c      	ldr	r3, [pc, #304]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062be:	0919      	lsrs	r1, r3, #4
 80062c0:	4b4a      	ldr	r3, [pc, #296]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	4947      	ldr	r1, [pc, #284]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	610b      	str	r3, [r1, #16]
 80062ca:	e005      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80062cc:	4b45      	ldr	r3, [pc, #276]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a44      	ldr	r2, [pc, #272]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062d6:	6113      	str	r3, [r2, #16]
 80062d8:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e6:	493f      	ldr	r1, [pc, #252]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	670b      	str	r3, [r1, #112]	; 0x70
 80062ec:	e004      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	75bb      	strb	r3, [r7, #22]
 80062f2:	e001      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8085 	beq.w	8006410 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630a:	2b28      	cmp	r3, #40	; 0x28
 800630c:	d866      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	080063f1 	.word	0x080063f1
 8006318:	080063dd 	.word	0x080063dd
 800631c:	080063dd 	.word	0x080063dd
 8006320:	080063dd 	.word	0x080063dd
 8006324:	080063dd 	.word	0x080063dd
 8006328:	080063dd 	.word	0x080063dd
 800632c:	080063dd 	.word	0x080063dd
 8006330:	080063dd 	.word	0x080063dd
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063dd 	.word	0x080063dd
 800633c:	080063dd 	.word	0x080063dd
 8006340:	080063dd 	.word	0x080063dd
 8006344:	080063dd 	.word	0x080063dd
 8006348:	080063dd 	.word	0x080063dd
 800634c:	080063dd 	.word	0x080063dd
 8006350:	080063dd 	.word	0x080063dd
 8006354:	080063cb 	.word	0x080063cb
 8006358:	080063dd 	.word	0x080063dd
 800635c:	080063dd 	.word	0x080063dd
 8006360:	080063dd 	.word	0x080063dd
 8006364:	080063dd 	.word	0x080063dd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063dd 	.word	0x080063dd
 8006370:	080063dd 	.word	0x080063dd
 8006374:	080063f1 	.word	0x080063f1
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063dd 	.word	0x080063dd
 8006380:	080063dd 	.word	0x080063dd
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063dd 	.word	0x080063dd
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080063dd 	.word	0x080063dd
 8006394:	080063f1 	.word	0x080063f1
 8006398:	080063dd 	.word	0x080063dd
 800639c:	080063dd 	.word	0x080063dd
 80063a0:	080063dd 	.word	0x080063dd
 80063a4:	080063dd 	.word	0x080063dd
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063dd 	.word	0x080063dd
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063f1 	.word	0x080063f1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	2101      	movs	r1, #1
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fdfa 	bl	8006fb8 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063c8:	e013      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3324      	adds	r3, #36	; 0x24
 80063ce:	2101      	movs	r1, #1
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fea3 	bl	800711c <RCCEx_PLL3_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063da:	e00a      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
      break;
 80063e0:	e007      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
 80063e8:	58024800 	.word	0x58024800
 80063ec:	00ffffcf 	.word	0x00ffffcf
      break;
 80063f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063f8:	4b96      	ldr	r3, [pc, #600]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006404:	4993      	ldr	r1, [pc, #588]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	654b      	str	r3, [r1, #84]	; 0x54
 800640a:	e001      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d038      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006420:	2b05      	cmp	r3, #5
 8006422:	d821      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800646f 	.word	0x0800646f
 8006430:	08006445 	.word	0x08006445
 8006434:	08006457 	.word	0x08006457
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fdb4 	bl	8006fb8 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006454:	e00c      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2101      	movs	r1, #1
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fe5d 	bl	800711c <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006476:	4b77      	ldr	r3, [pc, #476]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	f023 0207 	bic.w	r2, r3, #7
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006482:	4974      	ldr	r1, [pc, #464]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006484:	4313      	orrs	r3, r2
 8006486:	654b      	str	r3, [r1, #84]	; 0x54
 8006488:	e001      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03a      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d821      	bhi.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064ef 	.word	0x080064ef
 80064b0:	080064c5 	.word	0x080064c5
 80064b4:	080064d7 	.word	0x080064d7
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	080064ef 	.word	0x080064ef
 80064c0:	080064ef 	.word	0x080064ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	2101      	movs	r1, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd74 	bl	8006fb8 <RCCEx_PLL2_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064d4:	e00c      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3324      	adds	r3, #36	; 0x24
 80064da:	2101      	movs	r1, #1
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fe1d 	bl	800711c <RCCEx_PLL3_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064e6:	e003      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80064ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f6:	4b57      	ldr	r3, [pc, #348]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	f023 0207 	bic.w	r2, r3, #7
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	4953      	ldr	r1, [pc, #332]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006506:	4313      	orrs	r3, r2
 8006508:	658b      	str	r3, [r1, #88]	; 0x58
 800650a:	e001      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d04b      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006526:	d02e      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800652c:	d828      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d02a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d822      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800653a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800653e:	d026      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006544:	d81c      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654a:	d010      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006550:	d816      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01d      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655a:	d111      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fd28 	bl	8006fb8 <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800656c:	e012      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3324      	adds	r3, #36	; 0x24
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fdd1 	bl	800711c <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800657e:	e009      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006586:	bf00      	nop
 8006588:	e004      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800658a:	bf00      	nop
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800659a:	4b2e      	ldr	r3, [pc, #184]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a8:	492a      	ldr	r1, [pc, #168]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	654b      	str	r3, [r1, #84]	; 0x54
 80065ae:	e001      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d04d      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ca:	d02e      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80065cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065d0:	d828      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d02a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d822      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e2:	d026      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e8:	d81c      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d010      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f4:	d816      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01d      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fe:	d111      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fcd6 	bl	8006fb8 <RCCEx_PLL2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006610:	e012      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3324      	adds	r3, #36	; 0x24
 8006616:	2102      	movs	r1, #2
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fd7f 	bl	800711c <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006622:	e009      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800662a:	bf00      	nop
 800662c:	e004      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10c      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800664c:	4901      	ldr	r1, [pc, #4]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800664e:	4313      	orrs	r3, r2
 8006650:	658b      	str	r3, [r1, #88]	; 0x58
 8006652:	e003      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d04b      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800666e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006672:	d02e      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006674:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006678:	d828      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667e:	d02a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006684:	d822      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800668a:	d026      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800668c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006690:	d81c      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006696:	d010      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669c:	d816      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01d      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d111      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc82 	bl	8006fb8 <RCCEx_PLL2_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066b8:	e012      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3324      	adds	r3, #36	; 0x24
 80066be:	2102      	movs	r1, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fd2b 	bl	800711c <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066ca:	e009      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	75fb      	strb	r3, [r7, #23]
      break;
 80066d0:	e006      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066d2:	bf00      	nop
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066e6:	4b9d      	ldr	r3, [pc, #628]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066f4:	4999      	ldr	r1, [pc, #612]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	658b      	str	r3, [r1, #88]	; 0x58
 80066fa:	e001      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3324      	adds	r3, #36	; 0x24
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fcfc 	bl	800711c <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800672e:	4b8b      	ldr	r3, [pc, #556]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800673c:	4987      	ldr	r1, [pc, #540]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800673e:	4313      	orrs	r3, r2
 8006740:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006758:	d10a      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	2102      	movs	r1, #2
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fcdb 	bl	800711c <RCCEx_PLL3_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006770:	4b7a      	ldr	r3, [pc, #488]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677e:	4977      	ldr	r1, [pc, #476]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006780:	4313      	orrs	r3, r2
 8006782:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d034      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800679a:	d01d      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800679c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a0:	d817      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067aa:	d009      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80067ac:	e011      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3304      	adds	r3, #4
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fbff 	bl	8006fb8 <RCCEx_PLL2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067be:	e00c      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3324      	adds	r3, #36	; 0x24
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fca8 	bl	800711c <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067d0:	e003      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
      break;
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80067d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067e0:	4b5e      	ldr	r3, [pc, #376]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ee:	495b      	ldr	r1, [pc, #364]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	658b      	str	r3, [r1, #88]	; 0x58
 80067f4:	e001      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d033      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006810:	d01c      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006816:	d816      	bhi.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800681e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006822:	d007      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006824:	e00f      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006826:	4b4d      	ldr	r3, [pc, #308]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	4a4c      	ldr	r2, [pc, #304]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800682c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006832:	e00c      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fc6e 	bl	800711c <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
      break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800684c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006854:	4b41      	ldr	r3, [pc, #260]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006862:	493e      	ldr	r1, [pc, #248]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006864:	4313      	orrs	r3, r2
 8006866:	654b      	str	r3, [r1, #84]	; 0x54
 8006868:	e001      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d029      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006886:	d007      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006888:	e00f      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688a:	4b34      	ldr	r3, [pc, #208]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	4a33      	ldr	r2, [pc, #204]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006896:	e00b      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	2102      	movs	r1, #2
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fb8a 	bl	8006fb8 <RCCEx_PLL2_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068a8:	e002      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068b6:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	4926      	ldr	r1, [pc, #152]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068c8:	e001      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3324      	adds	r3, #36	; 0x24
 80068de:	2102      	movs	r1, #2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fc1b 	bl	800711c <RCCEx_PLL3_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d033      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006904:	d017      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690a:	d811      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006910:	d013      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006916:	d80b      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d010      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006920:	d106      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a0d      	ldr	r2, [pc, #52]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800692e:	e007      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      break;
 8006934:	e004      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800693e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10c      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006952:	4902      	ldr	r1, [pc, #8]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006954:	4313      	orrs	r3, r2
 8006956:	654b      	str	r3, [r1, #84]	; 0x54
 8006958:	e004      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	492e      	ldr	r1, [pc, #184]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800697e:	4313      	orrs	r3, r2
 8006980:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800698e:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800699c:	4926      	ldr	r1, [pc, #152]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ba:	491f      	ldr	r1, [pc, #124]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d6:	6113      	str	r3, [r2, #16]
 80069d8:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069e2:	4915      	ldr	r1, [pc, #84]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da08      	bge.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	490e      	ldr	r1, [pc, #56]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	4906      	ldr	r1, [pc, #24]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a22:	7dbb      	ldrb	r3, [r7, #22]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400

08006a3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a40:	f7ff f818 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8006a44:	4602      	mov	r2, r0
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	091b      	lsrs	r3, r3, #4
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4904      	ldr	r1, [pc, #16]	; (8006a64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	58024400 	.word	0x58024400
 8006a64:	0800dbf0 	.word	0x0800dbf0

08006a68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a70:	4ba1      	ldr	r3, [pc, #644]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a7a:	4b9f      	ldr	r3, [pc, #636]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	0b1b      	lsrs	r3, r3, #12
 8006a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a86:	4b9c      	ldr	r3, [pc, #624]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a92:	4b99      	ldr	r3, [pc, #612]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	08db      	lsrs	r3, r3, #3
 8006a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8111 	beq.w	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	f000 8083 	beq.w	8006bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	f200 80a1 	bhi.w	8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d056      	beq.n	8006b80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ad2:	e099      	b.n	8006c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ad4:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02d      	beq.n	8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ae0:	4b85      	ldr	r3, [pc, #532]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	08db      	lsrs	r3, r3, #3
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	4a84      	ldr	r2, [pc, #528]	; (8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b7b      	ldr	r3, [pc, #492]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b3a:	e087      	b.n	8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4e:	4b6a      	ldr	r3, [pc, #424]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b7e:	e065      	b.n	8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b92:	4b59      	ldr	r3, [pc, #356]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc2:	e043      	b.n	8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd6:	4b48      	ldr	r3, [pc, #288]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c06:	e021      	b.n	8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	0a5b      	lsrs	r3, r3, #9
 8006c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c72:	ee17 2a90 	vmov	r2, s15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	0c1b      	lsrs	r3, r3, #16
 8006c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca0:	ee17 2a90 	vmov	r2, s15
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	0e1b      	lsrs	r3, r3, #24
 8006cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cce:	ee17 2a90 	vmov	r2, s15
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cd6:	e008      	b.n	8006cea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
}
 8006cea:	bf00      	nop
 8006cec:	3724      	adds	r7, #36	; 0x24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	03d09000 	.word	0x03d09000
 8006d00:	46000000 	.word	0x46000000
 8006d04:	4c742400 	.word	0x4c742400
 8006d08:	4a742400 	.word	0x4a742400
 8006d0c:	4bbebc20 	.word	0x4bbebc20

08006d10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b089      	sub	sp, #36	; 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d18:	4ba1      	ldr	r3, [pc, #644]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d22:	4b9f      	ldr	r3, [pc, #636]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	0d1b      	lsrs	r3, r3, #20
 8006d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d2e:	4b9c      	ldr	r3, [pc, #624]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d3a:	4b99      	ldr	r3, [pc, #612]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8111 	beq.w	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f000 8083 	beq.w	8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	f200 80a1 	bhi.w	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d056      	beq.n	8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d7a:	e099      	b.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d7c:	4b88      	ldr	r3, [pc, #544]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02d      	beq.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d88:	4b85      	ldr	r3, [pc, #532]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	08db      	lsrs	r3, r3, #3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	4a84      	ldr	r2, [pc, #528]	; (8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b7b      	ldr	r3, [pc, #492]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006de2:	e087      	b.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b6a      	ldr	r3, [pc, #424]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e26:	e065      	b.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b59      	ldr	r3, [pc, #356]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e6a:	e043      	b.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b48      	ldr	r3, [pc, #288]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eae:	e021      	b.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec2:	4b37      	ldr	r3, [pc, #220]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	0a5b      	lsrs	r3, r3, #9
 8006efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f22:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f48:	ee17 2a90 	vmov	r2, s15
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f50:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	0e1b      	lsrs	r3, r3, #24
 8006f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f76:	ee17 2a90 	vmov	r2, s15
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f7e:	e008      	b.n	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	609a      	str	r2, [r3, #8]
}
 8006f92:	bf00      	nop
 8006f94:	3724      	adds	r7, #36	; 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	03d09000 	.word	0x03d09000
 8006fa8:	46000000 	.word	0x46000000
 8006fac:	4c742400 	.word	0x4c742400
 8006fb0:	4a742400 	.word	0x4a742400
 8006fb4:	4bbebc20 	.word	0x4bbebc20

08006fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fc6:	4b53      	ldr	r3, [pc, #332]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d101      	bne.n	8006fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e099      	b.n	800710a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fd6:	4b4f      	ldr	r3, [pc, #316]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a4e      	ldr	r2, [pc, #312]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe2:	f7fa fccb 	bl	800197c <HAL_GetTick>
 8006fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fe8:	e008      	b.n	8006ffc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006fea:	f7fa fcc7 	bl	800197c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e086      	b.n	800710a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ffc:	4b45      	ldr	r3, [pc, #276]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f0      	bne.n	8006fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	493f      	ldr	r1, [pc, #252]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007018:	4313      	orrs	r3, r2
 800701a:	628b      	str	r3, [r1, #40]	; 0x28
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	3b01      	subs	r3, #1
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	b29b      	uxth	r3, r3
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	3b01      	subs	r3, #1
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	061b      	lsls	r3, r3, #24
 8007048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800704c:	4931      	ldr	r1, [pc, #196]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 800704e:	4313      	orrs	r3, r2
 8007050:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007052:	4b30      	ldr	r3, [pc, #192]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	492d      	ldr	r1, [pc, #180]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007060:	4313      	orrs	r3, r2
 8007062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	f023 0220 	bic.w	r2, r3, #32
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	4928      	ldr	r1, [pc, #160]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 800707c:	f023 0310 	bic.w	r3, r3, #16
 8007080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007082:	4b24      	ldr	r3, [pc, #144]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007086:	4b24      	ldr	r3, [pc, #144]	; (8007118 <RCCEx_PLL2_Config+0x160>)
 8007088:	4013      	ands	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	69d2      	ldr	r2, [r2, #28]
 800708e:	00d2      	lsls	r2, r2, #3
 8007090:	4920      	ldr	r1, [pc, #128]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007096:	4b1f      	ldr	r3, [pc, #124]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 800709c:	f043 0310 	orr.w	r3, r3, #16
 80070a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070b4:	e00f      	b.n	80070d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070bc:	4b15      	ldr	r3, [pc, #84]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070c8:	e005      	b.n	80070d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	4a11      	ldr	r2, [pc, #68]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e2:	f7fa fc4b 	bl	800197c <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070e8:	e008      	b.n	80070fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80070ea:	f7fa fc47 	bl	800197c <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e006      	b.n	800710a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	58024400 	.word	0x58024400
 8007118:	ffff0007 	.word	0xffff0007

0800711c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800712a:	4b53      	ldr	r3, [pc, #332]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b03      	cmp	r3, #3
 8007134:	d101      	bne.n	800713a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e099      	b.n	800726e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800713a:	4b4f      	ldr	r3, [pc, #316]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a4e      	ldr	r2, [pc, #312]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fa fc19 	bl	800197c <HAL_GetTick>
 800714a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800714c:	e008      	b.n	8007160 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800714e:	f7fa fc15 	bl	800197c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e086      	b.n	800726e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007160:	4b45      	ldr	r3, [pc, #276]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800716c:	4b42      	ldr	r3, [pc, #264]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	051b      	lsls	r3, r3, #20
 800717a:	493f      	ldr	r1, [pc, #252]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800717c:	4313      	orrs	r3, r2
 800717e:	628b      	str	r3, [r1, #40]	; 0x28
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	3b01      	subs	r3, #1
 8007186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	3b01      	subs	r3, #1
 8007190:	025b      	lsls	r3, r3, #9
 8007192:	b29b      	uxth	r3, r3
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	3b01      	subs	r3, #1
 800719c:	041b      	lsls	r3, r3, #16
 800719e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071b0:	4931      	ldr	r1, [pc, #196]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071b6:	4b30      	ldr	r3, [pc, #192]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	492d      	ldr	r1, [pc, #180]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071c8:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	4928      	ldr	r1, [pc, #160]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071da:	4b27      	ldr	r3, [pc, #156]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	4a26      	ldr	r2, [pc, #152]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071e6:	4b24      	ldr	r3, [pc, #144]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ea:	4b24      	ldr	r3, [pc, #144]	; (800727c <RCCEx_PLL3_Config+0x160>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	69d2      	ldr	r2, [r2, #28]
 80071f2:	00d2      	lsls	r2, r2, #3
 80071f4:	4920      	ldr	r1, [pc, #128]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071fa:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007218:	e00f      	b.n	800723a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d106      	bne.n	800722e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007220:	4b15      	ldr	r3, [pc, #84]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a14      	ldr	r2, [pc, #80]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800722a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800722c:	e005      	b.n	800723a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	4a11      	ldr	r2, [pc, #68]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a0e      	ldr	r2, [pc, #56]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007246:	f7fa fb99 	bl	800197c <HAL_GetTick>
 800724a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800724c:	e008      	b.n	8007260 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800724e:	f7fa fb95 	bl	800197c <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e006      	b.n	800726e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <RCCEx_PLL3_Config+0x15c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	58024400 	.word	0x58024400
 800727c:	ffff0007 	.word	0xffff0007

08007280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e049      	b.n	8007326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f841 	bl	800732e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f000 fa00 	bl	80076c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d001      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e054      	b.n	8007406 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <HAL_TIM_Base_Start_IT+0xd0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007386:	d01d      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a22      	ldr	r2, [pc, #136]	; (8007418 <HAL_TIM_Base_Start_IT+0xd4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a21      	ldr	r2, [pc, #132]	; (800741c <HAL_TIM_Base_Start_IT+0xd8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1f      	ldr	r2, [pc, #124]	; (8007420 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <HAL_TIM_Base_Start_IT+0xe0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_TIM_Base_Start_IT+0xe4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x80>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1b      	ldr	r2, [pc, #108]	; (800742c <HAL_TIM_Base_Start_IT+0xe8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d115      	bne.n	80073f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	4b19      	ldr	r3, [pc, #100]	; (8007430 <HAL_TIM_Base_Start_IT+0xec>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b06      	cmp	r3, #6
 80073d4:	d015      	beq.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073dc:	d011      	beq.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ee:	e008      	b.n	8007402 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e000      	b.n	8007404 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40010000 	.word	0x40010000
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40010400 	.word	0x40010400
 8007428:	40001800 	.word	0x40001800
 800742c:	40014000 	.word	0x40014000
 8007430:	00010007 	.word	0x00010007

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f905 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f8f7 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f908 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8db 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8cd 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8de 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d122      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f8b1 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8a3 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f8b4 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d122      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b10      	cmp	r3, #16
 8007552:	d11b      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f887 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f879 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f88a 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0201 	mvn.w	r2, #1
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7f9 fb14 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f914 	bl	800780c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f2:	d10e      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fe:	2b80      	cmp	r3, #128	; 0x80
 8007600:	d107      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800760a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f907 	bl	8007820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d10e      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d107      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f838 	bl	80076ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d10e      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b20      	cmp	r3, #32
 8007658:	d107      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f06f 0220 	mvn.w	r2, #32
 8007662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f8c7 	bl	80077f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a40      	ldr	r2, [pc, #256]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d00f      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a3d      	ldr	r2, [pc, #244]	; (80077dc <TIM_Base_SetConfig+0x118>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3c      	ldr	r2, [pc, #240]	; (80077e0 <TIM_Base_SetConfig+0x11c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3b      	ldr	r2, [pc, #236]	; (80077e4 <TIM_Base_SetConfig+0x120>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3a      	ldr	r2, [pc, #232]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d108      	bne.n	8007716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01f      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007724:	d01b      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <TIM_Base_SetConfig+0x118>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d017      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <TIM_Base_SetConfig+0x11c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <TIM_Base_SetConfig+0x120>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00f      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00b      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a28      	ldr	r2, [pc, #160]	; (80077ec <TIM_Base_SetConfig+0x128>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a27      	ldr	r2, [pc, #156]	; (80077f0 <TIM_Base_SetConfig+0x12c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a26      	ldr	r2, [pc, #152]	; (80077f4 <TIM_Base_SetConfig+0x130>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d108      	bne.n	8007770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00f      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00b      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <TIM_Base_SetConfig+0x128>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d007      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <TIM_Base_SetConfig+0x12c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <TIM_Base_SetConfig+0x130>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d103      	bne.n	80077c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	615a      	str	r2, [r3, #20]
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400
 80077f4:	40014800 	.word	0x40014800

080077f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e042      	b.n	80078cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7f9 f9f7 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	; 0x24
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fd36 	bl	80082e8 <UART_SetConfig>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e022      	b.n	80078cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fa92 	bl	8008db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fb19 	bl	8008efc <UART_CheckIdleState>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	f040 8083 	bne.w	80079f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Transmit+0x28>
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e07b      	b.n	80079f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UART_Transmit+0x3a>
 800790a:	2302      	movs	r3, #2
 800790c:	e074      	b.n	80079f8 <HAL_UART_Transmit+0x124>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2221      	movs	r2, #33	; 0x21
 8007922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007926:	f7fa f829 	bl	800197c <HAL_GetTick>
 800792a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007944:	d108      	bne.n	8007958 <HAL_UART_Transmit+0x84>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	e003      	b.n	8007960 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007968:	e02c      	b.n	80079c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2200      	movs	r2, #0
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 fb0c 	bl	8008f92 <UART_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e039      	b.n	80079f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	3302      	adds	r3, #2
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	e007      	b.n	80079b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	781a      	ldrb	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	3301      	adds	r3, #1
 80079b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1cc      	bne.n	800796a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2200      	movs	r2, #0
 80079d8:	2140      	movs	r1, #64	; 0x40
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f001 fad9 	bl	8008f92 <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e006      	b.n	80079f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d142      	bne.n	8007a9e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Receive_IT+0x24>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e03b      	b.n	8007aa0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_UART_Receive_IT+0x36>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e034      	b.n	8007aa0 <HAL_UART_Receive_IT+0xa0>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <HAL_UART_Receive_IT+0xa8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01f      	beq.n	8007a8e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d018      	beq.n	8007a8e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	69f9      	ldr	r1, [r7, #28]
 8007a80:	6a3a      	ldr	r2, [r7, #32]
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e6      	bne.n	8007a5c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	461a      	mov	r2, r3
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 fb45 	bl	8009124 <UART_Start_Receive_IT>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	e000      	b.n	8007aa0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a9e:	2302      	movs	r3, #2
  }
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3728      	adds	r7, #40	; 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	58000c00 	.word	0x58000c00

08007aac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d142      	bne.n	8007b4a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_UART_Receive_DMA+0x24>
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e03b      	b.n	8007b4c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <HAL_UART_Receive_DMA+0x36>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e034      	b.n	8007b4c <HAL_UART_Receive_DMA+0xa0>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <HAL_UART_Receive_DMA+0xa8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01f      	beq.n	8007b3a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d018      	beq.n	8007b3a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	623b      	str	r3, [r7, #32]
 8007b28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 fc19 	bl	8009378 <UART_Start_Receive_DMA>
 8007b46:	4603      	mov	r3, r0
 8007b48:	e000      	b.n	8007b4c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3728      	adds	r7, #40	; 0x28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	58000c00 	.word	0x58000c00

08007b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b0ba      	sub	sp, #232	; 0xe8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b86:	4013      	ands	r3, r2
 8007b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11b      	bne.n	8007bcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d009      	beq.n	8007bcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 835a 	beq.w	8008276 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      }
      return;
 8007bca:	e354      	b.n	8008276 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 811f 	beq.w	8007e14 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bda:	4b8b      	ldr	r3, [pc, #556]	; (8007e08 <HAL_UART_IRQHandler+0x2b0>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007be2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007be6:	4b89      	ldr	r3, [pc, #548]	; (8007e0c <HAL_UART_IRQHandler+0x2b4>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8112 	beq.w	8007e14 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d011      	beq.n	8007c20 <HAL_UART_IRQHandler+0xc8>
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d011      	beq.n	8007c50 <HAL_UART_IRQHandler+0xf8>
 8007c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d011      	beq.n	8007c80 <HAL_UART_IRQHandler+0x128>
 8007c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c76:	f043 0202 	orr.w	r2, r3, #2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d017      	beq.n	8007cbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c9c:	4b5a      	ldr	r3, [pc, #360]	; (8007e08 <HAL_UART_IRQHandler+0x2b0>)
 8007c9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d012      	beq.n	8007cee <HAL_UART_IRQHandler+0x196>
 8007cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 82c0 	beq.w	800827a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d005      	beq.n	8007d52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04f      	beq.n	8007df2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fbfa 	bl	800954c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d141      	bne.n	8007dea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1d9      	bne.n	8007d66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d013      	beq.n	8007de2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbe:	4a14      	ldr	r2, [pc, #80]	; (8007e10 <HAL_UART_IRQHandler+0x2b8>)
 8007dc0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fa ffb4 	bl	8002d34 <HAL_DMA_Abort_IT>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d017      	beq.n	8007e02 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de0:	e00f      	b.n	8007e02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa6a 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de8:	e00b      	b.n	8007e02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa66 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df0:	e007      	b.n	8007e02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa62 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007e00:	e23b      	b.n	800827a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e02:	bf00      	nop
    return;
 8007e04:	e239      	b.n	800827a <HAL_UART_IRQHandler+0x722>
 8007e06:	bf00      	nop
 8007e08:	10000001 	.word	0x10000001
 8007e0c:	04000120 	.word	0x04000120
 8007e10:	080097f3 	.word	0x080097f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	f040 81ce 	bne.w	80081ba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 81c7 	beq.w	80081ba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 81c0 	beq.w	80081ba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2210      	movs	r2, #16
 8007e40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	f040 813b 	bne.w	80080c8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a8b      	ldr	r2, [pc, #556]	; (8008088 <HAL_UART_IRQHandler+0x530>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d059      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a89      	ldr	r2, [pc, #548]	; (800808c <HAL_UART_IRQHandler+0x534>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d053      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a87      	ldr	r2, [pc, #540]	; (8008090 <HAL_UART_IRQHandler+0x538>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d04d      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a85      	ldr	r2, [pc, #532]	; (8008094 <HAL_UART_IRQHandler+0x53c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d047      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a83      	ldr	r2, [pc, #524]	; (8008098 <HAL_UART_IRQHandler+0x540>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d041      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a81      	ldr	r2, [pc, #516]	; (800809c <HAL_UART_IRQHandler+0x544>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d03b      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a7f      	ldr	r2, [pc, #508]	; (80080a0 <HAL_UART_IRQHandler+0x548>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d035      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a7d      	ldr	r2, [pc, #500]	; (80080a4 <HAL_UART_IRQHandler+0x54c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d02f      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7b      	ldr	r2, [pc, #492]	; (80080a8 <HAL_UART_IRQHandler+0x550>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d029      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a79      	ldr	r2, [pc, #484]	; (80080ac <HAL_UART_IRQHandler+0x554>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d023      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a77      	ldr	r2, [pc, #476]	; (80080b0 <HAL_UART_IRQHandler+0x558>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01d      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a75      	ldr	r2, [pc, #468]	; (80080b4 <HAL_UART_IRQHandler+0x55c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d017      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <HAL_UART_IRQHandler+0x560>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d011      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a71      	ldr	r2, [pc, #452]	; (80080bc <HAL_UART_IRQHandler+0x564>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00b      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6f      	ldr	r2, [pc, #444]	; (80080c0 <HAL_UART_IRQHandler+0x568>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d005      	beq.n	8007f12 <HAL_UART_IRQHandler+0x3ba>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a6d      	ldr	r2, [pc, #436]	; (80080c4 <HAL_UART_IRQHandler+0x56c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d105      	bne.n	8007f1e <HAL_UART_IRQHandler+0x3c6>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	e004      	b.n	8007f28 <HAL_UART_IRQHandler+0x3d0>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 81a4 	beq.w	800827e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f40:	429a      	cmp	r2, r3
 8007f42:	f080 819c 	bcs.w	800827e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5a:	f000 8086 	beq.w	800806a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1da      	bne.n	8007f5e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e1      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008008:	66fa      	str	r2, [r7, #108]	; 0x6c
 800800a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800800e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e3      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	f023 0310 	bic.w	r3, r3, #16
 800803e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800804c:	65bb      	str	r3, [r7, #88]	; 0x58
 800804e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800805a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e4      	bne.n	800802a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008064:	4618      	mov	r0, r3
 8008066:	f7fa fb47 	bl	80026f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008076:	b29b      	uxth	r3, r3
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	b29b      	uxth	r3, r3
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f926 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008084:	e0fb      	b.n	800827e <HAL_UART_IRQHandler+0x726>
 8008086:	bf00      	nop
 8008088:	40020010 	.word	0x40020010
 800808c:	40020028 	.word	0x40020028
 8008090:	40020040 	.word	0x40020040
 8008094:	40020058 	.word	0x40020058
 8008098:	40020070 	.word	0x40020070
 800809c:	40020088 	.word	0x40020088
 80080a0:	400200a0 	.word	0x400200a0
 80080a4:	400200b8 	.word	0x400200b8
 80080a8:	40020410 	.word	0x40020410
 80080ac:	40020428 	.word	0x40020428
 80080b0:	40020440 	.word	0x40020440
 80080b4:	40020458 	.word	0x40020458
 80080b8:	40020470 	.word	0x40020470
 80080bc:	40020488 	.word	0x40020488
 80080c0:	400204a0 	.word	0x400204a0
 80080c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 80cc 	beq.w	8008282 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80080ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80c7 	beq.w	8008282 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008116:	647b      	str	r3, [r7, #68]	; 0x44
 8008118:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800811c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e4      	bne.n	80080f4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	623b      	str	r3, [r7, #32]
   return(result);
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	4b54      	ldr	r3, [pc, #336]	; (8008290 <HAL_UART_IRQHandler+0x738>)
 800813e:	4013      	ands	r3, r2
 8008140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800814e:	633a      	str	r2, [r7, #48]	; 0x30
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e3      	bne.n	800812a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	60fb      	str	r3, [r7, #12]
   return(result);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0310 	bic.w	r3, r3, #16
 800818a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69b9      	ldr	r1, [r7, #24]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	617b      	str	r3, [r7, #20]
   return(result);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e4      	bne.n	8008176 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f88c 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081b8:	e063      	b.n	8008282 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <HAL_UART_IRQHandler+0x68c>
 80081c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 ffa5 	bl	800a12c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081e2:	e051      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d014      	beq.n	800821a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820c:	2b00      	cmp	r3, #0
 800820e:	d03a      	beq.n	8008286 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
    }
    return;
 8008218:	e035      	b.n	8008286 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800821a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <HAL_UART_IRQHandler+0x6e2>
 8008226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 faf3 	bl	800981e <UART_EndTransmit_IT>
    return;
 8008238:	e026      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0x702>
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 ff7e 	bl	800a154 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008258:	e016      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d010      	beq.n	8008288 <HAL_UART_IRQHandler+0x730>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826a:	2b00      	cmp	r3, #0
 800826c:	da0c      	bge.n	8008288 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 ff66 	bl	800a140 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008274:	e008      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
      return;
 8008276:	bf00      	nop
 8008278:	e006      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
    return;
 800827a:	bf00      	nop
 800827c:	e004      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
      return;
 800827e:	bf00      	nop
 8008280:	e002      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
      return;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_UART_IRQHandler+0x730>
    return;
 8008286:	bf00      	nop
  }
}
 8008288:	37e8      	adds	r7, #232	; 0xe8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	effffffe 	.word	0xeffffffe

08008294 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082ec:	b092      	sub	sp, #72	; 0x48
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4bbe      	ldr	r3, [pc, #760]	; (8008610 <UART_SetConfig+0x328>)
 8008318:	4013      	ands	r3, r2
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008320:	430b      	orrs	r3, r1
 8008322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4ab3      	ldr	r2, [pc, #716]	; (8008614 <UART_SetConfig+0x32c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008350:	4313      	orrs	r3, r2
 8008352:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689a      	ldr	r2, [r3, #8]
 800835a:	4baf      	ldr	r3, [pc, #700]	; (8008618 <UART_SetConfig+0x330>)
 800835c:	4013      	ands	r3, r2
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008364:	430b      	orrs	r3, r1
 8008366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	f023 010f 	bic.w	r1, r3, #15
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4aa6      	ldr	r2, [pc, #664]	; (800861c <UART_SetConfig+0x334>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d177      	bne.n	8008478 <UART_SetConfig+0x190>
 8008388:	4ba5      	ldr	r3, [pc, #660]	; (8008620 <UART_SetConfig+0x338>)
 800838a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008390:	2b28      	cmp	r3, #40	; 0x28
 8008392:	d86d      	bhi.n	8008470 <UART_SetConfig+0x188>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0xb4>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	08008441 	.word	0x08008441
 80083a0:	08008471 	.word	0x08008471
 80083a4:	08008471 	.word	0x08008471
 80083a8:	08008471 	.word	0x08008471
 80083ac:	08008471 	.word	0x08008471
 80083b0:	08008471 	.word	0x08008471
 80083b4:	08008471 	.word	0x08008471
 80083b8:	08008471 	.word	0x08008471
 80083bc:	08008449 	.word	0x08008449
 80083c0:	08008471 	.word	0x08008471
 80083c4:	08008471 	.word	0x08008471
 80083c8:	08008471 	.word	0x08008471
 80083cc:	08008471 	.word	0x08008471
 80083d0:	08008471 	.word	0x08008471
 80083d4:	08008471 	.word	0x08008471
 80083d8:	08008471 	.word	0x08008471
 80083dc:	08008451 	.word	0x08008451
 80083e0:	08008471 	.word	0x08008471
 80083e4:	08008471 	.word	0x08008471
 80083e8:	08008471 	.word	0x08008471
 80083ec:	08008471 	.word	0x08008471
 80083f0:	08008471 	.word	0x08008471
 80083f4:	08008471 	.word	0x08008471
 80083f8:	08008471 	.word	0x08008471
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008471 	.word	0x08008471
 8008404:	08008471 	.word	0x08008471
 8008408:	08008471 	.word	0x08008471
 800840c:	08008471 	.word	0x08008471
 8008410:	08008471 	.word	0x08008471
 8008414:	08008471 	.word	0x08008471
 8008418:	08008471 	.word	0x08008471
 800841c:	08008461 	.word	0x08008461
 8008420:	08008471 	.word	0x08008471
 8008424:	08008471 	.word	0x08008471
 8008428:	08008471 	.word	0x08008471
 800842c:	08008471 	.word	0x08008471
 8008430:	08008471 	.word	0x08008471
 8008434:	08008471 	.word	0x08008471
 8008438:	08008471 	.word	0x08008471
 800843c:	08008469 	.word	0x08008469
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e222      	b.n	800888e <UART_SetConfig+0x5a6>
 8008448:	2304      	movs	r3, #4
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e21e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008450:	2308      	movs	r3, #8
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e21a      	b.n	800888e <UART_SetConfig+0x5a6>
 8008458:	2310      	movs	r3, #16
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e216      	b.n	800888e <UART_SetConfig+0x5a6>
 8008460:	2320      	movs	r3, #32
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e212      	b.n	800888e <UART_SetConfig+0x5a6>
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e20e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008470:	2380      	movs	r3, #128	; 0x80
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e20a      	b.n	800888e <UART_SetConfig+0x5a6>
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a69      	ldr	r2, [pc, #420]	; (8008624 <UART_SetConfig+0x33c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d130      	bne.n	80084e4 <UART_SetConfig+0x1fc>
 8008482:	4b67      	ldr	r3, [pc, #412]	; (8008620 <UART_SetConfig+0x338>)
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	2b05      	cmp	r3, #5
 800848c:	d826      	bhi.n	80084dc <UART_SetConfig+0x1f4>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <UART_SetConfig+0x1ac>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084b5 	.word	0x080084b5
 800849c:	080084bd 	.word	0x080084bd
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e1ec      	b.n	800888e <UART_SetConfig+0x5a6>
 80084b4:	2304      	movs	r3, #4
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e1e8      	b.n	800888e <UART_SetConfig+0x5a6>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e1e4      	b.n	800888e <UART_SetConfig+0x5a6>
 80084c4:	2310      	movs	r3, #16
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e1e0      	b.n	800888e <UART_SetConfig+0x5a6>
 80084cc:	2320      	movs	r3, #32
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e1dc      	b.n	800888e <UART_SetConfig+0x5a6>
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e1d8      	b.n	800888e <UART_SetConfig+0x5a6>
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e1d4      	b.n	800888e <UART_SetConfig+0x5a6>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a4f      	ldr	r2, [pc, #316]	; (8008628 <UART_SetConfig+0x340>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d130      	bne.n	8008550 <UART_SetConfig+0x268>
 80084ee:	4b4c      	ldr	r3, [pc, #304]	; (8008620 <UART_SetConfig+0x338>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d826      	bhi.n	8008548 <UART_SetConfig+0x260>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0x218>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008519 	.word	0x08008519
 8008504:	08008521 	.word	0x08008521
 8008508:	08008529 	.word	0x08008529
 800850c:	08008531 	.word	0x08008531
 8008510:	08008539 	.word	0x08008539
 8008514:	08008541 	.word	0x08008541
 8008518:	2300      	movs	r3, #0
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e1b6      	b.n	800888e <UART_SetConfig+0x5a6>
 8008520:	2304      	movs	r3, #4
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e1b2      	b.n	800888e <UART_SetConfig+0x5a6>
 8008528:	2308      	movs	r3, #8
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e1ae      	b.n	800888e <UART_SetConfig+0x5a6>
 8008530:	2310      	movs	r3, #16
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e1aa      	b.n	800888e <UART_SetConfig+0x5a6>
 8008538:	2320      	movs	r3, #32
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e1a6      	b.n	800888e <UART_SetConfig+0x5a6>
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e1a2      	b.n	800888e <UART_SetConfig+0x5a6>
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e19e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a35      	ldr	r2, [pc, #212]	; (800862c <UART_SetConfig+0x344>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d130      	bne.n	80085bc <UART_SetConfig+0x2d4>
 800855a:	4b31      	ldr	r3, [pc, #196]	; (8008620 <UART_SetConfig+0x338>)
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	2b05      	cmp	r3, #5
 8008564:	d826      	bhi.n	80085b4 <UART_SetConfig+0x2cc>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <UART_SetConfig+0x284>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008585 	.word	0x08008585
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008595 	.word	0x08008595
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e180      	b.n	800888e <UART_SetConfig+0x5a6>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e17c      	b.n	800888e <UART_SetConfig+0x5a6>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e178      	b.n	800888e <UART_SetConfig+0x5a6>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e174      	b.n	800888e <UART_SetConfig+0x5a6>
 80085a4:	2320      	movs	r3, #32
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e170      	b.n	800888e <UART_SetConfig+0x5a6>
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e16c      	b.n	800888e <UART_SetConfig+0x5a6>
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ba:	e168      	b.n	800888e <UART_SetConfig+0x5a6>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <UART_SetConfig+0x348>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d142      	bne.n	800864c <UART_SetConfig+0x364>
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <UART_SetConfig+0x338>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d838      	bhi.n	8008644 <UART_SetConfig+0x35c>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x2f0>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	080085f9 	.word	0x080085f9
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008635 	.word	0x08008635
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e14a      	b.n	800888e <UART_SetConfig+0x5a6>
 80085f8:	2304      	movs	r3, #4
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fe:	e146      	b.n	800888e <UART_SetConfig+0x5a6>
 8008600:	2308      	movs	r3, #8
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008606:	e142      	b.n	800888e <UART_SetConfig+0x5a6>
 8008608:	2310      	movs	r3, #16
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860e:	e13e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008610:	cfff69f3 	.word	0xcfff69f3
 8008614:	58000c00 	.word	0x58000c00
 8008618:	11fff4ff 	.word	0x11fff4ff
 800861c:	40011000 	.word	0x40011000
 8008620:	58024400 	.word	0x58024400
 8008624:	40004400 	.word	0x40004400
 8008628:	40004800 	.word	0x40004800
 800862c:	40004c00 	.word	0x40004c00
 8008630:	40005000 	.word	0x40005000
 8008634:	2320      	movs	r3, #32
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e128      	b.n	800888e <UART_SetConfig+0x5a6>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e124      	b.n	800888e <UART_SetConfig+0x5a6>
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e120      	b.n	800888e <UART_SetConfig+0x5a6>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4acb      	ldr	r2, [pc, #812]	; (8008980 <UART_SetConfig+0x698>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d176      	bne.n	8008744 <UART_SetConfig+0x45c>
 8008656:	4bcb      	ldr	r3, [pc, #812]	; (8008984 <UART_SetConfig+0x69c>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800865e:	2b28      	cmp	r3, #40	; 0x28
 8008660:	d86c      	bhi.n	800873c <UART_SetConfig+0x454>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0x380>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800873d 	.word	0x0800873d
 8008670:	0800873d 	.word	0x0800873d
 8008674:	0800873d 	.word	0x0800873d
 8008678:	0800873d 	.word	0x0800873d
 800867c:	0800873d 	.word	0x0800873d
 8008680:	0800873d 	.word	0x0800873d
 8008684:	0800873d 	.word	0x0800873d
 8008688:	08008715 	.word	0x08008715
 800868c:	0800873d 	.word	0x0800873d
 8008690:	0800873d 	.word	0x0800873d
 8008694:	0800873d 	.word	0x0800873d
 8008698:	0800873d 	.word	0x0800873d
 800869c:	0800873d 	.word	0x0800873d
 80086a0:	0800873d 	.word	0x0800873d
 80086a4:	0800873d 	.word	0x0800873d
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	0800873d 	.word	0x0800873d
 80086b0:	0800873d 	.word	0x0800873d
 80086b4:	0800873d 	.word	0x0800873d
 80086b8:	0800873d 	.word	0x0800873d
 80086bc:	0800873d 	.word	0x0800873d
 80086c0:	0800873d 	.word	0x0800873d
 80086c4:	0800873d 	.word	0x0800873d
 80086c8:	08008725 	.word	0x08008725
 80086cc:	0800873d 	.word	0x0800873d
 80086d0:	0800873d 	.word	0x0800873d
 80086d4:	0800873d 	.word	0x0800873d
 80086d8:	0800873d 	.word	0x0800873d
 80086dc:	0800873d 	.word	0x0800873d
 80086e0:	0800873d 	.word	0x0800873d
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	0800872d 	.word	0x0800872d
 80086ec:	0800873d 	.word	0x0800873d
 80086f0:	0800873d 	.word	0x0800873d
 80086f4:	0800873d 	.word	0x0800873d
 80086f8:	0800873d 	.word	0x0800873d
 80086fc:	0800873d 	.word	0x0800873d
 8008700:	0800873d 	.word	0x0800873d
 8008704:	0800873d 	.word	0x0800873d
 8008708:	08008735 	.word	0x08008735
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e0bc      	b.n	800888e <UART_SetConfig+0x5a6>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e0b8      	b.n	800888e <UART_SetConfig+0x5a6>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e0b4      	b.n	800888e <UART_SetConfig+0x5a6>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e0b0      	b.n	800888e <UART_SetConfig+0x5a6>
 800872c:	2320      	movs	r3, #32
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e0ac      	b.n	800888e <UART_SetConfig+0x5a6>
 8008734:	2340      	movs	r3, #64	; 0x40
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e0a8      	b.n	800888e <UART_SetConfig+0x5a6>
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e0a4      	b.n	800888e <UART_SetConfig+0x5a6>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a8f      	ldr	r2, [pc, #572]	; (8008988 <UART_SetConfig+0x6a0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d130      	bne.n	80087b0 <UART_SetConfig+0x4c8>
 800874e:	4b8d      	ldr	r3, [pc, #564]	; (8008984 <UART_SetConfig+0x69c>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b05      	cmp	r3, #5
 8008758:	d826      	bhi.n	80087a8 <UART_SetConfig+0x4c0>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x478>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008779 	.word	0x08008779
 8008764:	08008781 	.word	0x08008781
 8008768:	08008789 	.word	0x08008789
 800876c:	08008791 	.word	0x08008791
 8008770:	08008799 	.word	0x08008799
 8008774:	080087a1 	.word	0x080087a1
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e086      	b.n	800888e <UART_SetConfig+0x5a6>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e082      	b.n	800888e <UART_SetConfig+0x5a6>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e07e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e07a      	b.n	800888e <UART_SetConfig+0x5a6>
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e076      	b.n	800888e <UART_SetConfig+0x5a6>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e072      	b.n	800888e <UART_SetConfig+0x5a6>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e06e      	b.n	800888e <UART_SetConfig+0x5a6>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a75      	ldr	r2, [pc, #468]	; (800898c <UART_SetConfig+0x6a4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d130      	bne.n	800881c <UART_SetConfig+0x534>
 80087ba:	4b72      	ldr	r3, [pc, #456]	; (8008984 <UART_SetConfig+0x69c>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d826      	bhi.n	8008814 <UART_SetConfig+0x52c>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x4e4>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e050      	b.n	800888e <UART_SetConfig+0x5a6>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e04c      	b.n	800888e <UART_SetConfig+0x5a6>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e048      	b.n	800888e <UART_SetConfig+0x5a6>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e044      	b.n	800888e <UART_SetConfig+0x5a6>
 8008804:	2320      	movs	r3, #32
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e040      	b.n	800888e <UART_SetConfig+0x5a6>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e03c      	b.n	800888e <UART_SetConfig+0x5a6>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e038      	b.n	800888e <UART_SetConfig+0x5a6>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a5b      	ldr	r2, [pc, #364]	; (8008990 <UART_SetConfig+0x6a8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d130      	bne.n	8008888 <UART_SetConfig+0x5a0>
 8008826:	4b57      	ldr	r3, [pc, #348]	; (8008984 <UART_SetConfig+0x69c>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b05      	cmp	r3, #5
 8008830:	d826      	bhi.n	8008880 <UART_SetConfig+0x598>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x550>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008851 	.word	0x08008851
 800883c:	08008859 	.word	0x08008859
 8008840:	08008861 	.word	0x08008861
 8008844:	08008869 	.word	0x08008869
 8008848:	08008871 	.word	0x08008871
 800884c:	08008879 	.word	0x08008879
 8008850:	2302      	movs	r3, #2
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e01a      	b.n	800888e <UART_SetConfig+0x5a6>
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e016      	b.n	800888e <UART_SetConfig+0x5a6>
 8008860:	2308      	movs	r3, #8
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e012      	b.n	800888e <UART_SetConfig+0x5a6>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e00e      	b.n	800888e <UART_SetConfig+0x5a6>
 8008870:	2320      	movs	r3, #32
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e00a      	b.n	800888e <UART_SetConfig+0x5a6>
 8008878:	2340      	movs	r3, #64	; 0x40
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e006      	b.n	800888e <UART_SetConfig+0x5a6>
 8008880:	2380      	movs	r3, #128	; 0x80
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e002      	b.n	800888e <UART_SetConfig+0x5a6>
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a3f      	ldr	r2, [pc, #252]	; (8008990 <UART_SetConfig+0x6a8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	f040 80f8 	bne.w	8008a8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800889a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800889e:	2b20      	cmp	r3, #32
 80088a0:	dc46      	bgt.n	8008930 <UART_SetConfig+0x648>
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	f2c0 8082 	blt.w	80089ac <UART_SetConfig+0x6c4>
 80088a8:	3b02      	subs	r3, #2
 80088aa:	2b1e      	cmp	r3, #30
 80088ac:	d87e      	bhi.n	80089ac <UART_SetConfig+0x6c4>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0x5cc>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008937 	.word	0x08008937
 80088b8:	080089ad 	.word	0x080089ad
 80088bc:	0800893f 	.word	0x0800893f
 80088c0:	080089ad 	.word	0x080089ad
 80088c4:	080089ad 	.word	0x080089ad
 80088c8:	080089ad 	.word	0x080089ad
 80088cc:	0800894f 	.word	0x0800894f
 80088d0:	080089ad 	.word	0x080089ad
 80088d4:	080089ad 	.word	0x080089ad
 80088d8:	080089ad 	.word	0x080089ad
 80088dc:	080089ad 	.word	0x080089ad
 80088e0:	080089ad 	.word	0x080089ad
 80088e4:	080089ad 	.word	0x080089ad
 80088e8:	080089ad 	.word	0x080089ad
 80088ec:	0800895f 	.word	0x0800895f
 80088f0:	080089ad 	.word	0x080089ad
 80088f4:	080089ad 	.word	0x080089ad
 80088f8:	080089ad 	.word	0x080089ad
 80088fc:	080089ad 	.word	0x080089ad
 8008900:	080089ad 	.word	0x080089ad
 8008904:	080089ad 	.word	0x080089ad
 8008908:	080089ad 	.word	0x080089ad
 800890c:	080089ad 	.word	0x080089ad
 8008910:	080089ad 	.word	0x080089ad
 8008914:	080089ad 	.word	0x080089ad
 8008918:	080089ad 	.word	0x080089ad
 800891c:	080089ad 	.word	0x080089ad
 8008920:	080089ad 	.word	0x080089ad
 8008924:	080089ad 	.word	0x080089ad
 8008928:	080089ad 	.word	0x080089ad
 800892c:	0800899f 	.word	0x0800899f
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d037      	beq.n	80089a4 <UART_SetConfig+0x6bc>
 8008934:	e03a      	b.n	80089ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008936:	f7fe f881 	bl	8006a3c <HAL_RCCEx_GetD3PCLK1Freq>
 800893a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800893c:	e03c      	b.n	80089b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe f890 	bl	8006a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894c:	e034      	b.n	80089b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800894e:	f107 0318 	add.w	r3, r7, #24
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe f9dc 	bl	8006d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895c:	e02c      	b.n	80089b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <UART_SetConfig+0x69c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d016      	beq.n	8008998 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <UART_SetConfig+0x69c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	08db      	lsrs	r3, r3, #3
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	4a07      	ldr	r2, [pc, #28]	; (8008994 <UART_SetConfig+0x6ac>)
 8008976:	fa22 f303 	lsr.w	r3, r2, r3
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800897c:	e01c      	b.n	80089b8 <UART_SetConfig+0x6d0>
 800897e:	bf00      	nop
 8008980:	40011400 	.word	0x40011400
 8008984:	58024400 	.word	0x58024400
 8008988:	40007800 	.word	0x40007800
 800898c:	40007c00 	.word	0x40007c00
 8008990:	58000c00 	.word	0x58000c00
 8008994:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008998:	4b9d      	ldr	r3, [pc, #628]	; (8008c10 <UART_SetConfig+0x928>)
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899c:	e00c      	b.n	80089b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800899e:	4b9d      	ldr	r3, [pc, #628]	; (8008c14 <UART_SetConfig+0x92c>)
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a2:	e009      	b.n	80089b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089aa:	e005      	b.n	80089b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 81de 	beq.w	8008d7c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	4a94      	ldr	r2, [pc, #592]	; (8008c18 <UART_SetConfig+0x930>)
 80089c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4613      	mov	r3, r2
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	4413      	add	r3, r2
 80089de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d305      	bcc.n	80089f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d903      	bls.n	80089f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089f6:	e1c1      	b.n	8008d7c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fa:	2200      	movs	r2, #0
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	60fa      	str	r2, [r7, #12]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	4a84      	ldr	r2, [pc, #528]	; (8008c18 <UART_SetConfig+0x930>)
 8008a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a1a:	f7f7 fc61 	bl	80002e0 <__aeabi_uldivmod>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	f04f 0200 	mov.w	r2, #0
 8008a2a:	f04f 0300 	mov.w	r3, #0
 8008a2e:	020b      	lsls	r3, r1, #8
 8008a30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a34:	0202      	lsls	r2, r0, #8
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	6849      	ldr	r1, [r1, #4]
 8008a3a:	0849      	lsrs	r1, r1, #1
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4605      	mov	r5, r0
 8008a42:	eb12 0804 	adds.w	r8, r2, r4
 8008a46:	eb43 0905 	adc.w	r9, r3, r5
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	469a      	mov	sl, r3
 8008a52:	4693      	mov	fp, r2
 8008a54:	4652      	mov	r2, sl
 8008a56:	465b      	mov	r3, fp
 8008a58:	4640      	mov	r0, r8
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	f7f7 fc40 	bl	80002e0 <__aeabi_uldivmod>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4613      	mov	r3, r2
 8008a66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a6e:	d308      	bcc.n	8008a82 <UART_SetConfig+0x79a>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a76:	d204      	bcs.n	8008a82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a7e:	60da      	str	r2, [r3, #12]
 8008a80:	e17c      	b.n	8008d7c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a88:	e178      	b.n	8008d7c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a92:	f040 80c5 	bne.w	8008c20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	dc48      	bgt.n	8008b30 <UART_SetConfig+0x848>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	db7b      	blt.n	8008b9a <UART_SetConfig+0x8b2>
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d879      	bhi.n	8008b9a <UART_SetConfig+0x8b2>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x7c4>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b37 	.word	0x08008b37
 8008ab0:	08008b3f 	.word	0x08008b3f
 8008ab4:	08008b9b 	.word	0x08008b9b
 8008ab8:	08008b9b 	.word	0x08008b9b
 8008abc:	08008b47 	.word	0x08008b47
 8008ac0:	08008b9b 	.word	0x08008b9b
 8008ac4:	08008b9b 	.word	0x08008b9b
 8008ac8:	08008b9b 	.word	0x08008b9b
 8008acc:	08008b57 	.word	0x08008b57
 8008ad0:	08008b9b 	.word	0x08008b9b
 8008ad4:	08008b9b 	.word	0x08008b9b
 8008ad8:	08008b9b 	.word	0x08008b9b
 8008adc:	08008b9b 	.word	0x08008b9b
 8008ae0:	08008b9b 	.word	0x08008b9b
 8008ae4:	08008b9b 	.word	0x08008b9b
 8008ae8:	08008b9b 	.word	0x08008b9b
 8008aec:	08008b67 	.word	0x08008b67
 8008af0:	08008b9b 	.word	0x08008b9b
 8008af4:	08008b9b 	.word	0x08008b9b
 8008af8:	08008b9b 	.word	0x08008b9b
 8008afc:	08008b9b 	.word	0x08008b9b
 8008b00:	08008b9b 	.word	0x08008b9b
 8008b04:	08008b9b 	.word	0x08008b9b
 8008b08:	08008b9b 	.word	0x08008b9b
 8008b0c:	08008b9b 	.word	0x08008b9b
 8008b10:	08008b9b 	.word	0x08008b9b
 8008b14:	08008b9b 	.word	0x08008b9b
 8008b18:	08008b9b 	.word	0x08008b9b
 8008b1c:	08008b9b 	.word	0x08008b9b
 8008b20:	08008b9b 	.word	0x08008b9b
 8008b24:	08008b9b 	.word	0x08008b9b
 8008b28:	08008b9b 	.word	0x08008b9b
 8008b2c:	08008b8d 	.word	0x08008b8d
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d02e      	beq.n	8008b92 <UART_SetConfig+0x8aa>
 8008b34:	e031      	b.n	8008b9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b36:	f7fc ffcd 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8008b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b3c:	e033      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b3e:	f7fc ffdf 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8008b42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b44:	e02f      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd ff8c 	bl	8006a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b54:	e027      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b56:	f107 0318 	add.w	r3, r7, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe f8d8 	bl	8006d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b64:	e01f      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b66:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <UART_SetConfig+0x934>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b72:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <UART_SetConfig+0x934>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	08db      	lsrs	r3, r3, #3
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	4a24      	ldr	r2, [pc, #144]	; (8008c10 <UART_SetConfig+0x928>)
 8008b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b84:	e00f      	b.n	8008ba6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b86:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <UART_SetConfig+0x928>)
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b8a:	e00c      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b8c:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <UART_SetConfig+0x92c>)
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b90:	e009      	b.n	8008ba6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b98:	e005      	b.n	8008ba6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 80e7 	beq.w	8008d7c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <UART_SetConfig+0x930>)
 8008bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bc0:	005a      	lsls	r2, r3, #1
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	441a      	add	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	d916      	bls.n	8008c08 <UART_SetConfig+0x920>
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be0:	d212      	bcs.n	8008c08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f023 030f 	bic.w	r3, r3, #15
 8008bea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008c04:	60da      	str	r2, [r3, #12]
 8008c06:	e0b9      	b.n	8008d7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c0e:	e0b5      	b.n	8008d7c <UART_SetConfig+0xa94>
 8008c10:	03d09000 	.word	0x03d09000
 8008c14:	003d0900 	.word	0x003d0900
 8008c18:	0800dc08 	.word	0x0800dc08
 8008c1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	dc49      	bgt.n	8008cbc <UART_SetConfig+0x9d4>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	db7c      	blt.n	8008d26 <UART_SetConfig+0xa3e>
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d87a      	bhi.n	8008d26 <UART_SetConfig+0xa3e>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <UART_SetConfig+0x950>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008cc3 	.word	0x08008cc3
 8008c3c:	08008ccb 	.word	0x08008ccb
 8008c40:	08008d27 	.word	0x08008d27
 8008c44:	08008d27 	.word	0x08008d27
 8008c48:	08008cd3 	.word	0x08008cd3
 8008c4c:	08008d27 	.word	0x08008d27
 8008c50:	08008d27 	.word	0x08008d27
 8008c54:	08008d27 	.word	0x08008d27
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008d27 	.word	0x08008d27
 8008c60:	08008d27 	.word	0x08008d27
 8008c64:	08008d27 	.word	0x08008d27
 8008c68:	08008d27 	.word	0x08008d27
 8008c6c:	08008d27 	.word	0x08008d27
 8008c70:	08008d27 	.word	0x08008d27
 8008c74:	08008d27 	.word	0x08008d27
 8008c78:	08008cf3 	.word	0x08008cf3
 8008c7c:	08008d27 	.word	0x08008d27
 8008c80:	08008d27 	.word	0x08008d27
 8008c84:	08008d27 	.word	0x08008d27
 8008c88:	08008d27 	.word	0x08008d27
 8008c8c:	08008d27 	.word	0x08008d27
 8008c90:	08008d27 	.word	0x08008d27
 8008c94:	08008d27 	.word	0x08008d27
 8008c98:	08008d27 	.word	0x08008d27
 8008c9c:	08008d27 	.word	0x08008d27
 8008ca0:	08008d27 	.word	0x08008d27
 8008ca4:	08008d27 	.word	0x08008d27
 8008ca8:	08008d27 	.word	0x08008d27
 8008cac:	08008d27 	.word	0x08008d27
 8008cb0:	08008d27 	.word	0x08008d27
 8008cb4:	08008d27 	.word	0x08008d27
 8008cb8:	08008d19 	.word	0x08008d19
 8008cbc:	2b40      	cmp	r3, #64	; 0x40
 8008cbe:	d02e      	beq.n	8008d1e <UART_SetConfig+0xa36>
 8008cc0:	e031      	b.n	8008d26 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cc2:	f7fc ff07 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8008cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cc8:	e033      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cca:	f7fc ff19 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8008cce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cd0:	e02f      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fd fec6 	bl	8006a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce0:	e027      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce2:	f107 0318 	add.w	r3, r7, #24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe f812 	bl	8006d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf0:	e01f      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf2:	4b2d      	ldr	r3, [pc, #180]	; (8008da8 <UART_SetConfig+0xac0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cfe:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <UART_SetConfig+0xac0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	08db      	lsrs	r3, r3, #3
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	4a28      	ldr	r2, [pc, #160]	; (8008dac <UART_SetConfig+0xac4>)
 8008d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d10:	e00f      	b.n	8008d32 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008d12:	4b26      	ldr	r3, [pc, #152]	; (8008dac <UART_SetConfig+0xac4>)
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d16:	e00c      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d18:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <UART_SetConfig+0xac8>)
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d1c:	e009      	b.n	8008d32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d24:	e005      	b.n	8008d32 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d30:	bf00      	nop
    }

    if (pclk != 0U)
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d021      	beq.n	8008d7c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <UART_SetConfig+0xacc>)
 8008d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d42:	461a      	mov	r2, r3
 8008d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	085b      	lsrs	r3, r3, #1
 8008d50:	441a      	add	r2, r3
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	2b0f      	cmp	r3, #15
 8008d60:	d909      	bls.n	8008d76 <UART_SetConfig+0xa8e>
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d68:	d205      	bcs.n	8008d76 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60da      	str	r2, [r3, #12]
 8008d74:	e002      	b.n	8008d7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2200      	movs	r2, #0
 8008d96:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d98:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3748      	adds	r7, #72	; 0x48
 8008da0:	46bd      	mov	sp, r7
 8008da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008da6:	bf00      	nop
 8008da8:	58024400 	.word	0x58024400
 8008dac:	03d09000 	.word	0x03d09000
 8008db0:	003d0900 	.word	0x003d0900
 8008db4:	0800dc08 	.word	0x0800dc08

08008db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00a      	beq.n	8008e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00a      	beq.n	8008e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01a      	beq.n	8008ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eb6:	d10a      	bne.n	8008ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	605a      	str	r2, [r3, #4]
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f0c:	f7f8 fd36 	bl	800197c <HAL_GetTick>
 8008f10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d10e      	bne.n	8008f3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f82f 	bl	8008f92 <UART_WaitOnFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e025      	b.n	8008f8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d10e      	bne.n	8008f6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f819 	bl	8008f92 <UART_WaitOnFlagUntilTimeout>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e00f      	b.n	8008f8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b09c      	sub	sp, #112	; 0x70
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa2:	e0a9      	b.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	f000 80a5 	beq.w	80090f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fae:	f7f8 fce5 	bl	800197c <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d302      	bcc.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d140      	bne.n	8009046 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd8:	667b      	str	r3, [r7, #100]	; 0x64
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fe4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e6      	bne.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	663b      	str	r3, [r7, #96]	; 0x60
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009016:	64ba      	str	r2, [r7, #72]	; 0x48
 8009018:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800901c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e5      	bne.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e069      	b.n	800911a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d051      	beq.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800905e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009062:	d149      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800906c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e6      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	613b      	str	r3, [r7, #16]
   return(result);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3308      	adds	r3, #8
 80090be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090c0:	623a      	str	r2, [r7, #32]
 80090c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	69f9      	ldr	r1, [r7, #28]
 80090c6:	6a3a      	ldr	r2, [r7, #32]
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2220      	movs	r2, #32
 80090e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e010      	b.n	800911a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69da      	ldr	r2, [r3, #28]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4013      	ands	r3, r2
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	429a      	cmp	r2, r3
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	429a      	cmp	r2, r3
 8009114:	f43f af46 	beq.w	8008fa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3770      	adds	r7, #112	; 0x70
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009124:	b480      	push	{r7}
 8009126:	b0a3      	sub	sp, #140	; 0x8c
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	88fa      	ldrh	r2, [r7, #6]
 800913c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d10e      	bne.n	8009176 <UART_Start_Receive_IT+0x52>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d105      	bne.n	800916c <UART_Start_Receive_IT+0x48>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800916a:	e02d      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	22ff      	movs	r2, #255	; 0xff
 8009170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009174:	e028      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10d      	bne.n	800919a <UART_Start_Receive_IT+0x76>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <UART_Start_Receive_IT+0x6c>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	22ff      	movs	r2, #255	; 0xff
 800918a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800918e:	e01b      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	227f      	movs	r2, #127	; 0x7f
 8009194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009198:	e016      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091a2:	d10d      	bne.n	80091c0 <UART_Start_Receive_IT+0x9c>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <UART_Start_Receive_IT+0x92>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	227f      	movs	r2, #127	; 0x7f
 80091b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091b4:	e008      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	223f      	movs	r2, #63	; 0x3f
 80091ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091be:	e003      	b.n	80091c8 <UART_Start_Receive_IT+0xa4>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2222      	movs	r2, #34	; 0x22
 80091d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80091e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091fc:	673a      	str	r2, [r7, #112]	; 0x70
 80091fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009202:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800920a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e3      	bne.n	80091d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009218:	d153      	bne.n	80092c2 <UART_Start_Receive_IT+0x19e>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	429a      	cmp	r2, r3
 8009224:	d34d      	bcc.n	80092c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922e:	d107      	bne.n	8009240 <UART_Start_Receive_IT+0x11c>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a4b      	ldr	r2, [pc, #300]	; (8009368 <UART_Start_Receive_IT+0x244>)
 800923c:	671a      	str	r2, [r3, #112]	; 0x70
 800923e:	e002      	b.n	8009246 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a4a      	ldr	r2, [pc, #296]	; (800936c <UART_Start_Receive_IT+0x248>)
 8009244:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d01a      	beq.n	800928c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800926a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800927a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800927e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e4      	bne.n	8009256 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3308      	adds	r3, #8
 8009292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80092ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e5      	bne.n	800928c <UART_Start_Receive_IT+0x168>
 80092c0:	e04a      	b.n	8009358 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ca:	d107      	bne.n	80092dc <UART_Start_Receive_IT+0x1b8>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4a26      	ldr	r2, [pc, #152]	; (8009370 <UART_Start_Receive_IT+0x24c>)
 80092d8:	671a      	str	r2, [r3, #112]	; 0x70
 80092da:	e002      	b.n	80092e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4a25      	ldr	r2, [pc, #148]	; (8009374 <UART_Start_Receive_IT+0x250>)
 80092e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d019      	beq.n	8009326 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009306:	677b      	str	r3, [r7, #116]	; 0x74
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
 8009312:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_Start_Receive_IT+0x1ce>
 8009324:	e018      	b.n	8009358 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	613b      	str	r3, [r7, #16]
   return(result);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f043 0320 	orr.w	r3, r3, #32
 800933a:	67bb      	str	r3, [r7, #120]	; 0x78
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009344:	623b      	str	r3, [r7, #32]
 8009346:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	69f9      	ldr	r1, [r7, #28]
 800934a:	6a3a      	ldr	r2, [r7, #32]
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	61bb      	str	r3, [r7, #24]
   return(result);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e6      	bne.n	8009326 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	378c      	adds	r7, #140	; 0x8c
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	08009e2d 	.word	0x08009e2d
 800936c:	08009b35 	.word	0x08009b35
 8009370:	080099d5 	.word	0x080099d5
 8009374:	08009875 	.word	0x08009875

08009378 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b096      	sub	sp, #88	; 0x58
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	88fa      	ldrh	r2, [r7, #6]
 8009390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2222      	movs	r2, #34	; 0x22
 80093a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d02c      	beq.n	8009406 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b0:	4a42      	ldr	r2, [pc, #264]	; (80094bc <UART_Start_Receive_DMA+0x144>)
 80093b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b8:	4a41      	ldr	r2, [pc, #260]	; (80094c0 <UART_Start_Receive_DMA+0x148>)
 80093ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c0:	4a40      	ldr	r2, [pc, #256]	; (80094c4 <UART_Start_Receive_DMA+0x14c>)
 80093c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c8:	2200      	movs	r2, #0
 80093ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3324      	adds	r3, #36	; 0x24
 80093d6:	4619      	mov	r1, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093dc:	461a      	mov	r2, r3
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	f7f8 ff20 	bl	8002224 <HAL_DMA_Start_IT>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2210      	movs	r2, #16
 80093ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e055      	b.n	80094b2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d018      	beq.n	8009448 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942a:	657b      	str	r3, [r7, #84]	; 0x54
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009434:	64bb      	str	r3, [r7, #72]	; 0x48
 8009436:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800943a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	653b      	str	r3, [r7, #80]	; 0x50
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009468:	637a      	str	r2, [r7, #52]	; 0x34
 800946a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800946e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e5      	bne.n	8009448 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	613b      	str	r3, [r7, #16]
   return(result);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3308      	adds	r3, #8
 800949a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800949c:	623a      	str	r2, [r7, #32]
 800949e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	69f9      	ldr	r1, [r7, #28]
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e5      	bne.n	800947c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3758      	adds	r7, #88	; 0x58
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	08009619 	.word	0x08009619
 80094c0:	0800973b 	.word	0x0800973b
 80094c4:	08009773 	.word	0x08009773

080094c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b08f      	sub	sp, #60	; 0x3c
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e6      	bne.n	80094d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	60bb      	str	r3, [r7, #8]
   return(result);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009518:	633b      	str	r3, [r7, #48]	; 0x30
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	61ba      	str	r2, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6979      	ldr	r1, [r7, #20]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	613b      	str	r3, [r7, #16]
   return(result);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e5      	bne.n	8009502 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800953e:	bf00      	nop
 8009540:	373c      	adds	r7, #60	; 0x3c
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b095      	sub	sp, #84	; 0x54
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009572:	643b      	str	r3, [r7, #64]	; 0x40
 8009574:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	61fb      	str	r3, [r7, #28]
   return(result);
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <UART_EndRxTransfer+0xc8>)
 800959a:	4013      	ands	r3, r2
 800959c:	64bb      	str	r3, [r7, #72]	; 0x48
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e5      	bne.n	8009586 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d118      	bne.n	80095f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f023 0310 	bic.w	r3, r3, #16
 80095d6:	647b      	str	r3, [r7, #68]	; 0x44
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6979      	ldr	r1, [r7, #20]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	613b      	str	r3, [r7, #16]
   return(result);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009608:	bf00      	nop
 800960a:	3754      	adds	r7, #84	; 0x54
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	effffffe 	.word	0xeffffffe

08009618 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b09c      	sub	sp, #112	; 0x70
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962e:	d071      	beq.n	8009714 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009632:	2200      	movs	r2, #0
 8009634:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800964c:	66bb      	str	r3, [r7, #104]	; 0x68
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009656:	65bb      	str	r3, [r7, #88]	; 0x58
 8009658:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800965c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e6      	bne.n	8009638 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	667b      	str	r3, [r7, #100]	; 0x64
 8009682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800968a:	647a      	str	r2, [r7, #68]	; 0x44
 800968c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	623b      	str	r3, [r7, #32]
   return(result);
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b4:	663b      	str	r3, [r7, #96]	; 0x60
 80096b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096be:	633a      	str	r2, [r7, #48]	; 0x30
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e5      	bne.n	800969e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d118      	bne.n	8009714 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0310 	bic.w	r3, r3, #16
 80096f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009700:	61fb      	str	r3, [r7, #28]
 8009702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	617b      	str	r3, [r7, #20]
   return(result);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d107      	bne.n	800972c <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009722:	4619      	mov	r1, r3
 8009724:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009726:	f7fe fdd3 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800972a:	e002      	b.n	8009732 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800972c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800972e:	f7f8 f805 	bl	800173c <HAL_UART_RxCpltCallback>
}
 8009732:	bf00      	nop
 8009734:	3770      	adds	r7, #112	; 0x70
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974c:	2b01      	cmp	r3, #1
 800974e:	d109      	bne.n	8009764 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	b29b      	uxth	r3, r3
 800975a:	4619      	mov	r1, r3
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7fe fdb7 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009762:	e002      	b.n	800976a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7fe fd9f 	bl	80082a8 <HAL_UART_RxHalfCpltCallback>
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b086      	sub	sp, #24
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009786:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	d109      	bne.n	80097b2 <UART_DMAError+0x40>
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b21      	cmp	r3, #33	; 0x21
 80097a2:	d106      	bne.n	80097b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80097ac:	6978      	ldr	r0, [r7, #20]
 80097ae:	f7ff fe8b 	bl	80094c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	d109      	bne.n	80097d4 <UART_DMAError+0x62>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b22      	cmp	r3, #34	; 0x22
 80097c4:	d106      	bne.n	80097d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80097ce:	6978      	ldr	r0, [r7, #20]
 80097d0:	f7ff febc 	bl	800954c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097da:	f043 0210 	orr.w	r2, r3, #16
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097e4:	6978      	ldr	r0, [r7, #20]
 80097e6:	f7fe fd69 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ea:	bf00      	nop
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7fe fd53 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	60bb      	str	r3, [r7, #8]
   return(result);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	461a      	mov	r2, r3
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6979      	ldr	r1, [r7, #20]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	613b      	str	r3, [r7, #16]
   return(result);
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e6      	bne.n	8009826 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7fe fd14 	bl	8008294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800986c:	bf00      	nop
 800986e:	3720      	adds	r7, #32
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b096      	sub	sp, #88	; 0x58
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009882:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988c:	2b22      	cmp	r3, #34	; 0x22
 800988e:	f040 8095 	bne.w	80099bc <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800989c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80098a0:	b2d9      	uxtb	r1, r3
 80098a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	400a      	ands	r2, r1
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d178      	bne.n	80099cc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098ee:	653b      	str	r3, [r7, #80]	; 0x50
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f8:	647b      	str	r3, [r7, #68]	; 0x44
 80098fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3308      	adds	r3, #8
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	623b      	str	r3, [r7, #32]
   return(result);
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3308      	adds	r3, #8
 800992a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800992c:	633a      	str	r2, [r7, #48]	; 0x30
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e5      	bne.n	800990c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2220      	movs	r2, #32
 8009944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009952:	2b01      	cmp	r3, #1
 8009954:	d12e      	bne.n	80099b4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	60fb      	str	r3, [r7, #12]
   return(result);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f023 0310 	bic.w	r3, r3, #16
 8009970:	64bb      	str	r3, [r7, #72]	; 0x48
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800997a:	61fb      	str	r3, [r7, #28]
 800997c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	69b9      	ldr	r1, [r7, #24]
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	617b      	str	r3, [r7, #20]
   return(result);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e6      	bne.n	800995c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b10      	cmp	r3, #16
 800999a:	d103      	bne.n	80099a4 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2210      	movs	r2, #16
 80099a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fe fc8f 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099b2:	e00b      	b.n	80099cc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7f7 fec1 	bl	800173c <HAL_UART_RxCpltCallback>
}
 80099ba:	e007      	b.n	80099cc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0208 	orr.w	r2, r2, #8
 80099ca:	619a      	str	r2, [r3, #24]
}
 80099cc:	bf00      	nop
 80099ce:	3758      	adds	r7, #88	; 0x58
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b096      	sub	sp, #88	; 0x58
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	2b22      	cmp	r3, #34	; 0x22
 80099ee:	f040 8095 	bne.w	8009b1c <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a00:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a02:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a16:	1c9a      	adds	r2, r3, #2
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d178      	bne.n	8009b2c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a58:	643b      	str	r3, [r7, #64]	; 0x40
 8009a5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3308      	adds	r3, #8
 8009a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e5      	bne.n	8009a6c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d12e      	bne.n	8009b14 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0310 	bic.w	r3, r3, #16
 8009ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ada:	61bb      	str	r3, [r7, #24]
 8009adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6979      	ldr	r1, [r7, #20]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e6      	bne.n	8009abc <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d103      	bne.n	8009b04 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2210      	movs	r2, #16
 8009b02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7fe fbdf 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b12:	e00b      	b.n	8009b2c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7f7 fe11 	bl	800173c <HAL_UART_RxCpltCallback>
}
 8009b1a:	e007      	b.n	8009b2c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0208 	orr.w	r2, r2, #8
 8009b2a:	619a      	str	r2, [r3, #24]
}
 8009b2c:	bf00      	nop
 8009b2e:	3758      	adds	r7, #88	; 0x58
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b0a6      	sub	sp, #152	; 0x98
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b42:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	2b22      	cmp	r3, #34	; 0x22
 8009b6c:	f040 814d 	bne.w	8009e0a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b7a:	e0f4      	b.n	8009d66 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b86:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009b8a:	b2d9      	uxtb	r1, r3
 8009b8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	400a      	ands	r2, r1
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d053      	beq.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d011      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0xca>
 8009bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2201      	movs	r2, #1
 8009bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf4:	f043 0201 	orr.w	r2, r3, #1
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d011      	beq.n	8009c2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c24:	f043 0204 	orr.w	r2, r3, #4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00b      	beq.n	8009c5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2204      	movs	r2, #4
 8009c4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c54:	f043 0202 	orr.w	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe fb27 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d171      	bne.n	8009d66 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ca6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009caa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cca:	4b56      	ldr	r3, [pc, #344]	; (8009e24 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009cd8:	657a      	str	r2, [r7, #84]	; 0x54
 8009cda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e5      	bne.n	8009cb8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d12e      	bne.n	8009d60 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	f023 0310 	bic.w	r3, r3, #16
 8009d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d26:	643b      	str	r3, [r7, #64]	; 0x40
 8009d28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e6      	bne.n	8009d08 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b10      	cmp	r3, #16
 8009d46:	d103      	bne.n	8009d50 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2210      	movs	r2, #16
 8009d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fe fab9 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
 8009d5e:	e002      	b.n	8009d66 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7f7 fceb 	bl	800173c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d006      	beq.n	8009d7c <UART_RxISR_8BIT_FIFOEN+0x248>
 8009d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f47f af00 	bne.w	8009b7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d86:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d045      	beq.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d23e      	bcs.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db2:	673b      	str	r3, [r7, #112]	; 0x70
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e5      	bne.n	8009d9c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009dd4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f043 0320 	orr.w	r3, r3, #32
 8009dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6979      	ldr	r1, [r7, #20]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	613b      	str	r3, [r7, #16]
   return(result);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e6      	bne.n	8009dd6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e08:	e007      	b.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0208 	orr.w	r2, r2, #8
 8009e18:	619a      	str	r2, [r3, #24]
}
 8009e1a:	bf00      	nop
 8009e1c:	3798      	adds	r7, #152	; 0x98
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	effffffe 	.word	0xeffffffe
 8009e28:	08009875 	.word	0x08009875

08009e2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b0a8      	sub	sp, #160	; 0xa0
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e3a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e62:	2b22      	cmp	r3, #34	; 0x22
 8009e64:	f040 8151 	bne.w	800a10a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e6e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e72:	e0f8      	b.n	800a066 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e86:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009e8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009e8e:	4013      	ands	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	1c9a      	adds	r2, r3, #2
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	69db      	ldr	r3, [r3, #28]
 8009eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d053      	beq.n	8009f72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d011      	beq.n	8009efa <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ef0:	f043 0201 	orr.w	r2, r3, #1
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d011      	beq.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00b      	beq.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2202      	movs	r2, #2
 8009f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	f043 0204 	orr.w	r2, r3, #4
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d011      	beq.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2204      	movs	r2, #4
 8009f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f50:	f043 0202 	orr.w	r2, r3, #2
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7fe f9a9 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d173      	bne.n	800a066 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fa2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fc6:	4b57      	ldr	r3, [pc, #348]	; (800a124 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009fc8:	4013      	ands	r3, r2
 8009fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fe0:	e841 2300 	strex	r3, r2, [r1]
 8009fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1e3      	bne.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d12e      	bne.n	800a060 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	f023 0310 	bic.w	r3, r3, #16
 800a01c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a026:	647b      	str	r3, [r7, #68]	; 0x44
 800a028:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a02c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e6      	bne.n	800a008 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b10      	cmp	r3, #16
 800a046:	d103      	bne.n	800a050 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2210      	movs	r2, #16
 800a04e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fe f939 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
 800a05e:	e002      	b.n	800a066 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7f7 fb6b 	bl	800173c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a066:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d006      	beq.n	800a07c <UART_RxISR_16BIT_FIFOEN+0x250>
 800a06e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	f47f aefc 	bne.w	8009e74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a082:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a086:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d045      	beq.n	800a11a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a094:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a098:	429a      	cmp	r2, r3
 800a09a:	d23e      	bcs.n	800a11a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	e853 3f00 	ldrex	r3, [r3]
 800a0aa:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	677b      	str	r3, [r7, #116]	; 0x74
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0bc:	633a      	str	r2, [r7, #48]	; 0x30
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e5      	bne.n	800a09c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a15      	ldr	r2, [pc, #84]	; (800a128 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f043 0320 	orr.w	r3, r3, #32
 800a0ea:	673b      	str	r3, [r7, #112]	; 0x70
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0f4:	61fb      	str	r3, [r7, #28]
 800a0f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69b9      	ldr	r1, [r7, #24]
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	617b      	str	r3, [r7, #20]
   return(result);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e6      	bne.n	800a0d6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a108:	e007      	b.n	800a11a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	699a      	ldr	r2, [r3, #24]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f042 0208 	orr.w	r2, r2, #8
 800a118:	619a      	str	r2, [r3, #24]
}
 800a11a:	bf00      	nop
 800a11c:	37a0      	adds	r7, #160	; 0xa0
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	effffffe 	.word	0xeffffffe
 800a128:	080099d5 	.word	0x080099d5

0800a12c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_UARTEx_DisableFifoMode+0x16>
 800a17a:	2302      	movs	r3, #2
 800a17c:	e027      	b.n	800a1ce <HAL_UARTEx_DisableFifoMode+0x66>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2224      	movs	r2, #36	; 0x24
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0201 	bic.w	r2, r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e02d      	b.n	800a24e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2224      	movs	r2, #36	; 0x24
 800a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f850 	bl	800a2d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a266:	2b01      	cmp	r3, #1
 800a268:	d101      	bne.n	800a26e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a26a:	2302      	movs	r3, #2
 800a26c:	e02d      	b.n	800a2ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2224      	movs	r2, #36	; 0x24
 800a27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f812 	bl	800a2d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2f4:	e031      	b.n	800a35a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2f6:	2310      	movs	r3, #16
 800a2f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2fa:	2310      	movs	r3, #16
 800a2fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	0e5b      	lsrs	r3, r3, #25
 800a306:	b2db      	uxtb	r3, r3
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	0f5b      	lsrs	r3, r3, #29
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
 800a320:	7b3a      	ldrb	r2, [r7, #12]
 800a322:	4911      	ldr	r1, [pc, #68]	; (800a368 <UARTEx_SetNbDataToProcess+0x94>)
 800a324:	5c8a      	ldrb	r2, [r1, r2]
 800a326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a32a:	7b3a      	ldrb	r2, [r7, #12]
 800a32c:	490f      	ldr	r1, [pc, #60]	; (800a36c <UARTEx_SetNbDataToProcess+0x98>)
 800a32e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a330:	fb93 f3f2 	sdiv	r3, r3, r2
 800a334:	b29a      	uxth	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	7b7a      	ldrb	r2, [r7, #13]
 800a340:	4909      	ldr	r1, [pc, #36]	; (800a368 <UARTEx_SetNbDataToProcess+0x94>)
 800a342:	5c8a      	ldrb	r2, [r1, r2]
 800a344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a348:	7b7a      	ldrb	r2, [r7, #13]
 800a34a:	4908      	ldr	r1, [pc, #32]	; (800a36c <UARTEx_SetNbDataToProcess+0x98>)
 800a34c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a34e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a35a:	bf00      	nop
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	0800dc20 	.word	0x0800dc20
 800a36c:	0800dc28 	.word	0x0800dc28

0800a370 <__NVIC_SetPriority>:
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a37c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a380:	2b00      	cmp	r3, #0
 800a382:	db0a      	blt.n	800a39a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	490c      	ldr	r1, [pc, #48]	; (800a3bc <__NVIC_SetPriority+0x4c>)
 800a38a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a38e:	0112      	lsls	r2, r2, #4
 800a390:	b2d2      	uxtb	r2, r2
 800a392:	440b      	add	r3, r1
 800a394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a398:	e00a      	b.n	800a3b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	4908      	ldr	r1, [pc, #32]	; (800a3c0 <__NVIC_SetPriority+0x50>)
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	f003 030f 	and.w	r3, r3, #15
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	0112      	lsls	r2, r2, #4
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	440b      	add	r3, r1
 800a3ae:	761a      	strb	r2, [r3, #24]
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	e000e100 	.word	0xe000e100
 800a3c0:	e000ed00 	.word	0xe000ed00

0800a3c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <SysTick_Handler+0x1c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a3cc:	f001 fd86 	bl	800bedc <xTaskGetSchedulerState>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d001      	beq.n	800a3da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a3d6:	f002 fb6f 	bl	800cab8 <xPortSysTickHandler>
  }
}
 800a3da:	bf00      	nop
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	e000e010 	.word	0xe000e010

0800a3e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	f06f 0004 	mvn.w	r0, #4
 800a3ee:	f7ff ffbf 	bl	800a370 <__NVIC_SetPriority>
#endif
}
 800a3f2:	bf00      	nop
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3fe:	f3ef 8305 	mrs	r3, IPSR
 800a402:	603b      	str	r3, [r7, #0]
  return(result);
 800a404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a40a:	f06f 0305 	mvn.w	r3, #5
 800a40e:	607b      	str	r3, [r7, #4]
 800a410:	e00c      	b.n	800a42c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a412:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <osKernelInitialize+0x44>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d105      	bne.n	800a426 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a41a:	4b08      	ldr	r3, [pc, #32]	; (800a43c <osKernelInitialize+0x44>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a420:	2300      	movs	r3, #0
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	e002      	b.n	800a42c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a426:	f04f 33ff 	mov.w	r3, #4294967295
 800a42a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a42c:	687b      	ldr	r3, [r7, #4]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	24002824 	.word	0x24002824

0800a440 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a446:	f3ef 8305 	mrs	r3, IPSR
 800a44a:	603b      	str	r3, [r7, #0]
  return(result);
 800a44c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a452:	f06f 0305 	mvn.w	r3, #5
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	e010      	b.n	800a47c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a45a:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <osKernelStart+0x48>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d109      	bne.n	800a476 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a462:	f7ff ffbf 	bl	800a3e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a466:	4b08      	ldr	r3, [pc, #32]	; (800a488 <osKernelStart+0x48>)
 800a468:	2202      	movs	r2, #2
 800a46a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a46c:	f001 f8da 	bl	800b624 <vTaskStartScheduler>
      stat = osOK;
 800a470:	2300      	movs	r3, #0
 800a472:	607b      	str	r3, [r7, #4]
 800a474:	e002      	b.n	800a47c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a47c:	687b      	ldr	r3, [r7, #4]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	24002824 	.word	0x24002824

0800a48c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08e      	sub	sp, #56	; 0x38
 800a490:	af04      	add	r7, sp, #16
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a49c:	f3ef 8305 	mrs	r3, IPSR
 800a4a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a4a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d17e      	bne.n	800a5a6 <osThreadNew+0x11a>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d07b      	beq.n	800a5a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a4ae:	2380      	movs	r3, #128	; 0x80
 800a4b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a4b2:	2318      	movs	r3, #24
 800a4b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a4be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d045      	beq.n	800a552 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <osThreadNew+0x48>
        name = attr->name;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <osThreadNew+0x6e>
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b38      	cmp	r3, #56	; 0x38
 800a4ec:	d805      	bhi.n	800a4fa <osThreadNew+0x6e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <osThreadNew+0x72>
        return (NULL);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e054      	b.n	800a5a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	089b      	lsrs	r3, r3, #2
 800a50c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00e      	beq.n	800a534 <osThreadNew+0xa8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	2bbb      	cmp	r3, #187	; 0xbb
 800a51c:	d90a      	bls.n	800a534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <osThreadNew+0xa8>
        mem = 1;
 800a52e:	2301      	movs	r3, #1
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	e010      	b.n	800a556 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10c      	bne.n	800a556 <osThreadNew+0xca>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d108      	bne.n	800a556 <osThreadNew+0xca>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <osThreadNew+0xca>
          mem = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	e001      	b.n	800a556 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d110      	bne.n	800a57e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a564:	9202      	str	r2, [sp, #8]
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	6a3a      	ldr	r2, [r7, #32]
 800a570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fe9e 	bl	800b2b4 <xTaskCreateStatic>
 800a578:	4603      	mov	r3, r0
 800a57a:	613b      	str	r3, [r7, #16]
 800a57c:	e013      	b.n	800a5a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d110      	bne.n	800a5a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	b29a      	uxth	r2, r3
 800a588:	f107 0310 	add.w	r3, r7, #16
 800a58c:	9301      	str	r3, [sp, #4]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 fee9 	bl	800b36e <xTaskCreate>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d001      	beq.n	800a5a6 <osThreadNew+0x11a>
            hTask = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a5a6:	693b      	ldr	r3, [r7, #16]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3728      	adds	r7, #40	; 0x28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c0:	f3ef 8305 	mrs	r3, IPSR
 800a5c4:	613b      	str	r3, [r7, #16]
  return(result);
 800a5c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d15f      	bne.n	800a68c <osMessageQueueNew+0xdc>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d05c      	beq.n	800a68c <osMessageQueueNew+0xdc>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d059      	beq.n	800a68c <osMessageQueueNew+0xdc>
    mem = -1;
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d029      	beq.n	800a638 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d012      	beq.n	800a612 <osMessageQueueNew+0x62>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	2b4f      	cmp	r3, #79	; 0x4f
 800a5f2:	d90e      	bls.n	800a612 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695a      	ldr	r2, [r3, #20]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	fb01 f303 	mul.w	r3, r1, r3
 800a608:	429a      	cmp	r2, r3
 800a60a:	d302      	bcc.n	800a612 <osMessageQueueNew+0x62>
        mem = 1;
 800a60c:	2301      	movs	r3, #1
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	e014      	b.n	800a63c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d110      	bne.n	800a63c <osMessageQueueNew+0x8c>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10c      	bne.n	800a63c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a626:	2b00      	cmp	r3, #0
 800a628:	d108      	bne.n	800a63c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d104      	bne.n	800a63c <osMessageQueueNew+0x8c>
          mem = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e001      	b.n	800a63c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d10b      	bne.n	800a65a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2100      	movs	r1, #0
 800a64c:	9100      	str	r1, [sp, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f971 	bl	800a938 <xQueueGenericCreateStatic>
 800a656:	61f8      	str	r0, [r7, #28]
 800a658:	e008      	b.n	800a66c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a660:	2200      	movs	r2, #0
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 f9df 	bl	800aa28 <xQueueGenericCreate>
 800a66a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	e001      	b.n	800a684 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a684:	6979      	ldr	r1, [r7, #20]
 800a686:	69f8      	ldr	r0, [r7, #28]
 800a688:	f000 fdb6 	bl	800b1f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a68c:	69fb      	ldr	r3, [r7, #28]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3720      	adds	r7, #32
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4a07      	ldr	r2, [pc, #28]	; (800a6c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a6a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	4a06      	ldr	r2, [pc, #24]	; (800a6c8 <vApplicationGetIdleTaskMemory+0x30>)
 800a6ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2280      	movs	r2, #128	; 0x80
 800a6b4:	601a      	str	r2, [r3, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	24002828 	.word	0x24002828
 800a6c8:	240028e4 	.word	0x240028e4

0800a6cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a07      	ldr	r2, [pc, #28]	; (800a6f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a6dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a06      	ldr	r2, [pc, #24]	; (800a6fc <vApplicationGetTimerTaskMemory+0x30>)
 800a6e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ea:	601a      	str	r2, [r3, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	24002ae4 	.word	0x24002ae4
 800a6fc:	24002ba0 	.word	0x24002ba0

0800a700 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f103 0208 	add.w	r2, r3, #8
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
 800a718:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f103 0208 	add.w	r2, r3, #8
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f103 0208 	add.w	r2, r3, #8
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a75a:	b480      	push	{r7}
 800a75c:	b085      	sub	sp, #20
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	601a      	str	r2, [r3, #0]
}
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d103      	bne.n	800a7c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e00c      	b.n	800a7dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e002      	b.n	800a7d0 <vListInsert+0x2e>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d2f6      	bcs.n	800a7ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]
}
 800a808:	bf00      	nop
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6892      	ldr	r2, [r2, #8]
 800a82a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6852      	ldr	r2, [r2, #4]
 800a834:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d103      	bne.n	800a848 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1e5a      	subs	r2, r3, #1
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a892:	f002 f87f 	bl	800c994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	441a      	add	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	68f9      	ldr	r1, [r7, #12]
 800a8c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	441a      	add	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	22ff      	movs	r2, #255	; 0xff
 800a8d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	22ff      	movs	r2, #255	; 0xff
 800a8de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d114      	bne.n	800a912 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01a      	beq.n	800a926 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3310      	adds	r3, #16
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f001 f92f 	bl	800bb58 <xTaskRemoveFromEventList>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d012      	beq.n	800a926 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <xQueueGenericReset+0xcc>)
 800a902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	e009      	b.n	800a926 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3310      	adds	r3, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fef2 	bl	800a700 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3324      	adds	r3, #36	; 0x24
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff feed 	bl	800a700 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a926:	f002 f865 	bl	800c9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a92a:	2301      	movs	r3, #1
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	; 0x38
 800a93c:	af02      	add	r7, sp, #8
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10a      	bne.n	800a97e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a97a:	bf00      	nop
 800a97c:	e7fe      	b.n	800a97c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <xQueueGenericCreateStatic+0x52>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <xQueueGenericCreateStatic+0x56>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e000      	b.n	800a990 <xQueueGenericCreateStatic+0x58>
 800a98e:	2300      	movs	r3, #0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	623b      	str	r3, [r7, #32]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <xQueueGenericCreateStatic+0x7e>
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <xQueueGenericCreateStatic+0x82>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e000      	b.n	800a9bc <xQueueGenericCreateStatic+0x84>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	61fb      	str	r3, [r7, #28]
}
 800a9d2:	bf00      	nop
 800a9d4:	e7fe      	b.n	800a9d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a9d6:	2350      	movs	r3, #80	; 0x50
 800a9d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b50      	cmp	r3, #80	; 0x50
 800a9de:	d00a      	beq.n	800a9f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	61bb      	str	r3, [r7, #24]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	4613      	mov	r3, r2
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f83f 	bl	800aa9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3730      	adds	r7, #48	; 0x30
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	613b      	str	r3, [r7, #16]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
 800aa5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	3350      	adds	r3, #80	; 0x50
 800aa60:	4618      	mov	r0, r3
 800aa62:	f002 f8b9 	bl	800cbd8 <pvPortMalloc>
 800aa66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d011      	beq.n	800aa92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	3350      	adds	r3, #80	; 0x50
 800aa76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa80:	79fa      	ldrb	r2, [r7, #7]
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	4613      	mov	r3, r2
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 f805 	bl	800aa9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa92:	69bb      	ldr	r3, [r7, #24]
	}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d103      	bne.n	800aab8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	e002      	b.n	800aabe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aaca:	2101      	movs	r1, #1
 800aacc:	69b8      	ldr	r0, [r7, #24]
 800aace:	f7ff fecb 	bl	800a868 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	78fa      	ldrb	r2, [r7, #3]
 800aad6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aada:	bf00      	nop
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08e      	sub	sp, #56	; 0x38
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueGenericSend+0x32>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <xQueueGenericSend+0x40>
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <xQueueGenericSend+0x44>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e000      	b.n	800ab2a <xQueueGenericSend+0x46>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <xQueueGenericSend+0x60>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d103      	bne.n	800ab52 <xQueueGenericSend+0x6e>
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d101      	bne.n	800ab56 <xQueueGenericSend+0x72>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <xQueueGenericSend+0x74>
 800ab56:	2300      	movs	r3, #0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10a      	bne.n	800ab72 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	623b      	str	r3, [r7, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab72:	f001 f9b3 	bl	800bedc <xTaskGetSchedulerState>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <xQueueGenericSend+0x9e>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <xQueueGenericSend+0xa2>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <xQueueGenericSend+0xa4>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	61fb      	str	r3, [r7, #28]
}
 800ab9e:	bf00      	nop
 800aba0:	e7fe      	b.n	800aba0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aba2:	f001 fef7 	bl	800c994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abae:	429a      	cmp	r2, r3
 800abb0:	d302      	bcc.n	800abb8 <xQueueGenericSend+0xd4>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d129      	bne.n	800ac0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	68b9      	ldr	r1, [r7, #8]
 800abbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abbe:	f000 fa0b 	bl	800afd8 <prvCopyDataToQueue>
 800abc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d010      	beq.n	800abee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	3324      	adds	r3, #36	; 0x24
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 ffc1 	bl	800bb58 <xTaskRemoveFromEventList>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d013      	beq.n	800ac04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abdc:	4b3f      	ldr	r3, [pc, #252]	; (800acdc <xQueueGenericSend+0x1f8>)
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	e00a      	b.n	800ac04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d007      	beq.n	800ac04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abf4:	4b39      	ldr	r3, [pc, #228]	; (800acdc <xQueueGenericSend+0x1f8>)
 800abf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac04:	f001 fef6 	bl	800c9f4 <vPortExitCritical>
				return pdPASS;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e063      	b.n	800acd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d103      	bne.n	800ac1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac12:	f001 feef 	bl	800c9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	e05c      	b.n	800acd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d106      	bne.n	800ac2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fffb 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac2e:	f001 fee1 	bl	800c9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac32:	f000 fd67 	bl	800b704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac36:	f001 fead 	bl	800c994 <vPortEnterCritical>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac40:	b25b      	sxtb	r3, r3
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d103      	bne.n	800ac50 <xQueueGenericSend+0x16c>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac56:	b25b      	sxtb	r3, r3
 800ac58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5c:	d103      	bne.n	800ac66 <xQueueGenericSend+0x182>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac66:	f001 fec5 	bl	800c9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac6a:	1d3a      	adds	r2, r7, #4
 800ac6c:	f107 0314 	add.w	r3, r7, #20
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 ffea 	bl	800bc4c <xTaskCheckForTimeOut>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d124      	bne.n	800acc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac80:	f000 faa2 	bl	800b1c8 <prvIsQueueFull>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d018      	beq.n	800acbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	3310      	adds	r3, #16
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 ff10 	bl	800bab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac9a:	f000 fa2d 	bl	800b0f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac9e:	f000 fd3f 	bl	800b720 <xTaskResumeAll>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f47f af7c 	bne.w	800aba2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800acaa:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <xQueueGenericSend+0x1f8>)
 800acac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	e772      	b.n	800aba2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acbe:	f000 fa1b 	bl	800b0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acc2:	f000 fd2d 	bl	800b720 <xTaskResumeAll>
 800acc6:	e76c      	b.n	800aba2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acca:	f000 fa15 	bl	800b0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acce:	f000 fd27 	bl	800b720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3738      	adds	r7, #56	; 0x38
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b090      	sub	sp, #64	; 0x40
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d103      	bne.n	800ad1c <xQueueGenericSendFromISR+0x3c>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <xQueueGenericSendFromISR+0x40>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e000      	b.n	800ad22 <xQueueGenericSendFromISR+0x42>
 800ad20:	2300      	movs	r3, #0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d103      	bne.n	800ad4a <xQueueGenericSendFromISR+0x6a>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <xQueueGenericSendFromISR+0x6e>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <xQueueGenericSendFromISR+0x70>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	623b      	str	r3, [r7, #32]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad6a:	f001 fef5 	bl	800cb58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad6e:	f3ef 8211 	mrs	r2, BASEPRI
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	61fa      	str	r2, [r7, #28]
 800ad84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d302      	bcc.n	800ad9c <xQueueGenericSendFromISR+0xbc>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d12f      	bne.n	800adfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ada2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adb2:	f000 f911 	bl	800afd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d112      	bne.n	800ade6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	3324      	adds	r3, #36	; 0x24
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fec3 	bl	800bb58 <xTaskRemoveFromEventList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00e      	beq.n	800adf6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00b      	beq.n	800adf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e007      	b.n	800adf6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ade6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adea:	3301      	adds	r3, #1
 800adec:	b2db      	uxtb	r3, r3
 800adee:	b25a      	sxtb	r2, r3
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adf6:	2301      	movs	r3, #1
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adfa:	e001      	b.n	800ae00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adfc:	2300      	movs	r3, #0
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3740      	adds	r7, #64	; 0x40
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08c      	sub	sp, #48	; 0x30
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <xQueueReceive+0x30>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	623b      	str	r3, [r7, #32]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <xQueueReceive+0x3e>
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <xQueueReceive+0x42>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <xQueueReceive+0x44>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xQueueReceive+0x5e>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	61fb      	str	r3, [r7, #28]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae76:	f001 f831 	bl	800bedc <xTaskGetSchedulerState>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <xQueueReceive+0x6e>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <xQueueReceive+0x72>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <xQueueReceive+0x74>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xQueueReceive+0x8e>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	61bb      	str	r3, [r7, #24]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea6:	f001 fd75 	bl	800c994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01f      	beq.n	800aef6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aeb6:	68b9      	ldr	r1, [r7, #8]
 800aeb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeba:	f000 f8f7 	bl	800b0ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	1e5a      	subs	r2, r3, #1
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00f      	beq.n	800aeee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	3310      	adds	r3, #16
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fe40 	bl	800bb58 <xTaskRemoveFromEventList>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aede:	4b3d      	ldr	r3, [pc, #244]	; (800afd4 <xQueueReceive+0x1bc>)
 800aee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aeee:	f001 fd81 	bl	800c9f4 <vPortExitCritical>
				return pdPASS;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e069      	b.n	800afca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d103      	bne.n	800af04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aefc:	f001 fd7a 	bl	800c9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af00:	2300      	movs	r3, #0
 800af02:	e062      	b.n	800afca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af0a:	f107 0310 	add.w	r3, r7, #16
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fe86 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af14:	2301      	movs	r3, #1
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af18:	f001 fd6c 	bl	800c9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af1c:	f000 fbf2 	bl	800b704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af20:	f001 fd38 	bl	800c994 <vPortEnterCritical>
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af30:	d103      	bne.n	800af3a <xQueueReceive+0x122>
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af40:	b25b      	sxtb	r3, r3
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d103      	bne.n	800af50 <xQueueReceive+0x138>
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af50:	f001 fd50 	bl	800c9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af54:	1d3a      	adds	r2, r7, #4
 800af56:	f107 0310 	add.w	r3, r7, #16
 800af5a:	4611      	mov	r1, r2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fe75 	bl	800bc4c <xTaskCheckForTimeOut>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d123      	bne.n	800afb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6a:	f000 f917 	bl	800b19c <prvIsQueueEmpty>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d017      	beq.n	800afa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	3324      	adds	r3, #36	; 0x24
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	4611      	mov	r1, r2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 fd9b 	bl	800bab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af84:	f000 f8b8 	bl	800b0f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af88:	f000 fbca 	bl	800b720 <xTaskResumeAll>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d189      	bne.n	800aea6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af92:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <xQueueReceive+0x1bc>)
 800af94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	e780      	b.n	800aea6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800afa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa6:	f000 f8a7 	bl	800b0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afaa:	f000 fbb9 	bl	800b720 <xTaskResumeAll>
 800afae:	e77a      	b.n	800aea6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800afb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afb2:	f000 f8a1 	bl	800b0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afb6:	f000 fbb3 	bl	800b720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afbc:	f000 f8ee 	bl	800b19c <prvIsQueueEmpty>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f43f af6f 	beq.w	800aea6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3730      	adds	r7, #48	; 0x30
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	e000ed04 	.word	0xe000ed04

0800afd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10d      	bne.n	800b012 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d14d      	bne.n	800b09a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 ff88 	bl	800bf18 <xTaskPriorityDisinherit>
 800b008:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	609a      	str	r2, [r3, #8]
 800b010:	e043      	b.n	800b09a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d119      	bne.n	800b04c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6858      	ldr	r0, [r3, #4]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	461a      	mov	r2, r3
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	f002 f8e5 	bl	800d1f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	441a      	add	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d32b      	bcc.n	800b09a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	605a      	str	r2, [r3, #4]
 800b04a:	e026      	b.n	800b09a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68d8      	ldr	r0, [r3, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	461a      	mov	r2, r3
 800b056:	68b9      	ldr	r1, [r7, #8]
 800b058:	f002 f8cb 	bl	800d1f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	68da      	ldr	r2, [r3, #12]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	425b      	negs	r3, r3
 800b066:	441a      	add	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	429a      	cmp	r2, r3
 800b076:	d207      	bcs.n	800b088 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b080:	425b      	negs	r3, r3
 800b082:	441a      	add	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d105      	bne.n	800b09a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	3b01      	subs	r3, #1
 800b098:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0a2:	697b      	ldr	r3, [r7, #20]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3718      	adds	r7, #24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d018      	beq.n	800b0f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	441a      	add	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d303      	bcc.n	800b0e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68d9      	ldr	r1, [r3, #12]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6838      	ldr	r0, [r7, #0]
 800b0ec:	f002 f881 	bl	800d1f2 <memcpy>
	}
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b100:	f001 fc48 	bl	800c994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b10a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b10c:	e011      	b.n	800b132 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	d012      	beq.n	800b13c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3324      	adds	r3, #36	; 0x24
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fd1c 	bl	800bb58 <xTaskRemoveFromEventList>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b126:	f000 fdf3 	bl	800bd10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dce9      	bgt.n	800b10e <prvUnlockQueue+0x16>
 800b13a:	e000      	b.n	800b13e <prvUnlockQueue+0x46>
					break;
 800b13c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	22ff      	movs	r2, #255	; 0xff
 800b142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b146:	f001 fc55 	bl	800c9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b14a:	f001 fc23 	bl	800c994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b154:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b156:	e011      	b.n	800b17c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d012      	beq.n	800b186 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3310      	adds	r3, #16
 800b164:	4618      	mov	r0, r3
 800b166:	f000 fcf7 	bl	800bb58 <xTaskRemoveFromEventList>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b170:	f000 fdce 	bl	800bd10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	3b01      	subs	r3, #1
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dce9      	bgt.n	800b158 <prvUnlockQueue+0x60>
 800b184:	e000      	b.n	800b188 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b186:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	22ff      	movs	r2, #255	; 0xff
 800b18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b190:	f001 fc30 	bl	800c9f4 <vPortExitCritical>
}
 800b194:	bf00      	nop
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1a4:	f001 fbf6 	bl	800c994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	e001      	b.n	800b1ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1ba:	f001 fc1b 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800b1be:	68fb      	ldr	r3, [r7, #12]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1d0:	f001 fbe0 	bl	800c994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d102      	bne.n	800b1e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e001      	b.n	800b1ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1ea:	f001 fc03 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	e014      	b.n	800b232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b208:	4a0f      	ldr	r2, [pc, #60]	; (800b248 <vQueueAddToRegistry+0x50>)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10b      	bne.n	800b22c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b214:	490c      	ldr	r1, [pc, #48]	; (800b248 <vQueueAddToRegistry+0x50>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b21e:	4a0a      	ldr	r2, [pc, #40]	; (800b248 <vQueueAddToRegistry+0x50>)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	4413      	add	r3, r2
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b22a:	e006      	b.n	800b23a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3301      	adds	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b07      	cmp	r3, #7
 800b236:	d9e7      	bls.n	800b208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b238:	bf00      	nop
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	24002fa0 	.word	0x24002fa0

0800b24c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b25c:	f001 fb9a 	bl	800c994 <vPortEnterCritical>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b266:	b25b      	sxtb	r3, r3
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d103      	bne.n	800b276 <vQueueWaitForMessageRestricted+0x2a>
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27c:	b25b      	sxtb	r3, r3
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d103      	bne.n	800b28c <vQueueWaitForMessageRestricted+0x40>
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b28c:	f001 fbb2 	bl	800c9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	3324      	adds	r3, #36	; 0x24
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fc2d 	bl	800bb00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2a6:	6978      	ldr	r0, [r7, #20]
 800b2a8:	f7ff ff26 	bl	800b0f8 <prvUnlockQueue>
	}
 800b2ac:	bf00      	nop
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08e      	sub	sp, #56	; 0x38
 800b2b8:	af04      	add	r7, sp, #16
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10a      	bne.n	800b2de <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	623b      	str	r3, [r7, #32]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xTaskCreateStatic+0x46>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2fa:	23bc      	movs	r3, #188	; 0xbc
 800b2fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2bbc      	cmp	r3, #188	; 0xbc
 800b302:	d00a      	beq.n	800b31a <xTaskCreateStatic+0x66>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	61bb      	str	r3, [r7, #24]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b31a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d01e      	beq.n	800b360 <xTaskCreateStatic+0xac>
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01b      	beq.n	800b360 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	2202      	movs	r2, #2
 800b336:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b33a:	2300      	movs	r3, #0
 800b33c:	9303      	str	r3, [sp, #12]
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	9302      	str	r3, [sp, #8]
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 f850 	bl	800b3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b35a:	f000 f8f3 	bl	800b544 <prvAddNewTaskToReadyList>
 800b35e:	e001      	b.n	800b364 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b364:	697b      	ldr	r3, [r7, #20]
	}
 800b366:	4618      	mov	r0, r3
 800b368:	3728      	adds	r7, #40	; 0x28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b08c      	sub	sp, #48	; 0x30
 800b372:	af04      	add	r7, sp, #16
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4613      	mov	r3, r2
 800b37c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fc28 	bl	800cbd8 <pvPortMalloc>
 800b388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b390:	20bc      	movs	r0, #188	; 0xbc
 800b392:	f001 fc21 	bl	800cbd8 <pvPortMalloc>
 800b396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3a4:	e005      	b.n	800b3b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3a6:	6978      	ldr	r0, [r7, #20]
 800b3a8:	f001 fce2 	bl	800cd70 <vPortFree>
 800b3ac:	e001      	b.n	800b3b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d017      	beq.n	800b3e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3c0:	88fa      	ldrh	r2, [r7, #6]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9303      	str	r3, [sp, #12]
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	9302      	str	r3, [sp, #8]
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 f80e 	bl	800b3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3dc:	69f8      	ldr	r0, [r7, #28]
 800b3de:	f000 f8b1 	bl	800b544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	e002      	b.n	800b3ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	461a      	mov	r2, r3
 800b410:	21a5      	movs	r1, #165	; 0xa5
 800b412:	f001 fefc 	bl	800d20e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b420:	440b      	add	r3, r1
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	f023 0307 	bic.w	r3, r3, #7
 800b42e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	617b      	str	r3, [r7, #20]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01f      	beq.n	800b496 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b456:	2300      	movs	r3, #0
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	e012      	b.n	800b482 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4413      	add	r3, r2
 800b462:	7819      	ldrb	r1, [r3, #0]
 800b464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	3334      	adds	r3, #52	; 0x34
 800b46c:	460a      	mov	r2, r1
 800b46e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d006      	beq.n	800b48a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	3301      	adds	r3, #1
 800b480:	61fb      	str	r3, [r7, #28]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	2b0f      	cmp	r3, #15
 800b486:	d9e9      	bls.n	800b45c <prvInitialiseNewTask+0x64>
 800b488:	e000      	b.n	800b48c <prvInitialiseNewTask+0x94>
			{
				break;
 800b48a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b494:	e003      	b.n	800b49e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	2b37      	cmp	r3, #55	; 0x37
 800b4a2:	d901      	bls.n	800b4a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4a4:	2337      	movs	r3, #55	; 0x37
 800b4a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff f93e 	bl	800a740 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff f939 	bl	800a740 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	3354      	adds	r3, #84	; 0x54
 800b4f8:	2260      	movs	r2, #96	; 0x60
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 fe86 	bl	800d20e <memset>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	4a0c      	ldr	r2, [pc, #48]	; (800b538 <prvInitialiseNewTask+0x140>)
 800b506:	659a      	str	r2, [r3, #88]	; 0x58
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	4a0c      	ldr	r2, [pc, #48]	; (800b53c <prvInitialiseNewTask+0x144>)
 800b50c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	4a0b      	ldr	r2, [pc, #44]	; (800b540 <prvInitialiseNewTask+0x148>)
 800b512:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68f9      	ldr	r1, [r7, #12]
 800b518:	69b8      	ldr	r0, [r7, #24]
 800b51a:	f001 f90d 	bl	800c738 <pxPortInitialiseStack>
 800b51e:	4602      	mov	r2, r0
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b530:	bf00      	nop
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	0800dc50 	.word	0x0800dc50
 800b53c:	0800dc70 	.word	0x0800dc70
 800b540:	0800dc30 	.word	0x0800dc30

0800b544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b54c:	f001 fa22 	bl	800c994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b550:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a2c      	ldr	r2, [pc, #176]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b55a:	4b2c      	ldr	r3, [pc, #176]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d109      	bne.n	800b576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b562:	4a2a      	ldr	r2, [pc, #168]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b568:	4b27      	ldr	r3, [pc, #156]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d110      	bne.n	800b592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b570:	f000 fbf2 	bl	800bd58 <prvInitialiseTaskLists>
 800b574:	e00d      	b.n	800b592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <prvAddNewTaskToReadyList+0xcc>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b57e:	4b23      	ldr	r3, [pc, #140]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	429a      	cmp	r2, r3
 800b58a:	d802      	bhi.n	800b592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b58c:	4a1f      	ldr	r2, [pc, #124]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b592:	4b20      	ldr	r3, [pc, #128]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3301      	adds	r3, #1
 800b598:	4a1e      	ldr	r2, [pc, #120]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b59a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b59c:	4b1d      	ldr	r3, [pc, #116]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a8:	4b1b      	ldr	r3, [pc, #108]	; (800b618 <prvAddNewTaskToReadyList+0xd4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d903      	bls.n	800b5b8 <prvAddNewTaskToReadyList+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	4a18      	ldr	r2, [pc, #96]	; (800b618 <prvAddNewTaskToReadyList+0xd4>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4a15      	ldr	r2, [pc, #84]	; (800b61c <prvAddNewTaskToReadyList+0xd8>)
 800b5c6:	441a      	add	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7ff f8c3 	bl	800a75a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5d4:	f001 fa0e 	bl	800c9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5d8:	4b0d      	ldr	r3, [pc, #52]	; (800b610 <prvAddNewTaskToReadyList+0xcc>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d207      	bcs.n	800b5fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5ee:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <prvAddNewTaskToReadyList+0xdc>)
 800b5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	240034b4 	.word	0x240034b4
 800b60c:	24002fe0 	.word	0x24002fe0
 800b610:	240034c0 	.word	0x240034c0
 800b614:	240034d0 	.word	0x240034d0
 800b618:	240034bc 	.word	0x240034bc
 800b61c:	24002fe4 	.word	0x24002fe4
 800b620:	e000ed04 	.word	0xe000ed04

0800b624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b632:	463a      	mov	r2, r7
 800b634:	1d39      	adds	r1, r7, #4
 800b636:	f107 0308 	add.w	r3, r7, #8
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff f82c 	bl	800a698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	9202      	str	r2, [sp, #8]
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	460a      	mov	r2, r1
 800b652:	4924      	ldr	r1, [pc, #144]	; (800b6e4 <vTaskStartScheduler+0xc0>)
 800b654:	4824      	ldr	r0, [pc, #144]	; (800b6e8 <vTaskStartScheduler+0xc4>)
 800b656:	f7ff fe2d 	bl	800b2b4 <xTaskCreateStatic>
 800b65a:	4603      	mov	r3, r0
 800b65c:	4a23      	ldr	r2, [pc, #140]	; (800b6ec <vTaskStartScheduler+0xc8>)
 800b65e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b660:	4b22      	ldr	r3, [pc, #136]	; (800b6ec <vTaskStartScheduler+0xc8>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e001      	b.n	800b672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d102      	bne.n	800b67e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b678:	f000 fd10 	bl	800c09c <xTimerCreateTimerTask>
 800b67c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d11b      	bne.n	800b6bc <vTaskStartScheduler+0x98>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	613b      	str	r3, [r7, #16]
}
 800b696:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b698:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <vTaskStartScheduler+0xcc>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3354      	adds	r3, #84	; 0x54
 800b69e:	4a15      	ldr	r2, [pc, #84]	; (800b6f4 <vTaskStartScheduler+0xd0>)
 800b6a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6a2:	4b15      	ldr	r3, [pc, #84]	; (800b6f8 <vTaskStartScheduler+0xd4>)
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6aa:	4b14      	ldr	r3, [pc, #80]	; (800b6fc <vTaskStartScheduler+0xd8>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6b0:	4b13      	ldr	r3, [pc, #76]	; (800b700 <vTaskStartScheduler+0xdc>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6b6:	f001 f8cb 	bl	800c850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6ba:	e00e      	b.n	800b6da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d10a      	bne.n	800b6da <vTaskStartScheduler+0xb6>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60fb      	str	r3, [r7, #12]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <vTaskStartScheduler+0xb4>
}
 800b6da:	bf00      	nop
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	0800db54 	.word	0x0800db54
 800b6e8:	0800bd29 	.word	0x0800bd29
 800b6ec:	240034d8 	.word	0x240034d8
 800b6f0:	24002fe0 	.word	0x24002fe0
 800b6f4:	24000014 	.word	0x24000014
 800b6f8:	240034d4 	.word	0x240034d4
 800b6fc:	240034c0 	.word	0x240034c0
 800b700:	240034b8 	.word	0x240034b8

0800b704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b708:	4b04      	ldr	r3, [pc, #16]	; (800b71c <vTaskSuspendAll+0x18>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	4a03      	ldr	r2, [pc, #12]	; (800b71c <vTaskSuspendAll+0x18>)
 800b710:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b712:	bf00      	nop
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	240034dc 	.word	0x240034dc

0800b720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b72e:	4b42      	ldr	r3, [pc, #264]	; (800b838 <xTaskResumeAll+0x118>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <xTaskResumeAll+0x2c>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	603b      	str	r3, [r7, #0]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b74c:	f001 f922 	bl	800c994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b750:	4b39      	ldr	r3, [pc, #228]	; (800b838 <xTaskResumeAll+0x118>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3b01      	subs	r3, #1
 800b756:	4a38      	ldr	r2, [pc, #224]	; (800b838 <xTaskResumeAll+0x118>)
 800b758:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b75a:	4b37      	ldr	r3, [pc, #220]	; (800b838 <xTaskResumeAll+0x118>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d162      	bne.n	800b828 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b762:	4b36      	ldr	r3, [pc, #216]	; (800b83c <xTaskResumeAll+0x11c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d05e      	beq.n	800b828 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b76a:	e02f      	b.n	800b7cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b76c:	4b34      	ldr	r3, [pc, #208]	; (800b840 <xTaskResumeAll+0x120>)
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3318      	adds	r3, #24
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff f84b 	bl	800a814 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3304      	adds	r3, #4
 800b782:	4618      	mov	r0, r3
 800b784:	f7ff f846 	bl	800a814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78c:	4b2d      	ldr	r3, [pc, #180]	; (800b844 <xTaskResumeAll+0x124>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	429a      	cmp	r2, r3
 800b792:	d903      	bls.n	800b79c <xTaskResumeAll+0x7c>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4a2a      	ldr	r2, [pc, #168]	; (800b844 <xTaskResumeAll+0x124>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4a27      	ldr	r2, [pc, #156]	; (800b848 <xTaskResumeAll+0x128>)
 800b7aa:	441a      	add	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe ffd1 	bl	800a75a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	4b23      	ldr	r3, [pc, #140]	; (800b84c <xTaskResumeAll+0x12c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d302      	bcc.n	800b7cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7c6:	4b22      	ldr	r3, [pc, #136]	; (800b850 <xTaskResumeAll+0x130>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7cc:	4b1c      	ldr	r3, [pc, #112]	; (800b840 <xTaskResumeAll+0x120>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1cb      	bne.n	800b76c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7da:	f000 fb5f 	bl	800be9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7de:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <xTaskResumeAll+0x134>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d010      	beq.n	800b80c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7ea:	f000 f847 	bl	800b87c <xTaskIncrementTick>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7f4:	4b16      	ldr	r3, [pc, #88]	; (800b850 <xTaskResumeAll+0x130>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f1      	bne.n	800b7ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <xTaskResumeAll+0x134>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <xTaskResumeAll+0x130>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d009      	beq.n	800b828 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b814:	2301      	movs	r3, #1
 800b816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b818:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <xTaskResumeAll+0x138>)
 800b81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b828:	f001 f8e4 	bl	800c9f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b82c:	68bb      	ldr	r3, [r7, #8]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	240034dc 	.word	0x240034dc
 800b83c:	240034b4 	.word	0x240034b4
 800b840:	24003474 	.word	0x24003474
 800b844:	240034bc 	.word	0x240034bc
 800b848:	24002fe4 	.word	0x24002fe4
 800b84c:	24002fe0 	.word	0x24002fe0
 800b850:	240034c8 	.word	0x240034c8
 800b854:	240034c4 	.word	0x240034c4
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <xTaskGetTickCount+0x1c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b868:	687b      	ldr	r3, [r7, #4]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	240034b8 	.word	0x240034b8

0800b87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b886:	4b4f      	ldr	r3, [pc, #316]	; (800b9c4 <xTaskIncrementTick+0x148>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 808f 	bne.w	800b9ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b890:	4b4d      	ldr	r3, [pc, #308]	; (800b9c8 <xTaskIncrementTick+0x14c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b898:	4a4b      	ldr	r2, [pc, #300]	; (800b9c8 <xTaskIncrementTick+0x14c>)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d120      	bne.n	800b8e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8a4:	4b49      	ldr	r3, [pc, #292]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	603b      	str	r3, [r7, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <xTaskIncrementTick+0x46>
 800b8c4:	4b41      	ldr	r3, [pc, #260]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	4b41      	ldr	r3, [pc, #260]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a3f      	ldr	r2, [pc, #252]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	4a3f      	ldr	r2, [pc, #252]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	4b3e      	ldr	r3, [pc, #248]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	4a3d      	ldr	r2, [pc, #244]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	f000 fadb 	bl	800be9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e6:	4b3c      	ldr	r3, [pc, #240]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d349      	bcc.n	800b984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8f0:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d104      	bne.n	800b904 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fa:	4b37      	ldr	r3, [pc, #220]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b900:	601a      	str	r2, [r3, #0]
					break;
 800b902:	e03f      	b.n	800b984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d203      	bcs.n	800b924 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b91c:	4a2e      	ldr	r2, [pc, #184]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b922:	e02f      	b.n	800b984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe ff73 	bl	800a814 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3318      	adds	r3, #24
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe ff6a 	bl	800a814 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskIncrementTick+0xd8>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a22      	ldr	r2, [pc, #136]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b962:	441a      	add	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fe fef5 	bl	800a75a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b974:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d3b8      	bcc.n	800b8f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b97e:	2301      	movs	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b982:	e7b5      	b.n	800b8f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b984:	4b17      	ldr	r3, [pc, #92]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4915      	ldr	r1, [pc, #84]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	440b      	add	r3, r1
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d901      	bls.n	800b9a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9a0:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <xTaskIncrementTick+0x16c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	e004      	b.n	800b9b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	4a0d      	ldr	r2, [pc, #52]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9b8:	697b      	ldr	r3, [r7, #20]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	240034dc 	.word	0x240034dc
 800b9c8:	240034b8 	.word	0x240034b8
 800b9cc:	2400346c 	.word	0x2400346c
 800b9d0:	24003470 	.word	0x24003470
 800b9d4:	240034cc 	.word	0x240034cc
 800b9d8:	240034d4 	.word	0x240034d4
 800b9dc:	240034bc 	.word	0x240034bc
 800b9e0:	24002fe4 	.word	0x24002fe4
 800b9e4:	24002fe0 	.word	0x24002fe0
 800b9e8:	240034c8 	.word	0x240034c8
 800b9ec:	240034c4 	.word	0x240034c4

0800b9f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9f6:	4b2a      	ldr	r3, [pc, #168]	; (800baa0 <vTaskSwitchContext+0xb0>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9fe:	4b29      	ldr	r3, [pc, #164]	; (800baa4 <vTaskSwitchContext+0xb4>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba04:	e046      	b.n	800ba94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ba06:	4b27      	ldr	r3, [pc, #156]	; (800baa4 <vTaskSwitchContext+0xb4>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0c:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <vTaskSwitchContext+0xb8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e010      	b.n	800ba36 <vTaskSwitchContext+0x46>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <vTaskSwitchContext+0x3e>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	491d      	ldr	r1, [pc, #116]	; (800baac <vTaskSwitchContext+0xbc>)
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0e4      	beq.n	800ba14 <vTaskSwitchContext+0x24>
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4a15      	ldr	r2, [pc, #84]	; (800baac <vTaskSwitchContext+0xbc>)
 800ba56:	4413      	add	r3, r2
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	605a      	str	r2, [r3, #4]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d104      	bne.n	800ba7a <vTaskSwitchContext+0x8a>
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	605a      	str	r2, [r3, #4]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	4a0b      	ldr	r2, [pc, #44]	; (800bab0 <vTaskSwitchContext+0xc0>)
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	4a08      	ldr	r2, [pc, #32]	; (800baa8 <vTaskSwitchContext+0xb8>)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <vTaskSwitchContext+0xc0>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3354      	adds	r3, #84	; 0x54
 800ba90:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <vTaskSwitchContext+0xc4>)
 800ba92:	6013      	str	r3, [r2, #0]
}
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	240034dc 	.word	0x240034dc
 800baa4:	240034c8 	.word	0x240034c8
 800baa8:	240034bc 	.word	0x240034bc
 800baac:	24002fe4 	.word	0x24002fe4
 800bab0:	24002fe0 	.word	0x24002fe0
 800bab4:	24000014 	.word	0x24000014

0800bab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60fb      	str	r3, [r7, #12]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bade:	4b07      	ldr	r3, [pc, #28]	; (800bafc <vTaskPlaceOnEventList+0x44>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3318      	adds	r3, #24
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7fe fe5b 	bl	800a7a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baec:	2101      	movs	r1, #1
 800baee:	6838      	ldr	r0, [r7, #0]
 800baf0:	f000 fa80 	bl	800bff4 <prvAddCurrentTaskToDelayedList>
}
 800baf4:	bf00      	nop
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	24002fe0 	.word	0x24002fe0

0800bb00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	617b      	str	r3, [r7, #20]
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3318      	adds	r3, #24
 800bb2e:	4619      	mov	r1, r3
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f7fe fe12 	bl	800a75a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	68b8      	ldr	r0, [r7, #8]
 800bb46:	f000 fa55 	bl	800bff4 <prvAddCurrentTaskToDelayedList>
	}
 800bb4a:	bf00      	nop
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	24002fe0 	.word	0x24002fe0

0800bb58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60fb      	str	r3, [r7, #12]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	3318      	adds	r3, #24
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fe43 	bl	800a814 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8e:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <xTaskRemoveFromEventList+0xb0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d11d      	bne.n	800bbd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fe3a 	bl	800a814 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	4b19      	ldr	r3, [pc, #100]	; (800bc0c <xTaskRemoveFromEventList+0xb4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d903      	bls.n	800bbb4 <xTaskRemoveFromEventList+0x5c>
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4a16      	ldr	r2, [pc, #88]	; (800bc0c <xTaskRemoveFromEventList+0xb4>)
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4a13      	ldr	r2, [pc, #76]	; (800bc10 <xTaskRemoveFromEventList+0xb8>)
 800bbc2:	441a      	add	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fe fdc5 	bl	800a75a <vListInsertEnd>
 800bbd0:	e005      	b.n	800bbde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3318      	adds	r3, #24
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	480e      	ldr	r0, [pc, #56]	; (800bc14 <xTaskRemoveFromEventList+0xbc>)
 800bbda:	f7fe fdbe 	bl	800a75a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	; (800bc18 <xTaskRemoveFromEventList+0xc0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d905      	bls.n	800bbf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <xTaskRemoveFromEventList+0xc4>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e001      	b.n	800bbfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbfc:	697b      	ldr	r3, [r7, #20]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	240034dc 	.word	0x240034dc
 800bc0c:	240034bc 	.word	0x240034bc
 800bc10:	24002fe4 	.word	0x24002fe4
 800bc14:	24003474 	.word	0x24003474
 800bc18:	24002fe0 	.word	0x24002fe0
 800bc1c:	240034c8 	.word	0x240034c8

0800bc20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <vTaskInternalSetTimeOutState+0x24>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <vTaskInternalSetTimeOutState+0x28>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	240034cc 	.word	0x240034cc
 800bc48:	240034b8 	.word	0x240034b8

0800bc4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	613b      	str	r3, [r7, #16]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc8e:	f000 fe81 	bl	800c994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc92:	4b1d      	ldr	r3, [pc, #116]	; (800bd08 <xTaskCheckForTimeOut+0xbc>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d102      	bne.n	800bcb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	e023      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	4b15      	ldr	r3, [pc, #84]	; (800bd0c <xTaskCheckForTimeOut+0xc0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d007      	beq.n	800bcce <xTaskCheckForTimeOut+0x82>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	e015      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d20b      	bcs.n	800bcf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	1ad2      	subs	r2, r2, r3
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ff9b 	bl	800bc20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e004      	b.n	800bcfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcfa:	f000 fe7b 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	240034b8 	.word	0x240034b8
 800bd0c:	240034cc 	.word	0x240034cc

0800bd10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd14:	4b03      	ldr	r3, [pc, #12]	; (800bd24 <vTaskMissedYield+0x14>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	601a      	str	r2, [r3, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	240034c8 	.word	0x240034c8

0800bd28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd30:	f000 f852 	bl	800bdd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd34:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <prvIdleTask+0x28>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d9f9      	bls.n	800bd30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <prvIdleTask+0x2c>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd4c:	e7f0      	b.n	800bd30 <prvIdleTask+0x8>
 800bd4e:	bf00      	nop
 800bd50:	24002fe4 	.word	0x24002fe4
 800bd54:	e000ed04 	.word	0xe000ed04

0800bd58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	e00c      	b.n	800bd7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4a12      	ldr	r2, [pc, #72]	; (800bdb8 <prvInitialiseTaskLists+0x60>)
 800bd70:	4413      	add	r3, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fcc4 	bl	800a700 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b37      	cmp	r3, #55	; 0x37
 800bd82:	d9ef      	bls.n	800bd64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd84:	480d      	ldr	r0, [pc, #52]	; (800bdbc <prvInitialiseTaskLists+0x64>)
 800bd86:	f7fe fcbb 	bl	800a700 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd8a:	480d      	ldr	r0, [pc, #52]	; (800bdc0 <prvInitialiseTaskLists+0x68>)
 800bd8c:	f7fe fcb8 	bl	800a700 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd90:	480c      	ldr	r0, [pc, #48]	; (800bdc4 <prvInitialiseTaskLists+0x6c>)
 800bd92:	f7fe fcb5 	bl	800a700 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd96:	480c      	ldr	r0, [pc, #48]	; (800bdc8 <prvInitialiseTaskLists+0x70>)
 800bd98:	f7fe fcb2 	bl	800a700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd9c:	480b      	ldr	r0, [pc, #44]	; (800bdcc <prvInitialiseTaskLists+0x74>)
 800bd9e:	f7fe fcaf 	bl	800a700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <prvInitialiseTaskLists+0x78>)
 800bda4:	4a05      	ldr	r2, [pc, #20]	; (800bdbc <prvInitialiseTaskLists+0x64>)
 800bda6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <prvInitialiseTaskLists+0x7c>)
 800bdaa:	4a05      	ldr	r2, [pc, #20]	; (800bdc0 <prvInitialiseTaskLists+0x68>)
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	24002fe4 	.word	0x24002fe4
 800bdbc:	24003444 	.word	0x24003444
 800bdc0:	24003458 	.word	0x24003458
 800bdc4:	24003474 	.word	0x24003474
 800bdc8:	24003488 	.word	0x24003488
 800bdcc:	240034a0 	.word	0x240034a0
 800bdd0:	2400346c 	.word	0x2400346c
 800bdd4:	24003470 	.word	0x24003470

0800bdd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdde:	e019      	b.n	800be14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bde0:	f000 fdd8 	bl	800c994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde4:	4b10      	ldr	r3, [pc, #64]	; (800be28 <prvCheckTasksWaitingTermination+0x50>)
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fe fd0f 	bl	800a814 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <prvCheckTasksWaitingTermination+0x54>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	4a0b      	ldr	r2, [pc, #44]	; (800be2c <prvCheckTasksWaitingTermination+0x54>)
 800bdfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be0a:	f000 fdf3 	bl	800c9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f810 	bl	800be34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be14:	4b06      	ldr	r3, [pc, #24]	; (800be30 <prvCheckTasksWaitingTermination+0x58>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e1      	bne.n	800bde0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	24003488 	.word	0x24003488
 800be2c:	240034b4 	.word	0x240034b4
 800be30:	2400349c 	.word	0x2400349c

0800be34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3354      	adds	r3, #84	; 0x54
 800be40:	4618      	mov	r0, r3
 800be42:	f001 fb05 	bl	800d450 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d108      	bne.n	800be62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be54:	4618      	mov	r0, r3
 800be56:	f000 ff8b 	bl	800cd70 <vPortFree>
				vPortFree( pxTCB );
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 ff88 	bl	800cd70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be60:	e018      	b.n	800be94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d103      	bne.n	800be74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 ff7f 	bl	800cd70 <vPortFree>
	}
 800be72:	e00f      	b.n	800be94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d00a      	beq.n	800be94 <prvDeleteTCB+0x60>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	60fb      	str	r3, [r7, #12]
}
 800be90:	bf00      	nop
 800be92:	e7fe      	b.n	800be92 <prvDeleteTCB+0x5e>
	}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <prvResetNextTaskUnblockTime+0x38>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d104      	bne.n	800beb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800beac:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <prvResetNextTaskUnblockTime+0x3c>)
 800beae:	f04f 32ff 	mov.w	r2, #4294967295
 800beb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800beb4:	e008      	b.n	800bec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beb6:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <prvResetNextTaskUnblockTime+0x38>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <prvResetNextTaskUnblockTime+0x3c>)
 800bec6:	6013      	str	r3, [r2, #0]
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	2400346c 	.word	0x2400346c
 800bed8:	240034d4 	.word	0x240034d4

0800bedc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <xTaskGetSchedulerState+0x34>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d102      	bne.n	800bef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800beea:	2301      	movs	r3, #1
 800beec:	607b      	str	r3, [r7, #4]
 800beee:	e008      	b.n	800bf02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bef0:	4b08      	ldr	r3, [pc, #32]	; (800bf14 <xTaskGetSchedulerState+0x38>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bef8:	2302      	movs	r3, #2
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	e001      	b.n	800bf02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf02:	687b      	ldr	r3, [r7, #4]
	}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	240034c0 	.word	0x240034c0
 800bf14:	240034dc 	.word	0x240034dc

0800bf18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d056      	beq.n	800bfdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf2e:	4b2e      	ldr	r3, [pc, #184]	; (800bfe8 <xTaskPriorityDisinherit+0xd0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d00a      	beq.n	800bf4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	60fb      	str	r3, [r7, #12]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	60bb      	str	r3, [r7, #8]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf70:	1e5a      	subs	r2, r3, #1
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d02c      	beq.n	800bfdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d128      	bne.n	800bfdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fc40 	bl	800a814 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <xTaskPriorityDisinherit+0xd4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d903      	bls.n	800bfbc <xTaskPriorityDisinherit+0xa4>
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <xTaskPriorityDisinherit+0xd4>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <xTaskPriorityDisinherit+0xd8>)
 800bfca:	441a      	add	r2, r3
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fe fbc1 	bl	800a75a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfdc:	697b      	ldr	r3, [r7, #20]
	}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	24002fe0 	.word	0x24002fe0
 800bfec:	240034bc 	.word	0x240034bc
 800bff0:	24002fe4 	.word	0x24002fe4

0800bff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bffe:	4b21      	ldr	r3, [pc, #132]	; (800c084 <prvAddCurrentTaskToDelayedList+0x90>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c004:	4b20      	ldr	r3, [pc, #128]	; (800c088 <prvAddCurrentTaskToDelayedList+0x94>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3304      	adds	r3, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fc02 	bl	800a814 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c016:	d10a      	bne.n	800c02e <prvAddCurrentTaskToDelayedList+0x3a>
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c01e:	4b1a      	ldr	r3, [pc, #104]	; (800c088 <prvAddCurrentTaskToDelayedList+0x94>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3304      	adds	r3, #4
 800c024:	4619      	mov	r1, r3
 800c026:	4819      	ldr	r0, [pc, #100]	; (800c08c <prvAddCurrentTaskToDelayedList+0x98>)
 800c028:	f7fe fb97 	bl	800a75a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c02c:	e026      	b.n	800c07c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4413      	add	r3, r2
 800c034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c036:	4b14      	ldr	r3, [pc, #80]	; (800c088 <prvAddCurrentTaskToDelayedList+0x94>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	429a      	cmp	r2, r3
 800c044:	d209      	bcs.n	800c05a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c046:	4b12      	ldr	r3, [pc, #72]	; (800c090 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4b0f      	ldr	r3, [pc, #60]	; (800c088 <prvAddCurrentTaskToDelayedList+0x94>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3304      	adds	r3, #4
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7fe fba5 	bl	800a7a2 <vListInsert>
}
 800c058:	e010      	b.n	800c07c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05a:	4b0e      	ldr	r3, [pc, #56]	; (800c094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b0a      	ldr	r3, [pc, #40]	; (800c088 <prvAddCurrentTaskToDelayedList+0x94>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3304      	adds	r3, #4
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f7fe fb9b 	bl	800a7a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c06c:	4b0a      	ldr	r3, [pc, #40]	; (800c098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	429a      	cmp	r2, r3
 800c074:	d202      	bcs.n	800c07c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c076:	4a08      	ldr	r2, [pc, #32]	; (800c098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	6013      	str	r3, [r2, #0]
}
 800c07c:	bf00      	nop
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	240034b8 	.word	0x240034b8
 800c088:	24002fe0 	.word	0x24002fe0
 800c08c:	240034a0 	.word	0x240034a0
 800c090:	24003470 	.word	0x24003470
 800c094:	2400346c 	.word	0x2400346c
 800c098:	240034d4 	.word	0x240034d4

0800c09c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	; 0x28
 800c0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0a6:	f000 fb07 	bl	800c6b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0aa:	4b1c      	ldr	r3, [pc, #112]	; (800c11c <xTimerCreateTimerTask+0x80>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d021      	beq.n	800c0f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0ba:	1d3a      	adds	r2, r7, #4
 800c0bc:	f107 0108 	add.w	r1, r7, #8
 800c0c0:	f107 030c 	add.w	r3, r7, #12
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fb01 	bl	800a6cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	9202      	str	r2, [sp, #8]
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	460a      	mov	r2, r1
 800c0dc:	4910      	ldr	r1, [pc, #64]	; (800c120 <xTimerCreateTimerTask+0x84>)
 800c0de:	4811      	ldr	r0, [pc, #68]	; (800c124 <xTimerCreateTimerTask+0x88>)
 800c0e0:	f7ff f8e8 	bl	800b2b4 <xTaskCreateStatic>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4a10      	ldr	r2, [pc, #64]	; (800c128 <xTimerCreateTimerTask+0x8c>)
 800c0e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0ea:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <xTimerCreateTimerTask+0x8c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10a      	bne.n	800c112 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	613b      	str	r3, [r7, #16]
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c112:	697b      	ldr	r3, [r7, #20]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	24003510 	.word	0x24003510
 800c120:	0800db5c 	.word	0x0800db5c
 800c124:	0800c261 	.word	0x0800c261
 800c128:	24003514 	.word	0x24003514

0800c12c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08a      	sub	sp, #40	; 0x28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c13a:	2300      	movs	r3, #0
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	623b      	str	r3, [r7, #32]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c15a:	4b1a      	ldr	r3, [pc, #104]	; (800c1c4 <xTimerGenericCommand+0x98>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d02a      	beq.n	800c1b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b05      	cmp	r3, #5
 800c172:	dc18      	bgt.n	800c1a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c174:	f7ff feb2 	bl	800bedc <xTaskGetSchedulerState>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d109      	bne.n	800c192 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c17e:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <xTimerGenericCommand+0x98>)
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	f107 0110 	add.w	r1, r7, #16
 800c186:	2300      	movs	r3, #0
 800c188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18a:	f7fe fcab 	bl	800aae4 <xQueueGenericSend>
 800c18e:	6278      	str	r0, [r7, #36]	; 0x24
 800c190:	e012      	b.n	800c1b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c192:	4b0c      	ldr	r3, [pc, #48]	; (800c1c4 <xTimerGenericCommand+0x98>)
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f107 0110 	add.w	r1, r7, #16
 800c19a:	2300      	movs	r3, #0
 800c19c:	2200      	movs	r2, #0
 800c19e:	f7fe fca1 	bl	800aae4 <xQueueGenericSend>
 800c1a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c1a4:	e008      	b.n	800c1b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1a6:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <xTimerGenericCommand+0x98>)
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	f107 0110 	add.w	r1, r7, #16
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	f7fe fd95 	bl	800ace0 <xQueueGenericSendFromISR>
 800c1b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3728      	adds	r7, #40	; 0x28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	24003510 	.word	0x24003510

0800c1c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d2:	4b22      	ldr	r3, [pc, #136]	; (800c25c <prvProcessExpiredTimer+0x94>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fb17 	bl	800a814 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d022      	beq.n	800c23a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	18d1      	adds	r1, r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	6978      	ldr	r0, [r7, #20]
 800c202:	f000 f8d1 	bl	800c3a8 <prvInsertTimerInActiveList>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01f      	beq.n	800c24c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c20c:	2300      	movs	r3, #0
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	2300      	movs	r3, #0
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	2100      	movs	r1, #0
 800c216:	6978      	ldr	r0, [r7, #20]
 800c218:	f7ff ff88 	bl	800c12c <xTimerGenericCommand>
 800c21c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d113      	bne.n	800c24c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	60fb      	str	r3, [r7, #12]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c240:	f023 0301 	bic.w	r3, r3, #1
 800c244:	b2da      	uxtb	r2, r3
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	6978      	ldr	r0, [r7, #20]
 800c252:	4798      	blx	r3
}
 800c254:	bf00      	nop
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	24003508 	.word	0x24003508

0800c260 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c268:	f107 0308 	add.w	r3, r7, #8
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 f857 	bl	800c320 <prvGetNextExpireTime>
 800c272:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4619      	mov	r1, r3
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f000 f803 	bl	800c284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c27e:	f000 f8d5 	bl	800c42c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c282:	e7f1      	b.n	800c268 <prvTimerTask+0x8>

0800c284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c28e:	f7ff fa39 	bl	800b704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c292:	f107 0308 	add.w	r3, r7, #8
 800c296:	4618      	mov	r0, r3
 800c298:	f000 f866 	bl	800c368 <prvSampleTimeNow>
 800c29c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d130      	bne.n	800c306 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10a      	bne.n	800c2c0 <prvProcessTimerOrBlockTask+0x3c>
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d806      	bhi.n	800c2c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2b2:	f7ff fa35 	bl	800b720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ff85 	bl	800c1c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2be:	e024      	b.n	800c30a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d008      	beq.n	800c2d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2c6:	4b13      	ldr	r3, [pc, #76]	; (800c314 <prvProcessTimerOrBlockTask+0x90>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <prvProcessTimerOrBlockTask+0x50>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e000      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x52>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <prvProcessTimerOrBlockTask+0x94>)
 800c2da:	6818      	ldr	r0, [r3, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f7fe ffb1 	bl	800b24c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2ea:	f7ff fa19 	bl	800b720 <xTaskResumeAll>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2f4:	4b09      	ldr	r3, [pc, #36]	; (800c31c <prvProcessTimerOrBlockTask+0x98>)
 800c2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	f3bf 8f6f 	isb	sy
}
 800c304:	e001      	b.n	800c30a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c306:	f7ff fa0b 	bl	800b720 <xTaskResumeAll>
}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	2400350c 	.word	0x2400350c
 800c318:	24003510 	.word	0x24003510
 800c31c:	e000ed04 	.word	0xe000ed04

0800c320 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c328:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <prvGetNextExpireTime+0x44>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <prvGetNextExpireTime+0x16>
 800c332:	2201      	movs	r2, #1
 800c334:	e000      	b.n	800c338 <prvGetNextExpireTime+0x18>
 800c336:	2200      	movs	r2, #0
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d105      	bne.n	800c350 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c344:	4b07      	ldr	r3, [pc, #28]	; (800c364 <prvGetNextExpireTime+0x44>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	e001      	b.n	800c354 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c354:	68fb      	ldr	r3, [r7, #12]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	24003508 	.word	0x24003508

0800c368 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c370:	f7ff fa74 	bl	800b85c <xTaskGetTickCount>
 800c374:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <prvSampleTimeNow+0x3c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d205      	bcs.n	800c38c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c380:	f000 f936 	bl	800c5f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	e002      	b.n	800c392 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c392:	4a04      	ldr	r2, [pc, #16]	; (800c3a4 <prvSampleTimeNow+0x3c>)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c398:	68fb      	ldr	r3, [r7, #12]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	24003518 	.word	0x24003518

0800c3a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d812      	bhi.n	800c3f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	1ad2      	subs	r2, r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d302      	bcc.n	800c3e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e01b      	b.n	800c41a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <prvInsertTimerInActiveList+0x7c>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fe f9d8 	bl	800a7a2 <vListInsert>
 800c3f2:	e012      	b.n	800c41a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d206      	bcs.n	800c40a <prvInsertTimerInActiveList+0x62>
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	429a      	cmp	r2, r3
 800c402:	d302      	bcc.n	800c40a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c404:	2301      	movs	r3, #1
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	e007      	b.n	800c41a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c40a:	4b07      	ldr	r3, [pc, #28]	; (800c428 <prvInsertTimerInActiveList+0x80>)
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3304      	adds	r3, #4
 800c412:	4619      	mov	r1, r3
 800c414:	4610      	mov	r0, r2
 800c416:	f7fe f9c4 	bl	800a7a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c41a:	697b      	ldr	r3, [r7, #20]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	2400350c 	.word	0x2400350c
 800c428:	24003508 	.word	0x24003508

0800c42c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08e      	sub	sp, #56	; 0x38
 800c430:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c432:	e0ca      	b.n	800c5ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	da18      	bge.n	800c46c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c43a:	1d3b      	adds	r3, r7, #4
 800c43c:	3304      	adds	r3, #4
 800c43e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10a      	bne.n	800c45c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	61fb      	str	r3, [r7, #28]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c462:	6850      	ldr	r0, [r2, #4]
 800c464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c466:	6892      	ldr	r2, [r2, #8]
 800c468:	4611      	mov	r1, r2
 800c46a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f2c0 80aa 	blt.w	800c5c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d004      	beq.n	800c48a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	3304      	adds	r3, #4
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe f9c5 	bl	800a814 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c48a:	463b      	mov	r3, r7
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff ff6b 	bl	800c368 <prvSampleTimeNow>
 800c492:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b09      	cmp	r3, #9
 800c498:	f200 8097 	bhi.w	800c5ca <prvProcessReceivedCommands+0x19e>
 800c49c:	a201      	add	r2, pc, #4	; (adr r2, 800c4a4 <prvProcessReceivedCommands+0x78>)
 800c49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a2:	bf00      	nop
 800c4a4:	0800c4cd 	.word	0x0800c4cd
 800c4a8:	0800c4cd 	.word	0x0800c4cd
 800c4ac:	0800c4cd 	.word	0x0800c4cd
 800c4b0:	0800c541 	.word	0x0800c541
 800c4b4:	0800c555 	.word	0x0800c555
 800c4b8:	0800c59f 	.word	0x0800c59f
 800c4bc:	0800c4cd 	.word	0x0800c4cd
 800c4c0:	0800c4cd 	.word	0x0800c4cd
 800c4c4:	0800c541 	.word	0x0800c541
 800c4c8:	0800c555 	.word	0x0800c555
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d2:	f043 0301 	orr.w	r3, r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	18d1      	adds	r1, r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ec:	f7ff ff5c 	bl	800c3a8 <prvInsertTimerInActiveList>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d069      	beq.n	800c5ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d05e      	beq.n	800c5ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	441a      	add	r2, r3
 800c514:	2300      	movs	r3, #0
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	2300      	movs	r3, #0
 800c51a:	2100      	movs	r1, #0
 800c51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51e:	f7ff fe05 	bl	800c12c <xTimerGenericCommand>
 800c522:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d14f      	bne.n	800c5ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	61bb      	str	r3, [r7, #24]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c552:	e03a      	b.n	800c5ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c55a:	f043 0301 	orr.w	r3, r3, #1
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	617b      	str	r3, [r7, #20]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	699a      	ldr	r2, [r3, #24]
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	18d1      	adds	r1, r2, r3
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c598:	f7ff ff06 	bl	800c3a8 <prvInsertTimerInActiveList>
					break;
 800c59c:	e015      	b.n	800c5ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ae:	f000 fbdf 	bl	800cd70 <vPortFree>
 800c5b2:	e00a      	b.n	800c5ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ba:	f023 0301 	bic.w	r3, r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5c6:	e000      	b.n	800c5ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ca:	4b08      	ldr	r3, [pc, #32]	; (800c5ec <prvProcessReceivedCommands+0x1c0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	1d39      	adds	r1, r7, #4
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fc20 	bl	800ae18 <xQueueReceive>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f47f af2a 	bne.w	800c434 <prvProcessReceivedCommands+0x8>
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	3730      	adds	r7, #48	; 0x30
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	24003510 	.word	0x24003510

0800c5f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5f6:	e048      	b.n	800c68a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f8:	4b2d      	ldr	r3, [pc, #180]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c602:	4b2b      	ldr	r3, [pc, #172]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3304      	adds	r3, #4
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe f8ff 	bl	800a814 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d02e      	beq.n	800c68a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	4413      	add	r3, r2
 800c634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d90e      	bls.n	800c65c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c64a:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3304      	adds	r3, #4
 800c652:	4619      	mov	r1, r3
 800c654:	4610      	mov	r0, r2
 800c656:	f7fe f8a4 	bl	800a7a2 <vListInsert>
 800c65a:	e016      	b.n	800c68a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c65c:	2300      	movs	r3, #0
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	2300      	movs	r3, #0
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	2100      	movs	r1, #0
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f7ff fd60 	bl	800c12c <xTimerGenericCommand>
 800c66c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10a      	bne.n	800c68a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	603b      	str	r3, [r7, #0]
}
 800c686:	bf00      	nop
 800c688:	e7fe      	b.n	800c688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1b1      	bne.n	800c5f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c694:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c69a:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <prvSwitchTimerLists+0xc4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a04      	ldr	r2, [pc, #16]	; (800c6b0 <prvSwitchTimerLists+0xc0>)
 800c6a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6a2:	4a04      	ldr	r2, [pc, #16]	; (800c6b4 <prvSwitchTimerLists+0xc4>)
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6013      	str	r3, [r2, #0]
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	24003508 	.word	0x24003508
 800c6b4:	2400350c 	.word	0x2400350c

0800c6b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6be:	f000 f969 	bl	800c994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6c2:	4b15      	ldr	r3, [pc, #84]	; (800c718 <prvCheckForValidListAndQueue+0x60>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d120      	bne.n	800c70c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6ca:	4814      	ldr	r0, [pc, #80]	; (800c71c <prvCheckForValidListAndQueue+0x64>)
 800c6cc:	f7fe f818 	bl	800a700 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6d0:	4813      	ldr	r0, [pc, #76]	; (800c720 <prvCheckForValidListAndQueue+0x68>)
 800c6d2:	f7fe f815 	bl	800a700 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6d6:	4b13      	ldr	r3, [pc, #76]	; (800c724 <prvCheckForValidListAndQueue+0x6c>)
 800c6d8:	4a10      	ldr	r2, [pc, #64]	; (800c71c <prvCheckForValidListAndQueue+0x64>)
 800c6da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6dc:	4b12      	ldr	r3, [pc, #72]	; (800c728 <prvCheckForValidListAndQueue+0x70>)
 800c6de:	4a10      	ldr	r2, [pc, #64]	; (800c720 <prvCheckForValidListAndQueue+0x68>)
 800c6e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	4b11      	ldr	r3, [pc, #68]	; (800c72c <prvCheckForValidListAndQueue+0x74>)
 800c6e8:	4a11      	ldr	r2, [pc, #68]	; (800c730 <prvCheckForValidListAndQueue+0x78>)
 800c6ea:	2110      	movs	r1, #16
 800c6ec:	200a      	movs	r0, #10
 800c6ee:	f7fe f923 	bl	800a938 <xQueueGenericCreateStatic>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4a08      	ldr	r2, [pc, #32]	; (800c718 <prvCheckForValidListAndQueue+0x60>)
 800c6f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <prvCheckForValidListAndQueue+0x60>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c700:	4b05      	ldr	r3, [pc, #20]	; (800c718 <prvCheckForValidListAndQueue+0x60>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	490b      	ldr	r1, [pc, #44]	; (800c734 <prvCheckForValidListAndQueue+0x7c>)
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fd76 	bl	800b1f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c70c:	f000 f972 	bl	800c9f4 <vPortExitCritical>
}
 800c710:	bf00      	nop
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	24003510 	.word	0x24003510
 800c71c:	240034e0 	.word	0x240034e0
 800c720:	240034f4 	.word	0x240034f4
 800c724:	24003508 	.word	0x24003508
 800c728:	2400350c 	.word	0x2400350c
 800c72c:	240035bc 	.word	0x240035bc
 800c730:	2400351c 	.word	0x2400351c
 800c734:	0800db64 	.word	0x0800db64

0800c738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3b04      	subs	r3, #4
 800c748:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	3b04      	subs	r3, #4
 800c756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	f023 0201 	bic.w	r2, r3, #1
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3b04      	subs	r3, #4
 800c766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c768:	4a0c      	ldr	r2, [pc, #48]	; (800c79c <pxPortInitialiseStack+0x64>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3b14      	subs	r3, #20
 800c772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3b04      	subs	r3, #4
 800c77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f06f 0202 	mvn.w	r2, #2
 800c786:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3b20      	subs	r3, #32
 800c78c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	0800c7a1 	.word	0x0800c7a1

0800c7a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7aa:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <prvTaskExitError+0x54>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b2:	d00a      	beq.n	800c7ca <prvTaskExitError+0x2a>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	60fb      	str	r3, [r7, #12]
}
 800c7c6:	bf00      	nop
 800c7c8:	e7fe      	b.n	800c7c8 <prvTaskExitError+0x28>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60bb      	str	r3, [r7, #8]
}
 800c7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7de:	bf00      	nop
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0fc      	beq.n	800c7e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr
 800c7f4:	24000010 	.word	0x24000010
	...

0800c800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <pxCurrentTCBConst2>)
 800c802:	6819      	ldr	r1, [r3, #0]
 800c804:	6808      	ldr	r0, [r1, #0]
 800c806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	f380 8809 	msr	PSP, r0
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f04f 0000 	mov.w	r0, #0
 800c816:	f380 8811 	msr	BASEPRI, r0
 800c81a:	4770      	bx	lr
 800c81c:	f3af 8000 	nop.w

0800c820 <pxCurrentTCBConst2>:
 800c820:	24002fe0 	.word	0x24002fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop

0800c828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c828:	4808      	ldr	r0, [pc, #32]	; (800c84c <prvPortStartFirstTask+0x24>)
 800c82a:	6800      	ldr	r0, [r0, #0]
 800c82c:	6800      	ldr	r0, [r0, #0]
 800c82e:	f380 8808 	msr	MSP, r0
 800c832:	f04f 0000 	mov.w	r0, #0
 800c836:	f380 8814 	msr	CONTROL, r0
 800c83a:	b662      	cpsie	i
 800c83c:	b661      	cpsie	f
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	df00      	svc	0
 800c848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c84a:	bf00      	nop
 800c84c:	e000ed08 	.word	0xe000ed08

0800c850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c856:	4b46      	ldr	r3, [pc, #280]	; (800c970 <xPortStartScheduler+0x120>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a46      	ldr	r2, [pc, #280]	; (800c974 <xPortStartScheduler+0x124>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d10a      	bne.n	800c876 <xPortStartScheduler+0x26>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	613b      	str	r3, [r7, #16]
}
 800c872:	bf00      	nop
 800c874:	e7fe      	b.n	800c874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c876:	4b3e      	ldr	r3, [pc, #248]	; (800c970 <xPortStartScheduler+0x120>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a3f      	ldr	r2, [pc, #252]	; (800c978 <xPortStartScheduler+0x128>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d10a      	bne.n	800c896 <xPortStartScheduler+0x46>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c896:	4b39      	ldr	r3, [pc, #228]	; (800c97c <xPortStartScheduler+0x12c>)
 800c898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	22ff      	movs	r2, #255	; 0xff
 800c8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	4b31      	ldr	r3, [pc, #196]	; (800c980 <xPortStartScheduler+0x130>)
 800c8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8be:	4b31      	ldr	r3, [pc, #196]	; (800c984 <xPortStartScheduler+0x134>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8c4:	e009      	b.n	800c8da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8c6:	4b2f      	ldr	r3, [pc, #188]	; (800c984 <xPortStartScheduler+0x134>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4a2d      	ldr	r2, [pc, #180]	; (800c984 <xPortStartScheduler+0x134>)
 800c8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e2:	2b80      	cmp	r3, #128	; 0x80
 800c8e4:	d0ef      	beq.n	800c8c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8e6:	4b27      	ldr	r3, [pc, #156]	; (800c984 <xPortStartScheduler+0x134>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f1c3 0307 	rsb	r3, r3, #7
 800c8ee:	2b04      	cmp	r3, #4
 800c8f0:	d00a      	beq.n	800c908 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60bb      	str	r3, [r7, #8]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c908:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <xPortStartScheduler+0x134>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	4a1d      	ldr	r2, [pc, #116]	; (800c984 <xPortStartScheduler+0x134>)
 800c910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c912:	4b1c      	ldr	r3, [pc, #112]	; (800c984 <xPortStartScheduler+0x134>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c91a:	4a1a      	ldr	r2, [pc, #104]	; (800c984 <xPortStartScheduler+0x134>)
 800c91c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	b2da      	uxtb	r2, r3
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c926:	4b18      	ldr	r3, [pc, #96]	; (800c988 <xPortStartScheduler+0x138>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a17      	ldr	r2, [pc, #92]	; (800c988 <xPortStartScheduler+0x138>)
 800c92c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <xPortStartScheduler+0x138>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a14      	ldr	r2, [pc, #80]	; (800c988 <xPortStartScheduler+0x138>)
 800c938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c93c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c93e:	f000 f8dd 	bl	800cafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c942:	4b12      	ldr	r3, [pc, #72]	; (800c98c <xPortStartScheduler+0x13c>)
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c948:	f000 f8fc 	bl	800cb44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c94c:	4b10      	ldr	r3, [pc, #64]	; (800c990 <xPortStartScheduler+0x140>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a0f      	ldr	r2, [pc, #60]	; (800c990 <xPortStartScheduler+0x140>)
 800c952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c958:	f7ff ff66 	bl	800c828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c95c:	f7ff f848 	bl	800b9f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c960:	f7ff ff1e 	bl	800c7a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	e000ed00 	.word	0xe000ed00
 800c974:	410fc271 	.word	0x410fc271
 800c978:	410fc270 	.word	0x410fc270
 800c97c:	e000e400 	.word	0xe000e400
 800c980:	2400360c 	.word	0x2400360c
 800c984:	24003610 	.word	0x24003610
 800c988:	e000ed20 	.word	0xe000ed20
 800c98c:	24000010 	.word	0x24000010
 800c990:	e000ef34 	.word	0xe000ef34

0800c994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	607b      	str	r3, [r7, #4]
}
 800c9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	4a0d      	ldr	r2, [pc, #52]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10f      	bne.n	800c9e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <vPortEnterCritical+0x5c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	603b      	str	r3, [r7, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	e7fe      	b.n	800c9de <vPortEnterCritical+0x4a>
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	24000010 	.word	0x24000010
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <vPortExitCritical+0x50>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <vPortExitCritical+0x24>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	607b      	str	r3, [r7, #4]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <vPortExitCritical+0x50>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <vPortExitCritical+0x50>)
 800ca20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca22:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <vPortExitCritical+0x50>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d105      	bne.n	800ca36 <vPortExitCritical+0x42>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	f383 8811 	msr	BASEPRI, r3
}
 800ca34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	24000010 	.word	0x24000010
	...

0800ca50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca50:	f3ef 8009 	mrs	r0, PSP
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <pxCurrentTCBConst>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	f01e 0f10 	tst.w	lr, #16
 800ca60:	bf08      	it	eq
 800ca62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6010      	str	r0, [r2, #0]
 800ca6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca74:	f380 8811 	msr	BASEPRI, r0
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f7fe ffb6 	bl	800b9f0 <vTaskSwitchContext>
 800ca84:	f04f 0000 	mov.w	r0, #0
 800ca88:	f380 8811 	msr	BASEPRI, r0
 800ca8c:	bc09      	pop	{r0, r3}
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	6808      	ldr	r0, [r1, #0]
 800ca92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f01e 0f10 	tst.w	lr, #16
 800ca9a:	bf08      	it	eq
 800ca9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caa0:	f380 8809 	msr	PSP, r0
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst>:
 800cab0:	24002fe0 	.word	0x24002fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop

0800cab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	607b      	str	r3, [r7, #4]
}
 800cad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cad2:	f7fe fed3 	bl	800b87c <xTaskIncrementTick>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cadc:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <xPortSysTickHandler+0x40>)
 800cade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	2300      	movs	r3, #0
 800cae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	f383 8811 	msr	BASEPRI, r3
}
 800caee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb00:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <vPortSetupTimerInterrupt+0x34>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb06:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <vPortSetupTimerInterrupt+0x38>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <vPortSetupTimerInterrupt+0x3c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a0a      	ldr	r2, [pc, #40]	; (800cb3c <vPortSetupTimerInterrupt+0x40>)
 800cb12:	fba2 2303 	umull	r2, r3, r2, r3
 800cb16:	099b      	lsrs	r3, r3, #6
 800cb18:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <vPortSetupTimerInterrupt+0x44>)
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb1e:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <vPortSetupTimerInterrupt+0x34>)
 800cb20:	2207      	movs	r2, #7
 800cb22:	601a      	str	r2, [r3, #0]
}
 800cb24:	bf00      	nop
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	e000e010 	.word	0xe000e010
 800cb34:	e000e018 	.word	0xe000e018
 800cb38:	24000000 	.word	0x24000000
 800cb3c:	10624dd3 	.word	0x10624dd3
 800cb40:	e000e014 	.word	0xe000e014

0800cb44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb54 <vPortEnableVFP+0x10>
 800cb48:	6801      	ldr	r1, [r0, #0]
 800cb4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb4e:	6001      	str	r1, [r0, #0]
 800cb50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb52:	bf00      	nop
 800cb54:	e000ed88 	.word	0xe000ed88

0800cb58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb5e:	f3ef 8305 	mrs	r3, IPSR
 800cb62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	d914      	bls.n	800cb94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb6a:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <vPortValidateInterruptPriority+0x70>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4413      	add	r3, r2
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb74:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <vPortValidateInterruptPriority+0x74>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	7afa      	ldrb	r2, [r7, #11]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d20a      	bcs.n	800cb94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb94:	4b0e      	ldr	r3, [pc, #56]	; (800cbd0 <vPortValidateInterruptPriority+0x78>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <vPortValidateInterruptPriority+0x7c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d90a      	bls.n	800cbba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	603b      	str	r3, [r7, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <vPortValidateInterruptPriority+0x60>
	}
 800cbba:	bf00      	nop
 800cbbc:	3714      	adds	r7, #20
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	e000e3f0 	.word	0xe000e3f0
 800cbcc:	2400360c 	.word	0x2400360c
 800cbd0:	e000ed0c 	.word	0xe000ed0c
 800cbd4:	24003610 	.word	0x24003610

0800cbd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08a      	sub	sp, #40	; 0x28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbe4:	f7fe fd8e 	bl	800b704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbe8:	4b5b      	ldr	r3, [pc, #364]	; (800cd58 <pvPortMalloc+0x180>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbf0:	f000 f920 	bl	800ce34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbf4:	4b59      	ldr	r3, [pc, #356]	; (800cd5c <pvPortMalloc+0x184>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f040 8093 	bne.w	800cd28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01d      	beq.n	800cc44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc08:	2208      	movs	r2, #8
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f003 0307 	and.w	r3, r3, #7
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d014      	beq.n	800cc44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f023 0307 	bic.w	r3, r3, #7
 800cc20:	3308      	adds	r3, #8
 800cc22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <pvPortMalloc+0x6c>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	617b      	str	r3, [r7, #20]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d06e      	beq.n	800cd28 <pvPortMalloc+0x150>
 800cc4a:	4b45      	ldr	r3, [pc, #276]	; (800cd60 <pvPortMalloc+0x188>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d869      	bhi.n	800cd28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc54:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <pvPortMalloc+0x18c>)
 800cc56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc58:	4b42      	ldr	r3, [pc, #264]	; (800cd64 <pvPortMalloc+0x18c>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc5e:	e004      	b.n	800cc6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d903      	bls.n	800cc7c <pvPortMalloc+0xa4>
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f1      	bne.n	800cc60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc7c:	4b36      	ldr	r3, [pc, #216]	; (800cd58 <pvPortMalloc+0x180>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d050      	beq.n	800cd28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2208      	movs	r2, #8
 800cc8c:	4413      	add	r3, r2
 800cc8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	1ad2      	subs	r2, r2, r3
 800cca0:	2308      	movs	r3, #8
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d91f      	bls.n	800cce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	613b      	str	r3, [r7, #16]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cce2:	69b8      	ldr	r0, [r7, #24]
 800cce4:	f000 f908 	bl	800cef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cce8:	4b1d      	ldr	r3, [pc, #116]	; (800cd60 <pvPortMalloc+0x188>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	4a1b      	ldr	r2, [pc, #108]	; (800cd60 <pvPortMalloc+0x188>)
 800ccf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	; (800cd60 <pvPortMalloc+0x188>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	4b1b      	ldr	r3, [pc, #108]	; (800cd68 <pvPortMalloc+0x190>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d203      	bcs.n	800cd0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd02:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <pvPortMalloc+0x188>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a18      	ldr	r2, [pc, #96]	; (800cd68 <pvPortMalloc+0x190>)
 800cd08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <pvPortMalloc+0x184>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <pvPortMalloc+0x194>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3301      	adds	r3, #1
 800cd24:	4a11      	ldr	r2, [pc, #68]	; (800cd6c <pvPortMalloc+0x194>)
 800cd26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd28:	f7fe fcfa 	bl	800b720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	f003 0307 	and.w	r3, r3, #7
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <pvPortMalloc+0x174>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	60fb      	str	r3, [r7, #12]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <pvPortMalloc+0x172>
	return pvReturn;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	2400721c 	.word	0x2400721c
 800cd5c:	24007230 	.word	0x24007230
 800cd60:	24007220 	.word	0x24007220
 800cd64:	24007214 	.word	0x24007214
 800cd68:	24007224 	.word	0x24007224
 800cd6c:	24007228 	.word	0x24007228

0800cd70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d04d      	beq.n	800ce1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd82:	2308      	movs	r3, #8
 800cd84:	425b      	negs	r3, r3
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	4413      	add	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <vPortFree+0xb8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4013      	ands	r3, r2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10a      	bne.n	800cdb4 <vPortFree+0x44>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60fb      	str	r3, [r7, #12]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00a      	beq.n	800cdd2 <vPortFree+0x62>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60bb      	str	r3, [r7, #8]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <vPortFree+0xb8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01e      	beq.n	800ce1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11a      	bne.n	800ce1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <vPortFree+0xb8>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdf8:	f7fe fc84 	bl	800b704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <vPortFree+0xbc>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4413      	add	r3, r2
 800ce06:	4a09      	ldr	r2, [pc, #36]	; (800ce2c <vPortFree+0xbc>)
 800ce08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce0a:	6938      	ldr	r0, [r7, #16]
 800ce0c:	f000 f874 	bl	800cef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <vPortFree+0xc0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a06      	ldr	r2, [pc, #24]	; (800ce30 <vPortFree+0xc0>)
 800ce18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce1a:	f7fe fc81 	bl	800b720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce1e:	bf00      	nop
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	24007230 	.word	0x24007230
 800ce2c:	24007220 	.word	0x24007220
 800ce30:	2400722c 	.word	0x2400722c

0800ce34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce40:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <prvHeapInit+0xac>)
 800ce42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00c      	beq.n	800ce68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3307      	adds	r3, #7
 800ce52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f023 0307 	bic.w	r3, r3, #7
 800ce5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	4a1f      	ldr	r2, [pc, #124]	; (800cee0 <prvHeapInit+0xac>)
 800ce64:	4413      	add	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce6c:	4a1d      	ldr	r2, [pc, #116]	; (800cee4 <prvHeapInit+0xb0>)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <prvHeapInit+0xb0>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce80:	2208      	movs	r2, #8
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <prvHeapInit+0xb4>)
 800ce94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce96:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <prvHeapInit+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <prvHeapInit+0xb4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <prvHeapInit+0xb4>)
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <prvHeapInit+0xb8>)
 800cec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <prvHeapInit+0xbc>)
 800ceca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <prvHeapInit+0xc0>)
 800cece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	24003614 	.word	0x24003614
 800cee4:	24007214 	.word	0x24007214
 800cee8:	2400721c 	.word	0x2400721c
 800ceec:	24007224 	.word	0x24007224
 800cef0:	24007220 	.word	0x24007220
 800cef4:	24007230 	.word	0x24007230

0800cef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf00:	4b28      	ldr	r3, [pc, #160]	; (800cfa4 <prvInsertBlockIntoFreeList+0xac>)
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	e002      	b.n	800cf0c <prvInsertBlockIntoFreeList+0x14>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d8f7      	bhi.n	800cf06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d108      	bne.n	800cf3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	441a      	add	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d118      	bne.n	800cf80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d00d      	beq.n	800cf76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	441a      	add	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e008      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf76:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	e003      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d002      	beq.n	800cf96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf96:	bf00      	nop
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	24007214 	.word	0x24007214
 800cfa8:	2400721c 	.word	0x2400721c

0800cfac <__errno>:
 800cfac:	4b01      	ldr	r3, [pc, #4]	; (800cfb4 <__errno+0x8>)
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	24000014 	.word	0x24000014

0800cfb8 <std>:
 800cfb8:	2300      	movs	r3, #0
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	e9c0 3300 	strd	r3, r3, [r0]
 800cfc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfc6:	6083      	str	r3, [r0, #8]
 800cfc8:	8181      	strh	r1, [r0, #12]
 800cfca:	6643      	str	r3, [r0, #100]	; 0x64
 800cfcc:	81c2      	strh	r2, [r0, #14]
 800cfce:	6183      	str	r3, [r0, #24]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	2208      	movs	r2, #8
 800cfd4:	305c      	adds	r0, #92	; 0x5c
 800cfd6:	f000 f91a 	bl	800d20e <memset>
 800cfda:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <std+0x38>)
 800cfdc:	6263      	str	r3, [r4, #36]	; 0x24
 800cfde:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <std+0x3c>)
 800cfe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfe2:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <std+0x40>)
 800cfe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfe6:	4b05      	ldr	r3, [pc, #20]	; (800cffc <std+0x44>)
 800cfe8:	6224      	str	r4, [r4, #32]
 800cfea:	6323      	str	r3, [r4, #48]	; 0x30
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	0800d529 	.word	0x0800d529
 800cff4:	0800d54b 	.word	0x0800d54b
 800cff8:	0800d583 	.word	0x0800d583
 800cffc:	0800d5a7 	.word	0x0800d5a7

0800d000 <_cleanup_r>:
 800d000:	4901      	ldr	r1, [pc, #4]	; (800d008 <_cleanup_r+0x8>)
 800d002:	f000 b8af 	b.w	800d164 <_fwalk_reent>
 800d006:	bf00      	nop
 800d008:	0800d881 	.word	0x0800d881

0800d00c <__sfmoreglue>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	2268      	movs	r2, #104	; 0x68
 800d010:	1e4d      	subs	r5, r1, #1
 800d012:	4355      	muls	r5, r2
 800d014:	460e      	mov	r6, r1
 800d016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d01a:	f000 f921 	bl	800d260 <_malloc_r>
 800d01e:	4604      	mov	r4, r0
 800d020:	b140      	cbz	r0, 800d034 <__sfmoreglue+0x28>
 800d022:	2100      	movs	r1, #0
 800d024:	e9c0 1600 	strd	r1, r6, [r0]
 800d028:	300c      	adds	r0, #12
 800d02a:	60a0      	str	r0, [r4, #8]
 800d02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d030:	f000 f8ed 	bl	800d20e <memset>
 800d034:	4620      	mov	r0, r4
 800d036:	bd70      	pop	{r4, r5, r6, pc}

0800d038 <__sfp_lock_acquire>:
 800d038:	4801      	ldr	r0, [pc, #4]	; (800d040 <__sfp_lock_acquire+0x8>)
 800d03a:	f000 b8d8 	b.w	800d1ee <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	24007235 	.word	0x24007235

0800d044 <__sfp_lock_release>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__sfp_lock_release+0x8>)
 800d046:	f000 b8d3 	b.w	800d1f0 <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	24007235 	.word	0x24007235

0800d050 <__sinit_lock_acquire>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__sinit_lock_acquire+0x8>)
 800d052:	f000 b8cc 	b.w	800d1ee <__retarget_lock_acquire_recursive>
 800d056:	bf00      	nop
 800d058:	24007236 	.word	0x24007236

0800d05c <__sinit_lock_release>:
 800d05c:	4801      	ldr	r0, [pc, #4]	; (800d064 <__sinit_lock_release+0x8>)
 800d05e:	f000 b8c7 	b.w	800d1f0 <__retarget_lock_release_recursive>
 800d062:	bf00      	nop
 800d064:	24007236 	.word	0x24007236

0800d068 <__sinit>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	4604      	mov	r4, r0
 800d06c:	f7ff fff0 	bl	800d050 <__sinit_lock_acquire>
 800d070:	69a3      	ldr	r3, [r4, #24]
 800d072:	b11b      	cbz	r3, 800d07c <__sinit+0x14>
 800d074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d078:	f7ff bff0 	b.w	800d05c <__sinit_lock_release>
 800d07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d080:	6523      	str	r3, [r4, #80]	; 0x50
 800d082:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <__sinit+0x68>)
 800d084:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <__sinit+0x6c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	62a2      	str	r2, [r4, #40]	; 0x28
 800d08a:	42a3      	cmp	r3, r4
 800d08c:	bf04      	itt	eq
 800d08e:	2301      	moveq	r3, #1
 800d090:	61a3      	streq	r3, [r4, #24]
 800d092:	4620      	mov	r0, r4
 800d094:	f000 f820 	bl	800d0d8 <__sfp>
 800d098:	6060      	str	r0, [r4, #4]
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 f81c 	bl	800d0d8 <__sfp>
 800d0a0:	60a0      	str	r0, [r4, #8]
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 f818 	bl	800d0d8 <__sfp>
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	60e0      	str	r0, [r4, #12]
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	6860      	ldr	r0, [r4, #4]
 800d0b0:	f7ff ff82 	bl	800cfb8 <std>
 800d0b4:	68a0      	ldr	r0, [r4, #8]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	2109      	movs	r1, #9
 800d0ba:	f7ff ff7d 	bl	800cfb8 <std>
 800d0be:	68e0      	ldr	r0, [r4, #12]
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	2112      	movs	r1, #18
 800d0c4:	f7ff ff78 	bl	800cfb8 <std>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	61a3      	str	r3, [r4, #24]
 800d0cc:	e7d2      	b.n	800d074 <__sinit+0xc>
 800d0ce:	bf00      	nop
 800d0d0:	0800dc90 	.word	0x0800dc90
 800d0d4:	0800d001 	.word	0x0800d001

0800d0d8 <__sfp>:
 800d0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0da:	4607      	mov	r7, r0
 800d0dc:	f7ff ffac 	bl	800d038 <__sfp_lock_acquire>
 800d0e0:	4b1e      	ldr	r3, [pc, #120]	; (800d15c <__sfp+0x84>)
 800d0e2:	681e      	ldr	r6, [r3, #0]
 800d0e4:	69b3      	ldr	r3, [r6, #24]
 800d0e6:	b913      	cbnz	r3, 800d0ee <__sfp+0x16>
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff ffbd 	bl	800d068 <__sinit>
 800d0ee:	3648      	adds	r6, #72	; 0x48
 800d0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	d503      	bpl.n	800d100 <__sfp+0x28>
 800d0f8:	6833      	ldr	r3, [r6, #0]
 800d0fa:	b30b      	cbz	r3, 800d140 <__sfp+0x68>
 800d0fc:	6836      	ldr	r6, [r6, #0]
 800d0fe:	e7f7      	b.n	800d0f0 <__sfp+0x18>
 800d100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d104:	b9d5      	cbnz	r5, 800d13c <__sfp+0x64>
 800d106:	4b16      	ldr	r3, [pc, #88]	; (800d160 <__sfp+0x88>)
 800d108:	60e3      	str	r3, [r4, #12]
 800d10a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d10e:	6665      	str	r5, [r4, #100]	; 0x64
 800d110:	f000 f86c 	bl	800d1ec <__retarget_lock_init_recursive>
 800d114:	f7ff ff96 	bl	800d044 <__sfp_lock_release>
 800d118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d11c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d120:	6025      	str	r5, [r4, #0]
 800d122:	61a5      	str	r5, [r4, #24]
 800d124:	2208      	movs	r2, #8
 800d126:	4629      	mov	r1, r5
 800d128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d12c:	f000 f86f 	bl	800d20e <memset>
 800d130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d138:	4620      	mov	r0, r4
 800d13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13c:	3468      	adds	r4, #104	; 0x68
 800d13e:	e7d9      	b.n	800d0f4 <__sfp+0x1c>
 800d140:	2104      	movs	r1, #4
 800d142:	4638      	mov	r0, r7
 800d144:	f7ff ff62 	bl	800d00c <__sfmoreglue>
 800d148:	4604      	mov	r4, r0
 800d14a:	6030      	str	r0, [r6, #0]
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d1d5      	bne.n	800d0fc <__sfp+0x24>
 800d150:	f7ff ff78 	bl	800d044 <__sfp_lock_release>
 800d154:	230c      	movs	r3, #12
 800d156:	603b      	str	r3, [r7, #0]
 800d158:	e7ee      	b.n	800d138 <__sfp+0x60>
 800d15a:	bf00      	nop
 800d15c:	0800dc90 	.word	0x0800dc90
 800d160:	ffff0001 	.word	0xffff0001

0800d164 <_fwalk_reent>:
 800d164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d168:	4606      	mov	r6, r0
 800d16a:	4688      	mov	r8, r1
 800d16c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d170:	2700      	movs	r7, #0
 800d172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d176:	f1b9 0901 	subs.w	r9, r9, #1
 800d17a:	d505      	bpl.n	800d188 <_fwalk_reent+0x24>
 800d17c:	6824      	ldr	r4, [r4, #0]
 800d17e:	2c00      	cmp	r4, #0
 800d180:	d1f7      	bne.n	800d172 <_fwalk_reent+0xe>
 800d182:	4638      	mov	r0, r7
 800d184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d188:	89ab      	ldrh	r3, [r5, #12]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d907      	bls.n	800d19e <_fwalk_reent+0x3a>
 800d18e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d192:	3301      	adds	r3, #1
 800d194:	d003      	beq.n	800d19e <_fwalk_reent+0x3a>
 800d196:	4629      	mov	r1, r5
 800d198:	4630      	mov	r0, r6
 800d19a:	47c0      	blx	r8
 800d19c:	4307      	orrs	r7, r0
 800d19e:	3568      	adds	r5, #104	; 0x68
 800d1a0:	e7e9      	b.n	800d176 <_fwalk_reent+0x12>
	...

0800d1a4 <__libc_init_array>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	4d0d      	ldr	r5, [pc, #52]	; (800d1dc <__libc_init_array+0x38>)
 800d1a8:	4c0d      	ldr	r4, [pc, #52]	; (800d1e0 <__libc_init_array+0x3c>)
 800d1aa:	1b64      	subs	r4, r4, r5
 800d1ac:	10a4      	asrs	r4, r4, #2
 800d1ae:	2600      	movs	r6, #0
 800d1b0:	42a6      	cmp	r6, r4
 800d1b2:	d109      	bne.n	800d1c8 <__libc_init_array+0x24>
 800d1b4:	4d0b      	ldr	r5, [pc, #44]	; (800d1e4 <__libc_init_array+0x40>)
 800d1b6:	4c0c      	ldr	r4, [pc, #48]	; (800d1e8 <__libc_init_array+0x44>)
 800d1b8:	f000 fca2 	bl	800db00 <_init>
 800d1bc:	1b64      	subs	r4, r4, r5
 800d1be:	10a4      	asrs	r4, r4, #2
 800d1c0:	2600      	movs	r6, #0
 800d1c2:	42a6      	cmp	r6, r4
 800d1c4:	d105      	bne.n	800d1d2 <__libc_init_array+0x2e>
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1cc:	4798      	blx	r3
 800d1ce:	3601      	adds	r6, #1
 800d1d0:	e7ee      	b.n	800d1b0 <__libc_init_array+0xc>
 800d1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d6:	4798      	blx	r3
 800d1d8:	3601      	adds	r6, #1
 800d1da:	e7f2      	b.n	800d1c2 <__libc_init_array+0x1e>
 800d1dc:	0800dc9c 	.word	0x0800dc9c
 800d1e0:	0800dc9c 	.word	0x0800dc9c
 800d1e4:	0800dc9c 	.word	0x0800dc9c
 800d1e8:	0800dca0 	.word	0x0800dca0

0800d1ec <__retarget_lock_init_recursive>:
 800d1ec:	4770      	bx	lr

0800d1ee <__retarget_lock_acquire_recursive>:
 800d1ee:	4770      	bx	lr

0800d1f0 <__retarget_lock_release_recursive>:
 800d1f0:	4770      	bx	lr

0800d1f2 <memcpy>:
 800d1f2:	440a      	add	r2, r1
 800d1f4:	4291      	cmp	r1, r2
 800d1f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1fa:	d100      	bne.n	800d1fe <memcpy+0xc>
 800d1fc:	4770      	bx	lr
 800d1fe:	b510      	push	{r4, lr}
 800d200:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d204:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d208:	4291      	cmp	r1, r2
 800d20a:	d1f9      	bne.n	800d200 <memcpy+0xe>
 800d20c:	bd10      	pop	{r4, pc}

0800d20e <memset>:
 800d20e:	4402      	add	r2, r0
 800d210:	4603      	mov	r3, r0
 800d212:	4293      	cmp	r3, r2
 800d214:	d100      	bne.n	800d218 <memset+0xa>
 800d216:	4770      	bx	lr
 800d218:	f803 1b01 	strb.w	r1, [r3], #1
 800d21c:	e7f9      	b.n	800d212 <memset+0x4>
	...

0800d220 <sbrk_aligned>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	4e0e      	ldr	r6, [pc, #56]	; (800d25c <sbrk_aligned+0x3c>)
 800d224:	460c      	mov	r4, r1
 800d226:	6831      	ldr	r1, [r6, #0]
 800d228:	4605      	mov	r5, r0
 800d22a:	b911      	cbnz	r1, 800d232 <sbrk_aligned+0x12>
 800d22c:	f000 f96c 	bl	800d508 <_sbrk_r>
 800d230:	6030      	str	r0, [r6, #0]
 800d232:	4621      	mov	r1, r4
 800d234:	4628      	mov	r0, r5
 800d236:	f000 f967 	bl	800d508 <_sbrk_r>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d00a      	beq.n	800d254 <sbrk_aligned+0x34>
 800d23e:	1cc4      	adds	r4, r0, #3
 800d240:	f024 0403 	bic.w	r4, r4, #3
 800d244:	42a0      	cmp	r0, r4
 800d246:	d007      	beq.n	800d258 <sbrk_aligned+0x38>
 800d248:	1a21      	subs	r1, r4, r0
 800d24a:	4628      	mov	r0, r5
 800d24c:	f000 f95c 	bl	800d508 <_sbrk_r>
 800d250:	3001      	adds	r0, #1
 800d252:	d101      	bne.n	800d258 <sbrk_aligned+0x38>
 800d254:	f04f 34ff 	mov.w	r4, #4294967295
 800d258:	4620      	mov	r0, r4
 800d25a:	bd70      	pop	{r4, r5, r6, pc}
 800d25c:	2400723c 	.word	0x2400723c

0800d260 <_malloc_r>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	1ccd      	adds	r5, r1, #3
 800d266:	f025 0503 	bic.w	r5, r5, #3
 800d26a:	3508      	adds	r5, #8
 800d26c:	2d0c      	cmp	r5, #12
 800d26e:	bf38      	it	cc
 800d270:	250c      	movcc	r5, #12
 800d272:	2d00      	cmp	r5, #0
 800d274:	4607      	mov	r7, r0
 800d276:	db01      	blt.n	800d27c <_malloc_r+0x1c>
 800d278:	42a9      	cmp	r1, r5
 800d27a:	d905      	bls.n	800d288 <_malloc_r+0x28>
 800d27c:	230c      	movs	r3, #12
 800d27e:	603b      	str	r3, [r7, #0]
 800d280:	2600      	movs	r6, #0
 800d282:	4630      	mov	r0, r6
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	4e2e      	ldr	r6, [pc, #184]	; (800d344 <_malloc_r+0xe4>)
 800d28a:	f000 fbad 	bl	800d9e8 <__malloc_lock>
 800d28e:	6833      	ldr	r3, [r6, #0]
 800d290:	461c      	mov	r4, r3
 800d292:	bb34      	cbnz	r4, 800d2e2 <_malloc_r+0x82>
 800d294:	4629      	mov	r1, r5
 800d296:	4638      	mov	r0, r7
 800d298:	f7ff ffc2 	bl	800d220 <sbrk_aligned>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	4604      	mov	r4, r0
 800d2a0:	d14d      	bne.n	800d33e <_malloc_r+0xde>
 800d2a2:	6834      	ldr	r4, [r6, #0]
 800d2a4:	4626      	mov	r6, r4
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	d140      	bne.n	800d32c <_malloc_r+0xcc>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	eb04 0803 	add.w	r8, r4, r3
 800d2b4:	f000 f928 	bl	800d508 <_sbrk_r>
 800d2b8:	4580      	cmp	r8, r0
 800d2ba:	d13a      	bne.n	800d332 <_malloc_r+0xd2>
 800d2bc:	6821      	ldr	r1, [r4, #0]
 800d2be:	3503      	adds	r5, #3
 800d2c0:	1a6d      	subs	r5, r5, r1
 800d2c2:	f025 0503 	bic.w	r5, r5, #3
 800d2c6:	3508      	adds	r5, #8
 800d2c8:	2d0c      	cmp	r5, #12
 800d2ca:	bf38      	it	cc
 800d2cc:	250c      	movcc	r5, #12
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff ffa5 	bl	800d220 <sbrk_aligned>
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	d02b      	beq.n	800d332 <_malloc_r+0xd2>
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	442b      	add	r3, r5
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	e00e      	b.n	800d300 <_malloc_r+0xa0>
 800d2e2:	6822      	ldr	r2, [r4, #0]
 800d2e4:	1b52      	subs	r2, r2, r5
 800d2e6:	d41e      	bmi.n	800d326 <_malloc_r+0xc6>
 800d2e8:	2a0b      	cmp	r2, #11
 800d2ea:	d916      	bls.n	800d31a <_malloc_r+0xba>
 800d2ec:	1961      	adds	r1, r4, r5
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	6025      	str	r5, [r4, #0]
 800d2f2:	bf18      	it	ne
 800d2f4:	6059      	strne	r1, [r3, #4]
 800d2f6:	6863      	ldr	r3, [r4, #4]
 800d2f8:	bf08      	it	eq
 800d2fa:	6031      	streq	r1, [r6, #0]
 800d2fc:	5162      	str	r2, [r4, r5]
 800d2fe:	604b      	str	r3, [r1, #4]
 800d300:	4638      	mov	r0, r7
 800d302:	f104 060b 	add.w	r6, r4, #11
 800d306:	f000 fb75 	bl	800d9f4 <__malloc_unlock>
 800d30a:	f026 0607 	bic.w	r6, r6, #7
 800d30e:	1d23      	adds	r3, r4, #4
 800d310:	1af2      	subs	r2, r6, r3
 800d312:	d0b6      	beq.n	800d282 <_malloc_r+0x22>
 800d314:	1b9b      	subs	r3, r3, r6
 800d316:	50a3      	str	r3, [r4, r2]
 800d318:	e7b3      	b.n	800d282 <_malloc_r+0x22>
 800d31a:	6862      	ldr	r2, [r4, #4]
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	bf0c      	ite	eq
 800d320:	6032      	streq	r2, [r6, #0]
 800d322:	605a      	strne	r2, [r3, #4]
 800d324:	e7ec      	b.n	800d300 <_malloc_r+0xa0>
 800d326:	4623      	mov	r3, r4
 800d328:	6864      	ldr	r4, [r4, #4]
 800d32a:	e7b2      	b.n	800d292 <_malloc_r+0x32>
 800d32c:	4634      	mov	r4, r6
 800d32e:	6876      	ldr	r6, [r6, #4]
 800d330:	e7b9      	b.n	800d2a6 <_malloc_r+0x46>
 800d332:	230c      	movs	r3, #12
 800d334:	603b      	str	r3, [r7, #0]
 800d336:	4638      	mov	r0, r7
 800d338:	f000 fb5c 	bl	800d9f4 <__malloc_unlock>
 800d33c:	e7a1      	b.n	800d282 <_malloc_r+0x22>
 800d33e:	6025      	str	r5, [r4, #0]
 800d340:	e7de      	b.n	800d300 <_malloc_r+0xa0>
 800d342:	bf00      	nop
 800d344:	24007238 	.word	0x24007238

0800d348 <_puts_r>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	460e      	mov	r6, r1
 800d34c:	4605      	mov	r5, r0
 800d34e:	b118      	cbz	r0, 800d358 <_puts_r+0x10>
 800d350:	6983      	ldr	r3, [r0, #24]
 800d352:	b90b      	cbnz	r3, 800d358 <_puts_r+0x10>
 800d354:	f7ff fe88 	bl	800d068 <__sinit>
 800d358:	69ab      	ldr	r3, [r5, #24]
 800d35a:	68ac      	ldr	r4, [r5, #8]
 800d35c:	b913      	cbnz	r3, 800d364 <_puts_r+0x1c>
 800d35e:	4628      	mov	r0, r5
 800d360:	f7ff fe82 	bl	800d068 <__sinit>
 800d364:	4b2c      	ldr	r3, [pc, #176]	; (800d418 <_puts_r+0xd0>)
 800d366:	429c      	cmp	r4, r3
 800d368:	d120      	bne.n	800d3ac <_puts_r+0x64>
 800d36a:	686c      	ldr	r4, [r5, #4]
 800d36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d36e:	07db      	lsls	r3, r3, #31
 800d370:	d405      	bmi.n	800d37e <_puts_r+0x36>
 800d372:	89a3      	ldrh	r3, [r4, #12]
 800d374:	0598      	lsls	r0, r3, #22
 800d376:	d402      	bmi.n	800d37e <_puts_r+0x36>
 800d378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d37a:	f7ff ff38 	bl	800d1ee <__retarget_lock_acquire_recursive>
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	0719      	lsls	r1, r3, #28
 800d382:	d51d      	bpl.n	800d3c0 <_puts_r+0x78>
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	b1db      	cbz	r3, 800d3c0 <_puts_r+0x78>
 800d388:	3e01      	subs	r6, #1
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d390:	3b01      	subs	r3, #1
 800d392:	60a3      	str	r3, [r4, #8]
 800d394:	bb39      	cbnz	r1, 800d3e6 <_puts_r+0x9e>
 800d396:	2b00      	cmp	r3, #0
 800d398:	da38      	bge.n	800d40c <_puts_r+0xc4>
 800d39a:	4622      	mov	r2, r4
 800d39c:	210a      	movs	r1, #10
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 f906 	bl	800d5b0 <__swbuf_r>
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	d011      	beq.n	800d3cc <_puts_r+0x84>
 800d3a8:	250a      	movs	r5, #10
 800d3aa:	e011      	b.n	800d3d0 <_puts_r+0x88>
 800d3ac:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <_puts_r+0xd4>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d101      	bne.n	800d3b6 <_puts_r+0x6e>
 800d3b2:	68ac      	ldr	r4, [r5, #8]
 800d3b4:	e7da      	b.n	800d36c <_puts_r+0x24>
 800d3b6:	4b1a      	ldr	r3, [pc, #104]	; (800d420 <_puts_r+0xd8>)
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	bf08      	it	eq
 800d3bc:	68ec      	ldreq	r4, [r5, #12]
 800d3be:	e7d5      	b.n	800d36c <_puts_r+0x24>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f000 f958 	bl	800d678 <__swsetup_r>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0dd      	beq.n	800d388 <_puts_r+0x40>
 800d3cc:	f04f 35ff 	mov.w	r5, #4294967295
 800d3d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3d2:	07da      	lsls	r2, r3, #31
 800d3d4:	d405      	bmi.n	800d3e2 <_puts_r+0x9a>
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	059b      	lsls	r3, r3, #22
 800d3da:	d402      	bmi.n	800d3e2 <_puts_r+0x9a>
 800d3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3de:	f7ff ff07 	bl	800d1f0 <__retarget_lock_release_recursive>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da04      	bge.n	800d3f4 <_puts_r+0xac>
 800d3ea:	69a2      	ldr	r2, [r4, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	dc06      	bgt.n	800d3fe <_puts_r+0xb6>
 800d3f0:	290a      	cmp	r1, #10
 800d3f2:	d004      	beq.n	800d3fe <_puts_r+0xb6>
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	6022      	str	r2, [r4, #0]
 800d3fa:	7019      	strb	r1, [r3, #0]
 800d3fc:	e7c5      	b.n	800d38a <_puts_r+0x42>
 800d3fe:	4622      	mov	r2, r4
 800d400:	4628      	mov	r0, r5
 800d402:	f000 f8d5 	bl	800d5b0 <__swbuf_r>
 800d406:	3001      	adds	r0, #1
 800d408:	d1bf      	bne.n	800d38a <_puts_r+0x42>
 800d40a:	e7df      	b.n	800d3cc <_puts_r+0x84>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	250a      	movs	r5, #10
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	6022      	str	r2, [r4, #0]
 800d414:	701d      	strb	r5, [r3, #0]
 800d416:	e7db      	b.n	800d3d0 <_puts_r+0x88>
 800d418:	0800dc50 	.word	0x0800dc50
 800d41c:	0800dc70 	.word	0x0800dc70
 800d420:	0800dc30 	.word	0x0800dc30

0800d424 <puts>:
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <puts+0xc>)
 800d426:	4601      	mov	r1, r0
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f7ff bf8d 	b.w	800d348 <_puts_r>
 800d42e:	bf00      	nop
 800d430:	24000014 	.word	0x24000014

0800d434 <cleanup_glue>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	460c      	mov	r4, r1
 800d438:	6809      	ldr	r1, [r1, #0]
 800d43a:	4605      	mov	r5, r0
 800d43c:	b109      	cbz	r1, 800d442 <cleanup_glue+0xe>
 800d43e:	f7ff fff9 	bl	800d434 <cleanup_glue>
 800d442:	4621      	mov	r1, r4
 800d444:	4628      	mov	r0, r5
 800d446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44a:	f000 bad9 	b.w	800da00 <_free_r>
	...

0800d450 <_reclaim_reent>:
 800d450:	4b2c      	ldr	r3, [pc, #176]	; (800d504 <_reclaim_reent+0xb4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4283      	cmp	r3, r0
 800d456:	b570      	push	{r4, r5, r6, lr}
 800d458:	4604      	mov	r4, r0
 800d45a:	d051      	beq.n	800d500 <_reclaim_reent+0xb0>
 800d45c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d45e:	b143      	cbz	r3, 800d472 <_reclaim_reent+0x22>
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d14a      	bne.n	800d4fc <_reclaim_reent+0xac>
 800d466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d468:	6819      	ldr	r1, [r3, #0]
 800d46a:	b111      	cbz	r1, 800d472 <_reclaim_reent+0x22>
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fac7 	bl	800da00 <_free_r>
 800d472:	6961      	ldr	r1, [r4, #20]
 800d474:	b111      	cbz	r1, 800d47c <_reclaim_reent+0x2c>
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fac2 	bl	800da00 <_free_r>
 800d47c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d47e:	b111      	cbz	r1, 800d486 <_reclaim_reent+0x36>
 800d480:	4620      	mov	r0, r4
 800d482:	f000 fabd 	bl	800da00 <_free_r>
 800d486:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d488:	b111      	cbz	r1, 800d490 <_reclaim_reent+0x40>
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 fab8 	bl	800da00 <_free_r>
 800d490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d492:	b111      	cbz	r1, 800d49a <_reclaim_reent+0x4a>
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fab3 	bl	800da00 <_free_r>
 800d49a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d49c:	b111      	cbz	r1, 800d4a4 <_reclaim_reent+0x54>
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 faae 	bl	800da00 <_free_r>
 800d4a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d4a6:	b111      	cbz	r1, 800d4ae <_reclaim_reent+0x5e>
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 faa9 	bl	800da00 <_free_r>
 800d4ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d4b0:	b111      	cbz	r1, 800d4b8 <_reclaim_reent+0x68>
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 faa4 	bl	800da00 <_free_r>
 800d4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4ba:	b111      	cbz	r1, 800d4c2 <_reclaim_reent+0x72>
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fa9f 	bl	800da00 <_free_r>
 800d4c2:	69a3      	ldr	r3, [r4, #24]
 800d4c4:	b1e3      	cbz	r3, 800d500 <_reclaim_reent+0xb0>
 800d4c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4798      	blx	r3
 800d4cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d4ce:	b1b9      	cbz	r1, 800d500 <_reclaim_reent+0xb0>
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4d6:	f7ff bfad 	b.w	800d434 <cleanup_glue>
 800d4da:	5949      	ldr	r1, [r1, r5]
 800d4dc:	b941      	cbnz	r1, 800d4f0 <_reclaim_reent+0xa0>
 800d4de:	3504      	adds	r5, #4
 800d4e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e2:	2d80      	cmp	r5, #128	; 0x80
 800d4e4:	68d9      	ldr	r1, [r3, #12]
 800d4e6:	d1f8      	bne.n	800d4da <_reclaim_reent+0x8a>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fa89 	bl	800da00 <_free_r>
 800d4ee:	e7ba      	b.n	800d466 <_reclaim_reent+0x16>
 800d4f0:	680e      	ldr	r6, [r1, #0]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fa84 	bl	800da00 <_free_r>
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	e7ef      	b.n	800d4dc <_reclaim_reent+0x8c>
 800d4fc:	2500      	movs	r5, #0
 800d4fe:	e7ef      	b.n	800d4e0 <_reclaim_reent+0x90>
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	bf00      	nop
 800d504:	24000014 	.word	0x24000014

0800d508 <_sbrk_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d06      	ldr	r5, [pc, #24]	; (800d524 <_sbrk_r+0x1c>)
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	f7f3 ff4a 	bl	80013ac <_sbrk>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d102      	bne.n	800d522 <_sbrk_r+0x1a>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	b103      	cbz	r3, 800d522 <_sbrk_r+0x1a>
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	24007240 	.word	0x24007240

0800d528 <__sread>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	460c      	mov	r4, r1
 800d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d530:	f000 fab2 	bl	800da98 <_read_r>
 800d534:	2800      	cmp	r0, #0
 800d536:	bfab      	itete	ge
 800d538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d53a:	89a3      	ldrhlt	r3, [r4, #12]
 800d53c:	181b      	addge	r3, r3, r0
 800d53e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d542:	bfac      	ite	ge
 800d544:	6563      	strge	r3, [r4, #84]	; 0x54
 800d546:	81a3      	strhlt	r3, [r4, #12]
 800d548:	bd10      	pop	{r4, pc}

0800d54a <__swrite>:
 800d54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54e:	461f      	mov	r7, r3
 800d550:	898b      	ldrh	r3, [r1, #12]
 800d552:	05db      	lsls	r3, r3, #23
 800d554:	4605      	mov	r5, r0
 800d556:	460c      	mov	r4, r1
 800d558:	4616      	mov	r6, r2
 800d55a:	d505      	bpl.n	800d568 <__swrite+0x1e>
 800d55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d560:	2302      	movs	r3, #2
 800d562:	2200      	movs	r2, #0
 800d564:	f000 f9c8 	bl	800d8f8 <_lseek_r>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d56e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	4628      	mov	r0, r5
 800d57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	f000 b869 	b.w	800d654 <_write_r>

0800d582 <__sseek>:
 800d582:	b510      	push	{r4, lr}
 800d584:	460c      	mov	r4, r1
 800d586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58a:	f000 f9b5 	bl	800d8f8 <_lseek_r>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	bf15      	itete	ne
 800d594:	6560      	strne	r0, [r4, #84]	; 0x54
 800d596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d59a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d59e:	81a3      	strheq	r3, [r4, #12]
 800d5a0:	bf18      	it	ne
 800d5a2:	81a3      	strhne	r3, [r4, #12]
 800d5a4:	bd10      	pop	{r4, pc}

0800d5a6 <__sclose>:
 800d5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5aa:	f000 b8d3 	b.w	800d754 <_close_r>
	...

0800d5b0 <__swbuf_r>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	460e      	mov	r6, r1
 800d5b4:	4614      	mov	r4, r2
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	b118      	cbz	r0, 800d5c2 <__swbuf_r+0x12>
 800d5ba:	6983      	ldr	r3, [r0, #24]
 800d5bc:	b90b      	cbnz	r3, 800d5c2 <__swbuf_r+0x12>
 800d5be:	f7ff fd53 	bl	800d068 <__sinit>
 800d5c2:	4b21      	ldr	r3, [pc, #132]	; (800d648 <__swbuf_r+0x98>)
 800d5c4:	429c      	cmp	r4, r3
 800d5c6:	d12b      	bne.n	800d620 <__swbuf_r+0x70>
 800d5c8:	686c      	ldr	r4, [r5, #4]
 800d5ca:	69a3      	ldr	r3, [r4, #24]
 800d5cc:	60a3      	str	r3, [r4, #8]
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	071a      	lsls	r2, r3, #28
 800d5d2:	d52f      	bpl.n	800d634 <__swbuf_r+0x84>
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	b36b      	cbz	r3, 800d634 <__swbuf_r+0x84>
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	6820      	ldr	r0, [r4, #0]
 800d5dc:	1ac0      	subs	r0, r0, r3
 800d5de:	6963      	ldr	r3, [r4, #20]
 800d5e0:	b2f6      	uxtb	r6, r6
 800d5e2:	4283      	cmp	r3, r0
 800d5e4:	4637      	mov	r7, r6
 800d5e6:	dc04      	bgt.n	800d5f2 <__swbuf_r+0x42>
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f000 f948 	bl	800d880 <_fflush_r>
 800d5f0:	bb30      	cbnz	r0, 800d640 <__swbuf_r+0x90>
 800d5f2:	68a3      	ldr	r3, [r4, #8]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	60a3      	str	r3, [r4, #8]
 800d5f8:	6823      	ldr	r3, [r4, #0]
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	6022      	str	r2, [r4, #0]
 800d5fe:	701e      	strb	r6, [r3, #0]
 800d600:	6963      	ldr	r3, [r4, #20]
 800d602:	3001      	adds	r0, #1
 800d604:	4283      	cmp	r3, r0
 800d606:	d004      	beq.n	800d612 <__swbuf_r+0x62>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	07db      	lsls	r3, r3, #31
 800d60c:	d506      	bpl.n	800d61c <__swbuf_r+0x6c>
 800d60e:	2e0a      	cmp	r6, #10
 800d610:	d104      	bne.n	800d61c <__swbuf_r+0x6c>
 800d612:	4621      	mov	r1, r4
 800d614:	4628      	mov	r0, r5
 800d616:	f000 f933 	bl	800d880 <_fflush_r>
 800d61a:	b988      	cbnz	r0, 800d640 <__swbuf_r+0x90>
 800d61c:	4638      	mov	r0, r7
 800d61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d620:	4b0a      	ldr	r3, [pc, #40]	; (800d64c <__swbuf_r+0x9c>)
 800d622:	429c      	cmp	r4, r3
 800d624:	d101      	bne.n	800d62a <__swbuf_r+0x7a>
 800d626:	68ac      	ldr	r4, [r5, #8]
 800d628:	e7cf      	b.n	800d5ca <__swbuf_r+0x1a>
 800d62a:	4b09      	ldr	r3, [pc, #36]	; (800d650 <__swbuf_r+0xa0>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	bf08      	it	eq
 800d630:	68ec      	ldreq	r4, [r5, #12]
 800d632:	e7ca      	b.n	800d5ca <__swbuf_r+0x1a>
 800d634:	4621      	mov	r1, r4
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f81e 	bl	800d678 <__swsetup_r>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d0cb      	beq.n	800d5d8 <__swbuf_r+0x28>
 800d640:	f04f 37ff 	mov.w	r7, #4294967295
 800d644:	e7ea      	b.n	800d61c <__swbuf_r+0x6c>
 800d646:	bf00      	nop
 800d648:	0800dc50 	.word	0x0800dc50
 800d64c:	0800dc70 	.word	0x0800dc70
 800d650:	0800dc30 	.word	0x0800dc30

0800d654 <_write_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_write_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f3 fe51 	bl	800130a <_write>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_write_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_write_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	24007240 	.word	0x24007240

0800d678 <__swsetup_r>:
 800d678:	4b32      	ldr	r3, [pc, #200]	; (800d744 <__swsetup_r+0xcc>)
 800d67a:	b570      	push	{r4, r5, r6, lr}
 800d67c:	681d      	ldr	r5, [r3, #0]
 800d67e:	4606      	mov	r6, r0
 800d680:	460c      	mov	r4, r1
 800d682:	b125      	cbz	r5, 800d68e <__swsetup_r+0x16>
 800d684:	69ab      	ldr	r3, [r5, #24]
 800d686:	b913      	cbnz	r3, 800d68e <__swsetup_r+0x16>
 800d688:	4628      	mov	r0, r5
 800d68a:	f7ff fced 	bl	800d068 <__sinit>
 800d68e:	4b2e      	ldr	r3, [pc, #184]	; (800d748 <__swsetup_r+0xd0>)
 800d690:	429c      	cmp	r4, r3
 800d692:	d10f      	bne.n	800d6b4 <__swsetup_r+0x3c>
 800d694:	686c      	ldr	r4, [r5, #4]
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d69c:	0719      	lsls	r1, r3, #28
 800d69e:	d42c      	bmi.n	800d6fa <__swsetup_r+0x82>
 800d6a0:	06dd      	lsls	r5, r3, #27
 800d6a2:	d411      	bmi.n	800d6c8 <__swsetup_r+0x50>
 800d6a4:	2309      	movs	r3, #9
 800d6a6:	6033      	str	r3, [r6, #0]
 800d6a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	e03e      	b.n	800d732 <__swsetup_r+0xba>
 800d6b4:	4b25      	ldr	r3, [pc, #148]	; (800d74c <__swsetup_r+0xd4>)
 800d6b6:	429c      	cmp	r4, r3
 800d6b8:	d101      	bne.n	800d6be <__swsetup_r+0x46>
 800d6ba:	68ac      	ldr	r4, [r5, #8]
 800d6bc:	e7eb      	b.n	800d696 <__swsetup_r+0x1e>
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <__swsetup_r+0xd8>)
 800d6c0:	429c      	cmp	r4, r3
 800d6c2:	bf08      	it	eq
 800d6c4:	68ec      	ldreq	r4, [r5, #12]
 800d6c6:	e7e6      	b.n	800d696 <__swsetup_r+0x1e>
 800d6c8:	0758      	lsls	r0, r3, #29
 800d6ca:	d512      	bpl.n	800d6f2 <__swsetup_r+0x7a>
 800d6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ce:	b141      	cbz	r1, 800d6e2 <__swsetup_r+0x6a>
 800d6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6d4:	4299      	cmp	r1, r3
 800d6d6:	d002      	beq.n	800d6de <__swsetup_r+0x66>
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f000 f991 	bl	800da00 <_free_r>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6363      	str	r3, [r4, #52]	; 0x34
 800d6e2:	89a3      	ldrh	r3, [r4, #12]
 800d6e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6063      	str	r3, [r4, #4]
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f043 0308 	orr.w	r3, r3, #8
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	6923      	ldr	r3, [r4, #16]
 800d6fc:	b94b      	cbnz	r3, 800d712 <__swsetup_r+0x9a>
 800d6fe:	89a3      	ldrh	r3, [r4, #12]
 800d700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d708:	d003      	beq.n	800d712 <__swsetup_r+0x9a>
 800d70a:	4621      	mov	r1, r4
 800d70c:	4630      	mov	r0, r6
 800d70e:	f000 f92b 	bl	800d968 <__smakebuf_r>
 800d712:	89a0      	ldrh	r0, [r4, #12]
 800d714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d718:	f010 0301 	ands.w	r3, r0, #1
 800d71c:	d00a      	beq.n	800d734 <__swsetup_r+0xbc>
 800d71e:	2300      	movs	r3, #0
 800d720:	60a3      	str	r3, [r4, #8]
 800d722:	6963      	ldr	r3, [r4, #20]
 800d724:	425b      	negs	r3, r3
 800d726:	61a3      	str	r3, [r4, #24]
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	b943      	cbnz	r3, 800d73e <__swsetup_r+0xc6>
 800d72c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d730:	d1ba      	bne.n	800d6a8 <__swsetup_r+0x30>
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	0781      	lsls	r1, r0, #30
 800d736:	bf58      	it	pl
 800d738:	6963      	ldrpl	r3, [r4, #20]
 800d73a:	60a3      	str	r3, [r4, #8]
 800d73c:	e7f4      	b.n	800d728 <__swsetup_r+0xb0>
 800d73e:	2000      	movs	r0, #0
 800d740:	e7f7      	b.n	800d732 <__swsetup_r+0xba>
 800d742:	bf00      	nop
 800d744:	24000014 	.word	0x24000014
 800d748:	0800dc50 	.word	0x0800dc50
 800d74c:	0800dc70 	.word	0x0800dc70
 800d750:	0800dc30 	.word	0x0800dc30

0800d754 <_close_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_close_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	f7f3 fdef 	bl	8001342 <_close>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_close_r+0x1a>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_close_r+0x1a>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	24007240 	.word	0x24007240

0800d774 <__sflush_r>:
 800d774:	898a      	ldrh	r2, [r1, #12]
 800d776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d77a:	4605      	mov	r5, r0
 800d77c:	0710      	lsls	r0, r2, #28
 800d77e:	460c      	mov	r4, r1
 800d780:	d458      	bmi.n	800d834 <__sflush_r+0xc0>
 800d782:	684b      	ldr	r3, [r1, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dc05      	bgt.n	800d794 <__sflush_r+0x20>
 800d788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dc02      	bgt.n	800d794 <__sflush_r+0x20>
 800d78e:	2000      	movs	r0, #0
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d796:	2e00      	cmp	r6, #0
 800d798:	d0f9      	beq.n	800d78e <__sflush_r+0x1a>
 800d79a:	2300      	movs	r3, #0
 800d79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7a0:	682f      	ldr	r7, [r5, #0]
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	d032      	beq.n	800d80c <__sflush_r+0x98>
 800d7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	075a      	lsls	r2, r3, #29
 800d7ac:	d505      	bpl.n	800d7ba <__sflush_r+0x46>
 800d7ae:	6863      	ldr	r3, [r4, #4]
 800d7b0:	1ac0      	subs	r0, r0, r3
 800d7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7b4:	b10b      	cbz	r3, 800d7ba <__sflush_r+0x46>
 800d7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7b8:	1ac0      	subs	r0, r0, r3
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	4602      	mov	r2, r0
 800d7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7c0:	6a21      	ldr	r1, [r4, #32]
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	47b0      	blx	r6
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	d106      	bne.n	800d7da <__sflush_r+0x66>
 800d7cc:	6829      	ldr	r1, [r5, #0]
 800d7ce:	291d      	cmp	r1, #29
 800d7d0:	d82c      	bhi.n	800d82c <__sflush_r+0xb8>
 800d7d2:	4a2a      	ldr	r2, [pc, #168]	; (800d87c <__sflush_r+0x108>)
 800d7d4:	40ca      	lsrs	r2, r1
 800d7d6:	07d6      	lsls	r6, r2, #31
 800d7d8:	d528      	bpl.n	800d82c <__sflush_r+0xb8>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	6062      	str	r2, [r4, #4]
 800d7de:	04d9      	lsls	r1, r3, #19
 800d7e0:	6922      	ldr	r2, [r4, #16]
 800d7e2:	6022      	str	r2, [r4, #0]
 800d7e4:	d504      	bpl.n	800d7f0 <__sflush_r+0x7c>
 800d7e6:	1c42      	adds	r2, r0, #1
 800d7e8:	d101      	bne.n	800d7ee <__sflush_r+0x7a>
 800d7ea:	682b      	ldr	r3, [r5, #0]
 800d7ec:	b903      	cbnz	r3, 800d7f0 <__sflush_r+0x7c>
 800d7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800d7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7f2:	602f      	str	r7, [r5, #0]
 800d7f4:	2900      	cmp	r1, #0
 800d7f6:	d0ca      	beq.n	800d78e <__sflush_r+0x1a>
 800d7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7fc:	4299      	cmp	r1, r3
 800d7fe:	d002      	beq.n	800d806 <__sflush_r+0x92>
 800d800:	4628      	mov	r0, r5
 800d802:	f000 f8fd 	bl	800da00 <_free_r>
 800d806:	2000      	movs	r0, #0
 800d808:	6360      	str	r0, [r4, #52]	; 0x34
 800d80a:	e7c1      	b.n	800d790 <__sflush_r+0x1c>
 800d80c:	6a21      	ldr	r1, [r4, #32]
 800d80e:	2301      	movs	r3, #1
 800d810:	4628      	mov	r0, r5
 800d812:	47b0      	blx	r6
 800d814:	1c41      	adds	r1, r0, #1
 800d816:	d1c7      	bne.n	800d7a8 <__sflush_r+0x34>
 800d818:	682b      	ldr	r3, [r5, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0c4      	beq.n	800d7a8 <__sflush_r+0x34>
 800d81e:	2b1d      	cmp	r3, #29
 800d820:	d001      	beq.n	800d826 <__sflush_r+0xb2>
 800d822:	2b16      	cmp	r3, #22
 800d824:	d101      	bne.n	800d82a <__sflush_r+0xb6>
 800d826:	602f      	str	r7, [r5, #0]
 800d828:	e7b1      	b.n	800d78e <__sflush_r+0x1a>
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d830:	81a3      	strh	r3, [r4, #12]
 800d832:	e7ad      	b.n	800d790 <__sflush_r+0x1c>
 800d834:	690f      	ldr	r7, [r1, #16]
 800d836:	2f00      	cmp	r7, #0
 800d838:	d0a9      	beq.n	800d78e <__sflush_r+0x1a>
 800d83a:	0793      	lsls	r3, r2, #30
 800d83c:	680e      	ldr	r6, [r1, #0]
 800d83e:	bf08      	it	eq
 800d840:	694b      	ldreq	r3, [r1, #20]
 800d842:	600f      	str	r7, [r1, #0]
 800d844:	bf18      	it	ne
 800d846:	2300      	movne	r3, #0
 800d848:	eba6 0807 	sub.w	r8, r6, r7
 800d84c:	608b      	str	r3, [r1, #8]
 800d84e:	f1b8 0f00 	cmp.w	r8, #0
 800d852:	dd9c      	ble.n	800d78e <__sflush_r+0x1a>
 800d854:	6a21      	ldr	r1, [r4, #32]
 800d856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d858:	4643      	mov	r3, r8
 800d85a:	463a      	mov	r2, r7
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b0      	blx	r6
 800d860:	2800      	cmp	r0, #0
 800d862:	dc06      	bgt.n	800d872 <__sflush_r+0xfe>
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	e78e      	b.n	800d790 <__sflush_r+0x1c>
 800d872:	4407      	add	r7, r0
 800d874:	eba8 0800 	sub.w	r8, r8, r0
 800d878:	e7e9      	b.n	800d84e <__sflush_r+0xda>
 800d87a:	bf00      	nop
 800d87c:	20400001 	.word	0x20400001

0800d880 <_fflush_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	690b      	ldr	r3, [r1, #16]
 800d884:	4605      	mov	r5, r0
 800d886:	460c      	mov	r4, r1
 800d888:	b913      	cbnz	r3, 800d890 <_fflush_r+0x10>
 800d88a:	2500      	movs	r5, #0
 800d88c:	4628      	mov	r0, r5
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	b118      	cbz	r0, 800d89a <_fflush_r+0x1a>
 800d892:	6983      	ldr	r3, [r0, #24]
 800d894:	b90b      	cbnz	r3, 800d89a <_fflush_r+0x1a>
 800d896:	f7ff fbe7 	bl	800d068 <__sinit>
 800d89a:	4b14      	ldr	r3, [pc, #80]	; (800d8ec <_fflush_r+0x6c>)
 800d89c:	429c      	cmp	r4, r3
 800d89e:	d11b      	bne.n	800d8d8 <_fflush_r+0x58>
 800d8a0:	686c      	ldr	r4, [r5, #4]
 800d8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0ef      	beq.n	800d88a <_fflush_r+0xa>
 800d8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8ac:	07d0      	lsls	r0, r2, #31
 800d8ae:	d404      	bmi.n	800d8ba <_fflush_r+0x3a>
 800d8b0:	0599      	lsls	r1, r3, #22
 800d8b2:	d402      	bmi.n	800d8ba <_fflush_r+0x3a>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8b6:	f7ff fc9a 	bl	800d1ee <__retarget_lock_acquire_recursive>
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7ff ff59 	bl	800d774 <__sflush_r>
 800d8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c4:	07da      	lsls	r2, r3, #31
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	d4e0      	bmi.n	800d88c <_fflush_r+0xc>
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	059b      	lsls	r3, r3, #22
 800d8ce:	d4dd      	bmi.n	800d88c <_fflush_r+0xc>
 800d8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d2:	f7ff fc8d 	bl	800d1f0 <__retarget_lock_release_recursive>
 800d8d6:	e7d9      	b.n	800d88c <_fflush_r+0xc>
 800d8d8:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <_fflush_r+0x70>)
 800d8da:	429c      	cmp	r4, r3
 800d8dc:	d101      	bne.n	800d8e2 <_fflush_r+0x62>
 800d8de:	68ac      	ldr	r4, [r5, #8]
 800d8e0:	e7df      	b.n	800d8a2 <_fflush_r+0x22>
 800d8e2:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <_fflush_r+0x74>)
 800d8e4:	429c      	cmp	r4, r3
 800d8e6:	bf08      	it	eq
 800d8e8:	68ec      	ldreq	r4, [r5, #12]
 800d8ea:	e7da      	b.n	800d8a2 <_fflush_r+0x22>
 800d8ec:	0800dc50 	.word	0x0800dc50
 800d8f0:	0800dc70 	.word	0x0800dc70
 800d8f4:	0800dc30 	.word	0x0800dc30

0800d8f8 <_lseek_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d07      	ldr	r5, [pc, #28]	; (800d918 <_lseek_r+0x20>)
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	4608      	mov	r0, r1
 800d900:	4611      	mov	r1, r2
 800d902:	2200      	movs	r2, #0
 800d904:	602a      	str	r2, [r5, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	f7f3 fd42 	bl	8001390 <_lseek>
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	d102      	bne.n	800d916 <_lseek_r+0x1e>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	b103      	cbz	r3, 800d916 <_lseek_r+0x1e>
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	bd38      	pop	{r3, r4, r5, pc}
 800d918:	24007240 	.word	0x24007240

0800d91c <__swhatbuf_r>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	460e      	mov	r6, r1
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	2900      	cmp	r1, #0
 800d926:	b096      	sub	sp, #88	; 0x58
 800d928:	4614      	mov	r4, r2
 800d92a:	461d      	mov	r5, r3
 800d92c:	da08      	bge.n	800d940 <__swhatbuf_r+0x24>
 800d92e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	061a      	lsls	r2, r3, #24
 800d938:	d410      	bmi.n	800d95c <__swhatbuf_r+0x40>
 800d93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93e:	e00e      	b.n	800d95e <__swhatbuf_r+0x42>
 800d940:	466a      	mov	r2, sp
 800d942:	f000 f8bb 	bl	800dabc <_fstat_r>
 800d946:	2800      	cmp	r0, #0
 800d948:	dbf1      	blt.n	800d92e <__swhatbuf_r+0x12>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d954:	425a      	negs	r2, r3
 800d956:	415a      	adcs	r2, r3
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	e7ee      	b.n	800d93a <__swhatbuf_r+0x1e>
 800d95c:	2340      	movs	r3, #64	; 0x40
 800d95e:	2000      	movs	r0, #0
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	b016      	add	sp, #88	; 0x58
 800d964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d968 <__smakebuf_r>:
 800d968:	898b      	ldrh	r3, [r1, #12]
 800d96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d96c:	079d      	lsls	r5, r3, #30
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d507      	bpl.n	800d984 <__smakebuf_r+0x1c>
 800d974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2301      	movs	r3, #1
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	b002      	add	sp, #8
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	ab01      	add	r3, sp, #4
 800d986:	466a      	mov	r2, sp
 800d988:	f7ff ffc8 	bl	800d91c <__swhatbuf_r>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	4605      	mov	r5, r0
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff fc65 	bl	800d260 <_malloc_r>
 800d996:	b948      	cbnz	r0, 800d9ac <__smakebuf_r+0x44>
 800d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99c:	059a      	lsls	r2, r3, #22
 800d99e:	d4ef      	bmi.n	800d980 <__smakebuf_r+0x18>
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7e3      	b.n	800d974 <__smakebuf_r+0xc>
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <__smakebuf_r+0x7c>)
 800d9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	6163      	str	r3, [r4, #20]
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	6120      	str	r0, [r4, #16]
 800d9c2:	b15b      	cbz	r3, 800d9dc <__smakebuf_r+0x74>
 800d9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 f889 	bl	800dae0 <_isatty_r>
 800d9ce:	b128      	cbz	r0, 800d9dc <__smakebuf_r+0x74>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	89a0      	ldrh	r0, [r4, #12]
 800d9de:	4305      	orrs	r5, r0
 800d9e0:	81a5      	strh	r5, [r4, #12]
 800d9e2:	e7cd      	b.n	800d980 <__smakebuf_r+0x18>
 800d9e4:	0800d001 	.word	0x0800d001

0800d9e8 <__malloc_lock>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	; (800d9f0 <__malloc_lock+0x8>)
 800d9ea:	f7ff bc00 	b.w	800d1ee <__retarget_lock_acquire_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	24007234 	.word	0x24007234

0800d9f4 <__malloc_unlock>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__malloc_unlock+0x8>)
 800d9f6:	f7ff bbfb 	b.w	800d1f0 <__retarget_lock_release_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	24007234 	.word	0x24007234

0800da00 <_free_r>:
 800da00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da02:	2900      	cmp	r1, #0
 800da04:	d044      	beq.n	800da90 <_free_r+0x90>
 800da06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da0a:	9001      	str	r0, [sp, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f1a1 0404 	sub.w	r4, r1, #4
 800da12:	bfb8      	it	lt
 800da14:	18e4      	addlt	r4, r4, r3
 800da16:	f7ff ffe7 	bl	800d9e8 <__malloc_lock>
 800da1a:	4a1e      	ldr	r2, [pc, #120]	; (800da94 <_free_r+0x94>)
 800da1c:	9801      	ldr	r0, [sp, #4]
 800da1e:	6813      	ldr	r3, [r2, #0]
 800da20:	b933      	cbnz	r3, 800da30 <_free_r+0x30>
 800da22:	6063      	str	r3, [r4, #4]
 800da24:	6014      	str	r4, [r2, #0]
 800da26:	b003      	add	sp, #12
 800da28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da2c:	f7ff bfe2 	b.w	800d9f4 <__malloc_unlock>
 800da30:	42a3      	cmp	r3, r4
 800da32:	d908      	bls.n	800da46 <_free_r+0x46>
 800da34:	6825      	ldr	r5, [r4, #0]
 800da36:	1961      	adds	r1, r4, r5
 800da38:	428b      	cmp	r3, r1
 800da3a:	bf01      	itttt	eq
 800da3c:	6819      	ldreq	r1, [r3, #0]
 800da3e:	685b      	ldreq	r3, [r3, #4]
 800da40:	1949      	addeq	r1, r1, r5
 800da42:	6021      	streq	r1, [r4, #0]
 800da44:	e7ed      	b.n	800da22 <_free_r+0x22>
 800da46:	461a      	mov	r2, r3
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	b10b      	cbz	r3, 800da50 <_free_r+0x50>
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	d9fa      	bls.n	800da46 <_free_r+0x46>
 800da50:	6811      	ldr	r1, [r2, #0]
 800da52:	1855      	adds	r5, r2, r1
 800da54:	42a5      	cmp	r5, r4
 800da56:	d10b      	bne.n	800da70 <_free_r+0x70>
 800da58:	6824      	ldr	r4, [r4, #0]
 800da5a:	4421      	add	r1, r4
 800da5c:	1854      	adds	r4, r2, r1
 800da5e:	42a3      	cmp	r3, r4
 800da60:	6011      	str	r1, [r2, #0]
 800da62:	d1e0      	bne.n	800da26 <_free_r+0x26>
 800da64:	681c      	ldr	r4, [r3, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	6053      	str	r3, [r2, #4]
 800da6a:	4421      	add	r1, r4
 800da6c:	6011      	str	r1, [r2, #0]
 800da6e:	e7da      	b.n	800da26 <_free_r+0x26>
 800da70:	d902      	bls.n	800da78 <_free_r+0x78>
 800da72:	230c      	movs	r3, #12
 800da74:	6003      	str	r3, [r0, #0]
 800da76:	e7d6      	b.n	800da26 <_free_r+0x26>
 800da78:	6825      	ldr	r5, [r4, #0]
 800da7a:	1961      	adds	r1, r4, r5
 800da7c:	428b      	cmp	r3, r1
 800da7e:	bf04      	itt	eq
 800da80:	6819      	ldreq	r1, [r3, #0]
 800da82:	685b      	ldreq	r3, [r3, #4]
 800da84:	6063      	str	r3, [r4, #4]
 800da86:	bf04      	itt	eq
 800da88:	1949      	addeq	r1, r1, r5
 800da8a:	6021      	streq	r1, [r4, #0]
 800da8c:	6054      	str	r4, [r2, #4]
 800da8e:	e7ca      	b.n	800da26 <_free_r+0x26>
 800da90:	b003      	add	sp, #12
 800da92:	bd30      	pop	{r4, r5, pc}
 800da94:	24007238 	.word	0x24007238

0800da98 <_read_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d07      	ldr	r5, [pc, #28]	; (800dab8 <_read_r+0x20>)
 800da9c:	4604      	mov	r4, r0
 800da9e:	4608      	mov	r0, r1
 800daa0:	4611      	mov	r1, r2
 800daa2:	2200      	movs	r2, #0
 800daa4:	602a      	str	r2, [r5, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	f7f3 fc12 	bl	80012d0 <_read>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_read_r+0x1e>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_read_r+0x1e>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	24007240 	.word	0x24007240

0800dabc <_fstat_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d07      	ldr	r5, [pc, #28]	; (800dadc <_fstat_r+0x20>)
 800dac0:	2300      	movs	r3, #0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	4611      	mov	r1, r2
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	f7f3 fc46 	bl	800135a <_fstat>
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	d102      	bne.n	800dad8 <_fstat_r+0x1c>
 800dad2:	682b      	ldr	r3, [r5, #0]
 800dad4:	b103      	cbz	r3, 800dad8 <_fstat_r+0x1c>
 800dad6:	6023      	str	r3, [r4, #0]
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
 800dada:	bf00      	nop
 800dadc:	24007240 	.word	0x24007240

0800dae0 <_isatty_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d06      	ldr	r5, [pc, #24]	; (800dafc <_isatty_r+0x1c>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	602b      	str	r3, [r5, #0]
 800daec:	f7f3 fc45 	bl	800137a <_isatty>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_isatty_r+0x1a>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_isatty_r+0x1a>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	24007240 	.word	0x24007240

0800db00 <_init>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr

0800db0c <_fini>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr
